<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp590011) { \App\Card::where('user_id', $sp590011->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp06abef) { foreach ($sp06abef as $sp66d858) { $sp222f58 = \App\Product::where('id', $sp66d858->product_id)->first(); if ($sp222f58) { if ($sp222f58->delivery === \App\Product::DELIVERY_MANUAL) { $sp222f58->update(array('count_sold' => $sp66d858->count_sold)); } else { $sp222f58->update(array('count_sold' => $sp66d858->count_sold, 'count_all' => $sp66d858->count_all)); } } else { } } }); } function createApiCards($sp8ac6c1) { $sp4d8cbe = array(); $spec3f4b = array(); $spd51880 = array(); for ($sp8f2283 = 0; $sp8f2283 < $sp8ac6c1->count; $sp8f2283++) { $sp4d8cbe[] = strtoupper(str_random(16)); $sp2eadc9 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp936143 = 1; break; case 11: $sp936143 = 2; break; case 37: $sp936143 = 3; break; default: die('App.Products fatal error#1'); } $spd51880[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp4d8cbe[$sp8f2283], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $spec3f4b[] = "(NULL, '{$sp4d8cbe[$sp8f2283]}', '1', '{$sp936143}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp2eadc9}', '0000-00-00 00:00:00')"; } $sp7db79f = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sp720ffd = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $spec3f4b); $spd29158 = mysqli_query($sp7db79f, $sp720ffd); if (!$spd29158) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sp720ffd, 'error' => mysqli_error($sp7db79f))); return array(); } $this->count_all += $sp8ac6c1->count; return $this->cards()->createMany($spd51880); } function setForShop($sp590011 = null) { $sp222f58 = $this; $spe95220 = $sp222f58->count; $sp97319a = $sp222f58->inventory; if ($sp97319a == User::INVENTORY_AUTO) { $sp97319a = System::_getInt('shop_inventory'); } if ($sp97319a == User::INVENTORY_RANGE) { if ($spe95220 <= 0) { $sp28a2f5 = '不足'; } elseif ($spe95220 <= 10) { $sp28a2f5 = '少量'; } elseif ($spe95220 <= 20) { $sp28a2f5 = '一般'; } else { $sp28a2f5 = '大量'; } $sp222f58->setAttribute('count2', $sp28a2f5); } else { $sp222f58->setAttribute('count2', $spe95220); } $sp222f58->setAttribute('count', $spe95220); $sp222f58->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }