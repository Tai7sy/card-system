<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($spf3d3c9) { \App\Card::where('user_id', $spf3d3c9->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp1150d0) { foreach ($sp1150d0 as $sp06865f) { $sp0a72f9 = \App\Product::where('id', $sp06865f->product_id)->first(); if ($sp0a72f9) { if ($sp0a72f9->delivery === \App\Product::DELIVERY_MANUAL) { $sp0a72f9->update(array('count_sold' => $sp06865f->count_sold)); } else { $sp0a72f9->update(array('count_sold' => $sp06865f->count_sold, 'count_all' => $sp06865f->count_all)); } } else { } } }); } function createApiCards($sp106d4b) { $spc6ab5b = array(); $sp97820a = array(); $sp3b327f = array(); for ($spec1f96 = 0; $spec1f96 < $sp106d4b->count; $spec1f96++) { $spc6ab5b[] = strtoupper(str_random(16)); $sp3a302f = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp48af4e = 1; break; case 11: $sp48af4e = 2; break; case 37: $sp48af4e = 3; break; default: die('App.Products fatal error#1'); } $sp3b327f[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $spc6ab5b[$spec1f96], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp97820a[] = "(NULL, '{$spc6ab5b[$spec1f96]}', '1', '{$sp48af4e}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp3a302f}', '0000-00-00 00:00:00')"; } $spe6f290 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spd3b476 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp97820a); $sp79f27b = mysqli_query($spe6f290, $spd3b476); if (!$sp79f27b) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spd3b476, 'error' => mysqli_error($spe6f290))); return array(); } $this->count_all += $sp106d4b->count; return $this->cards()->createMany($sp3b327f); } function setForShop($spf3d3c9 = null) { $sp0a72f9 = $this; $spb5d933 = $sp0a72f9->count; $spd58ea7 = $sp0a72f9->inventory; if ($spd58ea7 == User::INVENTORY_AUTO) { $spd58ea7 = System::_getInt('shop_inventory'); } if ($spd58ea7 == User::INVENTORY_RANGE) { if ($spb5d933 <= 0) { $sp54cf13 = '不足'; } elseif ($spb5d933 <= 10) { $sp54cf13 = '少量'; } elseif ($spb5d933 <= 20) { $sp54cf13 = '一般'; } else { $sp54cf13 = '大量'; } $sp0a72f9->setAttribute('count2', $sp54cf13); } else { $sp0a72f9->setAttribute('count2', $spb5d933); } $sp0a72f9->setAttribute('count', $spb5d933); $sp0a72f9->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }