<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp16b781) { \App\Card::where('user_id', $sp16b781->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp840c11) { foreach ($sp840c11 as $sp5c3c93) { $sp48b1b0 = \App\Product::where('id', $sp5c3c93->product_id)->first(); if ($sp48b1b0) { if ($sp48b1b0->delivery === \App\Product::DELIVERY_MANUAL) { $sp48b1b0->update(array('count_sold' => $sp5c3c93->count_sold)); } else { $sp48b1b0->update(array('count_sold' => $sp5c3c93->count_sold, 'count_all' => $sp5c3c93->count_all)); } } else { } } }); } function createApiCards($sp6f156a) { $sp7235d8 = array(); $sp72b488 = array(); $sp894b99 = array(); for ($spc24184 = 0; $spc24184 < $sp6f156a->count; $spc24184++) { $sp7235d8[] = strtoupper(str_random(16)); $spb67e8e = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp5189a5 = 1; break; case 11: $sp5189a5 = 2; break; case 37: $sp5189a5 = 3; break; default: die('App.Products fatal error#1'); } $sp894b99[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp7235d8[$spc24184], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp72b488[] = "(NULL, '{$sp7235d8[$spc24184]}', '1', '{$sp5189a5}', NULL, NULL, NULL, NULL, NULL, '0', '{$spb67e8e}', '0000-00-00 00:00:00')"; } $sp8913d2 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sp234a0f = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp72b488); $sp79553b = mysqli_query($sp8913d2, $sp234a0f); if (!$sp79553b) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sp234a0f, 'error' => mysqli_error($sp8913d2))); return array(); } $this->count_all += $sp6f156a->count; return $this->cards()->createMany($sp894b99); } function setForShop($sp16b781 = null) { $sp48b1b0 = $this; $sp0fccd1 = $sp48b1b0->count; $spae2fc5 = $sp48b1b0->inventory; if ($spae2fc5 == User::INVENTORY_AUTO) { $spae2fc5 = System::_getInt('shop_inventory'); } if ($spae2fc5 == User::INVENTORY_RANGE) { if ($sp0fccd1 <= 0) { $sp1af42a = '不足'; } elseif ($sp0fccd1 <= 10) { $sp1af42a = '少量'; } elseif ($sp0fccd1 <= 20) { $sp1af42a = '一般'; } else { $sp1af42a = '大量'; } $sp48b1b0->setAttribute('count2', $sp1af42a); } else { $sp48b1b0->setAttribute('count2', $sp0fccd1); } $sp48b1b0->setAttribute('count', $sp0fccd1); $sp48b1b0->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }