<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($spc33961) { \App\Card::where('user_id', $spc33961->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($spdcf051) { foreach ($spdcf051 as $spf40cf3) { $sp863814 = \App\Product::where('id', $spf40cf3->product_id)->first(); if ($sp863814) { if ($sp863814->delivery === \App\Product::DELIVERY_MANUAL) { $sp863814->update(array('count_sold' => $spf40cf3->count_sold)); } else { $sp863814->update(array('count_sold' => $spf40cf3->count_sold, 'count_all' => $spf40cf3->count_all)); } } else { } } }); } function createApiCards($sp322370) { $sp80e341 = array(); $sp584607 = array(); $sp542498 = array(); for ($sp51a993 = 0; $sp51a993 < $sp322370->count; $sp51a993++) { $sp80e341[] = strtoupper(str_random(16)); $spa9bda7 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp929a06 = 1; break; case 11: $sp929a06 = 2; break; case 37: $sp929a06 = 3; break; default: die('App.Products fatal error#1'); } $sp542498[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp80e341[$sp51a993], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp584607[] = "(NULL, '{$sp80e341[$sp51a993]}', '1', '{$sp929a06}', NULL, NULL, NULL, NULL, NULL, '0', '{$spa9bda7}', '0000-00-00 00:00:00')"; } $sp93188b = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spa564b7 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp584607); $spa35002 = mysqli_query($sp93188b, $spa564b7); if (!$spa35002) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spa564b7, 'error' => mysqli_error($sp93188b))); return array(); } $this->count_all += $sp322370->count; return $this->cards()->createMany($sp542498); } function setForShop($spc33961 = null) { $sp863814 = $this; $sp1ca412 = $sp863814->count; $spd3b382 = $sp863814->inventory; if ($spd3b382 == User::INVENTORY_AUTO) { $spd3b382 = System::_getInt('shop_inventory'); } if ($spd3b382 == User::INVENTORY_RANGE) { if ($sp1ca412 <= 0) { $spe4a56e = '不足'; } elseif ($sp1ca412 <= 10) { $spe4a56e = '少量'; } elseif ($sp1ca412 <= 20) { $spe4a56e = '一般'; } else { $spe4a56e = '大量'; } $sp863814->setAttribute('count2', $spe4a56e); } else { $sp863814->setAttribute('count2', $sp1ca412); } $sp863814->setAttribute('count', $sp1ca412); $sp863814->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }