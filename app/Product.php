<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($spe2c9ac) { \App\Card::where('user_id', $spe2c9ac->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp389a95) { foreach ($sp389a95 as $sp29413f) { $sp4aad76 = \App\Product::where('id', $sp29413f->product_id)->first(); if ($sp4aad76) { if ($sp4aad76->delivery === \App\Product::DELIVERY_MANUAL) { $sp4aad76->update(array('count_sold' => $sp29413f->count_sold)); } else { $sp4aad76->update(array('count_sold' => $sp29413f->count_sold, 'count_all' => $sp29413f->count_all)); } } else { } } }); } function createApiCards($sp7c328e) { $spc7604d = array(); $sp46073d = array(); $spfc5f7e = array(); for ($sp80b4fe = 0; $sp80b4fe < $sp7c328e->count; $sp80b4fe++) { $spc7604d[] = strtoupper(str_random(16)); $spa9b825 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp6bbae3 = 1; break; case 11: $sp6bbae3 = 2; break; case 37: $sp6bbae3 = 3; break; default: die('App.Products fatal error#1'); } $spfc5f7e[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $spc7604d[$sp80b4fe], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp46073d[] = "(NULL, '{$spc7604d[$sp80b4fe]}', '1', '{$sp6bbae3}', NULL, NULL, NULL, NULL, NULL, '0', '{$spa9b825}', '0000-00-00 00:00:00')"; } $sp83b64d = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sp3d7140 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp46073d); $sp2ef7f0 = mysqli_query($sp83b64d, $sp3d7140); if (!$sp2ef7f0) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sp3d7140, 'error' => mysqli_error($sp83b64d))); return array(); } $this->count_all += $sp7c328e->count; return $this->cards()->createMany($spfc5f7e); } function setForShop($spe2c9ac = null) { $sp4aad76 = $this; $sp75f1cf = $sp4aad76->count; $sp2c9e3c = $sp4aad76->inventory; if ($sp2c9e3c == User::INVENTORY_AUTO) { $sp2c9e3c = System::_getInt('shop_inventory'); } if ($sp2c9e3c == User::INVENTORY_RANGE) { if ($sp75f1cf <= 0) { $spfb5877 = '不足'; } elseif ($sp75f1cf <= 10) { $spfb5877 = '少量'; } elseif ($sp75f1cf <= 20) { $spfb5877 = '一般'; } else { $spfb5877 = '大量'; } $sp4aad76->setAttribute('count2', $spfb5877); } else { $sp4aad76->setAttribute('count2', $sp75f1cf); } $sp4aad76->setAttribute('count', $sp75f1cf); $sp4aad76->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }