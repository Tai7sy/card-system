<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp91cc0b) { \App\Card::where('user_id', $sp91cc0b->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp62a119) { foreach ($sp62a119 as $spb4e56f) { $sp886a9b = \App\Product::where('id', $spb4e56f->product_id)->first(); if ($sp886a9b) { if ($sp886a9b->delivery === \App\Product::DELIVERY_MANUAL) { $sp886a9b->update(array('count_sold' => $spb4e56f->count_sold)); } else { $sp886a9b->update(array('count_sold' => $spb4e56f->count_sold, 'count_all' => $spb4e56f->count_all)); } } else { } } }); } function createApiCards($spcd0b15) { $sp55b6cb = array(); $spcfe690 = array(); $sp37b221 = array(); for ($spa4cc2a = 0; $spa4cc2a < $spcd0b15->count; $spa4cc2a++) { $sp55b6cb[] = strtoupper(str_random(16)); $sp9737e6 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp9f5cea = 1; break; case 11: $sp9f5cea = 2; break; case 37: $sp9f5cea = 3; break; default: die('App.Products fatal error#1'); } $sp37b221[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp55b6cb[$spa4cc2a], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $spcfe690[] = "(NULL, '{$sp55b6cb[$spa4cc2a]}', '1', '{$sp9f5cea}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp9737e6}', '0000-00-00 00:00:00')"; } $sp127062 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spd72fd8 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $spcfe690); $sp230d13 = mysqli_query($sp127062, $spd72fd8); if (!$sp230d13) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spd72fd8, 'error' => mysqli_error($sp127062))); return array(); } $this->count_all += $spcd0b15->count; return $this->cards()->createMany($sp37b221); } function setForShop($sp91cc0b = null) { $sp886a9b = $this; $spc2ebcd = $sp886a9b->count; $sp787a90 = $sp886a9b->inventory; if ($sp787a90 == User::INVENTORY_AUTO) { $sp787a90 = System::_getInt('shop_inventory'); } if ($sp787a90 == User::INVENTORY_RANGE) { if ($spc2ebcd <= 0) { $sp8b0d5d = '不足'; } elseif ($spc2ebcd <= 10) { $sp8b0d5d = '少量'; } elseif ($spc2ebcd <= 20) { $sp8b0d5d = '一般'; } else { $sp8b0d5d = '大量'; } $sp886a9b->setAttribute('count2', $sp8b0d5d); } else { $sp886a9b->setAttribute('count2', $spc2ebcd); } $sp886a9b->setAttribute('count', $spc2ebcd); $sp886a9b->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }