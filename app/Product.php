<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($spac34b1) { \App\Card::where('user_id', $spac34b1->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp43445b) { foreach ($sp43445b as $sp78bb46) { $sp9dfc99 = \App\Product::where('id', $sp78bb46->product_id)->first(); if ($sp9dfc99) { if ($sp9dfc99->delivery === \App\Product::DELIVERY_MANUAL) { $sp9dfc99->update(array('count_sold' => $sp78bb46->count_sold)); } else { $sp9dfc99->update(array('count_sold' => $sp78bb46->count_sold, 'count_all' => $sp78bb46->count_all)); } } else { } } }); } function createApiCards($spedec71) { $sp8627ee = array(); $sp8eba90 = array(); $sp9f186e = array(); for ($spc8f255 = 0; $spc8f255 < $spedec71->count; $spc8f255++) { $sp8627ee[] = strtoupper(str_random(16)); $sp85ce68 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp7a1e84 = 1; break; case 11: $sp7a1e84 = 2; break; case 37: $sp7a1e84 = 3; break; default: die('App.Products fatal error#1'); } $sp9f186e[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp8627ee[$spc8f255], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp8eba90[] = "(NULL, '{$sp8627ee[$spc8f255]}', '1', '{$sp7a1e84}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp85ce68}', '0000-00-00 00:00:00')"; } $spd38dc6 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sp28e1e9 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp8eba90); $sp162b98 = mysqli_query($spd38dc6, $sp28e1e9); if (!$sp162b98) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sp28e1e9, 'error' => mysqli_error($spd38dc6))); return array(); } $this->count_all += $spedec71->count; return $this->cards()->createMany($sp9f186e); } function setForShop($spac34b1 = null) { $sp9dfc99 = $this; $sp99aae1 = $sp9dfc99->count; $sp7d508e = $sp9dfc99->inventory; if ($sp7d508e == User::INVENTORY_AUTO) { $sp7d508e = System::_getInt('shop_inventory'); } if ($sp7d508e == User::INVENTORY_RANGE) { if ($sp99aae1 <= 0) { $spb54b58 = '不足'; } elseif ($sp99aae1 <= 10) { $spb54b58 = '少量'; } elseif ($sp99aae1 <= 20) { $spb54b58 = '一般'; } else { $spb54b58 = '大量'; } $sp9dfc99->setAttribute('count2', $spb54b58); } else { $sp9dfc99->setAttribute('count2', $sp99aae1); } $sp9dfc99->setAttribute('count', $sp99aae1); $sp9dfc99->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }