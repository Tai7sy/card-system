<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp766bcc) { \App\Card::where('user_id', $sp766bcc->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp860952) { foreach ($sp860952 as $spe9100b) { $spb395ca = \App\Product::where('id', $spe9100b->product_id)->first(); if ($spb395ca) { if ($spb395ca->delivery === \App\Product::DELIVERY_MANUAL) { $spb395ca->update(array('count_sold' => $spe9100b->count_sold)); } else { $spb395ca->update(array('count_sold' => $spe9100b->count_sold, 'count_all' => $spe9100b->count_all)); } } else { } } }); } function createApiCards($sp42d084) { $sp077568 = array(); $sp3c541d = array(); $speffeaf = array(); for ($sp03f985 = 0; $sp03f985 < $sp42d084->count; $sp03f985++) { $sp077568[] = strtoupper(str_random(16)); $sp851c6e = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $spbe0093 = 1; break; case 11: $spbe0093 = 2; break; case 37: $spbe0093 = 3; break; default: die('App.Products fatal error#1'); } $speffeaf[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp077568[$sp03f985], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp3c541d[] = "(NULL, '{$sp077568[$sp03f985]}', '1', '{$spbe0093}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp851c6e}', '0000-00-00 00:00:00')"; } $spf436be = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spc0c210 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp3c541d); $sp5f9a9a = mysqli_query($spf436be, $spc0c210); if (!$sp5f9a9a) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spc0c210, 'error' => mysqli_error($spf436be))); return array(); } $this->count_all += $sp42d084->count; return $this->cards()->createMany($speffeaf); } function setForShop($sp766bcc = null) { $spb395ca = $this; $sp9154dd = $spb395ca->count; $sp074cf7 = $spb395ca->inventory; if ($sp074cf7 == User::INVENTORY_AUTO) { $sp074cf7 = System::_getInt('shop_inventory'); } if ($sp074cf7 == User::INVENTORY_RANGE) { if ($sp9154dd <= 0) { $sp64504d = '不足'; } elseif ($sp9154dd <= 10) { $sp64504d = '少量'; } elseif ($sp9154dd <= 20) { $sp64504d = '一般'; } else { $sp64504d = '大量'; } $spb395ca->setAttribute('count2', $sp64504d); } else { $spb395ca->setAttribute('count2', $sp9154dd); } $spb395ca->setAttribute('count', $sp9154dd); $spb395ca->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }