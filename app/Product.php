<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp845283) { \App\Card::where('user_id', $sp845283->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp5b0739) { foreach ($sp5b0739 as $sp1d0a77) { $sp1a3ec5 = \App\Product::where('id', $sp1d0a77->product_id)->first(); if ($sp1a3ec5) { if ($sp1a3ec5->delivery === \App\Product::DELIVERY_MANUAL) { $sp1a3ec5->update(array('count_sold' => $sp1d0a77->count_sold)); } else { $sp1a3ec5->update(array('count_sold' => $sp1d0a77->count_sold, 'count_all' => $sp1d0a77->count_all)); } } else { } } }); } function createApiCards($sp7b2cfc) { $spd93a9d = array(); $spae5ca3 = array(); $spb16993 = array(); for ($spe20094 = 0; $spe20094 < $sp7b2cfc->count; $spe20094++) { $spd93a9d[] = strtoupper(str_random(16)); $sp6030dc = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp1f13cd = 1; break; case 11: $sp1f13cd = 2; break; case 37: $sp1f13cd = 3; break; default: die('App.Products fatal error#1'); } $spb16993[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $spd93a9d[$spe20094], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $spae5ca3[] = "(NULL, '{$spd93a9d[$spe20094]}', '1', '{$sp1f13cd}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp6030dc}', '0000-00-00 00:00:00')"; } $sp1c15be = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sp3a97ab = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $spae5ca3); $sp815cba = mysqli_query($sp1c15be, $sp3a97ab); if (!$sp815cba) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sp3a97ab, 'error' => mysqli_error($sp1c15be))); return array(); } $this->count_all += $sp7b2cfc->count; return $this->cards()->createMany($spb16993); } function setForShop($sp845283 = null) { $sp1a3ec5 = $this; $spdf4a99 = $sp1a3ec5->count; $sp6b4f6d = $sp1a3ec5->inventory; if ($sp6b4f6d == User::INVENTORY_AUTO) { $sp6b4f6d = System::_getInt('shop_inventory'); } if ($sp6b4f6d == User::INVENTORY_RANGE) { if ($spdf4a99 <= 0) { $sp0b9d8a = '不足'; } elseif ($spdf4a99 <= 10) { $sp0b9d8a = '少量'; } elseif ($spdf4a99 <= 20) { $sp0b9d8a = '一般'; } else { $sp0b9d8a = '大量'; } $sp1a3ec5->setAttribute('count2', $sp0b9d8a); } else { $sp1a3ec5->setAttribute('count2', $spdf4a99); } $sp1a3ec5->setAttribute('count', $spdf4a99); $sp1a3ec5->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }