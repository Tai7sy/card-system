<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp0a324a) { \App\Card::where('user_id', $sp0a324a->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($spc894da) { foreach ($spc894da as $spbded80) { $sp94204a = \App\Product::where('id', $spbded80->product_id)->first(); if ($sp94204a) { if ($sp94204a->delivery === \App\Product::DELIVERY_MANUAL) { $sp94204a->update(array('count_sold' => $spbded80->count_sold)); } else { $sp94204a->update(array('count_sold' => $spbded80->count_sold, 'count_all' => $spbded80->count_all)); } } else { } } }); } function createApiCards($spaf5db5) { $sp8ca25c = array(); $sp4db781 = array(); $sp8ba863 = array(); for ($spc25c52 = 0; $spc25c52 < $spaf5db5->count; $spc25c52++) { $sp8ca25c[] = strtoupper(str_random(16)); $sp5a81aa = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $spd27632 = 1; break; case 11: $spd27632 = 2; break; case 37: $spd27632 = 3; break; default: die('App.Products fatal error#1'); } $sp8ba863[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp8ca25c[$spc25c52], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp4db781[] = "(NULL, '{$sp8ca25c[$spc25c52]}', '1', '{$spd27632}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp5a81aa}', '0000-00-00 00:00:00')"; } $sp876bfd = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spbfdedf = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp4db781); $sp8aad58 = mysqli_query($sp876bfd, $spbfdedf); if (!$sp8aad58) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spbfdedf, 'error' => mysqli_error($sp876bfd))); return array(); } $this->count_all += $spaf5db5->count; return $this->cards()->createMany($sp8ba863); } function setForShop($sp0a324a = null) { $sp94204a = $this; $sp051e12 = $sp94204a->count; $sp0cdf11 = $sp94204a->inventory; if ($sp0cdf11 == User::INVENTORY_AUTO) { $sp0cdf11 = System::_getInt('shop_inventory'); } if ($sp0cdf11 == User::INVENTORY_RANGE) { if ($sp051e12 <= 0) { $sp76c344 = '不足'; } elseif ($sp051e12 <= 10) { $sp76c344 = '少量'; } elseif ($sp051e12 <= 20) { $sp76c344 = '一般'; } else { $sp76c344 = '大量'; } $sp94204a->setAttribute('count2', $sp76c344); } else { $sp94204a->setAttribute('count2', $sp051e12); } $sp94204a->setAttribute('count', $sp051e12); $sp94204a->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }