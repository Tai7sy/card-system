<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp359016) { \App\Card::where('user_id', $sp359016->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp705be1) { foreach ($sp705be1 as $sp9fc33b) { $sp434ec8 = \App\Product::where('id', $sp9fc33b->product_id)->first(); if ($sp434ec8) { if ($sp434ec8->delivery === \App\Product::DELIVERY_MANUAL) { $sp434ec8->update(array('count_sold' => $sp9fc33b->count_sold)); } else { $sp434ec8->update(array('count_sold' => $sp9fc33b->count_sold, 'count_all' => $sp9fc33b->count_all)); } } else { } } }); } function createApiCards($spd807de) { $sp2ef8a1 = array(); $sp6082f1 = array(); $sp01ea5a = array(); for ($sp133c87 = 0; $sp133c87 < $spd807de->count; $sp133c87++) { $sp2ef8a1[] = strtoupper(str_random(16)); $sp5771e1 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp9fdcf8 = 1; break; case 11: $sp9fdcf8 = 2; break; case 37: $sp9fdcf8 = 3; break; default: die('App.Products fatal error#1'); } $sp01ea5a[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp2ef8a1[$sp133c87], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp6082f1[] = "(NULL, '{$sp2ef8a1[$sp133c87]}', '1', '{$sp9fdcf8}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp5771e1}', '0000-00-00 00:00:00')"; } $sp963edb = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sp14b1ab = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp6082f1); $sp46b569 = mysqli_query($sp963edb, $sp14b1ab); if (!$sp46b569) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sp14b1ab, 'error' => mysqli_error($sp963edb))); return array(); } $this->count_all += $spd807de->count; return $this->cards()->createMany($sp01ea5a); } function setForShop($sp359016 = null) { $sp434ec8 = $this; $spb37164 = $sp434ec8->count; $sp182feb = $sp434ec8->inventory; if ($sp182feb == User::INVENTORY_AUTO) { $sp182feb = System::_getInt('shop_inventory'); } if ($sp182feb == User::INVENTORY_RANGE) { if ($spb37164 <= 0) { $spbd757c = '不足'; } elseif ($spb37164 <= 10) { $spbd757c = '少量'; } elseif ($spb37164 <= 20) { $spbd757c = '一般'; } else { $spbd757c = '大量'; } $sp434ec8->setAttribute('count2', $spbd757c); } else { $sp434ec8->setAttribute('count2', $spb37164); } $sp434ec8->setAttribute('count', $spb37164); $sp434ec8->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }