<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp216502) { \App\Card::where('user_id', $sp216502->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp2c8253) { foreach ($sp2c8253 as $sp2f3cc5) { $spfa410d = \App\Product::where('id', $sp2f3cc5->product_id)->first(); if ($spfa410d) { if ($spfa410d->delivery === \App\Product::DELIVERY_MANUAL) { $spfa410d->update(array('count_sold' => $sp2f3cc5->count_sold)); } else { $spfa410d->update(array('count_sold' => $sp2f3cc5->count_sold, 'count_all' => $sp2f3cc5->count_all)); } } else { } } }); } function createApiCards($sp79a792) { $sp41a287 = array(); $spf9435a = array(); $spfe1151 = array(); for ($spf3a567 = 0; $spf3a567 < $sp79a792->count; $spf3a567++) { $sp41a287[] = strtoupper(str_random(16)); $spb8d0ce = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $spc518bd = 1; break; case 11: $spc518bd = 2; break; case 37: $spc518bd = 3; break; default: die('App.Products fatal error#1'); } $spfe1151[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp41a287[$spf3a567], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $spf9435a[] = "(NULL, '{$sp41a287[$spf3a567]}', '1', '{$spc518bd}', NULL, NULL, NULL, NULL, NULL, '0', '{$spb8d0ce}', '0000-00-00 00:00:00')"; } $sp147d7b = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sped11f4 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $spf9435a); $sp722ffb = mysqli_query($sp147d7b, $sped11f4); if (!$sp722ffb) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sped11f4, 'error' => mysqli_error($sp147d7b))); return array(); } $this->count_all += $sp79a792->count; return $this->cards()->createMany($spfe1151); } function setForShop($sp216502 = null) { $spfa410d = $this; $spf26c0c = $spfa410d->count; $spd1c338 = $spfa410d->inventory; if ($spd1c338 == User::INVENTORY_AUTO) { $spd1c338 = System::_getInt('shop_inventory'); } if ($spd1c338 == User::INVENTORY_RANGE) { if ($spf26c0c <= 0) { $sp3f2120 = '不足'; } elseif ($spf26c0c <= 10) { $sp3f2120 = '少量'; } elseif ($spf26c0c <= 20) { $sp3f2120 = '一般'; } else { $sp3f2120 = '大量'; } $spfa410d->setAttribute('count2', $sp3f2120); } else { $spfa410d->setAttribute('count2', $spf26c0c); } $spfa410d->setAttribute('count', $spf26c0c); $spfa410d->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }