<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp7990f7) { \App\Card::where('user_id', $sp7990f7->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp7b4a56) { foreach ($sp7b4a56 as $sp2af20f) { $sp59cabc = \App\Product::where('id', $sp2af20f->product_id)->first(); if ($sp59cabc) { if ($sp59cabc->delivery === \App\Product::DELIVERY_MANUAL) { $sp59cabc->update(array('count_sold' => $sp2af20f->count_sold)); } else { $sp59cabc->update(array('count_sold' => $sp2af20f->count_sold, 'count_all' => $sp2af20f->count_all)); } } else { } } }); } function createApiCards($spd09b83) { $sp43e449 = array(); $sp4d2ca3 = array(); $sp1c0f33 = array(); for ($spb11c4c = 0; $spb11c4c < $spd09b83->count; $spb11c4c++) { $sp43e449[] = strtoupper(str_random(16)); $spb0a799 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp202e2f = 1; break; case 11: $sp202e2f = 2; break; case 37: $sp202e2f = 3; break; default: die('App.Products fatal error#1'); } $sp1c0f33[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp43e449[$spb11c4c], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp4d2ca3[] = "(NULL, '{$sp43e449[$spb11c4c]}', '1', '{$sp202e2f}', NULL, NULL, NULL, NULL, NULL, '0', '{$spb0a799}', '0000-00-00 00:00:00')"; } $sp4ec836 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spc5bc9e = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp4d2ca3); $sp8d46e3 = mysqli_query($sp4ec836, $spc5bc9e); if (!$sp8d46e3) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spc5bc9e, 'error' => mysqli_error($sp4ec836))); return array(); } $this->count_all += $spd09b83->count; return $this->cards()->createMany($sp1c0f33); } function setForShop($sp7990f7 = null) { $sp59cabc = $this; $spf525ee = $sp59cabc->count; $sp8f1da9 = $sp59cabc->inventory; if ($sp8f1da9 == User::INVENTORY_AUTO) { $sp8f1da9 = System::_getInt('shop_inventory'); } if ($sp8f1da9 == User::INVENTORY_RANGE) { if ($spf525ee <= 0) { $spfe684f = '不足'; } elseif ($spf525ee <= 10) { $spfe684f = '少量'; } elseif ($spf525ee <= 20) { $spfe684f = '一般'; } else { $spfe684f = '大量'; } $sp59cabc->setAttribute('count2', $spfe684f); } else { $sp59cabc->setAttribute('count2', $spf525ee); } $sp59cabc->setAttribute('count', $spf525ee); $sp59cabc->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }