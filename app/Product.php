<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp21e2d0) { \App\Card::where('user_id', $sp21e2d0->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp2c48a7) { foreach ($sp2c48a7 as $sp636710) { $sp7eba0d = \App\Product::where('id', $sp636710->product_id)->first(); if ($sp7eba0d) { if ($sp7eba0d->delivery === \App\Product::DELIVERY_MANUAL) { $sp7eba0d->update(array('count_sold' => $sp636710->count_sold)); } else { $sp7eba0d->update(array('count_sold' => $sp636710->count_sold, 'count_all' => $sp636710->count_all)); } } else { } } }); } function createApiCards($sp1abdd8) { $spba0b65 = array(); $spc71e5f = array(); $sp19f1cd = array(); for ($sp53b67d = 0; $sp53b67d < $sp1abdd8->count; $sp53b67d++) { $spba0b65[] = strtoupper(str_random(16)); $sp6f0f76 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp93baf8 = 1; break; case 11: $sp93baf8 = 2; break; case 37: $sp93baf8 = 3; break; default: die('App.Products fatal error#1'); } $sp19f1cd[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $spba0b65[$sp53b67d], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $spc71e5f[] = "(NULL, '{$spba0b65[$sp53b67d]}', '1', '{$sp93baf8}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp6f0f76}', '0000-00-00 00:00:00')"; } $sp18a695 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sp42b0ee = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $spc71e5f); $sp05f5f3 = mysqli_query($sp18a695, $sp42b0ee); if (!$sp05f5f3) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sp42b0ee, 'error' => mysqli_error($sp18a695))); return array(); } $this->count_all += $sp1abdd8->count; return $this->cards()->createMany($sp19f1cd); } function setForShop($sp21e2d0 = null) { $sp7eba0d = $this; $sp10fb8e = $sp7eba0d->count; $sp04e343 = $sp7eba0d->inventory; if ($sp04e343 == User::INVENTORY_AUTO) { $sp04e343 = System::_getInt('shop_inventory'); } if ($sp04e343 == User::INVENTORY_RANGE) { if ($sp10fb8e <= 0) { $sp0431bf = '不足'; } elseif ($sp10fb8e <= 10) { $sp0431bf = '少量'; } elseif ($sp10fb8e <= 20) { $sp0431bf = '一般'; } else { $sp0431bf = '大量'; } $sp7eba0d->setAttribute('count2', $sp0431bf); } else { $sp7eba0d->setAttribute('count2', $sp10fb8e); } $sp7eba0d->setAttribute('count', $sp10fb8e); $sp7eba0d->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }