<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp85e034) { \App\Card::where('user_id', $sp85e034->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp228791) { foreach ($sp228791 as $sp1bee5a) { $spb0646a = \App\Product::where('id', $sp1bee5a->product_id)->first(); if ($spb0646a) { if ($spb0646a->delivery === \App\Product::DELIVERY_MANUAL) { $spb0646a->update(array('count_sold' => $sp1bee5a->count_sold)); } else { $spb0646a->update(array('count_sold' => $sp1bee5a->count_sold, 'count_all' => $sp1bee5a->count_all)); } } else { } } }); } function createApiCards($sp4cc7a0) { $speacdc5 = array(); $sp2b902c = array(); $sped2cd6 = array(); for ($sp677ef3 = 0; $sp677ef3 < $sp4cc7a0->count; $sp677ef3++) { $speacdc5[] = strtoupper(str_random(16)); $sp8f1fa0 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp23cafc = 1; break; case 11: $sp23cafc = 2; break; case 37: $sp23cafc = 3; break; default: die('App.Products fatal error#1'); } $sped2cd6[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $speacdc5[$sp677ef3], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp2b902c[] = "(NULL, '{$speacdc5[$sp677ef3]}', '1', '{$sp23cafc}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp8f1fa0}', '0000-00-00 00:00:00')"; } $sp0d4178 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $sp0571ec = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp2b902c); $spea30e1 = mysqli_query($sp0d4178, $sp0571ec); if (!$spea30e1) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $sp0571ec, 'error' => mysqli_error($sp0d4178))); return array(); } $this->count_all += $sp4cc7a0->count; return $this->cards()->createMany($sped2cd6); } function setForShop($sp85e034 = null) { $spb0646a = $this; $sp4b47da = $spb0646a->count; $sp3d4afa = $spb0646a->inventory; if ($sp3d4afa == User::INVENTORY_AUTO) { $sp3d4afa = System::_getInt('shop_inventory'); } if ($sp3d4afa == User::INVENTORY_RANGE) { if ($sp4b47da <= 0) { $spa14dde = '不足'; } elseif ($sp4b47da <= 10) { $spa14dde = '少量'; } elseif ($sp4b47da <= 20) { $spa14dde = '一般'; } else { $spa14dde = '大量'; } $spb0646a->setAttribute('count2', $spa14dde); } else { $spb0646a->setAttribute('count2', $sp4b47da); } $spb0646a->setAttribute('count', $sp4b47da); $spb0646a->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }