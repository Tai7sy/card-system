<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($spd78df7) { \App\Card::where('user_id', $spd78df7->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp237319) { foreach ($sp237319 as $sp7a29e6) { $sp648779 = \App\Product::where('id', $sp7a29e6->product_id)->first(); if ($sp648779) { if ($sp648779->delivery === \App\Product::DELIVERY_MANUAL) { $sp648779->update(array('count_sold' => $sp7a29e6->count_sold)); } else { $sp648779->update(array('count_sold' => $sp7a29e6->count_sold, 'count_all' => $sp7a29e6->count_all)); } } else { } } }); } function createApiCards($sp8fbe20) { $sp8de8b1 = array(); $sp63840e = array(); $sp1b65c0 = array(); for ($spbc3a4f = 0; $spbc3a4f < $sp8fbe20->count; $spbc3a4f++) { $sp8de8b1[] = strtoupper(str_random(16)); $spb4932f = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp1d50ca = 1; break; case 11: $sp1d50ca = 2; break; case 37: $sp1d50ca = 3; break; default: die('App.Products fatal error#1'); } $sp1b65c0[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $sp8de8b1[$spbc3a4f], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp63840e[] = "(NULL, '{$sp8de8b1[$spbc3a4f]}', '1', '{$sp1d50ca}', NULL, NULL, NULL, NULL, NULL, '0', '{$spb4932f}', '0000-00-00 00:00:00')"; } $sp4adfa1 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spea2add = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp63840e); $spdc5c4e = mysqli_query($sp4adfa1, $spea2add); if (!$spdc5c4e) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spea2add, 'error' => mysqli_error($sp4adfa1))); return array(); } $this->count_all += $sp8fbe20->count; return $this->cards()->createMany($sp1b65c0); } function setForShop($spd78df7 = null) { $sp648779 = $this; $sp5df9fd = $sp648779->count; $sp997234 = $sp648779->inventory; if ($sp997234 == User::INVENTORY_AUTO) { $sp997234 = System::_getInt('shop_inventory'); } if ($sp997234 == User::INVENTORY_RANGE) { if ($sp5df9fd <= 0) { $spfb7954 = '不足'; } elseif ($sp5df9fd <= 10) { $spfb7954 = '少量'; } elseif ($sp5df9fd <= 20) { $spfb7954 = '一般'; } else { $spfb7954 = '大量'; } $sp648779->setAttribute('count2', $spfb7954); } else { $sp648779->setAttribute('count2', $sp5df9fd); } $sp648779->setAttribute('count', $sp5df9fd); $sp648779->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }