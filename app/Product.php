<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp3db17d) { \App\Card::where('user_id', $sp3db17d->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp355056) { foreach ($sp355056 as $spe8264d) { $sp427eba = \App\Product::where('id', $spe8264d->product_id)->first(); if ($sp427eba) { if ($sp427eba->delivery === \App\Product::DELIVERY_MANUAL) { $sp427eba->update(array('count_sold' => $spe8264d->count_sold)); } else { $sp427eba->update(array('count_sold' => $spe8264d->count_sold, 'count_all' => $spe8264d->count_all)); } } else { } } }); } function createApiCards($sp990b3b) { $spb1865f = array(); $sp00d6f9 = array(); $sp6a60eb = array(); for ($sp1148f5 = 0; $sp1148f5 < $sp990b3b->count; $sp1148f5++) { $spb1865f[] = strtoupper(str_random(16)); $sp673a62 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $sp6fb40f = 1; break; case 11: $sp6fb40f = 2; break; case 37: $sp6fb40f = 3; break; default: die('App.Products fatal error#1'); } $sp6a60eb[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $spb1865f[$sp1148f5], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp00d6f9[] = "(NULL, '{$spb1865f[$sp1148f5]}', '1', '{$sp6fb40f}', NULL, NULL, NULL, NULL, NULL, '0', '{$sp673a62}', '0000-00-00 00:00:00')"; } $spafa235 = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spe08687 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp00d6f9); $sp50f1e3 = mysqli_query($spafa235, $spe08687); if (!$sp50f1e3) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spe08687, 'error' => mysqli_error($spafa235))); return array(); } $this->count_all += $sp990b3b->count; return $this->cards()->createMany($sp6a60eb); } function setForShop($sp3db17d = null) { $sp427eba = $this; $sp7aa4d7 = $sp427eba->count; $spc36613 = $sp427eba->inventory; if ($spc36613 == User::INVENTORY_AUTO) { $spc36613 = System::_getInt('shop_inventory'); } if ($spc36613 == User::INVENTORY_RANGE) { if ($sp7aa4d7 <= 0) { $sp92b828 = '不足'; } elseif ($sp7aa4d7 <= 10) { $sp92b828 = '少量'; } elseif ($sp7aa4d7 <= 20) { $sp92b828 = '一般'; } else { $sp92b828 = '大量'; } $sp427eba->setAttribute('count2', $sp92b828); } else { $sp427eba->setAttribute('count2', $sp7aa4d7); } $sp427eba->setAttribute('count', $sp7aa4d7); $sp427eba->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }