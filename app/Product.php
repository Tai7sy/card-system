<?php
namespace App; use App\Library\Helper; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Log as LogWriter; class Product extends Model { protected $guarded = array(); protected $hidden = array(); const ID_API = -1001; const DELIVERY_AUTO = 0; const DELIVERY_MANUAL = 1; const DELIVERY_API = 2; function getUrlAttribute() { return config('app.url') . '/p/' . Helper::id_encode($this->id, Helper::ID_TYPE_PRODUCT); } function getCountAttribute() { return $this->count_all - $this->count_sold; } function category() { return $this->belongsTo(Category::class); } function cards() { return $this->hasMany(Card::class); } function coupons() { return $this->hasMany(Coupon::class); } function orders() { return $this->hasMany(Order::class); } function user() { return $this->belongsTo(User::class); } public static function refreshCount($sp24cedd) { \App\Card::where('user_id', $sp24cedd->id)->selectRaw('`product_id`,SUM(`count_sold`) as `count_sold`,SUM(`count_all`) as `count_all`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(1000, function ($sp4f3a9b) { foreach ($sp4f3a9b as $sp9f8d97) { $spd39704 = \App\Product::where('id', $sp9f8d97->product_id)->first(); if ($spd39704) { if ($spd39704->delivery === \App\Product::DELIVERY_MANUAL) { $spd39704->update(array('count_sold' => $sp9f8d97->count_sold)); } else { $spd39704->update(array('count_sold' => $sp9f8d97->count_sold, 'count_all' => $sp9f8d97->count_all)); } } else { } } }); } function createApiCards($spff5c0e) { $spdcf6f2 = array(); $sp5d6c6f = array(); $sp9a749b = array(); for ($sp59ca22 = 0; $sp59ca22 < $spff5c0e->count; $sp59ca22++) { $spdcf6f2[] = strtoupper(str_random(16)); $spd33282 = date('Y-m-d H:i:s'); switch ($this->id) { case 6: $spf64b92 = 1; break; case 11: $spf64b92 = 2; break; case 37: $spf64b92 = 3; break; default: die('App.Products fatal error#1'); } $sp9a749b[] = array('user_id' => $this->user_id, 'product_id' => $this->id, 'card' => $spdcf6f2[$sp59ca22], 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_NORMAL, 'count_sold' => 0, 'count_all' => 1); $sp5d6c6f[] = "(NULL, '{$spdcf6f2[$sp59ca22]}', '1', '{$spf64b92}', NULL, NULL, NULL, NULL, NULL, '0', '{$spd33282}', '0000-00-00 00:00:00')"; } $sp76675c = mysqli_connect('localhost', 'udiddz', 'tRihPm3sh6yKedtX', 'udiddz', '3306'); $spd149c3 = 'INSERT INTO `udiddz`.`ac_kms` (`id`, `km`, `value`, `task`, `udid`, `diz`, `task_id`, `install_url`, `plist_url`, `jh`, `addtime`, `tjtime`) VALUES ' . join(',', $sp5d6c6f); $spa47d78 = mysqli_query($sp76675c, $spd149c3); if (!$spa47d78) { LogWriter::error('App.Products, connect udid database failed', array('sql' => $spd149c3, 'error' => mysqli_error($sp76675c))); return array(); } $this->count_all += $spff5c0e->count; return $this->cards()->createMany($sp9a749b); } function setForShop($sp24cedd = null) { $spd39704 = $this; $spad28c0 = $spd39704->count; $sp91fd1a = $spd39704->inventory; if ($sp91fd1a == User::INVENTORY_AUTO) { $sp91fd1a = System::_getInt('shop_inventory'); } if ($sp91fd1a == User::INVENTORY_RANGE) { if ($spad28c0 <= 0) { $spa628fc = '不足'; } elseif ($spad28c0 <= 10) { $spa628fc = '少量'; } elseif ($spad28c0 <= 20) { $spa628fc = '一般'; } else { $spa628fc = '大量'; } $spd39704->setAttribute('count2', $spa628fc); } else { $spd39704->setAttribute('count2', $spad28c0); } $spd39704->setAttribute('count', $spad28c0); $spd39704->setVisible(array('id', 'name', 'description', 'fields', 'delivery', 'count', 'count2', 'buy_min', 'buy_max', 'support_coupon', 'password_open', 'price', 'price_whole')); } }