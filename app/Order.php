<?php
namespace App; use App\Jobs\OrderSms; use App\Library\LogHelper; use App\Mail\OrderShipped; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Mail; use Illuminate\Support\Facades\Log as LogWriter; class Order extends Model { protected $guarded = array(); const STATUS_UNPAY = 0; const STATUS_PAID = 1; const STATUS_SUCCESS = 2; const STATUS_FROZEN = 3; const STATUS_REFUND = 4; const STATUS = array(0 => '未支付', 1 => '未发货', 2 => '已发货', 3 => '已冻结', 4 => '已退款'); const SEND_STATUS_UN = 0; const SEND_STATUS_EMAIL_SUCCESS = 1; const SEND_STATUS_EMAIL_FAILED = 2; const SEND_STATUS_MOBILE_SUCCESS = 3; const SEND_STATUS_MOBILE_FAILED = 4; const SEND_STATUS_CARD_UN = 100; const SEND_STATUS_CARD_PROCESSING = 101; const SEND_STATUS_CARD_SUCCESS = 102; const SEND_STATUS_CARD_FAILED = 103; protected $casts = array('api_info' => 'array'); public static function unique_no() { $sp88df5b = date('YmdHis') . str_random(5); while (\App\Order::where('order_no', $sp88df5b)->exists()) { $sp88df5b = date('YmdHis') . str_random(5); } return $sp88df5b; } function user() { return $this->belongsTo(User::class); } function product() { return $this->belongsTo(Product::class); } function pay() { return $this->belongsTo(Pay::class); } function cards() { $sp74882f = $this->belongsToMany(Card::class); return $sp74882f->withTrashed(); } function card_orders() { return $this->hasMany(CardOrder::class); } function fundRecord() { return $this->hasMany(FundRecord::class); } function getCardsArray() { $sp49b79c = array(); $this->cards->each(function ($sp93f85e) use(&$sp49b79c) { $sp49b79c[] = $sp93f85e->card; }); return $sp49b79c; } function getSendMessage() { if (count($this->cards) < $this->count && @$this->product->delivery !== \App\Product::DELIVERY_MANUAL) { if (count($this->cards)) { $sp26ac2a = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您还有' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>已发货商品见下方：<br>'; } else { $sp26ac2a = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您购买的' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>'; } $spacaa54 = $this->user->qq; if ($spacaa54) { $sp26ac2a .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spacaa54 . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $spacaa54 . '</a><br>'; } } else { $sp26ac2a = '订单#' . $this->order_no . '&nbsp;已支付，您购买的内容如下：'; } return $sp26ac2a; } function sendEmail($sp7fcad4 = false) { if ($sp7fcad4 === false) { $sp7fcad4 = @json_decode($this->contact_ext)['_mail']; } if (!$sp7fcad4 || !@filter_var($sp7fcad4, FILTER_VALIDATE_EMAIL)) { return; } $sp49b79c = $this->getCardsArray(); try { Mail::to($sp7fcad4)->Queue(new OrderShipped($this, $this->getSendMessage(), join('<br>', $sp49b79c))); $this->send_status = \App\Order::SEND_STATUS_EMAIL_SUCCESS; $this->saveOrFail(); } catch (\Throwable $sp803aea) { $this->send_status = \App\Order::SEND_STATUS_EMAIL_FAILED; $this->saveOrFail(); LogHelper::setLogFile('mail'); LogWriter::error('Order.sendEmail error', array('order_no' => $this->order_no, 'email' => $sp7fcad4, 'cards' => $sp49b79c, 'exception' => $sp803aea->getMessage())); LogHelper::setLogFile('card'); } } function sendSms($sp373703 = false) { if ($sp373703 === false) { $sp373703 = @json_decode($this->contact_ext)['_mobile']; } if (!$sp373703 || strlen($sp373703) !== 11) { return; } OrderSms::dispatch($sp373703, $this); } }