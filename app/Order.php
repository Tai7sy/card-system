<?php
namespace App; use App\Jobs\OrderSms; use App\Library\LogHelper; use App\Mail\OrderShipped; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Mail; class Order extends Model { protected $guarded = array(); const STATUS_UNPAY = 0; const STATUS_PAID = 1; const STATUS_SUCCESS = 2; const STATUS_FROZEN = 3; const STATUS_REFUND = 4; const STATUS = array(0 => '未支付', 1 => '未发货', 2 => '已发货', 3 => '已冻结', 4 => '已退款'); const SEND_STATUS_UN = 0; const SEND_STATUS_EMAIL_SUCCESS = 1; const SEND_STATUS_EMAIL_FAILED = 2; const SEND_STATUS_MOBILE_SUCCESS = 3; const SEND_STATUS_MOBILE_FAILED = 4; const SEND_STATUS_CARD_UN = 100; const SEND_STATUS_CARD_PROCESSING = 101; const SEND_STATUS_CARD_SUCCESS = 102; const SEND_STATUS_CARD_FAILED = 103; protected $casts = array('api_info' => 'array'); public static function unique_no() { $sp40aadb = date('YmdHis') . str_random(5); while (\App\Order::where('order_no', $sp40aadb)->exists()) { $sp40aadb = date('YmdHis') . str_random(5); } return $sp40aadb; } function user() { return $this->belongsTo(User::class); } function product() { return $this->belongsTo(Product::class); } function pay() { return $this->belongsTo(Pay::class); } function cards() { $sp84801b = $this->belongsToMany(Card::class); return $sp84801b->withTrashed(); } function card_orders() { return $this->hasMany(CardOrder::class); } function fundRecord() { return $this->hasMany(FundRecord::class); } function getCardsArray() { $sp93fc77 = array(); $this->cards->each(function ($sp836f4b) use(&$sp93fc77) { $sp93fc77[] = $sp836f4b->card; }); return $sp93fc77; } function getSendMessage() { if (count($this->cards) < $this->count && @$this->product->delivery !== \App\Product::DELIVERY_MANUAL) { if (count($this->cards)) { $sp95e5ad = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您还有' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>已发货商品见下方：<br>'; } else { $sp95e5ad = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您购买的' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>'; } $sp7880b1 = $this->user->qq; if ($sp7880b1) { $sp95e5ad .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp7880b1 . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $sp7880b1 . '</a><br>'; } } else { $sp95e5ad = '订单#' . $this->order_no . '&nbsp;已支付，您购买的内容如下：'; } return $sp95e5ad; } function sendEmail($sp7d1f72 = false) { if ($sp7d1f72 === false) { $sp7d1f72 = @json_decode($this->contact_ext)['_mail']; } if (!$sp7d1f72 || !@filter_var($sp7d1f72, FILTER_VALIDATE_EMAIL)) { return; } $sp93fc77 = $this->getCardsArray(); try { Mail::to($sp7d1f72)->Queue(new OrderShipped($this, $this->getSendMessage(), join('<br>', $sp93fc77))); $this->send_status = \App\Order::SEND_STATUS_EMAIL_SUCCESS; $this->saveOrFail(); } catch (\Throwable $sp696863) { $this->send_status = \App\Order::SEND_STATUS_EMAIL_FAILED; $this->saveOrFail(); LogHelper::setLogFile('mail'); Log::error('Order.sendEmail error', array('order_no' => $this->order_no, 'email' => $sp7d1f72, 'cards' => $sp93fc77, 'exception' => $sp696863->getMessage())); LogHelper::setLogFile('card'); } } function sendSms($sp4ecb5c = false) { if ($sp4ecb5c === false) { $sp4ecb5c = @json_decode($this->contact_ext)['_mobile']; } if (!$sp4ecb5c || strlen($sp4ecb5c) !== 11) { return; } OrderSms::dispatch($sp4ecb5c, $this); } }