<?php
namespace App; use App\Jobs\OrderSms; use App\Library\LogHelper; use App\Mail\OrderShipped; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Mail; use Illuminate\Support\Facades\Log as LogWriter; class Order extends Model { protected $guarded = array(); const STATUS_UNPAY = 0; const STATUS_PAID = 1; const STATUS_SUCCESS = 2; const STATUS_FROZEN = 3; const STATUS_REFUND = 4; const STATUS = array(0 => '未支付', 1 => '未发货', 2 => '已发货', 3 => '已冻结', 4 => '已退款'); const SEND_STATUS_UN = 0; const SEND_STATUS_EMAIL_SUCCESS = 1; const SEND_STATUS_EMAIL_FAILED = 2; const SEND_STATUS_MOBILE_SUCCESS = 3; const SEND_STATUS_MOBILE_FAILED = 4; const SEND_STATUS_CARD_UN = 100; const SEND_STATUS_CARD_PROCESSING = 101; const SEND_STATUS_CARD_SUCCESS = 102; const SEND_STATUS_CARD_FAILED = 103; protected $casts = array('api_info' => 'array'); public static function unique_no() { $spf34e1a = date('YmdHis') . str_random(5); while (\App\Order::where('order_no', $spf34e1a)->exists()) { $spf34e1a = date('YmdHis') . str_random(5); } return $spf34e1a; } function user() { return $this->belongsTo(User::class); } function product() { return $this->belongsTo(Product::class); } function pay() { return $this->belongsTo(Pay::class); } function cards() { $sp17764c = $this->belongsToMany(Card::class); return $sp17764c->withTrashed(); } function card_orders() { return $this->hasMany(CardOrder::class); } function fundRecord() { return $this->hasMany(FundRecord::class); } function getCardsArray() { $sp137cd7 = array(); $this->cards->each(function ($spa9cef2) use(&$sp137cd7) { $sp137cd7[] = $spa9cef2->card; }); return $sp137cd7; } function getSendMessage() { if (count($this->cards)) { if (count($this->cards) == $this->count) { $spe94958 = '订单#' . $this->order_no . '&nbsp;已支付，您购买的内容如下：'; } else { if ($this->cards[0]->type === \App\Card::TYPE_REPEAT || @$this->product->delivery === \App\Product::DELIVERY_MANUAL) { $spe94958 = '订单#' . $this->order_no . '&nbsp;已支付，您购买的内容如下：'; } else { $spe94958 = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您还有' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>已发货商品见下方：<br>'; $spe94958 .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $this->user->qq . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $this->user->qq . '</a><br>'; } } } else { $spe94958 = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您购买的' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>'; $spe94958 .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $this->user->qq . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $this->user->qq . '</a><br>'; } return $spe94958; } function sendEmail($spdf69a9 = false) { if ($spdf69a9 === false) { $spdf69a9 = @json_decode($this->contact_ext)['_mail']; } if (!$spdf69a9 || !@filter_var($spdf69a9, FILTER_VALIDATE_EMAIL)) { return; } $sp137cd7 = $this->getCardsArray(); try { Mail::to($spdf69a9)->Queue(new OrderShipped($this, $this->getSendMessage(), join('<br>', $sp137cd7))); $this->send_status = \App\Order::SEND_STATUS_EMAIL_SUCCESS; $this->saveOrFail(); } catch (\Throwable $sp6a7295) { $this->send_status = \App\Order::SEND_STATUS_EMAIL_FAILED; $this->saveOrFail(); LogHelper::setLogFile('mail'); LogWriter::error('Order.sendEmail error', array('order_no' => $this->order_no, 'email' => $spdf69a9, 'cards' => $sp137cd7, 'exception' => $sp6a7295->getMessage())); LogHelper::setLogFile('card'); } } function sendSms($spcd62a5 = false) { if ($spcd62a5 === false) { $spcd62a5 = @json_decode($this->contact_ext)['_mobile']; } if (!$spcd62a5 || strlen($spcd62a5) !== 11) { return; } OrderSms::dispatch($spcd62a5, $this); } }