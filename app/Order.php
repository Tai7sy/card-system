<?php
namespace App; use App\Jobs\OrderSms; use App\Library\LogHelper; use App\Mail\OrderShipped; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Mail; use Illuminate\Support\Facades\Log as LogWriter; class Order extends Model { protected $guarded = array(); const STATUS_UNPAY = 0; const STATUS_PAID = 1; const STATUS_SUCCESS = 2; const STATUS_FROZEN = 3; const STATUS_REFUND = 4; const STATUS = array(0 => '未支付', 1 => '未发货', 2 => '已发货', 3 => '已冻结', 4 => '已退款'); const SEND_STATUS_UN = 0; const SEND_STATUS_EMAIL_SUCCESS = 1; const SEND_STATUS_EMAIL_FAILED = 2; const SEND_STATUS_MOBILE_SUCCESS = 3; const SEND_STATUS_MOBILE_FAILED = 4; const SEND_STATUS_CARD_UN = 100; const SEND_STATUS_CARD_PROCESSING = 101; const SEND_STATUS_CARD_SUCCESS = 102; const SEND_STATUS_CARD_FAILED = 103; protected $casts = array('api_info' => 'array'); public static function unique_no() { $sp1f2f98 = date('YmdHis') . str_random(5); while (\App\Order::where('order_no', $sp1f2f98)->exists()) { $sp1f2f98 = date('YmdHis') . str_random(5); } return $sp1f2f98; } function user() { return $this->belongsTo(User::class); } function product() { return $this->belongsTo(Product::class); } function pay() { return $this->belongsTo(Pay::class); } function cards() { $sp1c639c = $this->belongsToMany(Card::class); return $sp1c639c->withTrashed(); } function card_orders() { return $this->hasMany(CardOrder::class); } function fundRecord() { return $this->hasMany(FundRecord::class); } function getCardsArray() { $spe232c0 = array(); $this->cards->each(function ($spc2cc9a) use(&$spe232c0) { $spe232c0[] = $spc2cc9a->card; }); return $spe232c0; } function getSendMessage() { if (count($this->cards) < $this->count && @$this->product->delivery !== \App\Product::DELIVERY_MANUAL) { if (count($this->cards)) { $spff8276 = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您还有' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>已发货商品见下方：<br>'; } else { $spff8276 = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您购买的' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>'; } $spc51930 = $this->user->qq; if ($spc51930) { $spff8276 .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spc51930 . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $spc51930 . '</a><br>'; } } else { $spff8276 = '订单#' . $this->order_no . '&nbsp;已支付，您购买的内容如下：'; } return $spff8276; } function sendEmail($spc0fdec = false) { if ($spc0fdec === false) { $spc0fdec = @json_decode($this->contact_ext)['_mail']; } if (!$spc0fdec || !@filter_var($spc0fdec, FILTER_VALIDATE_EMAIL)) { return; } $spe232c0 = $this->getCardsArray(); try { Mail::to($spc0fdec)->Queue(new OrderShipped($this, $this->getSendMessage(), join('<br>', $spe232c0))); $this->send_status = \App\Order::SEND_STATUS_EMAIL_SUCCESS; $this->saveOrFail(); } catch (\Throwable $spcdd557) { $this->send_status = \App\Order::SEND_STATUS_EMAIL_FAILED; $this->saveOrFail(); LogHelper::setLogFile('mail'); LogWriter::error('Order.sendEmail error', array('order_no' => $this->order_no, 'email' => $spc0fdec, 'cards' => $spe232c0, 'exception' => $spcdd557->getMessage())); LogHelper::setLogFile('card'); } } function sendSms($spa3de7e = false) { if ($spa3de7e === false) { $spa3de7e = @json_decode($this->contact_ext)['_mobile']; } if (!$spa3de7e || strlen($spa3de7e) !== 11) { return; } OrderSms::dispatch($spa3de7e, $this); } }