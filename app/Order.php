<?php
namespace App; use App\Jobs\OrderSms; use App\Library\LogHelper; use App\Mail\OrderShipped; use Illuminate\Database\Eloquent\Model; use Illuminate\Support\Facades\Mail; use Illuminate\Support\Facades\Log as LogWriter; class Order extends Model { protected $guarded = array(); const STATUS_UNPAY = 0; const STATUS_PAID = 1; const STATUS_SUCCESS = 2; const STATUS_FROZEN = 3; const STATUS_REFUND = 4; const STATUS = array(0 => '未支付', 1 => '未发货', 2 => '已发货', 3 => '已冻结', 4 => '已退款'); const SEND_STATUS_UN = 0; const SEND_STATUS_EMAIL_SUCCESS = 1; const SEND_STATUS_EMAIL_FAILED = 2; const SEND_STATUS_MOBILE_SUCCESS = 3; const SEND_STATUS_MOBILE_FAILED = 4; const SEND_STATUS_CARD_UN = 100; const SEND_STATUS_CARD_PROCESSING = 101; const SEND_STATUS_CARD_SUCCESS = 102; const SEND_STATUS_CARD_FAILED = 103; protected $casts = array('api_info' => 'array'); public static function unique_no() { $sp0dbaa3 = date('YmdHis') . str_random(5); while (\App\Order::where('order_no', $sp0dbaa3)->exists()) { $sp0dbaa3 = date('YmdHis') . str_random(5); } return $sp0dbaa3; } function user() { return $this->belongsTo(User::class); } function product() { return $this->belongsTo(Product::class); } function pay() { return $this->belongsTo(Pay::class); } function cards() { $sp1938e8 = $this->belongsToMany(Card::class); return $sp1938e8->withTrashed(); } function card_orders() { return $this->hasMany(CardOrder::class); } function fundRecord() { return $this->hasMany(FundRecord::class); } function getCardsArray() { $sp16ec83 = array(); $this->cards->each(function ($sp089eb8) use(&$sp16ec83) { $sp16ec83[] = $sp089eb8->card; }); return $sp16ec83; } function getSendMessage() { if (count($this->cards)) { if (count($this->cards) == $this->count) { $spcbea9e = '订单#' . $this->order_no . '&nbsp;已支付，您购买的内容如下：'; } else { if ($this->cards[0]->type === \App\Card::TYPE_REPEAT || @$this->product->delivery === \App\Product::DELIVERY_MANUAL) { $spcbea9e = '订单#' . $this->order_no . '&nbsp;已支付，您购买的内容如下：'; } else { $spcbea9e = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您还有' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>已发货商品见下方：<br>'; $spcbea9e .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $this->user->qq . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $this->user->qq . '</a><br>'; } } } else { $spcbea9e = '订单#' . $this->order_no . '&nbsp;已支付，目前库存不足，您购买的' . ($this->count - count($this->cards)) . '件未发货，请联系商家客服发货<br>'; $spcbea9e .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $this->user->qq . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $this->user->qq . '</a><br>'; } return $spcbea9e; } function sendEmail($sp98ce8d = false) { if ($sp98ce8d === false) { $sp98ce8d = @json_decode($this->contact_ext)['_mail']; } if (!$sp98ce8d || !@filter_var($sp98ce8d, FILTER_VALIDATE_EMAIL)) { return; } $sp16ec83 = $this->getCardsArray(); try { Mail::to($sp98ce8d)->Queue(new OrderShipped($this, $this->getSendMessage(), join('<br>', $sp16ec83))); $this->send_status = \App\Order::SEND_STATUS_EMAIL_SUCCESS; $this->saveOrFail(); } catch (\Throwable $sp45f5f1) { $this->send_status = \App\Order::SEND_STATUS_EMAIL_FAILED; $this->saveOrFail(); LogHelper::setLogFile('mail'); LogWriter::error('Order.sendEmail error', array('order_no' => $this->order_no, 'email' => $sp98ce8d, 'cards' => $sp16ec83, 'exception' => $sp45f5f1->getMessage())); LogHelper::setLogFile('card'); } } function sendSms($spd9b726 = false) { if ($spd9b726 === false) { $spd9b726 = @json_decode($this->contact_ext)['_mobile']; } if (!$spd9b726 || strlen($spd9b726) !== 11) { return; } OrderSms::dispatch($spd9b726, $this); } }