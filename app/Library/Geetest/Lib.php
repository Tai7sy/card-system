<?php
namespace App\Library\Geetest; class Lib { const GT_SDK_VERSION = 'php_3.2.0'; public static $connectTimeout = 1; public static $socketTimeout = 1; private $response; public $captcha_id; public $private_key; public function __construct($spc57974, $sp014726) { $this->captcha_id = $spc57974; $this->private_key = $sp014726; } public function pre_process($sp134e80 = null) { $spdef5e4 = 'http://api.geetest.com/register.php?gt=' . $this->captcha_id; if ($sp134e80 != null and is_string($sp134e80)) { $spdef5e4 = $spdef5e4 . '&user_id=' . $sp134e80; } $sp313090 = $this->send_request($spdef5e4); if (strlen($sp313090) != 32) { $this->failback_process(); return 0; } $this->success_process($sp313090); return 1; } private function success_process($sp313090) { $sp313090 = md5($sp313090 . $this->private_key); $spe37386 = array('success' => 1, 'gt' => $this->captcha_id, 'challenge' => $sp313090); $this->response = $spe37386; } private function failback_process() { $sp0d30db = md5(rand(0, 100)); $sp5019ef = md5(rand(0, 100)); $sp313090 = $sp0d30db . substr($sp5019ef, 0, 2); $spe37386 = array('success' => 0, 'gt' => $this->captcha_id, 'challenge' => $sp313090); $this->response = $spe37386; } public function get_response_str() { return json_encode($this->response); } public function get_response() { return $this->response; } public function success_validate($sp313090, $sp27b4db, $sp6ca0c3, $sp134e80 = null) { if (!$this->check_validate($sp313090, $sp27b4db)) { return 0; } $sp1e6427 = array('seccode' => $sp6ca0c3, 'sdk' => self::GT_SDK_VERSION); if ($sp134e80 != null and is_string($sp134e80)) { $sp1e6427['user_id'] = $sp134e80; } $spdef5e4 = 'http://api.geetest.com/validate.php'; $spb7e426 = $this->post_request($spdef5e4, $sp1e6427); if ($spb7e426 == md5($sp6ca0c3)) { return 1; } else { if ($spb7e426 == 'false') { return 0; } else { return 0; } } } public function fail_validate($sp313090, $sp27b4db, $sp6ca0c3) { if ($sp27b4db) { $spe5f20e = explode('_', $sp27b4db); try { $sp68d370 = $this->decode_response($sp313090, $spe5f20e['0']); $sp2141d0 = $this->decode_response($sp313090, $spe5f20e['1']); $spfb250b = $this->decode_response($sp313090, $spe5f20e['2']); $sp9253da = $this->get_failback_pic_ans($sp2141d0, $spfb250b); $sp8fb603 = abs($sp68d370 - $sp9253da); } catch (\Exception $sped8699) { return 1; } if ($sp8fb603 < 4) { return 1; } else { return 0; } } else { return 0; } } private function check_validate($sp313090, $sp27b4db) { if (strlen($sp27b4db) != 32) { return false; } if (md5($this->private_key . 'geetest' . $sp313090) != $sp27b4db) { return false; } return true; } private function send_request($spdef5e4) { if (function_exists('curl_exec')) { $spa2bd24 = curl_init(); curl_setopt($spa2bd24, CURLOPT_URL, $spdef5e4); curl_setopt($spa2bd24, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); curl_setopt($spa2bd24, CURLOPT_TIMEOUT, self::$socketTimeout); curl_setopt($spa2bd24, CURLOPT_RETURNTRANSFER, 1); $sp1e6427 = curl_exec($spa2bd24); if (curl_errno($spa2bd24)) { $sp90305c = sprintf('curl[%s] error[%s]', $spdef5e4, curl_errno($spa2bd24) . ':' . curl_error($spa2bd24)); $this->triggerError($sp90305c); } curl_close($spa2bd24); } else { $sp58b44c = array('http' => array('method' => 'GET', 'timeout' => self::$connectTimeout + self::$socketTimeout)); $sp5b4981 = stream_context_create($sp58b44c); $sp1e6427 = file_get_contents($spdef5e4, false, $sp5b4981); } return $sp1e6427; } private function post_request($spdef5e4, $sp32c069 = '') { if (!$sp32c069) { return false; } $sp1e6427 = http_build_query($sp32c069); if (function_exists('curl_exec')) { $spa2bd24 = curl_init(); curl_setopt($spa2bd24, CURLOPT_URL, $spdef5e4); curl_setopt($spa2bd24, CURLOPT_RETURNTRANSFER, 1); curl_setopt($spa2bd24, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); curl_setopt($spa2bd24, CURLOPT_TIMEOUT, self::$socketTimeout); if (!$sp32c069) { curl_setopt($spa2bd24, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); } else { curl_setopt($spa2bd24, CURLOPT_POST, 1); curl_setopt($spa2bd24, CURLOPT_POSTFIELDS, $sp1e6427); } $sp1e6427 = curl_exec($spa2bd24); if (curl_errno($spa2bd24)) { $sp90305c = sprintf('curl[%s] error[%s]', $spdef5e4, curl_errno($spa2bd24) . ':' . curl_error($spa2bd24)); $this->triggerError($sp90305c); } curl_close($spa2bd24); } else { if ($sp32c069) { $sp58b44c = array('http' => array('method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded
' . 'Content-Length: ' . strlen($sp1e6427) . '
', 'content' => $sp1e6427, 'timeout' => self::$connectTimeout + self::$socketTimeout)); $sp5b4981 = stream_context_create($sp58b44c); $sp1e6427 = file_get_contents($spdef5e4, false, $sp5b4981); } } return $sp1e6427; } private function decode_response($sp313090, $spccf2ca) { if (strlen($spccf2ca) > 100) { return 0; } $sp46d335 = array(); $sp9a178d = array(); $spfda35f = array('0' => 1, '1' => 2, '2' => 5, '3' => 10, '4' => 50); $sp10fb8e = 0; $sp05f5f3 = 0; $sp67ab50 = str_split($sp313090); $spdebf9b = str_split($spccf2ca); for ($sp53b67d = 0; $sp53b67d < strlen($sp313090); $sp53b67d++) { $sp77dd56 = $sp67ab50[$sp53b67d]; if (in_array($sp77dd56, $sp9a178d)) { continue; } else { $spe5f20e = $spfda35f[$sp10fb8e % 5]; array_push($sp9a178d, $sp77dd56); $sp10fb8e++; $sp46d335[$sp77dd56] = $spe5f20e; } } for ($sp0d1c99 = 0; $sp0d1c99 < strlen($spccf2ca); $sp0d1c99++) { $sp05f5f3 += $sp46d335[$spdebf9b[$sp0d1c99]]; } $sp05f5f3 = $sp05f5f3 - $this->decodeRandBase($sp313090); return $sp05f5f3; } private function get_x_pos_from_str($sp885a20) { if (strlen($sp885a20) != 5) { return 0; } $spc65985 = 0; $spcbd9ab = 200; $spc65985 = base_convert($sp885a20, 16, 10); $spe37386 = $spc65985 % $spcbd9ab; $spe37386 = $spe37386 < 40 ? 40 : $spe37386; return $spe37386; } private function get_failback_pic_ans($sp0b0b22, $sp2eb7cf) { $sp140ff6 = substr(md5($sp0b0b22), 0, 9); $spce872a = substr(md5($sp2eb7cf), 10, 9); $spfc909e = ''; for ($sp53b67d = 0; $sp53b67d < 9; $sp53b67d++) { if ($sp53b67d % 2 == 0) { $spfc909e = $spfc909e . $sp140ff6[$sp53b67d]; } elseif ($sp53b67d % 2 == 1) { $spfc909e = $spfc909e . $spce872a[$sp53b67d]; } } $sp7682ed = substr($spfc909e, 4, 5); $sp9253da = $this->get_x_pos_from_str($sp7682ed); return $sp9253da; } private function decodeRandBase($sp313090) { $spa598a9 = substr($sp313090, 32, 2); $spa35df3 = array(); for ($sp53b67d = 0; $sp53b67d < strlen($spa598a9); $sp53b67d++) { $sp90e163 = ord($spa598a9[$sp53b67d]); $spe37386 = $sp90e163 > 57 ? $sp90e163 - 87 : $sp90e163 - 48; array_push($spa35df3, $spe37386); } $sp118d57 = $spa35df3['0'] * 36 + $spa35df3['1']; return $sp118d57; } private function triggerError($sp90305c) { } }