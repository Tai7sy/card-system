<?php
namespace App\Library\Geetest; class Lib { const GT_SDK_VERSION = 'php_3.2.0'; public static $connectTimeout = 1; public static $socketTimeout = 1; private $response; public $captcha_id; public $private_key; public function __construct($sp9ba397, $spfe536d) { $this->captcha_id = $sp9ba397; $this->private_key = $spfe536d; } public function pre_process($spa27b73 = null) { $sp556150 = 'http://api.geetest.com/register.php?gt=' . $this->captcha_id; if ($spa27b73 != null and is_string($spa27b73)) { $sp556150 = $sp556150 . '&user_id=' . $spa27b73; } $spda7011 = $this->send_request($sp556150); if (strlen($spda7011) != 32) { $this->failback_process(); return 0; } $this->success_process($spda7011); return 1; } private function success_process($spda7011) { $spda7011 = md5($spda7011 . $this->private_key); $sp02366f = array('success' => 1, 'gt' => $this->captcha_id, 'challenge' => $spda7011); $this->response = $sp02366f; } private function failback_process() { $spb449fa = md5(rand(0, 100)); $sp08a90a = md5(rand(0, 100)); $spda7011 = $spb449fa . substr($sp08a90a, 0, 2); $sp02366f = array('success' => 0, 'gt' => $this->captcha_id, 'challenge' => $spda7011); $this->response = $sp02366f; } public function get_response_str() { return json_encode($this->response); } public function get_response() { return $this->response; } public function success_validate($spda7011, $sp455ab9, $spfcf16a, $spa27b73 = null) { if (!$this->check_validate($spda7011, $sp455ab9)) { return 0; } $spc9a615 = array('seccode' => $spfcf16a, 'sdk' => self::GT_SDK_VERSION); if ($spa27b73 != null and is_string($spa27b73)) { $spc9a615['user_id'] = $spa27b73; } $sp556150 = 'http://api.geetest.com/validate.php'; $spd28992 = $this->post_request($sp556150, $spc9a615); if ($spd28992 == md5($spfcf16a)) { return 1; } else { if ($spd28992 == 'false') { return 0; } else { return 0; } } } public function fail_validate($spda7011, $sp455ab9, $spfcf16a) { if ($sp455ab9) { $sp0fe43e = explode('_', $sp455ab9); try { $sp191c74 = $this->decode_response($spda7011, $sp0fe43e['0']); $spbf34d5 = $this->decode_response($spda7011, $sp0fe43e['1']); $spa42c6c = $this->decode_response($spda7011, $sp0fe43e['2']); $sp397e2e = $this->get_failback_pic_ans($spbf34d5, $spa42c6c); $spb779ce = abs($sp191c74 - $sp397e2e); } catch (\Exception $spbd4f27) { return 1; } if ($spb779ce < 4) { return 1; } else { return 0; } } else { return 0; } } private function check_validate($spda7011, $sp455ab9) { if (strlen($sp455ab9) != 32) { return false; } if (md5($this->private_key . 'geetest' . $spda7011) != $sp455ab9) { return false; } return true; } private function send_request($sp556150) { if (function_exists('curl_exec')) { $sp89b559 = curl_init(); curl_setopt($sp89b559, CURLOPT_URL, $sp556150); curl_setopt($sp89b559, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); curl_setopt($sp89b559, CURLOPT_TIMEOUT, self::$socketTimeout); curl_setopt($sp89b559, CURLOPT_RETURNTRANSFER, 1); $spc9a615 = curl_exec($sp89b559); if (curl_errno($sp89b559)) { $sp2a760c = sprintf('curl[%s] error[%s]', $sp556150, curl_errno($sp89b559) . ':' . curl_error($sp89b559)); $this->triggerError($sp2a760c); } curl_close($sp89b559); } else { $spca6807 = array('http' => array('method' => 'GET', 'timeout' => self::$connectTimeout + self::$socketTimeout)); $sp803207 = stream_context_create($spca6807); $spc9a615 = file_get_contents($sp556150, false, $sp803207); } return $spc9a615; } private function post_request($sp556150, $spfd75a6 = '') { if (!$spfd75a6) { return false; } $spc9a615 = http_build_query($spfd75a6); if (function_exists('curl_exec')) { $sp89b559 = curl_init(); curl_setopt($sp89b559, CURLOPT_URL, $sp556150); curl_setopt($sp89b559, CURLOPT_RETURNTRANSFER, 1); curl_setopt($sp89b559, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); curl_setopt($sp89b559, CURLOPT_TIMEOUT, self::$socketTimeout); if (!$spfd75a6) { curl_setopt($sp89b559, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); } else { curl_setopt($sp89b559, CURLOPT_POST, 1); curl_setopt($sp89b559, CURLOPT_POSTFIELDS, $spc9a615); } $spc9a615 = curl_exec($sp89b559); if (curl_errno($sp89b559)) { $sp2a760c = sprintf('curl[%s] error[%s]', $sp556150, curl_errno($sp89b559) . ':' . curl_error($sp89b559)); $this->triggerError($sp2a760c); } curl_close($sp89b559); } else { if ($spfd75a6) { $spca6807 = array('http' => array('method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded
' . 'Content-Length: ' . strlen($spc9a615) . '
', 'content' => $spc9a615, 'timeout' => self::$connectTimeout + self::$socketTimeout)); $sp803207 = stream_context_create($spca6807); $spc9a615 = file_get_contents($sp556150, false, $sp803207); } } return $spc9a615; } private function decode_response($spda7011, $sp695cd0) { if (strlen($sp695cd0) > 100) { return 0; } $spc89038 = array(); $sp6b3748 = array(); $spe1ea80 = array('0' => 1, '1' => 2, '2' => 5, '3' => 10, '4' => 50); $sp75f1cf = 0; $sp2ef7f0 = 0; $sp77971a = str_split($spda7011); $spb1af0a = str_split($sp695cd0); for ($sp80b4fe = 0; $sp80b4fe < strlen($spda7011); $sp80b4fe++) { $sp458343 = $sp77971a[$sp80b4fe]; if (in_array($sp458343, $sp6b3748)) { continue; } else { $sp0fe43e = $spe1ea80[$sp75f1cf % 5]; array_push($sp6b3748, $sp458343); $sp75f1cf++; $spc89038[$sp458343] = $sp0fe43e; } } for ($spcbce00 = 0; $spcbce00 < strlen($sp695cd0); $spcbce00++) { $sp2ef7f0 += $spc89038[$spb1af0a[$spcbce00]]; } $sp2ef7f0 = $sp2ef7f0 - $this->decodeRandBase($spda7011); return $sp2ef7f0; } private function get_x_pos_from_str($sp0aa64e) { if (strlen($sp0aa64e) != 5) { return 0; } $sp2dbd19 = 0; $sp4eafc7 = 200; $sp2dbd19 = base_convert($sp0aa64e, 16, 10); $sp02366f = $sp2dbd19 % $sp4eafc7; $sp02366f = $sp02366f < 40 ? 40 : $sp02366f; return $sp02366f; } private function get_failback_pic_ans($sp61105b, $sp3933ce) { $spdfa5fb = substr(md5($sp61105b), 0, 9); $sp1a9db1 = substr(md5($sp3933ce), 10, 9); $sp4e2b91 = ''; for ($sp80b4fe = 0; $sp80b4fe < 9; $sp80b4fe++) { if ($sp80b4fe % 2 == 0) { $sp4e2b91 = $sp4e2b91 . $spdfa5fb[$sp80b4fe]; } elseif ($sp80b4fe % 2 == 1) { $sp4e2b91 = $sp4e2b91 . $sp1a9db1[$sp80b4fe]; } } $spc77e47 = substr($sp4e2b91, 4, 5); $sp397e2e = $this->get_x_pos_from_str($spc77e47); return $sp397e2e; } private function decodeRandBase($spda7011) { $sp9cbe91 = substr($spda7011, 32, 2); $sp270eba = array(); for ($sp80b4fe = 0; $sp80b4fe < strlen($sp9cbe91); $sp80b4fe++) { $spb63f8b = ord($sp9cbe91[$sp80b4fe]); $sp02366f = $spb63f8b > 57 ? $spb63f8b - 87 : $spb63f8b - 48; array_push($sp270eba, $sp02366f); } $sp8e31cb = $sp270eba['0'] * 36 + $sp270eba['1']; return $sp8e31cb; } private function triggerError($sp2a760c) { } }