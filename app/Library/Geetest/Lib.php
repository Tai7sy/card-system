<?php
namespace App\Library\Geetest; class Lib { const GT_SDK_VERSION = 'php_3.2.0'; public static $connectTimeout = 1; public static $socketTimeout = 1; private $response; public $captcha_id; public $private_key; public function __construct($sp971d6f, $sp753ab8) { $this->captcha_id = $sp971d6f; $this->private_key = $sp753ab8; } public function pre_process($spf5ae13 = null) { $sp0784c1 = 'http://api.geetest.com/register.php?gt=' . $this->captcha_id; if ($spf5ae13 != null and is_string($spf5ae13)) { $sp0784c1 = $sp0784c1 . '&user_id=' . $spf5ae13; } $spcd755b = $this->send_request($sp0784c1); if (strlen($spcd755b) != 32) { $this->failback_process(); return 0; } $this->success_process($spcd755b); return 1; } private function success_process($spcd755b) { $spcd755b = md5($spcd755b . $this->private_key); $spe6807d = array('success' => 1, 'gt' => $this->captcha_id, 'challenge' => $spcd755b); $this->response = $spe6807d; } private function failback_process() { $sp7cf554 = md5(rand(0, 100)); $sp88e0c9 = md5(rand(0, 100)); $spcd755b = $sp7cf554 . substr($sp88e0c9, 0, 2); $spe6807d = array('success' => 0, 'gt' => $this->captcha_id, 'challenge' => $spcd755b); $this->response = $spe6807d; } public function get_response_str() { return json_encode($this->response); } public function get_response() { return $this->response; } public function success_validate($spcd755b, $sp81e372, $spf24dc9, $spf5ae13 = null) { if (!$this->check_validate($spcd755b, $sp81e372)) { return 0; } $spacc152 = array('seccode' => $spf24dc9, 'sdk' => self::GT_SDK_VERSION); if ($spf5ae13 != null and is_string($spf5ae13)) { $spacc152['user_id'] = $spf5ae13; } $sp0784c1 = 'http://api.geetest.com/validate.php'; $spc2fe9e = $this->post_request($sp0784c1, $spacc152); if ($spc2fe9e == md5($spf24dc9)) { return 1; } else { if ($spc2fe9e == 'false') { return 0; } else { return 0; } } } public function fail_validate($spcd755b, $sp81e372, $spf24dc9) { if ($sp81e372) { $sp4a2047 = explode('_', $sp81e372); try { $sp34f252 = $this->decode_response($spcd755b, $sp4a2047['0']); $sp2c96eb = $this->decode_response($spcd755b, $sp4a2047['1']); $sp130436 = $this->decode_response($spcd755b, $sp4a2047['2']); $spa66852 = $this->get_failback_pic_ans($sp2c96eb, $sp130436); $spa76c5d = abs($sp34f252 - $spa66852); } catch (\Exception $sp6a7295) { return 1; } if ($spa76c5d < 4) { return 1; } else { return 0; } } else { return 0; } } private function check_validate($spcd755b, $sp81e372) { if (strlen($sp81e372) != 32) { return false; } if (md5($this->private_key . 'geetest' . $spcd755b) != $sp81e372) { return false; } return true; } private function send_request($sp0784c1) { if (function_exists('curl_exec')) { $spf86e31 = curl_init(); curl_setopt($spf86e31, CURLOPT_URL, $sp0784c1); curl_setopt($spf86e31, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); curl_setopt($spf86e31, CURLOPT_TIMEOUT, self::$socketTimeout); curl_setopt($spf86e31, CURLOPT_RETURNTRANSFER, 1); $spacc152 = curl_exec($spf86e31); if (curl_errno($spf86e31)) { $sp13c288 = sprintf('curl[%s] error[%s]', $sp0784c1, curl_errno($spf86e31) . ':' . curl_error($spf86e31)); $this->triggerError($sp13c288); } curl_close($spf86e31); } else { $sp239cb0 = array('http' => array('method' => 'GET', 'timeout' => self::$connectTimeout + self::$socketTimeout)); $sp32b641 = stream_context_create($sp239cb0); $spacc152 = file_get_contents($sp0784c1, false, $sp32b641); } return $spacc152; } private function post_request($sp0784c1, $spd49a63 = '') { if (!$spd49a63) { return false; } $spacc152 = http_build_query($spd49a63); if (function_exists('curl_exec')) { $spf86e31 = curl_init(); curl_setopt($spf86e31, CURLOPT_URL, $sp0784c1); curl_setopt($spf86e31, CURLOPT_RETURNTRANSFER, 1); curl_setopt($spf86e31, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); curl_setopt($spf86e31, CURLOPT_TIMEOUT, self::$socketTimeout); if (!$spd49a63) { curl_setopt($spf86e31, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']); } else { curl_setopt($spf86e31, CURLOPT_POST, 1); curl_setopt($spf86e31, CURLOPT_POSTFIELDS, $spacc152); } $spacc152 = curl_exec($spf86e31); if (curl_errno($spf86e31)) { $sp13c288 = sprintf('curl[%s] error[%s]', $sp0784c1, curl_errno($spf86e31) . ':' . curl_error($spf86e31)); $this->triggerError($sp13c288); } curl_close($spf86e31); } else { if ($spd49a63) { $sp239cb0 = array('http' => array('method' => 'POST', 'header' => 'Content-type: application/x-www-form-urlencoded
' . 'Content-Length: ' . strlen($spacc152) . '
', 'content' => $spacc152, 'timeout' => self::$connectTimeout + self::$socketTimeout)); $sp32b641 = stream_context_create($sp239cb0); $spacc152 = file_get_contents($sp0784c1, false, $sp32b641); } } return $spacc152; } private function decode_response($spcd755b, $spebcddc) { if (strlen($spebcddc) > 100) { return 0; } $sp4450cf = array(); $sp4b9d07 = array(); $sp33c957 = array('0' => 1, '1' => 2, '2' => 5, '3' => 10, '4' => 50); $sp99aae1 = 0; $sp162b98 = 0; $spc3ad4b = str_split($spcd755b); $sp18f418 = str_split($spebcddc); for ($spc8f255 = 0; $spc8f255 < strlen($spcd755b); $spc8f255++) { $spbdd4b3 = $spc3ad4b[$spc8f255]; if (in_array($spbdd4b3, $sp4b9d07)) { continue; } else { $sp4a2047 = $sp33c957[$sp99aae1 % 5]; array_push($sp4b9d07, $spbdd4b3); $sp99aae1++; $sp4450cf[$spbdd4b3] = $sp4a2047; } } for ($sp8ec0e5 = 0; $sp8ec0e5 < strlen($spebcddc); $sp8ec0e5++) { $sp162b98 += $sp4450cf[$sp18f418[$sp8ec0e5]]; } $sp162b98 = $sp162b98 - $this->decodeRandBase($spcd755b); return $sp162b98; } private function get_x_pos_from_str($spe0bcf2) { if (strlen($spe0bcf2) != 5) { return 0; } $spd5c80e = 0; $sp833cb0 = 200; $spd5c80e = base_convert($spe0bcf2, 16, 10); $spe6807d = $spd5c80e % $sp833cb0; $spe6807d = $spe6807d < 40 ? 40 : $spe6807d; return $spe6807d; } private function get_failback_pic_ans($sp2e7c57, $sp121a36) { $spaac8fe = substr(md5($sp2e7c57), 0, 9); $sp9f4f43 = substr(md5($sp121a36), 10, 9); $sp8956d0 = ''; for ($spc8f255 = 0; $spc8f255 < 9; $spc8f255++) { if ($spc8f255 % 2 == 0) { $sp8956d0 = $sp8956d0 . $spaac8fe[$spc8f255]; } elseif ($spc8f255 % 2 == 1) { $sp8956d0 = $sp8956d0 . $sp9f4f43[$spc8f255]; } } $sp239f75 = substr($sp8956d0, 4, 5); $spa66852 = $this->get_x_pos_from_str($sp239f75); return $spa66852; } private function decodeRandBase($spcd755b) { $sp28cda4 = substr($spcd755b, 32, 2); $sp679035 = array(); for ($spc8f255 = 0; $spc8f255 < strlen($sp28cda4); $spc8f255++) { $sp6c993e = ord($sp28cda4[$spc8f255]); $spe6807d = $sp6c993e > 57 ? $sp6c993e - 87 : $sp6c993e - 48; array_push($sp679035, $spe6807d); } $sp40b376 = $sp679035['0'] * 36 + $sp679035['1']; return $sp40b376; } private function triggerError($sp13c288) { } }