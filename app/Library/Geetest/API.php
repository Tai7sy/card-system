<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($sp0619ae) { $this->geetest_conf = $sp0619ae; } public static function get() { $spe8e527 = config('services.geetest.id'); $spb39cc2 = config('services.geetest.key'); if (!strlen($spe8e527) || !strlen($spb39cc2)) { return array('message' => 'geetest error: no config'); } $sp99a36d = new Lib($spe8e527, $spb39cc2); $sp6738b1 = time() . rand(1, 10000); $spde04ea = $sp99a36d->pre_process($sp6738b1); $sp571ce3 = json_decode($sp99a36d->get_response_str(), true); $sp571ce3['key'] = Helper::id_encode($sp6738b1, 3566, $spde04ea); return $sp571ce3; } public static function verify($spb06c2f, $spe6a49b, $spd4d7e2, $spd7e6c4) { $sp99a36d = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($spb06c2f, 3566, $spabe974); $sp6738b1 = $spabe974[1]; $spde04ea = $spabe974[4]; if ($spde04ea === 1) { $sp75fce3 = $sp99a36d->success_validate($spe6a49b, $spd4d7e2, $spd7e6c4, $sp6738b1); if ($sp75fce3) { return true; } else { return false; } } else { if ($sp99a36d->fail_validate($spe6a49b, $spd4d7e2, $spd7e6c4)) { return true; } else { return false; } } } }