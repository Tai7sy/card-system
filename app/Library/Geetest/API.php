<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($sp3125db) { $this->geetest_conf = $sp3125db; } public static function get() { $spbf68a1 = config('services.geetest.id'); $sp10da54 = config('services.geetest.key'); if (!strlen($spbf68a1) || !strlen($sp10da54)) { return array('message' => 'geetest error: no config'); } $sp176826 = new Lib($spbf68a1, $sp10da54); $spe58da5 = time() . rand(1, 10000); $sp80cfe8 = $sp176826->pre_process($spe58da5); $spa51230 = json_decode($sp176826->get_response_str(), true); $spa51230['key'] = Helper::id_encode($spe58da5, 3566, $sp80cfe8); return $spa51230; } public static function verify($sp413bca, $spfc9b39, $sp1af406, $sp9f5ebc) { $sp176826 = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($sp413bca, 3566, $spc8c319); $spe58da5 = $spc8c319[1]; $sp80cfe8 = $spc8c319[4]; if ($sp80cfe8 === 1) { $sp5c45d8 = $sp176826->success_validate($spfc9b39, $sp1af406, $sp9f5ebc, $spe58da5); if ($sp5c45d8) { return true; } else { return false; } } else { if ($sp176826->fail_validate($spfc9b39, $sp1af406, $sp9f5ebc)) { return true; } else { return false; } } } }