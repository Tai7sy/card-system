<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($spf516d3) { $this->geetest_conf = $spf516d3; } public static function get() { $speb3ceb = config('services.geetest.id'); $spc89038 = config('services.geetest.key'); if (!strlen($speb3ceb) || !strlen($spc89038)) { return array('message' => 'geetest error: no config'); } $spa6a537 = new Lib($speb3ceb, $spc89038); $spa27b73 = time() . rand(1, 10000); $spc96be5 = $spa6a537->pre_process($spa27b73); $sp296935 = json_decode($spa6a537->get_response_str(), true); $sp296935['key'] = Helper::id_encode($spa27b73, 3566, $spc96be5); return $sp296935; } public static function verify($spe95bc4, $spf89cac, $sp79c8af, $spb2aab2) { $spa6a537 = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($spe95bc4, 3566, $spbe7246); $spa27b73 = $spbe7246[1]; $spc96be5 = $spbe7246[4]; if ($spc96be5 === 1) { $sp02366f = $spa6a537->success_validate($spf89cac, $sp79c8af, $spb2aab2, $spa27b73); if ($sp02366f) { return true; } else { return false; } } else { if ($spa6a537->fail_validate($spf89cac, $sp79c8af, $spb2aab2)) { return true; } else { return false; } } } }