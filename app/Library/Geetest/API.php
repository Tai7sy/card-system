<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($sp799f04) { $this->geetest_conf = $sp799f04; } public static function get() { $sp138835 = config('services.geetest.id'); $sp696922 = config('services.geetest.key'); if (!strlen($sp138835) || !strlen($sp696922)) { return array('message' => 'geetest error: no config'); } $spf1c348 = new Lib($sp138835, $sp696922); $sp699450 = time() . rand(1, 10000); $spa1883e = $spf1c348->pre_process($sp699450); $spa87332 = json_decode($spf1c348->get_response_str(), true); $spa87332['key'] = Helper::id_encode($sp699450, 3566, $spa1883e); return $spa87332; } public static function verify($sp4e35bb, $spf4231e, $sp9075f6, $spc6183f) { $spf1c348 = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($sp4e35bb, 3566, $sp2a1dd1); $sp699450 = $sp2a1dd1[1]; $spa1883e = $sp2a1dd1[4]; if ($spa1883e === 1) { $spdf3304 = $spf1c348->success_validate($spf4231e, $sp9075f6, $spc6183f, $sp699450); if ($spdf3304) { return true; } else { return false; } } else { if ($spf1c348->fail_validate($spf4231e, $sp9075f6, $spc6183f)) { return true; } else { return false; } } } }