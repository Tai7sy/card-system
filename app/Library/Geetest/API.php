<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($spc03b6e) { $this->geetest_conf = $spc03b6e; } public static function get() { $spdc31ea = config('services.geetest.id'); $sp308327 = config('services.geetest.key'); if (!strlen($spdc31ea) || !strlen($sp308327)) { return array('message' => 'geetest error: no config'); } $spe53c83 = new Lib($spdc31ea, $sp308327); $spe0b9a0 = time() . rand(1, 10000); $sp04ef3f = $spe53c83->pre_process($spe0b9a0); $spa59707 = json_decode($spe53c83->get_response_str(), true); $spa59707['key'] = Helper::id_encode($spe0b9a0, 3566, $sp04ef3f); return $spa59707; } public static function verify($spb2ad6a, $sp8ad0c0, $sp6fc388, $sp3e18de) { $spe53c83 = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($spb2ad6a, 3566, $sp12894d); $spe0b9a0 = $sp12894d[1]; $sp04ef3f = $sp12894d[4]; if ($sp04ef3f === 1) { $spae8ac8 = $spe53c83->success_validate($sp8ad0c0, $sp6fc388, $sp3e18de, $spe0b9a0); if ($spae8ac8) { return true; } else { return false; } } else { if ($spe53c83->fail_validate($sp8ad0c0, $sp6fc388, $sp3e18de)) { return true; } else { return false; } } } }