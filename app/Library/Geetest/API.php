<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($sp0451dd) { $this->geetest_conf = $sp0451dd; } public static function get() { $sp7df839 = config('services.geetest.id'); $spa3d2cf = config('services.geetest.key'); if (!strlen($sp7df839) || !strlen($spa3d2cf)) { return array('message' => 'geetest error: no config'); } $spa6ec2d = new Lib($sp7df839, $spa3d2cf); $spc2138c = time() . rand(1, 10000); $sp424304 = $spa6ec2d->pre_process($spc2138c); $sp00ac62 = json_decode($spa6ec2d->get_response_str(), true); $sp00ac62['key'] = Helper::id_encode($spc2138c, 3566, $sp424304); return $sp00ac62; } public static function verify($sp848d70, $sp2ca8a7, $sp4e069e, $sp6bfba1) { $spa6ec2d = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($sp848d70, 3566, $spb38dd8); $spc2138c = $spb38dd8[1]; $sp424304 = $spb38dd8[4]; if ($sp424304 === 1) { $sp11ac9a = $spa6ec2d->success_validate($sp2ca8a7, $sp4e069e, $sp6bfba1, $spc2138c); if ($sp11ac9a) { return true; } else { return false; } } else { if ($spa6ec2d->fail_validate($sp2ca8a7, $sp4e069e, $sp6bfba1)) { return true; } else { return false; } } } }