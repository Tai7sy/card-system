<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($sp1c6547) { $this->geetest_conf = $sp1c6547; } public static function get() { $spd5afc6 = config('services.geetest.id'); $sp6bc830 = config('services.geetest.key'); if (!strlen($spd5afc6) || !strlen($sp6bc830)) { return array('message' => 'geetest error: no config'); } $sp5cccb9 = new Lib($spd5afc6, $sp6bc830); $spacf00d = time() . rand(1, 10000); $spc20aee = $sp5cccb9->pre_process($spacf00d); $spd9807c = json_decode($sp5cccb9->get_response_str(), true); $spd9807c['key'] = Helper::id_encode($spacf00d, 3566, $spc20aee); return $spd9807c; } public static function verify($spdc9590, $sp9e5fc1, $sp3de5a1, $sp601e97) { $sp5cccb9 = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($spdc9590, 3566, $sp9c39ef); $spacf00d = $sp9c39ef[1]; $spc20aee = $sp9c39ef[4]; if ($spc20aee === 1) { $sp1b1403 = $sp5cccb9->success_validate($sp9e5fc1, $sp3de5a1, $sp601e97, $spacf00d); if ($sp1b1403) { return true; } else { return false; } } else { if ($sp5cccb9->fail_validate($sp9e5fc1, $sp3de5a1, $sp601e97)) { return true; } else { return false; } } } }