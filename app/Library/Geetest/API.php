<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($sp7c2170) { $this->geetest_conf = $sp7c2170; } public static function get() { $spaacfde = config('services.geetest.id'); $spc8acd6 = config('services.geetest.key'); if (!strlen($spaacfde) || !strlen($spc8acd6)) { return array('message' => 'geetest error: no config'); } $sp1da6d7 = new Lib($spaacfde, $spc8acd6); $spf93fb1 = time() . rand(1, 10000); $sp66f43d = $sp1da6d7->pre_process($spf93fb1); $sp8ee8d3 = json_decode($sp1da6d7->get_response_str(), true); $sp8ee8d3['key'] = Helper::id_encode($spf93fb1, 3566, $sp66f43d); return $sp8ee8d3; } public static function verify($sp7337b6, $sp7e4224, $spf80c3d, $sp95d60a) { $sp1da6d7 = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($sp7337b6, 3566, $sp23f234); $spf93fb1 = $sp23f234[1]; $sp66f43d = $sp23f234[4]; if ($sp66f43d === 1) { $spb6456a = $sp1da6d7->success_validate($sp7e4224, $spf80c3d, $sp95d60a, $spf93fb1); if ($spb6456a) { return true; } else { return false; } } else { if ($sp1da6d7->fail_validate($sp7e4224, $spf80c3d, $sp95d60a)) { return true; } else { return false; } } } }