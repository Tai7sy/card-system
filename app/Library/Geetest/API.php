<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($sp03dee9) { $this->geetest_conf = $sp03dee9; } public static function get() { $spbc2f9d = config('services.geetest.id'); $sp9dffac = config('services.geetest.key'); if (!strlen($spbc2f9d) || !strlen($sp9dffac)) { return array('message' => 'geetest error: no config'); } $spfbe946 = new Lib($spbc2f9d, $sp9dffac); $sp6fe8b9 = time() . rand(1, 10000); $spb94e47 = $spfbe946->pre_process($sp6fe8b9); $sp179a17 = json_decode($spfbe946->get_response_str(), true); $sp179a17['key'] = Helper::id_encode($sp6fe8b9, 3566, $spb94e47); return $sp179a17; } public static function verify($sp987828, $spc93ea5, $sp031cb6, $sp9a7bc1) { $spfbe946 = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($sp987828, 3566, $spa78d43); $sp6fe8b9 = $spa78d43[1]; $spb94e47 = $spa78d43[4]; if ($spb94e47 === 1) { $sp660b66 = $spfbe946->success_validate($spc93ea5, $sp031cb6, $sp9a7bc1, $sp6fe8b9); if ($sp660b66) { return true; } else { return false; } } else { if ($spfbe946->fail_validate($spc93ea5, $sp031cb6, $sp9a7bc1)) { return true; } else { return false; } } } }