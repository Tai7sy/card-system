<?php
namespace App\Library\Geetest; use App\Library\Helper; use Hashids\Hashids; use Illuminate\Support\Facades\Session; class API { private $geetest_conf = null; public function __construct($spee3857) { $this->geetest_conf = $spee3857; } public static function get() { $sp1beabb = config('services.geetest.id'); $sp0f4337 = config('services.geetest.key'); if (!strlen($sp1beabb) || !strlen($sp0f4337)) { return array('message' => 'geetest error: no config'); } $sp168ccc = new Lib($sp1beabb, $sp0f4337); $sp279789 = time() . rand(1, 10000); $sp8d69d7 = $sp168ccc->pre_process($sp279789); $sp6e55ba = json_decode($sp168ccc->get_response_str(), true); $sp6e55ba['key'] = Helper::id_encode($sp279789, 3566, $sp8d69d7); return $sp6e55ba; } public static function verify($spa98f9f, $spa0f0c1, $sp6c15d2, $spda0bf4) { $sp168ccc = new Lib(config('services.geetest.id'), config('services.geetest.key')); Helper::id_decode($spa98f9f, 3566, $sp6e0539); $sp279789 = $sp6e0539[1]; $sp8d69d7 = $sp6e0539[4]; if ($sp8d69d7 === 1) { $sp9a8387 = $sp168ccc->success_validate($spa0f0c1, $sp6c15d2, $spda0bf4, $sp279789); if ($sp9a8387) { return true; } else { return false; } } else { if ($sp168ccc->fail_validate($spa0f0c1, $sp6c15d2, $spda0bf4)) { return true; } else { return false; } } } }