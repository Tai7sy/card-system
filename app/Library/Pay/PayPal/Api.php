<?php
namespace App\Library\Pay\PayPal; use App\Library\CurlRequest; use App\Library\Pay\ApiInterface; use Illuminate\Support\Facades\Log; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; private $pay_id; public function __construct($sp3c46ab) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $sp3c46ab; $this->url_return = SYS_URL . '/pay/return/' . $sp3c46ab; $this->pay_id = $sp3c46ab; } function goPay($sp9d4382, $sp2e47fc, $spd4e90d, $spd0789a, $sp076ec7) { $spea10b9 = self::getUsd($sp076ec7); $spf59c91 = sprintf('%.2f', $spea10b9 / 100); \App\Order::where('order_no', $sp2e47fc)->update(array('pay_trade_no' => $spf59c91)); if (!isset($sp9d4382['business'])) { throw new \Exception('请填写 business (商家邮箱)'); } die('
<!doctype html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>正在转到付款页</title>
</head>
<body onload="document.pay.submit()">
<form name="pay" action="https://www.paypal.com/cgi-bin/webscr" method="post">
    <input type="hidden" name="cmd" value="_xclick">
    <input type="hidden" name="business" value="' . $sp9d4382['business'] . '">
    <input type="hidden" name="item_name" value="' . $spd4e90d . '">
    <input type="hidden" name="item_number" value="' . $sp2e47fc . '">
    <input type="hidden" name="currency_code" value="USD">
    <input type="hidden" name="amount" value="' . $spf59c91 . '">
    <input type="hidden" name="tax" value="0.00">
    <input type="hidden" name="no_note" value="1">
    <input type="hidden" name="no_shipping" value="1">
    <input type="hidden" name="address_override" value="0">
    <input type="hidden" name="charset" value="utf-8">
    <input type="hidden" name="bn" value="PAY">
    <input type="hidden" name="rm" value="2">
    <input type="hidden" name="return" value="' . $this->url_return . '/' . $sp2e47fc . '">
    <input type="hidden" name="cancel_return" value="' . $this->url_return . '/' . $sp2e47fc . '">
    <input type="hidden" name="notify_url" value="' . $this->url_notify . '">
</form>
</body>
        '); } function verify($sp9d4382, $sp9a4d97) { $sp7b2182 = isset($sp9d4382['isNotify']) && $sp9d4382['isNotify']; if (!$sp7b2182 && @(!isset($_POST['business']))) { return false; } $spd89333 = file_get_contents('php://input'); $sp634dd2 = explode('&', $spd89333); $sp49235d = array(); foreach ($sp634dd2 as $spfa4044) { $spfa4044 = explode('=', $spfa4044); if (count($spfa4044) == 2) { $sp49235d[$spfa4044[0]] = urldecode($spfa4044[1]); } } $sp8d5928 = 'cmd=_notify-validate'; if (function_exists('get_magic_quotes_gpc')) { $spff1c09 = true; } foreach ($sp49235d as $spf1241f => $sp8b9401) { if ($spff1c09 == true && get_magic_quotes_gpc() == 1) { $sp8b9401 = urlencode(stripslashes($sp8b9401)); } else { $sp8b9401 = urlencode($sp8b9401); } $sp8d5928 .= "&{$spf1241f}={$sp8b9401}"; } $sp9f83d6 = curl_init('https://ipnpb.paypal.com/cgi-bin/webscr'); curl_setopt($sp9f83d6, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1); curl_setopt($sp9f83d6, CURLOPT_POST, 1); curl_setopt($sp9f83d6, CURLOPT_RETURNTRANSFER, 1); curl_setopt($sp9f83d6, CURLOPT_POSTFIELDS, $sp8d5928); curl_setopt($sp9f83d6, CURLOPT_SSL_VERIFYPEER, 1); curl_setopt($sp9f83d6, CURLOPT_SSL_VERIFYHOST, 2); curl_setopt($sp9f83d6, CURLOPT_FORBID_REUSE, 1); curl_setopt($sp9f83d6, CURLOPT_HTTPHEADER, array('Connection: Close')); if (!($spab3a3a = curl_exec($sp9f83d6))) { Log::error('Pay.PayPal.verify notify fail, Got ' . curl_error($sp9f83d6) . ' when processing IPN data'); curl_close($sp9f83d6); die; } curl_close($sp9f83d6); if (strcmp($spab3a3a, 'VERIFIED') == 0) { if ($sp7b2182) { echo 'IPN OK'; } $sp845b45 = $_POST['item_number']; $spb70361 = $_POST['payment_status']; $spf62d13 = $_POST['mc_gross']; $spb79b9f = $_POST['mc_currency']; $sp41f42a = $_POST['txn_id']; $spe826cf = $sp7b2182 ? $_POST['receiver_email'] : $_POST['business']; if ($spb70361 !== 'Completed') { Log::debug('Pay.PayPal.verify fail, order_no:' . $sp845b45 . ', Payment status is not Completed, current(' . $spb70361 . ')', array('$_POST' => $_POST)); return false; } if ($spb79b9f !== 'USD') { Log::error('Pay.PayPal.verify fail, order_no:' . $sp845b45 . ', Payment currency is not USD, current(' . $spb79b9f . ')', array('$_POST' => $_POST)); return false; } $spe0613f = \App\Order::where('order_no', $sp845b45)->firstOrFail(); if ($spe0613f->status === \App\Order::STATUS_PAID || $spe0613f->status === \App\Order::STATUS_SUCCESS) { return true; } if ($spe0613f->pay_trade_no !== $spf62d13) { Log::error('Pay.PayPal.verify fail, order_no:' . $sp845b45 . ', Payment amount error (' . $spe0613f->pay_trade_no . '), current(' . $spf62d13 . ')', array('$_POST' => $_POST)); } if ($spe826cf !== $sp9d4382['business']) { Log::error('Pay.PayPal.verify fail, order_no:' . $sp845b45 . ', payment account is not yours(' . $sp9d4382['business'] . '), current(' . $spe826cf . ')', array('$_POST' => $_POST)); return false; } $sp9a4d97($sp845b45, $spe0613f->paid, $sp41f42a); return true; } else { if (strcmp($spab3a3a, 'INVALID') == 0) { if ($sp7b2182) { echo 'IPN OK'; } Log::debug('Pay.PayPal.verify notify fail, IPN INVALID', array('$res' => $spab3a3a, '$_POST' => $_POST)); } else { Log::debug('Pay.PayPal.verify notify fail, Unknown IPN error', array('$res' => $spab3a3a, '$_POST' => $_POST)); } } return false; } function getUsd($sp33cdce) { $sp6fd648 = @json_decode(CurlRequest::get('https://m.cmbchina.com/api/rate/getfxrate'), true); if (!isset($sp6fd648['data'])) { throw new \Exception('获取汇率失败'); } $sp420f4b = 0.2; foreach ($sp6fd648['data'] as $sp10eb73) { if ($sp10eb73['ZCcyNbr'] === '美元') { $sp420f4b = 100 / $sp10eb73['ZRtcOfr']; break; } } return $sp33cdce * $sp420f4b; } }