<?php
require_once 'WxPay.Exception.php'; require_once 'WxPay.Config.php'; require_once 'WxPay.Data.php'; class WxPayApi { public static function unifiedOrder($sp704f02, $spada703 = 6) { $sp3ae187 = 'https://api.mch.weixin.qq.com/pay/unifiedorder'; if (!$sp704f02->IsOut_trade_noSet()) { throw new WxPayException('缺少统一支付接口必填参数out_trade_no！'); } else { if (!$sp704f02->IsBodySet()) { throw new WxPayException('缺少统一支付接口必填参数body！'); } else { if (!$sp704f02->IsTotal_feeSet()) { throw new WxPayException('缺少统一支付接口必填参数total_fee！'); } else { if (!$sp704f02->IsTrade_typeSet()) { throw new WxPayException('缺少统一支付接口必填参数trade_type！'); } } } } if ($sp704f02->GetTrade_type() == 'JSAPI' && !$sp704f02->IsOpenidSet()) { throw new WxPayException('统一支付接口中，缺少必填参数openid！trade_type为JSAPI时，openid为必填参数！'); } if ($sp704f02->GetTrade_type() == 'NATIVE' && !$sp704f02->IsProduct_idSet()) { throw new WxPayException('统一支付接口中，缺少必填参数product_id！trade_type为JSAPI时，product_id为必填参数！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); if (@WxPayConfig::SUBAPPID) { $sp704f02->SetSub_appid(WxPayConfig::SUBAPPID); } if (@WxPayConfig::SUBMCHID) { $sp704f02->SetSub_mch_id(WxPayConfig::SUBMCHID); } $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, false, $spada703); $spb34b01 = WxPayResults::Init($spad32e6); self::reportCostTime($sp3ae187, $sp1d20db, $spb34b01); return $spb34b01; } public static function orderQuery($sp704f02, $spada703 = 6) { $sp3ae187 = 'https://api.mch.weixin.qq.com/pay/orderquery'; if (!$sp704f02->IsOut_trade_noSet() && !$sp704f02->IsTransaction_idSet()) { throw new WxPayException('订单查询接口中，out_trade_no、transaction_id至少填一个！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); if (@WxPayConfig::SUBMCHID) { $sp704f02->SetSub_mch_id(WxPayConfig::SUBMCHID); } $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, false, $spada703); $spb34b01 = WxPayResults::Init($spad32e6); self::reportCostTime($sp3ae187, $sp1d20db, $spb34b01); return $spb34b01; } public static function closeOrder($sp704f02, $spada703 = 6) { $sp3ae187 = 'https://api.mch.weixin.qq.com/pay/closeorder'; if (!$sp704f02->IsOut_trade_noSet()) { throw new WxPayException('订单查询接口中，out_trade_no必填！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, false, $spada703); $spb34b01 = WxPayResults::Init($spad32e6); self::reportCostTime($sp3ae187, $sp1d20db, $spb34b01); return $spb34b01; } public static function refund($sp704f02, $spada703 = 6) { $sp3ae187 = 'https://api.mch.weixin.qq.com/secapi/pay/refund'; if (!$sp704f02->IsOut_trade_noSet() && !$sp704f02->IsTransaction_idSet()) { throw new WxPayException('退款申请接口中，out_trade_no、transaction_id至少填一个！'); } else { if (!$sp704f02->IsOut_refund_noSet()) { throw new WxPayException('退款申请接口中，缺少必填参数out_refund_no！'); } else { if (!$sp704f02->IsTotal_feeSet()) { throw new WxPayException('退款申请接口中，缺少必填参数total_fee！'); } else { if (!$sp704f02->IsRefund_feeSet()) { throw new WxPayException('退款申请接口中，缺少必填参数refund_fee！'); } else { if (!$sp704f02->IsOp_user_idSet()) { throw new WxPayException('退款申请接口中，缺少必填参数op_user_id！'); } } } } } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, true, $spada703); $spb34b01 = WxPayResults::Init($spad32e6); self::reportCostTime($sp3ae187, $sp1d20db, $spb34b01); return $spb34b01; } public static function refundQuery($sp704f02, $spada703 = 6) { $sp3ae187 = 'https://api.mch.weixin.qq.com/pay/refundquery'; if (!$sp704f02->IsOut_refund_noSet() && !$sp704f02->IsOut_trade_noSet() && !$sp704f02->IsTransaction_idSet() && !$sp704f02->IsRefund_idSet()) { throw new WxPayException('退款查询接口中，out_refund_no、out_trade_no、transaction_id、refund_id四个参数必填一个！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, false, $spada703); $spb34b01 = WxPayResults::Init($spad32e6); self::reportCostTime($sp3ae187, $sp1d20db, $spb34b01); return $spb34b01; } public static function downloadBill($sp704f02, $spada703 = 6) { $sp3ae187 = 'https://api.mch.weixin.qq.com/pay/downloadbill'; if (!$sp704f02->IsBill_dateSet()) { throw new WxPayException('对账单接口中，缺少必填参数bill_date！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, false, $spada703); if (substr($spad32e6, 0, 5) == '<xml>') { return ''; } return $spad32e6; } public static function micropay($sp704f02, $spada703 = 10) { $sp3ae187 = 'https://api.mch.weixin.qq.com/pay/micropay'; if (!$sp704f02->IsBodySet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数body！'); } else { if (!$sp704f02->IsOut_trade_noSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数out_trade_no！'); } else { if (!$sp704f02->IsTotal_feeSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数total_fee！'); } else { if (!$sp704f02->IsAuth_codeSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数auth_code！'); } } } } $sp704f02->SetSpbill_create_ip($_SERVER['REMOTE_ADDR']); $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, false, $spada703); $spb34b01 = WxPayResults::Init($spad32e6); self::reportCostTime($sp3ae187, $sp1d20db, $spb34b01); return $spb34b01; } public static function reverse($sp704f02, $spada703 = 6) { $sp3ae187 = 'https://api.mch.weixin.qq.com/secapi/pay/reverse'; if (!$sp704f02->IsOut_trade_noSet() && !$sp704f02->IsTransaction_idSet()) { throw new WxPayException('撤销订单API接口中，参数out_trade_no和transaction_id必须填写一个！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, true, $spada703); $spb34b01 = WxPayResults::Init($spad32e6); self::reportCostTime($sp3ae187, $sp1d20db, $spb34b01); return $spb34b01; } public static function report($sp704f02, $spada703 = 1) { $sp3ae187 = 'https://api.mch.weixin.qq.com/payitil/report'; if (!$sp704f02->IsInterface_urlSet()) { throw new WxPayException('接口URL，缺少必填参数interface_url！'); } if (!$sp704f02->IsReturn_codeSet()) { throw new WxPayException('返回状态码，缺少必填参数return_code！'); } if (!$sp704f02->IsResult_codeSet()) { throw new WxPayException('业务结果，缺少必填参数result_code！'); } if (!$sp704f02->IsUser_ipSet()) { throw new WxPayException('访问接口IP，缺少必填参数user_ip！'); } if (!$sp704f02->IsExecute_time_Set()) { throw new WxPayException('接口耗时，缺少必填参数execute_time_！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetUser_ip($_SERVER['REMOTE_ADDR']); $sp704f02->SetTime(date('YmdHis')); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, false, $spada703); return $spad32e6; } public static function bizpayurl($sp704f02, $spada703 = 6) { if (!$sp704f02->IsProduct_idSet()) { throw new WxPayException('生成二维码，缺少必填参数product_id！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetTime_stamp(time()); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); return $sp704f02->GetValues(); } public static function shorturl($sp704f02, $spada703 = 6) { $sp3ae187 = 'https://api.mch.weixin.qq.com/tools/shorturl'; if (!$sp704f02->IsLong_urlSet()) { throw new WxPayException('需要转换的URL，签名用原串，传输需URL encode！'); } $sp704f02->SetAppid(WxPayConfig::APPID); $sp704f02->SetMch_id(WxPayConfig::MCHID); $sp704f02->SetNonce_str(self::getNonceStr()); $sp704f02->SetSign(); $spbbfd2d = $sp704f02->ToXml(); $sp1d20db = self::getMillisecond(); $spad32e6 = self::postXmlCurl($spbbfd2d, $sp3ae187, false, $spada703); $spb34b01 = WxPayResults::Init($spad32e6); self::reportCostTime($sp3ae187, $sp1d20db, $spb34b01); return $spb34b01; } public static function notify($sp23e433, &$sp2af324) { $spbbfd2d = file_get_contents('php://input'); try { $spb34b01 = WxPayResults::Init($spbbfd2d); } catch (WxPayException $spece20f) { $sp2af324 = $spece20f->errorMessage(); return false; } return call_user_func($sp23e433, $spb34b01); } public static function getNonceStr($sp5e0ffd = 32) { $sp65efa9 = 'abcdefghijklmnopqrstuvwxyz0123456789'; $sp3868ff = ''; for ($spb75665 = 0; $spb75665 < $sp5e0ffd; $spb75665++) { $sp3868ff .= substr($sp65efa9, mt_rand(0, strlen($sp65efa9) - 1), 1); } return $sp3868ff; } public static function replyNotify($spbbfd2d) { echo $spbbfd2d; } private static function reportCostTime($sp3ae187, $sp1d20db, $spcb019a) { if (WxPayConfig::REPORT_LEVENL == 0) { return; } if (WxPayConfig::REPORT_LEVENL == 1 && array_key_exists('return_code', $spcb019a) && $spcb019a['return_code'] == 'SUCCESS' && array_key_exists('result_code', $spcb019a) && $spcb019a['result_code'] == 'SUCCESS') { return; } $sp70e728 = self::getMillisecond(); $sp07cdbd = new WxPayReport(); $sp07cdbd->SetInterface_url($sp3ae187); $sp07cdbd->SetExecute_time_($sp70e728 - $sp1d20db); if (array_key_exists('return_code', $spcb019a)) { $sp07cdbd->SetReturn_code($spcb019a['return_code']); } if (array_key_exists('return_msg', $spcb019a)) { $sp07cdbd->SetReturn_msg($spcb019a['return_msg']); } if (array_key_exists('result_code', $spcb019a)) { $sp07cdbd->SetResult_code($spcb019a['result_code']); } if (array_key_exists('err_code', $spcb019a)) { $sp07cdbd->SetErr_code($spcb019a['err_code']); } if (array_key_exists('err_code_des', $spcb019a)) { $sp07cdbd->SetErr_code_des($spcb019a['err_code_des']); } if (array_key_exists('out_trade_no', $spcb019a)) { $sp07cdbd->SetOut_trade_no($spcb019a['out_trade_no']); } if (array_key_exists('device_info', $spcb019a)) { $sp07cdbd->SetDevice_info($spcb019a['device_info']); } try { self::report($sp07cdbd); } catch (WxPayException $spece20f) { } } private static function postXmlCurl($spbbfd2d, $sp3ae187, $sp5e6544 = false, $spac02f4 = 30) { $sp4e752c = curl_init(); curl_setopt($sp4e752c, CURLOPT_TIMEOUT, $spac02f4); if (WxPayConfig::CURL_PROXY_HOST != '0.0.0.0' && WxPayConfig::CURL_PROXY_PORT != 0) { curl_setopt($sp4e752c, CURLOPT_PROXY, WxPayConfig::CURL_PROXY_HOST); curl_setopt($sp4e752c, CURLOPT_PROXYPORT, WxPayConfig::CURL_PROXY_PORT); } curl_setopt($sp4e752c, CURLOPT_URL, $sp3ae187); curl_setopt($sp4e752c, CURLOPT_SSL_VERIFYPEER, TRUE); curl_setopt($sp4e752c, CURLOPT_SSL_VERIFYHOST, 2); curl_setopt($sp4e752c, CURLOPT_HEADER, FALSE); curl_setopt($sp4e752c, CURLOPT_RETURNTRANSFER, TRUE); if ($sp5e6544 == true) { curl_setopt($sp4e752c, CURLOPT_SSLCERTTYPE, 'PEM'); curl_setopt($sp4e752c, CURLOPT_SSLCERT, WxPayConfig::SSLCERT_PATH); curl_setopt($sp4e752c, CURLOPT_SSLKEYTYPE, 'PEM'); curl_setopt($sp4e752c, CURLOPT_SSLKEY, WxPayConfig::SSLKEY_PATH); } else { curl_setopt($sp4e752c, CURLOPT_SSL_VERIFYPEER, false); } curl_setopt($sp4e752c, CURLOPT_POST, TRUE); curl_setopt($sp4e752c, CURLOPT_POSTFIELDS, $spbbfd2d); $spcb019a = curl_exec($sp4e752c); if ($spcb019a) { curl_close($sp4e752c); return $spcb019a; } else { $sp095a96 = curl_errno($sp4e752c); \WxLog::error('WxPat.Api.postXmlCurl Error: ' . curl_error($sp4e752c)); curl_close($sp4e752c); throw new WxPayException("curl出错，错误码: {$sp095a96}"); } } private static function getMillisecond() { $spc2ab8d = explode(' ', microtime()); $spc2ab8d = $spc2ab8d[1] . $spc2ab8d[0] * 1000; $spda8686 = explode('.', $spc2ab8d); $spc2ab8d = $spda8686[0]; return $spc2ab8d; } }