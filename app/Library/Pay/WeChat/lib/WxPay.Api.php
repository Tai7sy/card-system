<?php
require_once 'WxPay.Exception.php'; require_once 'WxPay.Config.php'; require_once 'WxPay.Data.php'; class WxPayApi { public static function unifiedOrder($spe4b05c, $sp0fc8f7 = 6) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/pay/unifiedorder'; if (!$spe4b05c->IsOut_trade_noSet()) { throw new WxPayException('缺少统一支付接口必填参数out_trade_no！'); } else { if (!$spe4b05c->IsBodySet()) { throw new WxPayException('缺少统一支付接口必填参数body！'); } else { if (!$spe4b05c->IsTotal_feeSet()) { throw new WxPayException('缺少统一支付接口必填参数total_fee！'); } else { if (!$spe4b05c->IsTrade_typeSet()) { throw new WxPayException('缺少统一支付接口必填参数trade_type！'); } } } } if ($spe4b05c->GetTrade_type() == 'JSAPI' && !$spe4b05c->IsOpenidSet()) { throw new WxPayException('统一支付接口中，缺少必填参数openid！trade_type为JSAPI时，openid为必填参数！'); } if ($spe4b05c->GetTrade_type() == 'NATIVE' && !$spe4b05c->IsProduct_idSet()) { throw new WxPayException('统一支付接口中，缺少必填参数product_id！trade_type为JSAPI时，product_id为必填参数！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); if (@WxPayConfig::SUBAPPID) { $spe4b05c->SetSub_appid(WxPayConfig::SUBAPPID); } if (@WxPayConfig::SUBMCHID) { $spe4b05c->SetSub_mch_id(WxPayConfig::SUBMCHID); } $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, false, $sp0fc8f7); $spbbda25 = WxPayResults::Init($sp3ac4e3); self::reportCostTime($sp3db1b2, $sp3fbfb2, $spbbda25); return $spbbda25; } public static function orderQuery($spe4b05c, $sp0fc8f7 = 6) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/pay/orderquery'; if (!$spe4b05c->IsOut_trade_noSet() && !$spe4b05c->IsTransaction_idSet()) { throw new WxPayException('订单查询接口中，out_trade_no、transaction_id至少填一个！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); if (@WxPayConfig::SUBMCHID) { $spe4b05c->SetSub_mch_id(WxPayConfig::SUBMCHID); } $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, false, $sp0fc8f7); $spbbda25 = WxPayResults::Init($sp3ac4e3); self::reportCostTime($sp3db1b2, $sp3fbfb2, $spbbda25); return $spbbda25; } public static function closeOrder($spe4b05c, $sp0fc8f7 = 6) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/pay/closeorder'; if (!$spe4b05c->IsOut_trade_noSet()) { throw new WxPayException('订单查询接口中，out_trade_no必填！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, false, $sp0fc8f7); $spbbda25 = WxPayResults::Init($sp3ac4e3); self::reportCostTime($sp3db1b2, $sp3fbfb2, $spbbda25); return $spbbda25; } public static function refund($spe4b05c, $sp0fc8f7 = 6) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/secapi/pay/refund'; if (!$spe4b05c->IsOut_trade_noSet() && !$spe4b05c->IsTransaction_idSet()) { throw new WxPayException('退款申请接口中，out_trade_no、transaction_id至少填一个！'); } else { if (!$spe4b05c->IsOut_refund_noSet()) { throw new WxPayException('退款申请接口中，缺少必填参数out_refund_no！'); } else { if (!$spe4b05c->IsTotal_feeSet()) { throw new WxPayException('退款申请接口中，缺少必填参数total_fee！'); } else { if (!$spe4b05c->IsRefund_feeSet()) { throw new WxPayException('退款申请接口中，缺少必填参数refund_fee！'); } else { if (!$spe4b05c->IsOp_user_idSet()) { throw new WxPayException('退款申请接口中，缺少必填参数op_user_id！'); } } } } } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, true, $sp0fc8f7); $spbbda25 = WxPayResults::Init($sp3ac4e3); self::reportCostTime($sp3db1b2, $sp3fbfb2, $spbbda25); return $spbbda25; } public static function refundQuery($spe4b05c, $sp0fc8f7 = 6) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/pay/refundquery'; if (!$spe4b05c->IsOut_refund_noSet() && !$spe4b05c->IsOut_trade_noSet() && !$spe4b05c->IsTransaction_idSet() && !$spe4b05c->IsRefund_idSet()) { throw new WxPayException('退款查询接口中，out_refund_no、out_trade_no、transaction_id、refund_id四个参数必填一个！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, false, $sp0fc8f7); $spbbda25 = WxPayResults::Init($sp3ac4e3); self::reportCostTime($sp3db1b2, $sp3fbfb2, $spbbda25); return $spbbda25; } public static function downloadBill($spe4b05c, $sp0fc8f7 = 6) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/pay/downloadbill'; if (!$spe4b05c->IsBill_dateSet()) { throw new WxPayException('对账单接口中，缺少必填参数bill_date！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, false, $sp0fc8f7); if (substr($sp3ac4e3, 0, 5) == '<xml>') { return ''; } return $sp3ac4e3; } public static function micropay($spe4b05c, $sp0fc8f7 = 10) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/pay/micropay'; if (!$spe4b05c->IsBodySet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数body！'); } else { if (!$spe4b05c->IsOut_trade_noSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数out_trade_no！'); } else { if (!$spe4b05c->IsTotal_feeSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数total_fee！'); } else { if (!$spe4b05c->IsAuth_codeSet()) { throw new WxPayException('提交被扫支付API接口中，缺少必填参数auth_code！'); } } } } $spe4b05c->SetSpbill_create_ip($_SERVER['REMOTE_ADDR']); $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, false, $sp0fc8f7); $spbbda25 = WxPayResults::Init($sp3ac4e3); self::reportCostTime($sp3db1b2, $sp3fbfb2, $spbbda25); return $spbbda25; } public static function reverse($spe4b05c, $sp0fc8f7 = 6) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/secapi/pay/reverse'; if (!$spe4b05c->IsOut_trade_noSet() && !$spe4b05c->IsTransaction_idSet()) { throw new WxPayException('撤销订单API接口中，参数out_trade_no和transaction_id必须填写一个！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, true, $sp0fc8f7); $spbbda25 = WxPayResults::Init($sp3ac4e3); self::reportCostTime($sp3db1b2, $sp3fbfb2, $spbbda25); return $spbbda25; } public static function report($spe4b05c, $sp0fc8f7 = 1) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/payitil/report'; if (!$spe4b05c->IsInterface_urlSet()) { throw new WxPayException('接口URL，缺少必填参数interface_url！'); } if (!$spe4b05c->IsReturn_codeSet()) { throw new WxPayException('返回状态码，缺少必填参数return_code！'); } if (!$spe4b05c->IsResult_codeSet()) { throw new WxPayException('业务结果，缺少必填参数result_code！'); } if (!$spe4b05c->IsUser_ipSet()) { throw new WxPayException('访问接口IP，缺少必填参数user_ip！'); } if (!$spe4b05c->IsExecute_time_Set()) { throw new WxPayException('接口耗时，缺少必填参数execute_time_！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetUser_ip($_SERVER['REMOTE_ADDR']); $spe4b05c->SetTime(date('YmdHis')); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, false, $sp0fc8f7); return $sp3ac4e3; } public static function bizpayurl($spe4b05c, $sp0fc8f7 = 6) { if (!$spe4b05c->IsProduct_idSet()) { throw new WxPayException('生成二维码，缺少必填参数product_id！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetTime_stamp(time()); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); return $spe4b05c->GetValues(); } public static function shorturl($spe4b05c, $sp0fc8f7 = 6) { $sp3db1b2 = 'https://api.mch.weixin.qq.com/tools/shorturl'; if (!$spe4b05c->IsLong_urlSet()) { throw new WxPayException('需要转换的URL，签名用原串，传输需URL encode！'); } $spe4b05c->SetAppid(WxPayConfig::APPID); $spe4b05c->SetMch_id(WxPayConfig::MCHID); $spe4b05c->SetNonce_str(self::getNonceStr()); $spe4b05c->SetSign(); $sp377bc6 = $spe4b05c->ToXml(); $sp3fbfb2 = self::getMillisecond(); $sp3ac4e3 = self::postXmlCurl($sp377bc6, $sp3db1b2, false, $sp0fc8f7); $spbbda25 = WxPayResults::Init($sp3ac4e3); self::reportCostTime($sp3db1b2, $sp3fbfb2, $spbbda25); return $spbbda25; } public static function notify($sp1bf529, &$sp093e23) { $sp377bc6 = file_get_contents('php://input'); try { $spbbda25 = WxPayResults::Init($sp377bc6); } catch (WxPayException $sp81eee8) { $sp093e23 = $sp81eee8->errorMessage(); return false; } return call_user_func($sp1bf529, $spbbda25); } public static function getNonceStr($sp17d4b4 = 32) { $spb32c39 = 'abcdefghijklmnopqrstuvwxyz0123456789'; $sp72201b = ''; for ($spea591f = 0; $spea591f < $sp17d4b4; $spea591f++) { $sp72201b .= substr($spb32c39, mt_rand(0, strlen($spb32c39) - 1), 1); } return $sp72201b; } public static function replyNotify($sp377bc6) { echo $sp377bc6; } private static function reportCostTime($sp3db1b2, $sp3fbfb2, $sp5aa598) { if (WxPayConfig::REPORT_LEVENL == 0) { return; } if (WxPayConfig::REPORT_LEVENL == 1 && array_key_exists('return_code', $sp5aa598) && $sp5aa598['return_code'] == 'SUCCESS' && array_key_exists('result_code', $sp5aa598) && $sp5aa598['result_code'] == 'SUCCESS') { return; } $sp61d9d8 = self::getMillisecond(); $sp266aba = new WxPayReport(); $sp266aba->SetInterface_url($sp3db1b2); $sp266aba->SetExecute_time_($sp61d9d8 - $sp3fbfb2); if (array_key_exists('return_code', $sp5aa598)) { $sp266aba->SetReturn_code($sp5aa598['return_code']); } if (array_key_exists('return_msg', $sp5aa598)) { $sp266aba->SetReturn_msg($sp5aa598['return_msg']); } if (array_key_exists('result_code', $sp5aa598)) { $sp266aba->SetResult_code($sp5aa598['result_code']); } if (array_key_exists('err_code', $sp5aa598)) { $sp266aba->SetErr_code($sp5aa598['err_code']); } if (array_key_exists('err_code_des', $sp5aa598)) { $sp266aba->SetErr_code_des($sp5aa598['err_code_des']); } if (array_key_exists('out_trade_no', $sp5aa598)) { $sp266aba->SetOut_trade_no($sp5aa598['out_trade_no']); } if (array_key_exists('device_info', $sp5aa598)) { $sp266aba->SetDevice_info($sp5aa598['device_info']); } try { self::report($sp266aba); } catch (WxPayException $sp81eee8) { } } private static function postXmlCurl($sp377bc6, $sp3db1b2, $sp437a89 = false, $spdffe48 = 30) { $sp9b0943 = curl_init(); curl_setopt($sp9b0943, CURLOPT_TIMEOUT, $spdffe48); if (WxPayConfig::CURL_PROXY_HOST != '0.0.0.0' && WxPayConfig::CURL_PROXY_PORT != 0) { curl_setopt($sp9b0943, CURLOPT_PROXY, WxPayConfig::CURL_PROXY_HOST); curl_setopt($sp9b0943, CURLOPT_PROXYPORT, WxPayConfig::CURL_PROXY_PORT); } curl_setopt($sp9b0943, CURLOPT_URL, $sp3db1b2); curl_setopt($sp9b0943, CURLOPT_SSL_VERIFYPEER, TRUE); curl_setopt($sp9b0943, CURLOPT_SSL_VERIFYHOST, 2); curl_setopt($sp9b0943, CURLOPT_HEADER, FALSE); curl_setopt($sp9b0943, CURLOPT_RETURNTRANSFER, TRUE); if ($sp437a89 == true) { curl_setopt($sp9b0943, CURLOPT_SSLCERTTYPE, 'PEM'); curl_setopt($sp9b0943, CURLOPT_SSLCERT, WxPayConfig::SSLCERT_PATH); curl_setopt($sp9b0943, CURLOPT_SSLKEYTYPE, 'PEM'); curl_setopt($sp9b0943, CURLOPT_SSLKEY, WxPayConfig::SSLKEY_PATH); } else { curl_setopt($sp9b0943, CURLOPT_SSL_VERIFYPEER, false); } curl_setopt($sp9b0943, CURLOPT_POST, TRUE); curl_setopt($sp9b0943, CURLOPT_POSTFIELDS, $sp377bc6); $sp5aa598 = curl_exec($sp9b0943); if ($sp5aa598) { curl_close($sp9b0943); return $sp5aa598; } else { $sp13aa4d = curl_errno($sp9b0943); \WxLog::error('WxPat.Api.postXmlCurl Error: ' . curl_error($sp9b0943)); curl_close($sp9b0943); throw new WxPayException("curl出错，错误码: {$sp13aa4d}"); } } private static function getMillisecond() { $sp1e10f1 = explode(' ', microtime()); $sp1e10f1 = $sp1e10f1[1] . $sp1e10f1[0] * 1000; $sp8eda8f = explode('.', $sp1e10f1); $sp1e10f1 = $sp8eda8f[0]; return $sp1e10f1; } }