<?php
class HttpClient { var $host; var $port; var $path; var $method; var $postdata = ''; var $cookies = array(); var $referer; var $accept = 'text/xml,application/xml,application/xhtml+xml,text/html,text/plain,image/png,image/jpeg,image/gif,*/*'; var $accept_encoding = 'gzip'; var $accept_language = 'en-us'; var $user_agent = 'Incutio HttpClient v0.9'; var $timeout = 20; var $use_gzip = true; var $persist_cookies = true; var $persist_referers = true; var $debug = false; var $handle_redirects = true; var $max_redirects = 5; var $headers_only = false; var $username; var $password; var $status; var $headers = array(); var $content = ''; var $errormsg; var $redirect_count = 0; var $cookie_host = ''; function __construct($spff6fbd, $sp02c9dd = 80) { $this->host = $spff6fbd; $this->port = $sp02c9dd; } function get($sp14400e, $sp6fd648 = false) { $this->path = $sp14400e; $this->method = 'GET'; if ($sp6fd648) { $this->path .= '?' . $this->buildQueryString($sp6fd648); } return $this->doRequest(); } function post($sp14400e, $sp6fd648) { $this->path = $sp14400e; $this->method = 'POST'; $this->postdata = $this->buildQueryString($sp6fd648); return $this->doRequest(); } function buildQueryString($sp6fd648) { $sp1526a7 = ''; if (is_array($sp6fd648)) { foreach ($sp6fd648 as $spf1241f => $sp91e29b) { if (is_array($sp91e29b)) { foreach ($sp91e29b as $sp385ee0) { $sp1526a7 .= urlencode($spf1241f) . '=' . $sp385ee0 . '&'; } } else { $sp1526a7 .= urlencode($spf1241f) . '=' . $sp91e29b . '&'; } } $sp1526a7 = substr($sp1526a7, 0, -1); } else { $sp1526a7 = $sp6fd648; } return $sp1526a7; } function doRequest() { if (!($sp26c226 = @fsockopen($this->host, $this->port, $spdef632, $sp89adb6, $this->timeout))) { switch ($spdef632) { case -3: $this->errormsg = 'Socket creation failed (-3)'; break; case -4: $this->errormsg = 'DNS lookup failure (-4)'; break; case -5: $this->errormsg = 'Connection refused or timed out (-5)'; break; default: $this->errormsg = 'Connection failed (' . $spdef632 . ')'; $this->errormsg .= ' ' . $sp89adb6; $this->debug($this->errormsg); } return false; } socket_set_timeout($sp26c226, $this->timeout); $spf066f3 = $this->buildRequest(); $this->debug('Request', $spf066f3); fwrite($sp26c226, $spf066f3); $this->headers = array(); $this->content = ''; $this->errormsg = ''; $spc7561e = true; $sp02667e = true; while (!feof($sp26c226)) { $spb0a0bf = fgets($sp26c226, 4096); if ($sp02667e) { $sp02667e = false; if (!preg_match('/HTTP\\/(\\d\\.\\d)\\s*(\\d+)\\s*(.*)/', $spb0a0bf, $spb4e455)) { $this->errormsg = 'Status code line invalid: ' . htmlentities($spb0a0bf); $this->debug($this->errormsg); return false; } $this->status = $spb4e455[2]; $this->debug(trim($spb0a0bf)); continue; } if ($spc7561e) { if (trim($spb0a0bf) == '') { $spc7561e = false; $this->debug('Received Headers', $this->headers); if ($this->headers_only) { break; } continue; } if (!preg_match('/([^:]+):\\s*(.*)/', $spb0a0bf, $spb4e455)) { continue; } $spf1241f = strtolower(trim($spb4e455[1])); $sp91e29b = trim($spb4e455[2]); if (isset($this->headers[$spf1241f])) { if (is_array($this->headers[$spf1241f])) { $this->headers[$spf1241f][] = $sp91e29b; } else { $this->headers[$spf1241f] = array($this->headers[$spf1241f], $sp91e29b); } } else { $this->headers[$spf1241f] = $sp91e29b; } continue; } $this->content .= $spb0a0bf; } fclose($sp26c226); if (isset($this->headers['content-encoding']) && $this->headers['content-encoding'] == 'gzip') { $this->debug('Content is gzip encoded, unzipping it'); $this->content = substr($this->content, 10); $this->content = gzinflate($this->content); } if ($this->persist_cookies && isset($this->headers['set-cookie']) && $this->host == $this->cookie_host) { $spaa0a5d = $this->headers['set-cookie']; if (!is_array($spaa0a5d)) { $spaa0a5d = array($spaa0a5d); } foreach ($spaa0a5d as $sp5ee4b6) { if (preg_match('/([^=]+)=([^;]+);/', $sp5ee4b6, $spb4e455)) { $this->cookies[$spb4e455[1]] = $spb4e455[2]; } } $this->cookie_host = $this->host; } if ($this->persist_referers) { $this->debug('Persisting referer: ' . $this->getRequestURL()); $this->referer = $this->getRequestURL(); } if ($this->handle_redirects) { if (++$this->redirect_count >= $this->max_redirects) { $this->errormsg = 'Number of redirects exceeded maximum (' . $this->max_redirects . ')'; $this->debug($this->errormsg); $this->redirect_count = 0; return false; } $spb06b4e = isset($this->headers['location']) ? $this->headers['location'] : ''; $spe663fc = isset($this->headers['uri']) ? $this->headers['uri'] : ''; if ($spb06b4e || $spe663fc) { $spd2457c = parse_url($spb06b4e . $spe663fc); return $this->get($spd2457c['path']); } } return true; } function buildRequest() { $spc69671 = array(); $spc69671[] = "{$this->method} {$this->path} HTTP/1.0"; $spc69671[] = "Host: {$this->host}"; $spc69671[] = "User-Agent: {$this->user_agent}"; $spc69671[] = "Accept: {$this->accept}"; if ($this->use_gzip) { $spc69671[] = "Accept-encoding: {$this->accept_encoding}"; } $spc69671[] = "Accept-language: {$this->accept_language}"; if ($this->referer) { $spc69671[] = "Referer: {$this->referer}"; } if ($this->cookies) { $sp5ee4b6 = 'Cookie: '; foreach ($this->cookies as $spf1241f => $sp8b9401) { $sp5ee4b6 .= "{$spf1241f}={$sp8b9401}; "; } $spc69671[] = $sp5ee4b6; } if ($this->username && $this->password) { $spc69671[] = 'Authorization: BASIC ' . base64_encode($this->username . ':' . $this->password); } if ($this->postdata) { $spc69671[] = 'Content-Type: application/x-www-form-urlencoded'; $spc69671[] = 'Content-Length: ' . strlen($this->postdata); } $spf066f3 = implode('
', $spc69671) . '

' . $this->postdata; return $spf066f3; } function getStatus() { return $this->status; } function getContent() { return $this->content; } function getHeaders() { return $this->headers; } function getHeader($sp06401d) { $sp06401d = strtolower($sp06401d); if (isset($this->headers[$sp06401d])) { return $this->headers[$sp06401d]; } else { return false; } } function getError() { return $this->errormsg; } function getCookies() { return $this->cookies; } function getRequestURL() { $spd2457c = 'http://' . $this->host; if ($this->port != 80) { $spd2457c .= ':' . $this->port; } $spd2457c .= $this->path; return $spd2457c; } function setUserAgent($sp29fcf1) { $this->user_agent = $sp29fcf1; } function setAuthorization($sp507ab9, $sp8f68ce) { $this->username = $sp507ab9; $this->password = $sp8f68ce; } function setCookies($spdc17ed) { $this->cookies = $spdc17ed; } function useGzip($spf647c5) { $this->use_gzip = $spf647c5; } function setPersistCookies($spf647c5) { $this->persist_cookies = $spf647c5; } function setPersistReferers($spf647c5) { $this->persist_referers = $spf647c5; } function setHandleRedirects($spf647c5) { $this->handle_redirects = $spf647c5; } function setMaxRedirects($sp8a4503) { $this->max_redirects = $sp8a4503; } function setHeadersOnly($spf647c5) { $this->headers_only = $spf647c5; } function setDebug($spf647c5) { $this->debug = $spf647c5; } function quickGet($spd2457c) { $sp9860c8 = parse_url($spd2457c); $spff6fbd = $sp9860c8['host']; $sp02c9dd = isset($sp9860c8['port']) ? $sp9860c8['port'] : 80; $sp14400e = isset($sp9860c8['path']) ? $sp9860c8['path'] : '/'; if (isset($sp9860c8['query'])) { $sp14400e .= '?' . $sp9860c8['query']; } $sp7854df = new HttpClient($spff6fbd, $sp02c9dd); if (!$sp7854df->get($sp14400e)) { return false; } else { return $sp7854df->getContent(); } } static function quickPost($spd2457c, $sp6fd648) { $sp9860c8 = parse_url($spd2457c); $spff6fbd = $sp9860c8['host']; $sp02c9dd = isset($sp9860c8['port']) ? $sp9860c8['port'] : 80; $sp14400e = isset($sp9860c8['path']) ? $sp9860c8['path'] : '/'; $sp7854df = new HttpClient($spff6fbd, $sp02c9dd); if (!$sp7854df->post($sp14400e, $sp6fd648)) { return false; } else { return $sp7854df->getContent(); } } function debug($sp417133, $sp6d2e44 = false) { if ($this->debug) { print '<div style="border: 1px solid red; padding: 0.5em; margin: 0.5em;"><strong>HttpClient Debug:</strong> ' . $sp417133; if ($sp6d2e44) { ob_start(); print_r($sp6d2e44); $sp91a581 = htmlentities(ob_get_contents()); ob_end_clean(); print '<pre>' . $sp91a581 . '</pre>'; } print '</div>'; } } }