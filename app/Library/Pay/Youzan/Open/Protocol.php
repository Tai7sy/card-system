<?php
namespace App\Library\Pay\Youzan\Open; class Protocol { const SIGN_KEY = 'sign'; const VERSION_KEY = 'v'; const APP_ID_KEY = 'app_id'; const METHOD_KEY = 'method'; const FORMAT_KEY = 'format'; const TOKEN_KEY = 'access_token'; const TIMESTAMP_KEY = 'timestamp'; const SIGN_METHOD_KEY = 'sign_method'; const ALLOWED_DEVIATE_SECONDS = 600; const ERR_SYSTEM = -1; const ERR_INVALID_APP_ID = 40001; const ERR_INVALID_APP = 40002; const ERR_INVALID_TIMESTAMP = 40003; const ERR_EMPTY_SIGNATURE = 40004; const ERR_INVALID_SIGNATURE = 40005; const ERR_INVALID_METHOD_NAME = 40006; const ERR_INVALID_METHOD = 40007; const ERR_INVALID_TEAM = 40008; const ERR_PARAMETER = 41000; const ERR_LOGIC = 50000; public static function sign($spe2f998, $spc0e525, $spd0c59e = 'md5') { if (!is_array($spc0e525)) { $spc0e525 = array(); } ksort($spc0e525); $sp10f288 = ''; foreach ($spc0e525 as $sp17f3a7 => $sp75c248) { $sp10f288 .= $sp17f3a7 . $sp75c248; } return self::hash($spd0c59e, $spe2f998 . $sp10f288 . $spe2f998); } private static function hash($spd0c59e, $sp10f288) { switch ($spd0c59e) { case 'md5': default: $sp0727bd = md5($sp10f288); break; } return $sp0727bd; } public static function allowedSignMethods() { return array('md5'); } public static function allowedFormat() { return array('json'); } }