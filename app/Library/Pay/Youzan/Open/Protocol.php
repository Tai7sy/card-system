<?php
namespace App\Library\Pay\Youzan\Open; class Protocol { const SIGN_KEY = 'sign'; const VERSION_KEY = 'v'; const APP_ID_KEY = 'app_id'; const METHOD_KEY = 'method'; const FORMAT_KEY = 'format'; const TOKEN_KEY = 'access_token'; const TIMESTAMP_KEY = 'timestamp'; const SIGN_METHOD_KEY = 'sign_method'; const ALLOWED_DEVIATE_SECONDS = 600; const ERR_SYSTEM = -1; const ERR_INVALID_APP_ID = 40001; const ERR_INVALID_APP = 40002; const ERR_INVALID_TIMESTAMP = 40003; const ERR_EMPTY_SIGNATURE = 40004; const ERR_INVALID_SIGNATURE = 40005; const ERR_INVALID_METHOD_NAME = 40006; const ERR_INVALID_METHOD = 40007; const ERR_INVALID_TEAM = 40008; const ERR_PARAMETER = 41000; const ERR_LOGIC = 50000; public static function sign($sp07a2eb, $spa26894, $sp2e8ea8 = 'md5') { if (!is_array($spa26894)) { $spa26894 = array(); } ksort($spa26894); $spd3e572 = ''; foreach ($spa26894 as $spce2336 => $sp39a929) { $spd3e572 .= $spce2336 . $sp39a929; } return self::hash($sp2e8ea8, $sp07a2eb . $spd3e572 . $sp07a2eb); } private static function hash($sp2e8ea8, $spd3e572) { switch ($sp2e8ea8) { case 'md5': default: $sp065e5f = md5($spd3e572); break; } return $sp065e5f; } public static function allowedSignMethods() { return array('md5'); } public static function allowedFormat() { return array('json'); } }