<?php
namespace App\Library\Pay\QPay; use App\Library\Helper; use App\Library\Pay\ApiInterface; use Illuminate\Support\Facades\Log; require_once __DIR__ . '/qpay_mch_sp/qpayMchAPI.class.php'; class Api implements ApiInterface { private $url_notify = ''; public function __construct($sp53f8aa) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $sp53f8aa; } function goPay($spbe80b7, $spa3e681, $sp45f07e, $sp873488, $sp5213ee) { if (!isset($spbe80b7['mch_id']) || !isset($spbe80b7['mch_key'])) { throw new \Exception('请设置 mch_id 和 mch_key'); } $spa26894 = array('out_trade_no' => $spa3e681, 'body' => $sp45f07e, 'device_info' => 'qq_19060', 'fee_type' => 'CNY', 'notify_url' => $this->url_notify, 'spbill_create_ip' => Helper::getIP(), 'total_fee' => $sp5213ee, 'trade_type' => 'NATIVE'); $sp2e3a1b = new \QpayMchAPI('https://qpay.qq.com/cgi-bin/pay/qpay_unified_order.cgi', null, 10); $spf089a0 = $sp2e3a1b->req($spa26894, $spbe80b7); $spbbda25 = \QpayMchUtil::xmlToArray($spf089a0); if (!isset($spbbda25['code_url'])) { Log::error('Pay.QPay.goPay, order_no:' . $spa3e681 . ', error:' . json_encode($spbbda25)); if (isset($spbbda25['err_code_des'])) { throw new \Exception($spbbda25['err_code_des']); } if (isset($spbbda25['return_msg'])) { throw new \Exception($spbbda25['return_msg']); } throw new \Exception('获取支付数据失败'); } header('location: /qrcode/pay/' . $spa3e681 . '/qq?url=' . urlencode($spbbda25['code_url'])); die; } function verify($spbe80b7, $sp04f0f8) { $sp3bce01 = isset($spbe80b7['isNotify']) && $spbe80b7['isNotify']; $sp2e3a1b = new \QpayMchAPI('https://qpay.qq.com/cgi-bin/pay/qpay_order_query.cgi', null, 10); if ($sp3bce01) { $spa26894 = $sp2e3a1b->notify_params(); if (!$sp2e3a1b->notify_verify($spa26894, $spbe80b7)) { echo '<xml><return_code>FAIL</return_code></xml>'; return false; } call_user_func_array($sp04f0f8, array($spa26894['out_trade_no'], $spa26894['total_fee'], $spa26894['transaction_id'])); echo '<xml><return_code>SUCCESS</return_code></xml>'; return true; } else { $spa3e681 = @$spbe80b7['out_trade_no']; $spa26894 = array('out_trade_no' => $spa3e681); $spf089a0 = $sp2e3a1b->req($spa26894, $spbe80b7); $spbbda25 = \QpayMchUtil::xmlToArray($spf089a0); if (!is_array($spbbda25)) { Log::error('Pay.QPay.verify Error, $retXml' . $spf089a0); return false; } if (array_key_exists('trade_state', $spbbda25) && $spbbda25['trade_state'] == 'SUCCESS') { call_user_func_array($sp04f0f8, array($spbbda25['out_trade_no'], $spbbda25['total_fee'], $spbbda25['transaction_id'])); return true; } else { return false; } } } }