<?php
namespace App\Library\Pay\QPay; use App\Library\Helper; use App\Library\Pay\ApiInterface; use Illuminate\Support\Facades\Log; require_once __DIR__ . '/qpay_mch_sp/qpayMchAPI.class.php'; class Api implements ApiInterface { private $url_notify = ''; public function __construct($spe00284) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $spe00284; } function goPay($spc27de0, $spba04f6, $sp9f49de, $sp224c81, $sp6956b3) { if (!isset($spc27de0['mch_id']) || !isset($spc27de0['mch_key'])) { throw new \Exception('请设置 mch_id 和 mch_key'); } $sp3e77f9 = array('out_trade_no' => $spba04f6, 'body' => $sp9f49de, 'device_info' => 'qq_19060', 'fee_type' => 'CNY', 'notify_url' => $this->url_notify, 'spbill_create_ip' => Helper::getIP(), 'total_fee' => $sp6956b3, 'trade_type' => 'NATIVE'); $sp4b1e8a = new \QpayMchAPI('https://qpay.qq.com/cgi-bin/pay/qpay_unified_order.cgi', null, 10); $spb16963 = $sp4b1e8a->req($sp3e77f9, $spc27de0); $spb34b01 = \QpayMchUtil::xmlToArray($spb16963); if (!isset($spb34b01['code_url'])) { Log::error('Pay.QPay.goPay, order_no:' . $spba04f6 . ', error:' . json_encode($spb34b01)); if (isset($spb34b01['err_code_des'])) { throw new \Exception($spb34b01['err_code_des']); } if (isset($spb34b01['return_msg'])) { throw new \Exception($spb34b01['return_msg']); } throw new \Exception('获取支付数据失败'); } header('location: /qrcode/pay/' . $spba04f6 . '/qq?url=' . urlencode($spb34b01['code_url'])); die; } function verify($spc27de0, $sp4294a3) { $spb2acff = isset($spc27de0['isNotify']) && $spc27de0['isNotify']; $sp4b1e8a = new \QpayMchAPI('https://qpay.qq.com/cgi-bin/pay/qpay_order_query.cgi', null, 10); if ($spb2acff) { $sp3e77f9 = $sp4b1e8a->notify_params(); if (!$sp4b1e8a->notify_verify($sp3e77f9, $spc27de0)) { echo '<xml><return_code>FAIL</return_code></xml>'; return false; } call_user_func_array($sp4294a3, array($sp3e77f9['out_trade_no'], $sp3e77f9['total_fee'], $sp3e77f9['transaction_id'])); echo '<xml><return_code>SUCCESS</return_code></xml>'; return true; } else { $spba04f6 = @$spc27de0['out_trade_no']; $sp3e77f9 = array('out_trade_no' => $spba04f6); $spb16963 = $sp4b1e8a->req($sp3e77f9, $spc27de0); $spb34b01 = \QpayMchUtil::xmlToArray($spb16963); if (!is_array($spb34b01)) { Log::error('Pay.QPay.verify Error, $retXml' . $spb16963); return false; } if (array_key_exists('trade_state', $spb34b01) && $spb34b01['trade_state'] == 'SUCCESS') { call_user_func_array($sp4294a3, array($spb34b01['out_trade_no'], $spb34b01['total_fee'], $spb34b01['transaction_id'])); return true; } else { return false; } } } }