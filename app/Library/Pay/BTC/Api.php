<?php
namespace App\Library\Pay\BTC; use App\Library\CurlRequest; use App\Library\Pay\ApiInterface; use Illuminate\Support\Facades\Log; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; public function __construct($sp53f8aa) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $sp53f8aa; $this->url_return = SYS_URL . '/pay/return/' . $sp53f8aa; } function goPay($spbe80b7, $spa3e681, $sp45f07e, $sp873488, $sp5213ee) { $sp2687cc = CurlRequest::get('https://api.blockchain.info/tobtc?currency=CNY&value=' . sprintf('%.2f', $sp5213ee / 100)); if (!$sp2687cc) { Log::error('Pay.BTC.goPay, get price error:' . @$sp2687cc); throw new \Exception('获取BTC价格失败，请联系客服'); } $spa4228a = CurlRequest::get('https://api.blockchain.info/v2/receive?xpub=' . $spbe80b7['xpub'] . '&callback=' . urlencode($this->url_notify . '?secret=' . $spbe80b7['secret']) . '&key=' . $spbe80b7['key']); $spaeabb7 = @json_decode($spa4228a, true); if (!$spaeabb7 || !isset($spaeabb7['address'])) { if ($spaeabb7['description'] === 'Gap between last used address and next address too large. This might make funds inaccessible.') { throw new \Exception('钱包地址到达限制, 请等待之前的用户完成付款'); } Log::error('Pay.BTC.goPay, get address error:' . @$spa4228a); throw new \Exception('获取BTC地址失败，请联系客服'); } $spe174e3 = 'bitcoin:' . $spaeabb7['address'] . '?amount=' . $sp2687cc; if (\App\Order::wherePayTradeNo($spe174e3)->exists()) { throw new \Exception('支付失败, 当前钱包地址重复'); } \App\Order::whereOrderNo($spa3e681)->update(array('pay_trade_no' => $spe174e3)); header('location: /qrcode/pay/' . $spa3e681 . '/btc?url=' . urlencode(json_encode(array('address' => $spaeabb7['address'], 'amount' => $sp2687cc)))); die; } function verify($spbe80b7, $sp04f0f8) { $sp3bce01 = isset($spbe80b7['isNotify']) && $spbe80b7['isNotify']; if ($sp3bce01) { if (@$_GET['secret'] !== $spbe80b7['secret']) { echo 'error'; return false; } if (isset($_GET['confirmations'])) { $sp890c5b = $_GET['address']; $spe174e3 = 'bitcoin:' . $sp890c5b . '?amount=' . rtrim(rtrim(sprintf('%.8f', $_GET['value'] / 100000000.0), '0'), '.'); $sp4f4c0d = \App\Order::wherePayTradeNo($spe174e3)->first(); if (!$sp4f4c0d) { echo 'error'; Log::error('Pay.BTC.verify, cannot find order:' . json_encode(array('url' => $spe174e3, 'params' => $_GET))); return false; } $spd63ffb = $spe174e3; $sp04f0f8($sp4f4c0d->order_no, $sp4f4c0d->paid, $spd63ffb); } echo '*ok*'; return true; } else { return false; } } }