<?php
namespace App\Library\Pay\BTC; use App\Library\CurlRequest; use App\Library\Pay\ApiInterface; use Illuminate\Support\Facades\Log; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; public function __construct($sp3c46ab) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $sp3c46ab; $this->url_return = SYS_URL . '/pay/return/' . $sp3c46ab; } function goPay($sp9d4382, $sp2e47fc, $spd4e90d, $spd0789a, $sp076ec7) { $spad9396 = CurlRequest::get('https://api.blockchain.info/tobtc?currency=CNY&value=' . sprintf('%.2f', $sp076ec7 / 100)); if (!$spad9396) { Log::error('Pay.BTC.goPay, get price error:' . @$spad9396); throw new \Exception('获取BTC价格失败，请联系客服'); } $sp102d6e = CurlRequest::get('https://api.blockchain.info/v2/receive?xpub=' . $sp9d4382['xpub'] . '&callback=' . urlencode($this->url_notify . '?secret=' . $sp9d4382['secret']) . '&key=' . $sp9d4382['key']); $spfb87eb = @json_decode($sp102d6e, true); if (!$spfb87eb || !isset($spfb87eb['address'])) { if ($spfb87eb['description'] === 'Gap between last used address and next address too large. This might make funds inaccessible.') { throw new \Exception('钱包地址到达限制, 请等待之前的用户完成付款'); } Log::error('Pay.BTC.goPay, get address error:' . @$sp102d6e); throw new \Exception('获取BTC地址失败，请联系客服'); } $spa8175a = 'bitcoin:' . $spfb87eb['address'] . '?amount=' . $spad9396; if (\App\Order::wherePayTradeNo($spa8175a)->exists()) { throw new \Exception('支付失败, 当前钱包地址重复'); } \App\Order::whereOrderNo($sp2e47fc)->update(array('pay_trade_no' => $spa8175a)); header('location: /qrcode/pay/' . $sp2e47fc . '/btc?url=' . urlencode(json_encode(array('address' => $spfb87eb['address'], 'amount' => $spad9396)))); die; } function verify($sp9d4382, $sp9a4d97) { $sp7b2182 = isset($sp9d4382['isNotify']) && $sp9d4382['isNotify']; if ($sp7b2182) { if (@$_GET['secret'] !== $sp9d4382['secret']) { echo 'error'; return false; } if (isset($_GET['confirmations'])) { $sp123af1 = $_GET['address']; $spa8175a = 'bitcoin:' . $sp123af1 . '?amount=' . rtrim(rtrim(sprintf('%.8f', $_GET['value'] / 100000000.0), '0'), '.'); $spe0613f = \App\Order::wherePayTradeNo($spa8175a)->first(); if (!$spe0613f) { echo 'error'; Log::error('Pay.BTC.verify, cannot find order:' . json_encode(array('url' => $spa8175a, 'params' => $_GET))); return false; } $spca4fc7 = $spa8175a; $sp9a4d97($spe0613f->order_no, $spe0613f->paid, $spca4fc7); } echo '*ok*'; return true; } else { return false; } } }