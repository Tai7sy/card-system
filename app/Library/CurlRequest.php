<?php
namespace App\Library; use Illuminate\Support\Facades\Log; class CurlRequest { private static function curl($sp3ae187, $sp888af6 = 0, $sp4aa83c = '', $spdf7b97 = array(), $sp8bccc7 = 5, &$spc6c8e8 = false) { if (!isset($spdf7b97['Accept'])) { $spdf7b97['Accept'] = '*/*'; } if (!isset($spdf7b97['Referer'])) { $spdf7b97['Referer'] = $sp3ae187; } if (!isset($spdf7b97['Content-Type'])) { $spdf7b97['Content-Type'] = 'application/x-www-form-urlencoded'; } if (!isset($spdf7b97['User-Agent'])) { $spdf7b97['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'; } if ($spc6c8e8 !== false) { $spdf7b97['Cookie'] = $spc6c8e8; } $sp3c23e5 = array(); foreach ($spdf7b97 as $spee3fdf => $sp3c80c1) { $sp3c23e5[] = $spee3fdf . ': ' . $sp3c80c1; } $sp3c23e5[] = 'Expect:'; $sp4e752c = curl_init(); curl_setopt($sp4e752c, CURLOPT_URL, $sp3ae187); curl_setopt($sp4e752c, CURLOPT_SSL_VERIFYPEER, true); curl_setopt($sp4e752c, CURLOPT_SSL_VERIFYHOST, 2); curl_setopt($sp4e752c, CURLOPT_FOLLOWLOCATION, true); curl_setopt($sp4e752c, CURLOPT_MAXREDIRS, 3); if ($sp888af6 == 1) { curl_setopt($sp4e752c, CURLOPT_CUSTOMREQUEST, 'POST'); curl_setopt($sp4e752c, CURLOPT_POST, 1); if ($sp4aa83c !== '') { curl_setopt($sp4e752c, CURLOPT_POSTFIELDS, $sp4aa83c); curl_setopt($sp4e752c, CURLOPT_POSTREDIR, 3); } } if (defined('MY_PROXY')) { curl_setopt($sp4e752c, CURLOPT_PROXY, MY_PROXY); if (defined('MY_PROXY_PASS')) { curl_setopt($sp4e752c, CURLOPT_PROXYUSERPWD, MY_PROXY_PASS); } } curl_setopt($sp4e752c, CURLOPT_TIMEOUT, $sp8bccc7); curl_setopt($sp4e752c, CURLOPT_CONNECTTIMEOUT, $sp8bccc7); curl_setopt($sp4e752c, CURLOPT_RETURNTRANSFER, 1); curl_setopt($sp4e752c, CURLOPT_HEADER, 1); curl_setopt($sp4e752c, CURLOPT_HTTPHEADER, $sp3c23e5); $spad32e6 = curl_exec($sp4e752c); $sp5ec78e = curl_getinfo($sp4e752c, CURLINFO_HEADER_SIZE); $sp7b1947 = substr($spad32e6, 0, $sp5ec78e); $sp224c81 = substr($spad32e6, $sp5ec78e); curl_close($sp4e752c); if ($spc6c8e8 !== false) { $spdf7b97 = explode('
', $sp7b1947); $sp54e52e = ''; foreach ($spdf7b97 as $sp7b1947) { if (strpos($sp7b1947, 'Set-Cookie') !== false) { if (strpos($sp7b1947, ';') !== false) { $sp54e52e = $sp54e52e . trim(Helper::str_between($sp7b1947, 'Set-Cookie:', ';')) . ';'; } else { $sp54e52e = $sp54e52e . trim(str_replace('Set-Cookie:', '', $sp7b1947)) . ';'; } } } $spc6c8e8 = self::combineCookie($spc6c8e8, $sp54e52e); } return $sp224c81; } public static function get($sp3ae187, $spdf7b97 = array(), $sp8bccc7 = 5, &$spc6c8e8 = false) { return self::curl($sp3ae187, 0, '', $spdf7b97, $sp8bccc7, $spc6c8e8); } public static function post($sp3ae187, $sp4aa83c = '', $spdf7b97 = array(), $sp8bccc7 = 5, &$spc6c8e8 = false) { return self::curl($sp3ae187, 1, $sp4aa83c, $spdf7b97, $sp8bccc7, $spc6c8e8); } public static function combineCookie($sp295f0e, $sp715262) { $sp19cc8a = explode(';', $sp295f0e); $spe9e346 = explode(';', $sp715262); foreach ($sp19cc8a as $spa4e3ce) { if (self::cookieIsExists($spe9e346, self::cookieGetName($spa4e3ce)) == false) { array_push($spe9e346, $spa4e3ce); } } $sp6dee20 = ''; foreach ($spe9e346 as $spa4e3ce) { if (substr($spa4e3ce, -8, 8) != '=deleted' && strlen($spa4e3ce) > 1) { $sp6dee20 .= $spa4e3ce . '; '; } } return substr($sp6dee20, 0, strlen($sp6dee20) - 2); } public static function cookieGetName($sp80fd62) { $spc23fd1 = strpos($sp80fd62, '='); return substr($sp80fd62, 0, $spc23fd1); } public static function cookieGetValue($sp80fd62) { $spc23fd1 = strpos($sp80fd62, '='); $spc63eed = substr($sp80fd62, $spc23fd1 + 1, strlen($sp80fd62) - $spc23fd1); return $spc63eed; } public static function cookieGet($spc6c8e8, $spcc609a, $spf2d562 = false) { $spc6c8e8 = str_replace(' ', '', $spc6c8e8); if (substr($spc6c8e8, -1, 1) != ';') { $spc6c8e8 = ';' . $spc6c8e8 . ';'; } else { $spc6c8e8 = ';' . $spc6c8e8; } $spb07ff0 = Helper::str_between($spc6c8e8, ';' . $spcc609a . '=', ';'); if (!$spf2d562 || $spb07ff0 == '') { return $spb07ff0; } else { return $spcc609a . '=' . $spb07ff0; } } private static function cookieIsExists($spbab9b9, $sp8dc415) { foreach ($spbab9b9 as $spa4e3ce) { if (self::cookieGetName($spa4e3ce) == $sp8dc415) { return true; } } return false; } function test() { $spc63eed = self::combineCookie('a=1;b=2;c=3', 'c=5'); var_dump($spc63eed); } }