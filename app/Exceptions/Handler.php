<?php
namespace App\Exceptions; use App\Library\Helper; use App\Library\Response; use Exception; use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler; use Illuminate\Support\Facades\Log; class Handler extends ExceptionHandler { protected $dontReport = array(); protected $dontFlash = array('password', 'password_confirmation'); public function report(Exception $sp4611be) { parent::report($sp4611be); } private function msg($sp147552, $sp4e57b0, $sp415e3d) { return $sp147552->isXmlHttpRequest() ? response()->json(array('message' => $sp4e57b0), $sp415e3d) : response()->view('errors._', array('code' => $sp415e3d, 'message' => $sp4e57b0), $sp415e3d); } public function render($sp147552, Exception $spbd4f27) { if ($spbd4f27 instanceof \Illuminate\Database\Eloquent\ModelNotFoundException) { return $this->msg($sp147552, trans('exception.resource_not_found'), 404); } elseif ($spbd4f27 instanceof \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException || $spbd4f27 instanceof \Illuminate\Auth\AuthenticationException) { Log::error('Caught a UnauthorizedHttpException', array('exception' => $spbd4f27)); return $this->msg($sp147552, trans('exception.please_login'), 401); } elseif ($spbd4f27 instanceof \Illuminate\Auth\Access\AuthorizationException) { return $this->msg($sp147552, trans('exception.un_authenticated'), 403); } elseif ($spbd4f27 instanceof \Illuminate\Validation\ValidationException) { $sp147552->headers->set('X-Requested-With', 'XMLHttpRequest'); $sp147552->headers->set('Accept', 'application/json'); return parent::render($sp147552, $spbd4f27); } elseif ($spbd4f27 instanceof \Illuminate\Session\TokenMismatchException) { return $this->msg($sp147552, trans('exception.csrf_token_invalid'), 403); } elseif ($spbd4f27 instanceof \Symfony\Component\HttpKernel\Exception\NotFoundHttpException) { return $this->msg($sp147552, trans('exception.not_found'), 404); } elseif ($spbd4f27 instanceof \Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException) { return $this->msg($sp147552, trans('exception.method_not_allowed'), 405); } elseif ($spbd4f27 instanceof \Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException) { return $this->msg($sp147552, trans('exception.service_unavailable'), 503); } elseif ($spbd4f27 instanceof \Symfony\Component\HttpKernel\Exception\HttpException) { $sp7fefa1 = $spbd4f27->getStatusCode() ?? 500; switch ($sp7fefa1) { case 429: return $this->msg($sp147552, trans('exception.too_many_requests'), $sp7fefa1); break; default: Log::error('Caught a UnknownHttpException', array('exception' => $spbd4f27)); return $this->msg($sp147552, trans('exception.service_unavailable'), $sp7fefa1); } } elseif ($spbd4f27 instanceof \Symfony\Component\HttpFoundation\Exception\SuspiciousOperationException) { return $this->msg($sp147552, trans('exception.method_not_allowed'), 405); } Log::error('Uncaught Exception', array('exception' => $spbd4f27, 'method' => $sp147552->method(), 'url' => $sp147552->fullUrl(), 'data' => file_get_contents('php://input'), 'ip' => Helper::getIP() ?? $sp147552->ip(), 'client_ip' => $sp147552->getClientIp(), 'headers' => $sp147552->header())); if (config('app.debug')) { return parent::render($sp147552, $spbd4f27); } else { return $this->msg($sp147552, trans('exception.unknown_error'), 500); } } }