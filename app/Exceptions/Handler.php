<?php
namespace App\Exceptions; use App\Library\Helper; use App\Library\Response; use Exception; use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler; use Illuminate\Support\Facades\Log; class Handler extends ExceptionHandler { protected $dontReport = array(); protected $dontFlash = array('password', 'password_confirmation'); public function report(Exception $spa85eb9) { parent::report($spa85eb9); } private function msg($sp26e527, $spdbd7f3, $sp0f5dbe) { return $sp26e527->isXmlHttpRequest() ? response()->json(array('message' => $spdbd7f3), $sp0f5dbe) : response()->view('errors._', array('code' => $sp0f5dbe, 'message' => $spdbd7f3), $sp0f5dbe); } public function render($sp26e527, Exception $sp7900a2) { if ($sp7900a2 instanceof \Illuminate\Database\Eloquent\ModelNotFoundException) { return $this->msg($sp26e527, trans('exception.resource_not_found'), 404); } elseif ($sp7900a2 instanceof \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException || $sp7900a2 instanceof \Illuminate\Auth\AuthenticationException) { Log::error('Caught a UnauthorizedHttpException', array('exception' => $sp7900a2)); return $this->msg($sp26e527, trans('exception.please_login'), 401); } elseif ($sp7900a2 instanceof \Illuminate\Auth\Access\AuthorizationException) { return $this->msg($sp26e527, trans('exception.un_authenticated'), 403); } elseif ($sp7900a2 instanceof \Illuminate\Validation\ValidationException) { $sp26e527->headers->set('X-Requested-With', 'XMLHttpRequest'); $sp26e527->headers->set('Accept', 'application/json'); return parent::render($sp26e527, $sp7900a2); } elseif ($sp7900a2 instanceof \Illuminate\Session\TokenMismatchException) { return $this->msg($sp26e527, trans('exception.csrf_token_invalid'), 403); } elseif ($sp7900a2 instanceof \Symfony\Component\HttpKernel\Exception\NotFoundHttpException) { return $this->msg($sp26e527, trans('exception.not_found'), 404); } elseif ($sp7900a2 instanceof \Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException) { return $this->msg($sp26e527, trans('exception.method_not_allowed'), 405); } elseif ($sp7900a2 instanceof \Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException) { return $this->msg($sp26e527, trans('exception.service_unavailable'), 503); } elseif ($sp7900a2 instanceof \Symfony\Component\HttpKernel\Exception\HttpException) { $sp2cda1d = $sp7900a2->getStatusCode() ?? 500; switch ($sp2cda1d) { case 429: return $this->msg($sp26e527, trans('exception.too_many_requests'), $sp2cda1d); break; default: Log::error('Caught a UnknownHttpException', array('exception' => $sp7900a2)); return $this->msg($sp26e527, trans('exception.service_unavailable'), $sp2cda1d); } } elseif ($sp7900a2 instanceof \Symfony\Component\HttpFoundation\Exception\SuspiciousOperationException) { return $this->msg($sp26e527, trans('exception.method_not_allowed'), 405); } Log::error('Uncaught Exception', array('exception' => $sp7900a2, 'method' => $sp26e527->method(), 'url' => $sp26e527->fullUrl(), 'data' => file_get_contents('php://input'), 'ip' => Helper::getIP() ?? $sp26e527->ip(), 'client_ip' => $sp26e527->getClientIp(), 'headers' => $sp26e527->header())); if (config('app.debug')) { return parent::render($sp26e527, $sp7900a2); } else { return $this->msg($sp26e527, trans('exception.unknown_error'), 500); } } }