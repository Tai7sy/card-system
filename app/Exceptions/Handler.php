<?php
namespace App\Exceptions; use App\Library\Helper; use App\Library\Response; use Exception; use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler; use Illuminate\Support\Facades\Log; class Handler extends ExceptionHandler { protected $dontReport = array(); protected $dontFlash = array('password', 'password_confirmation'); public function report(Exception $sp9cf6e9) { parent::report($sp9cf6e9); } private function msg($sp62e4cd, $spf12c49, $sp7acd11) { return $sp62e4cd->isXmlHttpRequest() ? response()->json(array('message' => $spf12c49), $sp7acd11) : response()->view('errors._', array('code' => $sp7acd11, 'message' => $spf12c49), $sp7acd11); } public function render($sp62e4cd, Exception $spc22b6c) { if ($spc22b6c instanceof \Illuminate\Database\Eloquent\ModelNotFoundException) { return $this->msg($sp62e4cd, trans('exception.resource_not_found'), 404); } elseif ($spc22b6c instanceof \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException || $spc22b6c instanceof \Illuminate\Auth\AuthenticationException) { Log::error('Caught a UnauthorizedHttpException', array('exception' => $spc22b6c)); return $this->msg($sp62e4cd, trans('exception.please_login'), 401); } elseif ($spc22b6c instanceof \Illuminate\Auth\Access\AuthorizationException) { return $this->msg($sp62e4cd, trans('exception.un_authenticated'), 403); } elseif ($spc22b6c instanceof \Illuminate\Validation\ValidationException) { $sp62e4cd->headers->set('X-Requested-With', 'XMLHttpRequest'); $sp62e4cd->headers->set('Accept', 'application/json'); return parent::render($sp62e4cd, $spc22b6c); } elseif ($spc22b6c instanceof \Illuminate\Session\TokenMismatchException) { return $this->msg($sp62e4cd, trans('exception.csrf_token_invalid'), 403); } elseif ($spc22b6c instanceof \Symfony\Component\HttpKernel\Exception\NotFoundHttpException) { return $this->msg($sp62e4cd, trans('exception.not_found'), 404); } elseif ($spc22b6c instanceof \Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException) { return $this->msg($sp62e4cd, trans('exception.method_not_allowed'), 405); } elseif ($spc22b6c instanceof \Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException) { return $this->msg($sp62e4cd, trans('exception.service_unavailable'), 503); } elseif ($spc22b6c instanceof \Symfony\Component\HttpKernel\Exception\HttpException) { $sp59c9fc = $spc22b6c->getStatusCode() ?? 500; switch ($sp59c9fc) { case 429: return $this->msg($sp62e4cd, trans('exception.too_many_requests'), $sp59c9fc); break; default: Log::error('Caught a UnknownHttpException', array('exception' => $spc22b6c)); return $this->msg($sp62e4cd, trans('exception.service_unavailable'), $sp59c9fc); } } elseif ($spc22b6c instanceof \Symfony\Component\HttpFoundation\Exception\SuspiciousOperationException) { return $this->msg($sp62e4cd, trans('exception.method_not_allowed'), 405); } elseif ($spc22b6c instanceof \ErrorException && starts_with($spc22b6c->getMessage(), 'file_put_contents') && strpos($spc22b6c->getMessage(), 'failed to open stream') !== FALSE) { $sp827c9d = $spc22b6c->getMessage() . '
<br>
<br>请检查目录权限是否正确配置
<br>'; die('[FATAL ERROR] 
<br>' . $sp827c9d); } elseif (get_class($spc22b6c) === 'Exception') { } Log::error('Uncaught Exception', array('exception' => $spc22b6c, 'method' => $sp62e4cd->method(), 'url' => $sp62e4cd->fullUrl(), 'data' => file_get_contents('php://input'), 'ip' => Helper::getIP() ?? $sp62e4cd->ip(), 'client_ip' => $sp62e4cd->getClientIp(), 'headers' => $sp62e4cd->header())); if (config('app.debug')) { return parent::render($sp62e4cd, $spc22b6c); } else { return $this->msg($sp62e4cd, trans('exception.unknown_error'), 500); } } }