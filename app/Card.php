<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } public static function add_cards($sp71c904, $sp52bbb2, $sp8480f1, $sp8d8a6c, $sp2ab3cf, $sp5cdbec) { DB::statement('call add_cards(?,?,?,?,?,?)', array($sp71c904, $sp52bbb2, $sp8480f1, $sp8d8a6c, $sp2ab3cf, (int) $sp5cdbec)); } public static function _trash($sp3b6564) { DB::transaction(function () use($sp3b6564) { $sp8d671a = clone $sp3b6564; $sp8d671a->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp7b4a56) { foreach ($sp7b4a56 as $sp2af20f) { $sp59cabc = \App\Product::where('id', $sp2af20f->product_id)->lockForUpdate()->first(); if ($sp59cabc) { $sp59cabc->count_all -= $sp2af20f->count_left; $sp59cabc->saveOrFail(); } } }); $sp3b6564->delete(); return true; }); } public static function _restore($sp3b6564) { DB::transaction(function () use($sp3b6564) { $sp8d671a = clone $sp3b6564; $sp8d671a->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp7b4a56) { foreach ($sp7b4a56 as $sp2af20f) { $sp59cabc = \App\Product::where('id', $sp2af20f->product_id)->lockForUpdate()->first(); if ($sp59cabc) { $sp59cabc->count_all += $sp2af20f->count_left; $sp59cabc->saveOrFail(); } } }); $sp3b6564->restore(); return true; }); } }