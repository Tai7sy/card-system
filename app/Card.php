<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($sp258cf6, $sp112a12, $sp460df4, $spf66c3d, $sp7c8ced, $sp46a9f0) { DB::statement('call add_cards(?,?,?,?,?,?)', array($sp258cf6, $sp112a12, $sp460df4, $spf66c3d, $sp7c8ced, (int) $sp46a9f0)); } public static function _trash($sp7e6fa3) { DB::transaction(function () use($sp7e6fa3) { $spf10bec = clone $sp7e6fa3; $spf10bec->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp5b0739) { foreach ($sp5b0739 as $sp1d0a77) { $sp1a3ec5 = \App\Product::where('id', $sp1d0a77->product_id)->lockForUpdate()->first(); if ($sp1a3ec5) { $sp1a3ec5->count_all -= $sp1d0a77->count_left; $sp1a3ec5->saveOrFail(); } } }); $sp7e6fa3->delete(); return true; }); } public static function _restore($sp7e6fa3) { DB::transaction(function () use($sp7e6fa3) { $spf10bec = clone $sp7e6fa3; $spf10bec->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp5b0739) { foreach ($sp5b0739 as $sp1d0a77) { $sp1a3ec5 = \App\Product::where('id', $sp1d0a77->product_id)->lockForUpdate()->first(); if ($sp1a3ec5) { $sp1a3ec5->count_all += $sp1d0a77->count_left; $sp1a3ec5->saveOrFail(); } } }); $sp7e6fa3->restore(); return true; }); } }