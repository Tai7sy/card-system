<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($spdad372, $sp5d967e, $sp0fe7ec, $sp31859f, $sp3301fd, $sp0d89d4) { DB::statement('call add_cards(?,?,?,?,?,?)', array($spdad372, $sp5d967e, $sp0fe7ec, $sp31859f, $sp3301fd, (int) $sp0d89d4)); } public static function _trash($sp6cb35e) { DB::transaction(function () use($sp6cb35e) { $spb8b025 = clone $sp6cb35e; $spb8b025->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp1432b9) { foreach ($sp1432b9 as $sp4c126d) { $spe7d79d = \App\Product::where('id', $sp4c126d->product_id)->lockForUpdate()->first(); if ($spe7d79d) { $spe7d79d->count_all -= $sp4c126d->count_left; $spe7d79d->saveOrFail(); } } }); $sp6cb35e->delete(); return true; }); } public static function _restore($sp6cb35e) { DB::transaction(function () use($sp6cb35e) { $spb8b025 = clone $sp6cb35e; $spb8b025->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp1432b9) { foreach ($sp1432b9 as $sp4c126d) { $spe7d79d = \App\Product::where('id', $sp4c126d->product_id)->lockForUpdate()->first(); if ($spe7d79d) { $spe7d79d->count_all += $sp4c126d->count_left; $spe7d79d->saveOrFail(); } } }); $sp6cb35e->restore(); return true; }); } }