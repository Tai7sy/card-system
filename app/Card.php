<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } public static function add_cards($spfa021e, $sp0e30a6, $sp8f5ac7, $sp7a9982, $sp62ca36, $sp518449) { DB::statement('call add_cards(?,?,?,?,?,?)', array($spfa021e, $sp0e30a6, $sp8f5ac7, $sp7a9982, $sp62ca36, (int) $sp518449)); } public static function _trash($sp5786ca) { DB::transaction(function () use($sp5786ca) { $sp654541 = clone $sp5786ca; $sp654541->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp2300d6) { foreach ($sp2300d6 as $sp2fe3cd) { $sp71cb0c = \App\Product::where('id', $sp2fe3cd->product_id)->lockForUpdate()->first(); if ($sp71cb0c) { $sp71cb0c->count_all -= $sp2fe3cd->count_left; $sp71cb0c->saveOrFail(); } } }); $sp5786ca->delete(); return true; }); } public static function _restore($sp5786ca) { DB::transaction(function () use($sp5786ca) { $sp654541 = clone $sp5786ca; $sp654541->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp2300d6) { foreach ($sp2300d6 as $sp2fe3cd) { $sp71cb0c = \App\Product::where('id', $sp2fe3cd->product_id)->lockForUpdate()->first(); if ($sp71cb0c) { $sp71cb0c->count_all += $sp2fe3cd->count_left; $sp71cb0c->saveOrFail(); } } }); $sp5786ca->restore(); return true; }); } }