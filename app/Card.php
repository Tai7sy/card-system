<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($sp134e80, $sp3edfae, $sp0e721b, $spb35169, $spcc54a5, $sp0c80d2) { DB::statement('call add_cards(?,?,?,?,?,?)', array($sp134e80, $sp3edfae, $sp0e721b, $spb35169, $spcc54a5, (int) $sp0c80d2)); } public static function _trash($sp32b0d3) { DB::transaction(function () use($sp32b0d3) { $spb3303f = clone $sp32b0d3; $spb3303f->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp2c48a7) { foreach ($sp2c48a7 as $sp636710) { $sp7eba0d = \App\Product::where('id', $sp636710->product_id)->lockForUpdate()->first(); if ($sp7eba0d) { $sp7eba0d->count_all -= $sp636710->count_left; $sp7eba0d->saveOrFail(); } } }); $sp32b0d3->delete(); return true; }); } public static function _restore($sp32b0d3) { DB::transaction(function () use($sp32b0d3) { $spb3303f = clone $sp32b0d3; $spb3303f->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp2c48a7) { foreach ($sp2c48a7 as $sp636710) { $sp7eba0d = \App\Product::where('id', $sp636710->product_id)->lockForUpdate()->first(); if ($sp7eba0d) { $sp7eba0d->count_all += $sp636710->count_left; $sp7eba0d->saveOrFail(); } } }); $sp32b0d3->restore(); return true; }); } }