<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($sp1e2a07, $sp2fece4, $spc5c8dd, $spd2b17f, $sp3042f3, $sp1e7fb9) { DB::statement('call add_cards(?,?,?,?,?,?)', array($sp1e2a07, $sp2fece4, $spc5c8dd, $spd2b17f, $sp3042f3, (int) $sp1e7fb9)); } public static function _trash($sp61dd0f) { DB::transaction(function () use($sp61dd0f) { $spaa2dfb = clone $sp61dd0f; $spaa2dfb->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp1ebdda) { foreach ($sp1ebdda as $sp73ed3d) { $spae5d03 = \App\Product::where('id', $sp73ed3d->product_id)->lockForUpdate()->first(); if ($spae5d03) { $spae5d03->count_all -= $sp73ed3d->count_left; $spae5d03->saveOrFail(); } } }); $sp61dd0f->delete(); return true; }); } public static function _restore($sp61dd0f) { DB::transaction(function () use($sp61dd0f) { $spaa2dfb = clone $sp61dd0f; $spaa2dfb->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp1ebdda) { foreach ($sp1ebdda as $sp73ed3d) { $spae5d03 = \App\Product::where('id', $sp73ed3d->product_id)->lockForUpdate()->first(); if ($spae5d03) { $spae5d03->count_all += $sp73ed3d->count_left; $spae5d03->saveOrFail(); } } }); $sp61dd0f->restore(); return true; }); } }