<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($sp6738b1, $spb43b27, $sp2add78, $spef96f9, $spe78ea6, $sp644608) { DB::statement('call add_cards(?,?,?,?,?,?)', array($sp6738b1, $spb43b27, $sp2add78, $spef96f9, $spe78ea6, (int) $sp644608)); } public static function _trash($sp40bc20) { DB::transaction(function () use($sp40bc20) { $spb29864 = clone $sp40bc20; $spb29864->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($spce7b49) { foreach ($spce7b49 as $spb0ed4f) { $sp551a82 = \App\Product::where('id', $spb0ed4f->product_id)->lockForUpdate()->first(); if ($sp551a82) { $sp551a82->count_all -= $spb0ed4f->count_left; $sp551a82->saveOrFail(); } } }); $sp40bc20->delete(); return true; }); } public static function _restore($sp40bc20) { DB::transaction(function () use($sp40bc20) { $spb29864 = clone $sp40bc20; $spb29864->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($spce7b49) { foreach ($spce7b49 as $spb0ed4f) { $sp551a82 = \App\Product::where('id', $spb0ed4f->product_id)->lockForUpdate()->first(); if ($sp551a82) { $sp551a82->count_all += $spb0ed4f->count_left; $sp551a82->saveOrFail(); } } }); $sp40bc20->restore(); return true; }); } }