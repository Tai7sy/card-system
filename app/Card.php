<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($spf36aa8, $spc00b16, $sp42feb1, $spf783c8, $sp43fd87, $spfbc663) { DB::statement('call add_cards(?,?,?,?,?,?)', array($spf36aa8, $spc00b16, $sp42feb1, $spf783c8, $sp43fd87, (int) $spfbc663)); } public static function _trash($sp78fbd3) { DB::transaction(function () use($sp78fbd3) { $spf40db3 = clone $sp78fbd3; $spf40db3->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp705be1) { foreach ($sp705be1 as $sp9fc33b) { $sp434ec8 = \App\Product::where('id', $sp9fc33b->product_id)->lockForUpdate()->first(); if ($sp434ec8) { $sp434ec8->count_all -= $sp9fc33b->count_left; $sp434ec8->saveOrFail(); } } }); $sp78fbd3->delete(); return true; }); } public static function _restore($sp78fbd3) { DB::transaction(function () use($sp78fbd3) { $spf40db3 = clone $sp78fbd3; $spf40db3->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp705be1) { foreach ($sp705be1 as $sp9fc33b) { $sp434ec8 = \App\Product::where('id', $sp9fc33b->product_id)->lockForUpdate()->first(); if ($sp434ec8) { $sp434ec8->count_all += $sp9fc33b->count_left; $sp434ec8->saveOrFail(); } } }); $sp78fbd3->restore(); return true; }); } }