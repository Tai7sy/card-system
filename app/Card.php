<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($sp7aa9af, $sp89bb44, $sp22f15e, $spaa7124, $sp30a549, $sp4c59e7) { DB::statement('call add_cards(?,?,?,?,?,?)', array($sp7aa9af, $sp89bb44, $sp22f15e, $spaa7124, $sp30a549, (int) $sp4c59e7)); } public static function _trash($spa8a4ff) { DB::transaction(function () use($spa8a4ff) { $sp103198 = clone $spa8a4ff; $sp103198->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp860952) { foreach ($sp860952 as $spe9100b) { $spb395ca = \App\Product::where('id', $spe9100b->product_id)->lockForUpdate()->first(); if ($spb395ca) { $spb395ca->count_all -= $spe9100b->count_left; $spb395ca->saveOrFail(); } } }); $spa8a4ff->delete(); return true; }); } public static function _restore($spa8a4ff) { DB::transaction(function () use($spa8a4ff) { $sp103198 = clone $spa8a4ff; $sp103198->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp860952) { foreach ($sp860952 as $spe9100b) { $spb395ca = \App\Product::where('id', $spe9100b->product_id)->lockForUpdate()->first(); if ($spb395ca) { $spb395ca->count_all += $spe9100b->count_left; $spb395ca->saveOrFail(); } } }); $spa8a4ff->restore(); return true; }); } }