<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($spc2f05b, $sp138ddb, $sp2d4d5b, $spfc8a83, $sp1318bc, $spa79ada) { DB::statement('call add_cards(?,?,?,?,?,?)', array($spc2f05b, $sp138ddb, $sp2d4d5b, $spfc8a83, $sp1318bc, (int) $spa79ada)); } public static function _trash($sped9569) { DB::transaction(function () use($sped9569) { $sp58ab93 = clone $sped9569; $sp58ab93->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($spa9e8db) { foreach ($spa9e8db as $sp097637) { $sp6018c8 = \App\Product::where('id', $sp097637->product_id)->lockForUpdate()->first(); if ($sp6018c8) { $sp6018c8->count_all -= $sp097637->count_left; $sp6018c8->saveOrFail(); } } }); $sped9569->delete(); return true; }); } public static function _restore($sped9569) { DB::transaction(function () use($sped9569) { $sp58ab93 = clone $sped9569; $sp58ab93->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($spa9e8db) { foreach ($spa9e8db as $sp097637) { $sp6018c8 = \App\Product::where('id', $sp097637->product_id)->lockForUpdate()->first(); if ($sp6018c8) { $sp6018c8->count_all += $sp097637->count_left; $sp6018c8->saveOrFail(); } } }); $sped9569->restore(); return true; }); } }