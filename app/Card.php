<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($spe58da5, $spa981f6, $sp55be16, $spfe6f53, $spdbb01a, $sp0d949b) { DB::statement('call add_cards(?,?,?,?,?,?)', array($spe58da5, $spa981f6, $sp55be16, $spfe6f53, $spdbb01a, (int) $sp0d949b)); } public static function _trash($sp479bde) { DB::transaction(function () use($sp479bde) { $sp33b130 = clone $sp479bde; $sp33b130->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp62a119) { foreach ($sp62a119 as $spb4e56f) { $sp886a9b = \App\Product::where('id', $spb4e56f->product_id)->lockForUpdate()->first(); if ($sp886a9b) { $sp886a9b->count_all -= $spb4e56f->count_left; $sp886a9b->saveOrFail(); } } }); $sp479bde->delete(); return true; }); } public static function _restore($sp479bde) { DB::transaction(function () use($sp479bde) { $sp33b130 = clone $sp479bde; $sp33b130->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp62a119) { foreach ($sp62a119 as $spb4e56f) { $sp886a9b = \App\Product::where('id', $spb4e56f->product_id)->lockForUpdate()->first(); if ($sp886a9b) { $sp886a9b->count_all += $spb4e56f->count_left; $sp886a9b->saveOrFail(); } } }); $sp479bde->restore(); return true; }); } }