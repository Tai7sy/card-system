<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } public static function add_cards($spfaef2f, $spad8100, $spdc3fe5, $spc3ee59, $sp28982f, $sp425ca9) { DB::statement('call add_cards(?,?,?,?,?,?)', array($spfaef2f, $spad8100, $spdc3fe5, $spc3ee59, $sp28982f, (int) $sp425ca9)); } public static function _trash($spe440a8) { DB::transaction(function () use($spe440a8) { $sp822fce = clone $spe440a8; $sp822fce->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($speab77e) { foreach ($speab77e as $sp9bfdd7) { $spaeec37 = \App\Product::where('id', $sp9bfdd7->product_id)->lockForUpdate()->first(); if ($spaeec37) { $spaeec37->count_all -= $sp9bfdd7->count_left; $spaeec37->saveOrFail(); } } }); $spe440a8->delete(); return true; }); } public static function _restore($spe440a8) { DB::transaction(function () use($spe440a8) { $sp822fce = clone $spe440a8; $sp822fce->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($speab77e) { foreach ($speab77e as $sp9bfdd7) { $spaeec37 = \App\Product::where('id', $sp9bfdd7->product_id)->lockForUpdate()->first(); if ($spaeec37) { $spaeec37->count_all += $sp9bfdd7->count_left; $spaeec37->saveOrFail(); } } }); $spe440a8->restore(); return true; }); } }