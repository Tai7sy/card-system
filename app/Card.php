<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } public static function add_cards($sp9935c9, $sp2baf03, $spaabe45, $sp2e8268, $sp023092, $spe4de2e) { DB::statement('call add_cards(?,?,?,?,?,?)', array($sp9935c9, $sp2baf03, $spaabe45, $sp2e8268, $sp023092, (int) $spe4de2e)); } public static function _trash($spb0a50e) { DB::transaction(function () use($spb0a50e) { $sp361e3c = clone $spb0a50e; $sp361e3c->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($spa1cb2d) { foreach ($spa1cb2d as $spd384ba) { $spddd5a8 = \App\Product::where('id', $spd384ba->product_id)->lockForUpdate()->first(); if ($spddd5a8) { $spddd5a8->count_all -= $spd384ba->count_left; $spddd5a8->saveOrFail(); } } }); $spb0a50e->delete(); return true; }); } public static function _restore($spb0a50e) { DB::transaction(function () use($spb0a50e) { $sp361e3c = clone $spb0a50e; $sp361e3c->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($spa1cb2d) { foreach ($spa1cb2d as $spd384ba) { $spddd5a8 = \App\Product::where('id', $spd384ba->product_id)->lockForUpdate()->first(); if ($spddd5a8) { $spddd5a8->count_all += $spd384ba->count_left; $spddd5a8->saveOrFail(); } } }); $spb0a50e->restore(); return true; }); } }