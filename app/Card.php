<?php
namespace App; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Eloquent\SoftDeletes; use Illuminate\Support\Facades\DB; class Card extends Model { protected $guarded = array(); use SoftDeletes; protected $dates = array('deleted_at'); const STATUS_NORMAL = 0; const STATUS_SOLD = 1; const STATUS_USED = 2; const TYPE_ONETIME = 0; const TYPE_REPEAT = 1; function orders() { return $this->hasMany(Order::class); } function product() { return $this->belongsTo(Product::class); } function getCountAttribute() { return $this->count_all - $this->count_sold; } public static function add_cards($sp279789, $sp727288, $sp1a26a5, $spe7fff0, $sp2e76fb, $spddf36a) { DB::statement('call add_cards(?,?,?,?,?,?)', array($sp279789, $sp727288, $sp1a26a5, $spe7fff0, $sp2e76fb, (int) $spddf36a)); } public static function _trash($spbec213) { DB::transaction(function () use($spbec213) { $sp0bdf9c = clone $spbec213; $sp0bdf9c->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp2c8253) { foreach ($sp2c8253 as $sp2f3cc5) { $spfa410d = \App\Product::where('id', $sp2f3cc5->product_id)->lockForUpdate()->first(); if ($spfa410d) { $spfa410d->count_all -= $sp2f3cc5->count_left; $spfa410d->saveOrFail(); } } }); $spbec213->delete(); return true; }); } public static function _restore($spbec213) { DB::transaction(function () use($spbec213) { $sp0bdf9c = clone $spbec213; $sp0bdf9c->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count_left`')->groupBy('product_id')->orderByRaw('`product_id`')->chunk(100, function ($sp2c8253) { foreach ($sp2c8253 as $sp2f3cc5) { $spfa410d = \App\Product::where('id', $sp2f3cc5->product_id)->lockForUpdate()->first(); if ($spfa410d) { $spfa410d->count_all += $sp2f3cc5->count_left; $spfa410d->saveOrFail(); } } }); $spbec213->restore(); return true; }); } }