<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp0aae4c) { $spb0a50e = $this->authQuery($sp0aae4c, \App\Product::class)->with(array('category' => function (Relation $spb0a50e) { $spb0a50e->select(array('id', 'name', 'password_open')); })); $spb66be1 = $sp0aae4c->post('search', false); $spc82c62 = $sp0aae4c->post('val', false); if ($spb66be1 && $spc82c62) { if ($spb66be1 == 'simple') { if ($sp0aae4c->post('from') === 'card') { $spb0a50e->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($spb0a50e->where('category_id', $spc82c62)->get(array('id', 'name'))); } elseif ($spb66be1 == 'id') { $spb0a50e->where('id', $spc82c62); } elseif ($spb66be1 == 'category_id') { $spb0a50e->where('category_id', $spc82c62); } else { $spb0a50e->where($spb66be1, 'like', '%' . $spc82c62 . '%'); } } $sp18887c = (int) $sp0aae4c->post('category_id'); if ($sp18887c > 0) { $spb0a50e->where('category_id', $sp18887c); } $sp22895e = $sp0aae4c->post('enabled'); if (strlen($sp22895e)) { $spb0a50e->whereIn('enabled', explode(',', $sp22895e)); } $sp35a866 = (int) $sp0aae4c->post('current_page', 1); $spa0426f = (int) $sp0aae4c->post('per_page', 20); $sp4e4cfe = $spb0a50e->orderBy('sort')->paginate($spa0426f, array('*'), 'page', $sp35a866); foreach ($sp4e4cfe->items() as $spddd5a8) { $spddd5a8->setAppends(array('count', 'url')); } return Response::success($sp4e4cfe); } function sort(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'required|integer', 'sort' => 'required|integer')); $spddd5a8 = $this->authQuery($sp0aae4c, \App\Product::class)->findOrFail($sp0aae4c->post('id')); $spddd5a8->sort = $sp0aae4c->post('sort'); $spddd5a8->saveOrFail(); return Response::success(); } function set_count(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'required|integer', 'count' => 'required|integer')); $spddd5a8 = $this->authQuery($sp0aae4c, \App\Product::class)->findOrFail($sp0aae4c->post('id')); $spddd5a8->count_all = $spddd5a8->count_sold + $sp0aae4c->post('count'); $spddd5a8->saveOrFail(); return Response::success(); } function category_change(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'required|integer', 'category_id' => 'required|integer')); $spe1f015 = $this->authQuery($sp0aae4c, \App\Category::class)->findOrFail($sp0aae4c->post('category_id')); $spddd5a8 = $this->authQuery($sp0aae4c, \App\Product::class)->findOrFail($sp0aae4c->post('id')); $spddd5a8->category_id = $spe1f015->id; $spddd5a8->save(); return Response::success(); } function edit(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'sometimes|integer', 'category_id' => 'required|integer', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp18887c = (int) $sp0aae4c->post('category_id'); if (!$this->authQuery($sp0aae4c, \App\Category::class)->where('id', $sp18887c)->exists()) { return Response::fail('商品分类不存在'); } $sp023357 = $sp0aae4c->post('name'); $spa582ae = $sp0aae4c->post('description'); $sp51940b = $sp0aae4c->post('instructions'); $spbb56d3 = (int) $sp0aae4c->post('buy_min', 0); $sp275924 = (int) $sp0aae4c->post('buy_max', 0); $spffc8df = (int) round($sp0aae4c->post('cost') * 100); $sp737bbd = (int) round($sp0aae4c->post('price') * 100); $spf68cab = $sp0aae4c->post('price_whole'); $spb10ac8 = @json_decode($spf68cab, true); foreach ($spb10ac8 as $spbd1355) { if ($spbd1355[1] < 1 || $spbd1355[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp1a4e67 = explode('|', System::_get('filter_words')); if (($spf96e67 = Helper::filterWords($sp023357, $sp1a4e67)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spf96e67); } if (($spf96e67 = Helper::filterWords($spa582ae, $sp1a4e67)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spf96e67); } if (($spf96e67 = Helper::filterWords($sp51940b, $sp1a4e67)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spf96e67); } } if ((int) $sp0aae4c->post('id')) { $spddd5a8 = $this->authQuery($sp0aae4c, \App\Product::class)->findOrFail($sp0aae4c->post('id')); if (\App\Card::whereProductId($spddd5a8->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($spbb56d3 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp275924 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } else { $spddd5a8 = new \App\Product(); $spddd5a8->count_sold = 0; $spddd5a8->user_id = $this->getUserIdOrFail($sp0aae4c); } $spddd5a8->category_id = $sp18887c; $spddd5a8->name = $sp023357; $spc631d7 = new AntiXSS(); $spddd5a8->description = $spc631d7->xss_clean($spa582ae); $spddd5a8->instructions = $spc631d7->xss_clean($sp51940b); $spddd5a8->fields = $sp0aae4c->post('fields'); $spddd5a8->delivery = (int) $sp0aae4c->post('delivery'); $spddd5a8->sort = $sp0aae4c->post('sort'); $spddd5a8->buy_min = $spbb56d3; $spddd5a8->buy_max = $sp275924; $spddd5a8->count_warn = $sp0aae4c->post('count_warn'); $spddd5a8->support_coupon = $sp0aae4c->post('support_coupon') === 'true'; $spddd5a8->password = $sp0aae4c->post('password'); $spddd5a8->password_open = $sp0aae4c->post('password_open') === 'true'; $spddd5a8->cost = $spffc8df; $spddd5a8->price = $sp737bbd; $spddd5a8->price_whole = $spf68cab; $spddd5a8->enabled = (int) $sp0aae4c->post('enabled'); $spddd5a8->inventory = (int) $sp0aae4c->post('inventory'); $spddd5a8->saveOrFail(); return Response::success(); } function enable(Request $sp0aae4c) { $this->validate($sp0aae4c, array('ids' => 'required|string', 'enabled' => 'required|integer')); $spcffd00 = $sp0aae4c->post('ids'); $sp22895e = (int) $sp0aae4c->post('enabled'); $this->authQuery($sp0aae4c, \App\Product::class)->whereIn('id', explode(',', $spcffd00))->update(array('enabled' => $sp22895e)); return Response::success(); } function delete(Request $sp0aae4c) { $this->validate($sp0aae4c, array('ids' => 'required|string')); $spcffd00 = $sp0aae4c->post('ids'); $spcffd00 = explode(',', $spcffd00); $sp40605e = $this->authQuery($sp0aae4c, \App\Product::class)->whereIn('id', $spcffd00); $sp621057 = $this->authQuery($sp0aae4c, \App\Card::class)->whereIn('product_id', $spcffd00); return DB::transaction(function () use($sp40605e, $sp621057) { $sp40605e->delete(); $sp621057->forceDelete(); return Response::success(); }); } function count_sync(Request $sp0aae4c) { \App\Product::refreshCount($this->getUser($sp0aae4c)); return Response::success(); } }