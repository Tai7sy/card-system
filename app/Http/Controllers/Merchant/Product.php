<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp179c14) { $sp78fbd3 = $this->authQuery($sp179c14, \App\Product::class)->with(array('category' => function (Relation $sp78fbd3) { $sp78fbd3->select(array('id', 'name', 'password_open')); })); $sp2ae16a = $sp179c14->post('search', false); $sp2fe7b9 = $sp179c14->post('val', false); if ($sp2ae16a && $sp2fe7b9) { if ($sp2ae16a == 'simple') { if ($sp179c14->post('from') === 'card') { $sp78fbd3->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp78fbd3->where('category_id', $sp2fe7b9)->get(array('id', 'name'))); } elseif ($sp2ae16a == 'id') { $sp78fbd3->where('id', $sp2fe7b9); } elseif ($sp2ae16a == 'category_id') { $sp78fbd3->where('category_id', $sp2fe7b9); } else { $sp78fbd3->where($sp2ae16a, 'like', '%' . $sp2fe7b9 . '%'); } } $sp2521ab = (int) $sp179c14->post('category_id'); if ($sp2521ab > 0) { $sp78fbd3->where('category_id', $sp2521ab); } $sp2cc7da = $sp179c14->post('enabled'); if (strlen($sp2cc7da)) { $sp78fbd3->whereIn('enabled', explode(',', $sp2cc7da)); } $spababe9 = (int) $sp179c14->post('current_page', 1); $sp4b1688 = (int) $sp179c14->post('per_page', 20); $spe11c26 = $sp78fbd3->orderBy('sort')->paginate($sp4b1688, array('*'), 'page', $spababe9); foreach ($spe11c26->items() as $sp434ec8) { $sp434ec8->setAppends(array('count', 'url')); } return Response::success($spe11c26); } function sort(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp434ec8 = $this->authQuery($sp179c14, \App\Product::class)->findOrFail($sp179c14->post('id')); $sp434ec8->sort = $sp179c14->post('sort'); $sp434ec8->saveOrFail(); return Response::success(); } function set_count(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer', 'count' => 'required|integer')); $sp434ec8 = $this->authQuery($sp179c14, \App\Product::class)->findOrFail($sp179c14->post('id')); $sp434ec8->count_all = $sp434ec8->count_sold + $sp179c14->post('count'); $sp434ec8->saveOrFail(); return Response::success(); } function category_change(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer', 'category_id' => 'required')); $sp434ec8 = $this->authQuery($sp179c14, \App\Product::class)->findOrFail($sp179c14->post('id')); $sp2521ab = $sp179c14->input('category_id'); if (is_string($sp2521ab) && @$sp2521ab[0] === '+') { $sp555b23 = \App\Category::create(array('user_id' => $sp434ec8->user_id, 'name' => substr($sp2521ab, 1), 'enabled' => true)); } else { $sp555b23 = $this->authQuery($sp179c14, \App\Category::class)->findOrFail($sp2521ab); } $sp434ec8->category_id = $sp555b23->id; $sp434ec8->save(); return Response::success($sp555b23); } function edit(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp2521ab = $sp179c14->post('category_id'); $sp6cd05f = is_string($sp2521ab) && @$sp2521ab[0] === '+'; if ($sp6cd05f) { $sp555b23 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp179c14), 'name' => substr($sp2521ab, 1), 'enabled' => true)); } else { $sp555b23 = $this->authQuery($sp179c14, \App\Category::class)->where('id', @intval($sp2521ab))->first(); if (!$sp555b23) { return Response::fail('商品分类不存在'); } } $spf9ff9c = $sp179c14->post('name'); $sp88d534 = $sp179c14->post('description'); $spc5bf7d = $sp179c14->post('instructions'); $spf5dc18 = (int) $sp179c14->post('buy_min', 0); $spa4b0e3 = (int) $sp179c14->post('buy_max', 0); $sp316cb9 = (int) round($sp179c14->post('cost') * 100); $sp85e2da = (int) round($sp179c14->post('price') * 100); $sp36eee5 = $sp179c14->post('price_whole'); $sp62260d = @json_decode($sp36eee5, true); foreach ($sp62260d as $spe3ffa2) { if ($spe3ffa2[1] < 1 || $spe3ffa2[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp830800 = explode('|', System::_get('filter_words')); if (($spa6aab5 = Helper::filterWords($spf9ff9c, $sp830800)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spa6aab5); } if (($spa6aab5 = Helper::filterWords($sp88d534, $sp830800)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spa6aab5); } if (($spa6aab5 = Helper::filterWords($spc5bf7d, $sp830800)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spa6aab5); } } if ((int) $sp179c14->post('id')) { $sp434ec8 = $this->authQuery($sp179c14, \App\Product::class)->findOrFail($sp179c14->post('id')); } else { $sp434ec8 = new \App\Product(); $sp434ec8->count_sold = 0; $sp434ec8->user_id = $this->getUserIdOrFail($sp179c14); } $sp434ec8->category_id = $sp555b23->id; $sp434ec8->name = $spf9ff9c; $sp81b6a0 = new AntiXSS(); $sp434ec8->description = $sp81b6a0->xss_clean($sp88d534); $sp434ec8->instructions = $sp81b6a0->xss_clean($spc5bf7d); $sp434ec8->fields = $sp179c14->post('fields'); $sp434ec8->delivery = (int) $sp179c14->post('delivery'); $sp434ec8->sort = $sp179c14->post('sort'); $sp434ec8->buy_min = $spf5dc18; $sp434ec8->buy_max = $spa4b0e3; $sp434ec8->count_warn = $sp179c14->post('count_warn'); $sp434ec8->support_coupon = $sp179c14->post('support_coupon') === 'true'; $sp434ec8->password = $sp179c14->post('password'); $sp434ec8->password_open = $sp179c14->post('password_open') === 'true'; $sp434ec8->cost = $sp316cb9; $sp434ec8->price = $sp85e2da; $sp434ec8->price_whole = $sp36eee5; $sp434ec8->enabled = (int) $sp179c14->post('enabled'); $sp434ec8->inventory = (int) $sp179c14->post('inventory'); $sp434ec8->saveOrFail(); $sp1098f1 = array(); if ($sp6cd05f) { $sp1098f1['category'] = $sp555b23; } return Response::success($sp1098f1); } function enable(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp786967 = $sp179c14->post('ids'); $sp2cc7da = (int) $sp179c14->post('enabled'); $this->authQuery($sp179c14, \App\Product::class)->whereIn('id', explode(',', $sp786967))->update(array('enabled' => $sp2cc7da)); return Response::success(); } function delete(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string')); $sp786967 = $sp179c14->post('ids'); $sp786967 = explode(',', $sp786967); $sp52e774 = $this->authQuery($sp179c14, \App\Product::class)->whereIn('id', $sp786967); $sp5e39f0 = $this->authQuery($sp179c14, \App\Card::class)->whereIn('product_id', $sp786967); return DB::transaction(function () use($sp52e774, $sp5e39f0) { $sp52e774->delete(); $sp5e39f0->forceDelete(); return Response::success(); }); } function count_sync(Request $sp179c14) { \App\Product::refreshCount($this->getUser($sp179c14)); return Response::success(); } }