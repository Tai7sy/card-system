<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp054aa0) { $sp0964e2 = $this->authQuery($sp054aa0, \App\Product::class)->with(array('category' => function (Relation $sp0964e2) { $sp0964e2->select(array('id', 'name', 'password_open')); })); $spcb6e4b = $sp054aa0->post('search', false); $spe07b43 = $sp054aa0->post('val', false); if ($spcb6e4b && $spe07b43) { if ($spcb6e4b == 'simple') { if ($sp054aa0->post('from') === 'card') { $sp0964e2->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp0964e2->where('category_id', $spe07b43)->get(array('id', 'name'))); } elseif ($spcb6e4b == 'id') { $sp0964e2->where('id', $spe07b43); } elseif ($spcb6e4b == 'category_id') { $sp0964e2->where('category_id', $spe07b43); } else { $sp0964e2->where($spcb6e4b, 'like', '%' . $spe07b43 . '%'); } } $spc3ee02 = (int) $sp054aa0->post('category_id'); if ($spc3ee02 > 0) { $sp0964e2->where('category_id', $spc3ee02); } $spc0281b = $sp054aa0->post('enabled'); if (strlen($spc0281b)) { $sp0964e2->whereIn('enabled', explode(',', $spc0281b)); } $sp1d90fd = (int) $sp054aa0->post('current_page', 1); $sp21d879 = (int) $sp054aa0->post('per_page', 20); $sp03b529 = $sp0964e2->orderBy('sort')->paginate($sp21d879, array('*'), 'page', $sp1d90fd); foreach ($sp03b529->items() as $sp648779) { $sp648779->setAppends(array('count', 'url')); } return Response::success($sp03b529); } function sort(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp648779 = $this->authQuery($sp054aa0, \App\Product::class)->findOrFail($sp054aa0->post('id')); $sp648779->sort = $sp054aa0->post('sort'); $sp648779->saveOrFail(); return Response::success(); } function set_count(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'required|integer', 'count' => 'required|integer')); $sp648779 = $this->authQuery($sp054aa0, \App\Product::class)->findOrFail($sp054aa0->post('id')); $sp648779->count_all = $sp648779->count_sold + $sp054aa0->post('count'); $sp648779->saveOrFail(); return Response::success(); } function category_change(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'required|integer', 'category_id' => 'required|integer')); $sp4a59d6 = $this->authQuery($sp054aa0, \App\Category::class)->findOrFail($sp054aa0->post('category_id')); $sp648779 = $this->authQuery($sp054aa0, \App\Product::class)->findOrFail($sp054aa0->post('id')); $sp648779->category_id = $sp4a59d6->id; $sp648779->save(); return Response::success(); } function edit(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'sometimes|integer', 'category_id' => 'required|integer', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spc3ee02 = (int) $sp054aa0->post('category_id'); if (!$this->authQuery($sp054aa0, \App\Category::class)->where('id', $spc3ee02)->exists()) { return Response::fail('商品分类不存在'); } $sp71416b = $sp054aa0->post('name'); $spd6cc52 = $sp054aa0->post('description'); $sp75478b = $sp054aa0->post('instructions'); $sp729d87 = (int) $sp054aa0->post('buy_min', 0); $sp91c8f6 = (int) $sp054aa0->post('buy_max', 0); $spd781f5 = (int) round($sp054aa0->post('cost') * 100); $sp25dfe1 = (int) round($sp054aa0->post('price') * 100); $sp427679 = $sp054aa0->post('price_whole'); $spe60670 = @json_decode($sp427679, true); foreach ($spe60670 as $sp831751) { if ($sp831751[1] < 1 || $sp831751[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp5d277b = explode('|', System::_get('filter_words')); if (($sp93ae8e = Helper::filterWords($sp71416b, $sp5d277b)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp93ae8e); } if (($sp93ae8e = Helper::filterWords($spd6cc52, $sp5d277b)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp93ae8e); } if (($sp93ae8e = Helper::filterWords($sp75478b, $sp5d277b)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp93ae8e); } } if ((int) $sp054aa0->post('id')) { $sp648779 = $this->authQuery($sp054aa0, \App\Product::class)->findOrFail($sp054aa0->post('id')); if (\App\Card::whereProductId($sp648779->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp729d87 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp91c8f6 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } else { $sp648779 = new \App\Product(); $sp648779->count_sold = 0; $sp648779->user_id = $this->getUserIdOrFail($sp054aa0); } $sp648779->category_id = $spc3ee02; $sp648779->name = $sp71416b; $spb42313 = new AntiXSS(); $sp648779->description = $spb42313->xss_clean($spd6cc52); $sp648779->instructions = $spb42313->xss_clean($sp75478b); $sp648779->fields = $sp054aa0->post('fields'); $sp648779->delivery = (int) $sp054aa0->post('delivery'); $sp648779->sort = $sp054aa0->post('sort'); $sp648779->buy_min = $sp729d87; $sp648779->buy_max = $sp91c8f6; $sp648779->count_warn = $sp054aa0->post('count_warn'); $sp648779->support_coupon = $sp054aa0->post('support_coupon') === 'true'; $sp648779->password = $sp054aa0->post('password'); $sp648779->password_open = $sp054aa0->post('password_open') === 'true'; $sp648779->cost = $spd781f5; $sp648779->price = $sp25dfe1; $sp648779->price_whole = $sp427679; $sp648779->enabled = (int) $sp054aa0->post('enabled'); $sp648779->inventory = (int) $sp054aa0->post('inventory'); $sp648779->saveOrFail(); return Response::success(); } function enable(Request $sp054aa0) { $this->validate($sp054aa0, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp4f46fd = $sp054aa0->post('ids'); $spc0281b = (int) $sp054aa0->post('enabled'); $this->authQuery($sp054aa0, \App\Product::class)->whereIn('id', explode(',', $sp4f46fd))->update(array('enabled' => $spc0281b)); return Response::success(); } function delete(Request $sp054aa0) { $this->validate($sp054aa0, array('ids' => 'required|string')); $sp4f46fd = $sp054aa0->post('ids'); $sp4f46fd = explode(',', $sp4f46fd); $sp41a20f = $this->authQuery($sp054aa0, \App\Product::class)->whereIn('id', $sp4f46fd); $sp7827e3 = $this->authQuery($sp054aa0, \App\Card::class)->whereIn('product_id', $sp4f46fd); return DB::transaction(function () use($sp41a20f, $sp7827e3) { $sp41a20f->delete(); $sp7827e3->forceDelete(); return Response::success(); }); } function count_sync(Request $sp054aa0) { \App\Product::refreshCount($this->getUser($sp054aa0)); return Response::success(); } }