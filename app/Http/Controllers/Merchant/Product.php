<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp510ef3) { $sp90af04 = $this->authQuery($sp510ef3, \App\Product::class)->with(array('category' => function (Relation $sp90af04) { $sp90af04->select(array('id', 'name', 'password_open')); })); $spebf2d9 = $sp510ef3->input('search', false); $spac3bf6 = $sp510ef3->input('val', false); if ($spebf2d9 && $spac3bf6) { if ($spebf2d9 == 'simple') { if ($sp510ef3->input('from') === 'card') { $sp90af04->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp90af04->where('category_id', $spac3bf6)->get(array('id', 'name'))); } elseif ($spebf2d9 == 'id') { $sp90af04->where('id', $spac3bf6); } elseif ($spebf2d9 == 'category_id') { $sp90af04->where('category_id', $spac3bf6); } else { $sp90af04->where($spebf2d9, 'like', '%' . $spac3bf6 . '%'); } } $sp40435f = (int) $sp510ef3->input('category_id'); if ($sp40435f > 0) { $sp90af04->where('category_id', $sp40435f); } $sp73556e = $sp510ef3->input('enabled'); if (strlen($sp73556e)) { $sp90af04->whereIn('enabled', explode(',', $sp73556e)); } $spb02a8e = (int) $sp510ef3->input('current_page', 1); $sp95f730 = (int) $sp510ef3->input('per_page', 20); $spe24324 = $sp90af04->orderBy('sort')->paginate($sp95f730, array('*'), 'page', $spb02a8e); foreach ($spe24324->items() as $spd39704) { $spd39704->setAppends(array('count', 'url')); } return Response::success($spe24324); } function sort(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer', 'sort' => 'required|integer')); $spd39704 = $this->authQuery($sp510ef3, \App\Product::class)->findOrFail($sp510ef3->post('id')); $spd39704->sort = $sp510ef3->post('sort'); $spd39704->saveOrFail(); return Response::success(); } function set_count(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer', 'count' => 'required|integer')); $spd39704 = $this->authQuery($sp510ef3, \App\Product::class)->findOrFail($sp510ef3->post('id')); $spd39704->count_all = $spd39704->count_sold + $sp510ef3->post('count'); $spd39704->saveOrFail(); return Response::success(); } function category_change(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer', 'category_id' => 'required')); $spd39704 = $this->authQuery($sp510ef3, \App\Product::class)->findOrFail($sp510ef3->post('id')); $sp40435f = $sp510ef3->input('category_id'); if (is_string($sp40435f) && @$sp40435f[0] === '+') { $sp577aae = \App\Category::create(array('user_id' => $spd39704->user_id, 'name' => substr($sp40435f, 1), 'enabled' => true)); } else { $sp577aae = $this->authQuery($sp510ef3, \App\Category::class)->findOrFail($sp40435f); } $spd39704->category_id = $sp577aae->id; $spd39704->save(); return Response::success($sp577aae); } function edit(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp40435f = $sp510ef3->post('category_id'); $sp5dda63 = is_string($sp40435f) && @$sp40435f[0] === '+'; if ($sp5dda63) { $sp577aae = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp510ef3), 'name' => substr($sp40435f, 1), 'enabled' => true)); } else { $sp577aae = $this->authQuery($sp510ef3, \App\Category::class)->where('id', @intval($sp40435f))->first(); if (!$sp577aae) { return Response::fail('商品分类不存在'); } } $spd7c47a = $sp510ef3->post('name'); $sp9c68dc = $sp510ef3->post('description'); $sp04f0a0 = $sp510ef3->post('instructions'); $spef6e31 = (int) $sp510ef3->post('buy_min', 0); $sp5bea90 = (int) $sp510ef3->post('buy_max', 0); $spcc291e = (int) round($sp510ef3->post('cost') * 100); $sp77e8f9 = (int) round($sp510ef3->post('price') * 100); $sp3c2080 = $sp510ef3->post('price_whole'); $sp523d90 = @json_decode($sp3c2080, true); foreach ($sp523d90 as $sp500566) { if ($sp500566[1] < 1 || $sp500566[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spa9cfcd = explode('|', System::_get('filter_words')); if (($spced997 = Helper::filterWords($spd7c47a, $spa9cfcd)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spced997); } if (($spced997 = Helper::filterWords($sp9c68dc, $spa9cfcd)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spced997); } if (($spced997 = Helper::filterWords($sp04f0a0, $spa9cfcd)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spced997); } } if ((int) $sp510ef3->post('id')) { $spd39704 = $this->authQuery($sp510ef3, \App\Product::class)->findOrFail($sp510ef3->post('id')); } else { $spd39704 = new \App\Product(); $spd39704->count_sold = 0; $spd39704->user_id = $this->getUserIdOrFail($sp510ef3); } $spd39704->category_id = $sp577aae->id; $spd39704->name = $spd7c47a; $spd586a8 = new AntiXSS(); $spd39704->description = $spd586a8->xss_clean($sp9c68dc); $spd39704->instructions = $spd586a8->xss_clean($sp04f0a0); $spd39704->fields = $sp510ef3->post('fields'); $spd39704->delivery = (int) $sp510ef3->post('delivery'); $spd39704->sort = $sp510ef3->post('sort'); $spd39704->buy_min = $spef6e31; $spd39704->buy_max = $sp5bea90; $spd39704->count_warn = $sp510ef3->post('count_warn'); $spd39704->support_coupon = $sp510ef3->post('support_coupon') === 'true'; $spd39704->password = $sp510ef3->post('password'); $spd39704->password_open = $sp510ef3->post('password_open') === 'true'; $spd39704->cost = $spcc291e; $spd39704->price = $sp77e8f9; $spd39704->price_whole = $sp3c2080; $spd39704->enabled = (int) $sp510ef3->post('enabled'); $spd39704->inventory = (int) $sp510ef3->post('inventory'); $spd39704->saveOrFail(); $sp15bacb = array(); if ($sp5dda63) { $sp15bacb['category'] = $sp577aae; } return Response::success($sp15bacb); } function enable(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp3cf93f = $sp510ef3->post('ids'); $sp73556e = (int) $sp510ef3->post('enabled'); $this->authQuery($sp510ef3, \App\Product::class)->whereIn('id', explode(',', $sp3cf93f))->update(array('enabled' => $sp73556e)); return Response::success(); } function delete(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string')); $sp3cf93f = $sp510ef3->post('ids'); $sp3cf93f = explode(',', $sp3cf93f); $spc1ce1d = $this->authQuery($sp510ef3, \App\Product::class)->whereIn('id', $sp3cf93f); $sp374d47 = $this->authQuery($sp510ef3, \App\Card::class)->whereIn('product_id', $sp3cf93f); return DB::transaction(function () use($spc1ce1d, $sp374d47) { $spc1ce1d->delete(); $sp374d47->forceDelete(); return Response::success(); }); } function count_sync(Request $sp510ef3) { \App\Product::refreshCount($this->getUser($sp510ef3)); return Response::success(); } }