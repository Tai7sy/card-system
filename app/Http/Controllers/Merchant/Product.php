<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp13451b) { $sp8e2ceb = $this->authQuery($sp13451b, \App\Product::class)->with(array('category' => function (Relation $sp8e2ceb) { $sp8e2ceb->select(array('id', 'name', 'password_open')); })); $sp54e0e6 = $sp13451b->input('search', false); $sp59b33b = $sp13451b->input('val', false); if ($sp54e0e6 && $sp59b33b) { if ($sp54e0e6 == 'simple') { if ($sp13451b->input('from') === 'card') { $sp8e2ceb->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp8e2ceb->where('category_id', $sp59b33b)->get(array('id', 'name'))); } elseif ($sp54e0e6 == 'id') { $sp8e2ceb->where('id', $sp59b33b); } elseif ($sp54e0e6 == 'category_id') { $sp8e2ceb->where('category_id', $sp59b33b); } else { $sp8e2ceb->where($sp54e0e6, 'like', '%' . $sp59b33b . '%'); } } $sp3955fa = (int) $sp13451b->input('category_id'); if ($sp3955fa > 0) { $sp8e2ceb->where('category_id', $sp3955fa); } $sp6a3468 = $sp13451b->input('enabled'); if (strlen($sp6a3468)) { $sp8e2ceb->whereIn('enabled', explode(',', $sp6a3468)); } $sp26dcb6 = (int) $sp13451b->input('current_page', 1); $sp769c3e = (int) $sp13451b->input('per_page', 20); $spa67529 = $sp8e2ceb->orderBy('sort')->paginate($sp769c3e, array('*'), 'page', $sp26dcb6); foreach ($spa67529->items() as $sp863814) { $sp863814->setAppends(array('count', 'url')); } return Response::success($spa67529); } function sort(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp863814 = $this->authQuery($sp13451b, \App\Product::class)->findOrFail($sp13451b->post('id')); $sp863814->sort = $sp13451b->post('sort'); $sp863814->saveOrFail(); return Response::success(); } function set_count(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer', 'count' => 'required|integer')); $sp863814 = $this->authQuery($sp13451b, \App\Product::class)->findOrFail($sp13451b->post('id')); $sp863814->count_all = $sp863814->count_sold + $sp13451b->post('count'); $sp863814->saveOrFail(); return Response::success(); } function category_change(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer', 'category_id' => 'required')); $sp863814 = $this->authQuery($sp13451b, \App\Product::class)->findOrFail($sp13451b->post('id')); $sp3955fa = $sp13451b->input('category_id'); if (is_string($sp3955fa) && @$sp3955fa[0] === '+') { $spd58c4f = \App\Category::create(array('user_id' => $sp863814->user_id, 'name' => substr($sp3955fa, 1), 'enabled' => true)); } else { $spd58c4f = $this->authQuery($sp13451b, \App\Category::class)->findOrFail($sp3955fa); } $sp863814->category_id = $spd58c4f->id; $sp863814->save(); return Response::success($spd58c4f); } function edit(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp3955fa = $sp13451b->post('category_id'); $sp8fe383 = is_string($sp3955fa) && @$sp3955fa[0] === '+'; if ($sp8fe383) { $spd58c4f = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp13451b), 'name' => substr($sp3955fa, 1), 'enabled' => true)); } else { $spd58c4f = $this->authQuery($sp13451b, \App\Category::class)->where('id', @intval($sp3955fa))->first(); if (!$spd58c4f) { return Response::fail('商品分类不存在'); } } $sp664a00 = $sp13451b->post('name'); $sp6273b8 = $sp13451b->post('description'); $spa83d37 = $sp13451b->post('instructions'); $sp4b8cff = (int) $sp13451b->post('buy_min', 0); $sp9c0cf6 = (int) $sp13451b->post('buy_max', 0); $sp15e80d = (int) round($sp13451b->post('cost') * 100); $sp6fa047 = (int) round($sp13451b->post('price') * 100); $sp5248c4 = $sp13451b->post('price_whole'); $speebbb7 = @json_decode($sp5248c4, true); foreach ($speebbb7 as $spe46c28) { if ($spe46c28[1] < 1 || $spe46c28[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp9e7840 = explode('|', System::_get('filter_words')); if (($sp00ac62 = Helper::filterWords($sp664a00, $sp9e7840)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp00ac62); } if (($sp00ac62 = Helper::filterWords($sp6273b8, $sp9e7840)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp00ac62); } if (($sp00ac62 = Helper::filterWords($spa83d37, $sp9e7840)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp00ac62); } } if ((int) $sp13451b->post('id')) { $sp863814 = $this->authQuery($sp13451b, \App\Product::class)->findOrFail($sp13451b->post('id')); } else { $sp863814 = new \App\Product(); $sp863814->count_sold = 0; $sp863814->user_id = $this->getUserIdOrFail($sp13451b); } $sp863814->category_id = $spd58c4f->id; $sp863814->name = $sp664a00; $sp4661cd = new AntiXSS(); $sp863814->description = $sp4661cd->xss_clean($sp6273b8); $sp863814->instructions = $sp4661cd->xss_clean($spa83d37); $sp863814->fields = $sp13451b->post('fields'); $sp863814->delivery = (int) $sp13451b->post('delivery'); $sp863814->sort = $sp13451b->post('sort'); $sp863814->buy_min = $sp4b8cff; $sp863814->buy_max = $sp9c0cf6; $sp863814->count_warn = $sp13451b->post('count_warn'); $sp863814->support_coupon = $sp13451b->post('support_coupon') === 'true'; $sp863814->password = $sp13451b->post('password'); $sp863814->password_open = $sp13451b->post('password_open') === 'true'; $sp863814->cost = $sp15e80d; $sp863814->price = $sp6fa047; $sp863814->price_whole = $sp5248c4; $sp863814->enabled = (int) $sp13451b->post('enabled'); $sp863814->inventory = (int) $sp13451b->post('inventory'); $sp863814->saveOrFail(); $spfae0a4 = array(); if ($sp8fe383) { $spfae0a4['category'] = $spd58c4f; } return Response::success($spfae0a4); } function enable(Request $sp13451b) { $this->validate($sp13451b, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp60bb7e = $sp13451b->post('ids'); $sp6a3468 = (int) $sp13451b->post('enabled'); $this->authQuery($sp13451b, \App\Product::class)->whereIn('id', explode(',', $sp60bb7e))->update(array('enabled' => $sp6a3468)); return Response::success(); } function delete(Request $sp13451b) { $this->validate($sp13451b, array('ids' => 'required|string')); $sp60bb7e = $sp13451b->post('ids'); $sp60bb7e = explode(',', $sp60bb7e); $sp3d861f = $this->authQuery($sp13451b, \App\Product::class)->whereIn('id', $sp60bb7e); $spbbbcb4 = $this->authQuery($sp13451b, \App\Card::class)->whereIn('product_id', $sp60bb7e); return DB::transaction(function () use($sp3d861f, $spbbbcb4) { $sp3d861f->delete(); $spbbbcb4->forceDelete(); return Response::success(); }); } function count_sync(Request $sp13451b) { \App\Product::refreshCount($this->getUser($sp13451b)); return Response::success(); } }