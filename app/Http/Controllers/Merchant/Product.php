<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spf09a96) { $sp40bc20 = $this->authQuery($spf09a96, \App\Product::class)->with(array('category' => function (Relation $sp40bc20) { $sp40bc20->select(array('id', 'name', 'password_open')); })); $sp5974e9 = $spf09a96->input('search', false); $spc265e8 = $spf09a96->input('val', false); if ($sp5974e9 && $spc265e8) { if ($sp5974e9 == 'simple') { if ($spf09a96->input('from') === 'card') { $sp40bc20->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp40bc20->where('category_id', $spc265e8)->get(array('id', 'name'))); } elseif ($sp5974e9 == 'id') { $sp40bc20->where('id', $spc265e8); } elseif ($sp5974e9 == 'category_id') { $sp40bc20->where('category_id', $spc265e8); } else { $sp40bc20->where($sp5974e9, 'like', '%' . $spc265e8 . '%'); } } $sp8e3d37 = (int) $spf09a96->input('category_id'); if ($sp8e3d37 > 0) { $sp40bc20->where('category_id', $sp8e3d37); } $spc7c736 = $spf09a96->input('enabled'); if (strlen($spc7c736)) { $sp40bc20->whereIn('enabled', explode(',', $spc7c736)); } $sp5b4065 = (int) $spf09a96->input('current_page', 1); $spe24165 = (int) $spf09a96->input('per_page', 20); $sp3fe1fa = $sp40bc20->orderBy('sort')->paginate($spe24165, array('*'), 'page', $sp5b4065); foreach ($sp3fe1fa->items() as $sp551a82) { $sp551a82->setAppends(array('count', 'url')); } return Response::success($sp3fe1fa); } function sort(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp551a82 = $this->authQuery($spf09a96, \App\Product::class)->findOrFail($spf09a96->post('id')); $sp551a82->sort = $spf09a96->post('sort'); $sp551a82->saveOrFail(); return Response::success(); } function set_count(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer', 'count' => 'required|integer')); $sp551a82 = $this->authQuery($spf09a96, \App\Product::class)->findOrFail($spf09a96->post('id')); $sp551a82->count_all = $sp551a82->count_sold + $spf09a96->post('count'); $sp551a82->saveOrFail(); return Response::success(); } function category_change(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer', 'category_id' => 'required')); $sp551a82 = $this->authQuery($spf09a96, \App\Product::class)->findOrFail($spf09a96->post('id')); $sp8e3d37 = $spf09a96->input('category_id'); if (is_string($sp8e3d37) && @$sp8e3d37[0] === '+') { $spf5ac2c = \App\Category::create(array('user_id' => $sp551a82->user_id, 'name' => substr($sp8e3d37, 1), 'enabled' => true)); } else { $spf5ac2c = $this->authQuery($spf09a96, \App\Category::class)->findOrFail($sp8e3d37); } $sp551a82->category_id = $spf5ac2c->id; $sp551a82->save(); return Response::success($spf5ac2c); } function edit(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp8e3d37 = $spf09a96->post('category_id'); $spc96fc0 = is_string($sp8e3d37) && @$sp8e3d37[0] === '+'; if ($spc96fc0) { $spf5ac2c = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spf09a96), 'name' => substr($sp8e3d37, 1), 'enabled' => true)); } else { $spf5ac2c = $this->authQuery($spf09a96, \App\Category::class)->where('id', @intval($sp8e3d37))->first(); if (!$spf5ac2c) { return Response::fail('商品分类不存在'); } } $sp66f74c = $spf09a96->post('name'); $sp6ed950 = $spf09a96->post('description'); $spe0f2b9 = $spf09a96->post('instructions'); $sp8d0cbe = (int) $spf09a96->post('buy_min', 0); $sp1901e7 = (int) $spf09a96->post('buy_max', 0); $sp99d3a9 = (int) round($spf09a96->post('cost') * 100); $sp399bf6 = (int) round($spf09a96->post('price') * 100); $sp58eb04 = $spf09a96->post('price_whole'); $sp0c490a = @json_decode($sp58eb04, true); foreach ($sp0c490a as $sp034219) { if ($sp034219[1] < 1 || $sp034219[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp82333a = explode('|', System::_get('filter_words')); if (($sp571ce3 = Helper::filterWords($sp66f74c, $sp82333a)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp571ce3); } if (($sp571ce3 = Helper::filterWords($sp6ed950, $sp82333a)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp571ce3); } if (($sp571ce3 = Helper::filterWords($spe0f2b9, $sp82333a)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp571ce3); } } if ((int) $spf09a96->post('id')) { $sp551a82 = $this->authQuery($spf09a96, \App\Product::class)->findOrFail($spf09a96->post('id')); } else { $sp551a82 = new \App\Product(); $sp551a82->count_sold = 0; $sp551a82->user_id = $this->getUserIdOrFail($spf09a96); } $sp551a82->category_id = $spf5ac2c->id; $sp551a82->name = $sp66f74c; $speb94a3 = new AntiXSS(); $sp551a82->description = $speb94a3->xss_clean($sp6ed950); $sp551a82->instructions = $speb94a3->xss_clean($spe0f2b9); $sp551a82->fields = $spf09a96->post('fields'); $sp551a82->delivery = (int) $spf09a96->post('delivery'); $sp551a82->sort = $spf09a96->post('sort'); $sp551a82->buy_min = $sp8d0cbe; $sp551a82->buy_max = $sp1901e7; $sp551a82->count_warn = $spf09a96->post('count_warn'); $sp551a82->support_coupon = $spf09a96->post('support_coupon') === 'true'; $sp551a82->password = $spf09a96->post('password'); $sp551a82->password_open = $spf09a96->post('password_open') === 'true'; $sp551a82->cost = $sp99d3a9; $sp551a82->price = $sp399bf6; $sp551a82->price_whole = $sp58eb04; $sp551a82->enabled = (int) $spf09a96->post('enabled'); $sp551a82->inventory = (int) $spf09a96->post('inventory'); $sp551a82->saveOrFail(); $sp501b73 = array(); if ($spc96fc0) { $sp501b73['category'] = $spf5ac2c; } return Response::success($sp501b73); } function enable(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp864000 = $spf09a96->post('ids'); $spc7c736 = (int) $spf09a96->post('enabled'); $this->authQuery($spf09a96, \App\Product::class)->whereIn('id', explode(',', $sp864000))->update(array('enabled' => $spc7c736)); return Response::success(); } function delete(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string')); $sp864000 = $spf09a96->post('ids'); $sp864000 = explode(',', $sp864000); $sp0d0d6c = $this->authQuery($spf09a96, \App\Product::class)->whereIn('id', $sp864000); $sp5fe424 = $this->authQuery($spf09a96, \App\Card::class)->whereIn('product_id', $sp864000); return DB::transaction(function () use($sp0d0d6c, $sp5fe424) { $sp0d0d6c->delete(); $sp5fe424->forceDelete(); return Response::success(); }); } function count_sync(Request $spf09a96) { \App\Product::refreshCount($this->getUser($spf09a96)); return Response::success(); } }