<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spfb41ce) { $sp61dd0f = $this->authQuery($spfb41ce, \App\Product::class)->with(array('category' => function (Relation $sp61dd0f) { $sp61dd0f->select(array('id', 'name', 'password_open')); })); $sp2e420a = $spfb41ce->post('search', false); $sp286c56 = $spfb41ce->post('val', false); if ($sp2e420a && $sp286c56) { if ($sp2e420a == 'simple') { if ($spfb41ce->post('from') === 'card') { $sp61dd0f->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp61dd0f->where('category_id', $sp286c56)->get(array('id', 'name'))); } elseif ($sp2e420a == 'id') { $sp61dd0f->where('id', $sp286c56); } elseif ($sp2e420a == 'category_id') { $sp61dd0f->where('category_id', $sp286c56); } else { $sp61dd0f->where($sp2e420a, 'like', '%' . $sp286c56 . '%'); } } $spf9ba01 = (int) $spfb41ce->post('category_id'); if ($spf9ba01 > 0) { $sp61dd0f->where('category_id', $spf9ba01); } $sp691786 = $spfb41ce->post('enabled'); if (strlen($sp691786)) { $sp61dd0f->whereIn('enabled', explode(',', $sp691786)); } $sp91e8e3 = (int) $spfb41ce->post('current_page', 1); $sp3cad87 = (int) $spfb41ce->post('per_page', 20); $sp32d442 = $sp61dd0f->orderBy('sort')->paginate($sp3cad87, array('*'), 'page', $sp91e8e3); foreach ($sp32d442->items() as $spae5d03) { $spae5d03->setAppends(array('count', 'url')); } return Response::success($sp32d442); } function sort(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'required|integer', 'sort' => 'required|integer')); $spae5d03 = $this->authQuery($spfb41ce, \App\Product::class)->findOrFail($spfb41ce->post('id')); $spae5d03->sort = $spfb41ce->post('sort'); $spae5d03->saveOrFail(); return Response::success(); } function set_count(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'required|integer', 'count' => 'required|integer')); $spae5d03 = $this->authQuery($spfb41ce, \App\Product::class)->findOrFail($spfb41ce->post('id')); $spae5d03->count_all = $spae5d03->count_sold + $spfb41ce->post('count'); $spae5d03->saveOrFail(); return Response::success(); } function category_change(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'required|integer', 'category_id' => 'required')); $spae5d03 = $this->authQuery($spfb41ce, \App\Product::class)->findOrFail($spfb41ce->post('id')); $spf9ba01 = $spfb41ce->input('category_id'); if (is_string($spf9ba01) && @$spf9ba01[0] === '+') { $sp6ebb48 = \App\Category::create(array('user_id' => $spae5d03->user_id, 'name' => substr($spf9ba01, 1), 'enabled' => true)); } else { $sp6ebb48 = $this->authQuery($spfb41ce, \App\Category::class)->findOrFail($spf9ba01); } $spae5d03->category_id = $sp6ebb48->id; $spae5d03->save(); return Response::success($sp6ebb48); } function edit(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spf9ba01 = $spfb41ce->post('category_id'); $spf8c427 = is_string($spf9ba01) && @$spf9ba01[0] === '+'; if ($spf8c427) { $sp6ebb48 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spfb41ce), 'name' => substr($spf9ba01, 1), 'enabled' => true)); } else { $sp6ebb48 = $this->authQuery($spfb41ce, \App\Category::class)->where('id', @intval($spf9ba01))->first(); if (!$sp6ebb48) { return Response::fail('商品分类不存在'); } } $spf4db88 = $spfb41ce->post('name'); $sp71720a = $spfb41ce->post('description'); $sp75bd94 = $spfb41ce->post('instructions'); $spd6525c = (int) $spfb41ce->post('buy_min', 0); $spb4ff8d = (int) $spfb41ce->post('buy_max', 0); $spb8e7fd = (int) round($spfb41ce->post('cost') * 100); $sp5e3d10 = (int) round($spfb41ce->post('price') * 100); $sp6c12c2 = $spfb41ce->post('price_whole'); $spbb37af = @json_decode($sp6c12c2, true); foreach ($spbb37af as $spa17761) { if ($spa17761[1] < 1 || $spa17761[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $speb9745 = explode('|', System::_get('filter_words')); if (($spd7b285 = Helper::filterWords($spf4db88, $speb9745)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spd7b285); } if (($spd7b285 = Helper::filterWords($sp71720a, $speb9745)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spd7b285); } if (($spd7b285 = Helper::filterWords($sp75bd94, $speb9745)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spd7b285); } } if ((int) $spfb41ce->post('id')) { $spae5d03 = $this->authQuery($spfb41ce, \App\Product::class)->findOrFail($spfb41ce->post('id')); } else { $spae5d03 = new \App\Product(); $spae5d03->count_sold = 0; $spae5d03->user_id = $this->getUserIdOrFail($spfb41ce); } $spae5d03->category_id = $sp6ebb48->id; $spae5d03->name = $spf4db88; $sp96dce0 = new AntiXSS(); $spae5d03->description = $sp96dce0->xss_clean($sp71720a); $spae5d03->instructions = $sp96dce0->xss_clean($sp75bd94); $spae5d03->fields = $spfb41ce->post('fields'); $spae5d03->delivery = (int) $spfb41ce->post('delivery'); $spae5d03->sort = $spfb41ce->post('sort'); $spae5d03->buy_min = $spd6525c; $spae5d03->buy_max = $spb4ff8d; $spae5d03->count_warn = $spfb41ce->post('count_warn'); $spae5d03->support_coupon = $spfb41ce->post('support_coupon') === 'true'; $spae5d03->password = $spfb41ce->post('password'); $spae5d03->password_open = $spfb41ce->post('password_open') === 'true'; $spae5d03->cost = $spb8e7fd; $spae5d03->price = $sp5e3d10; $spae5d03->price_whole = $sp6c12c2; $spae5d03->enabled = (int) $spfb41ce->post('enabled'); $spae5d03->inventory = (int) $spfb41ce->post('inventory'); $spae5d03->saveOrFail(); $spae7658 = array(); if ($spf8c427) { $spae7658['category'] = $sp6ebb48; } return Response::success($spae7658); } function enable(Request $spfb41ce) { $this->validate($spfb41ce, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp87851e = $spfb41ce->post('ids'); $sp691786 = (int) $spfb41ce->post('enabled'); $this->authQuery($spfb41ce, \App\Product::class)->whereIn('id', explode(',', $sp87851e))->update(array('enabled' => $sp691786)); return Response::success(); } function delete(Request $spfb41ce) { $this->validate($spfb41ce, array('ids' => 'required|string')); $sp87851e = $spfb41ce->post('ids'); $sp87851e = explode(',', $sp87851e); $spea68a6 = $this->authQuery($spfb41ce, \App\Product::class)->whereIn('id', $sp87851e); $sp825af8 = $this->authQuery($spfb41ce, \App\Card::class)->whereIn('product_id', $sp87851e); return DB::transaction(function () use($spea68a6, $sp825af8) { $spea68a6->delete(); $sp825af8->forceDelete(); return Response::success(); }); } function count_sync(Request $spfb41ce) { \App\Product::refreshCount($this->getUser($spfb41ce)); return Response::success(); } }