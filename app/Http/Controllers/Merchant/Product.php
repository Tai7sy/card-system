<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spe5a184) { $spa8a4ff = $this->authQuery($spe5a184, \App\Product::class)->with(array('category' => function (Relation $spa8a4ff) { $spa8a4ff->select(array('id', 'name', 'password_open')); })); $sp8336a0 = $spe5a184->input('search', false); $spdbda3a = $spe5a184->input('val', false); if ($sp8336a0 && $spdbda3a) { if ($sp8336a0 == 'simple') { if ($spe5a184->input('from') === 'card') { $spa8a4ff->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($spa8a4ff->where('category_id', $spdbda3a)->get(array('id', 'name'))); } elseif ($sp8336a0 == 'id') { $spa8a4ff->where('id', $spdbda3a); } elseif ($sp8336a0 == 'category_id') { $spa8a4ff->where('category_id', $spdbda3a); } else { $spa8a4ff->where($sp8336a0, 'like', '%' . $spdbda3a . '%'); } } $sp23779d = (int) $spe5a184->input('category_id'); if ($sp23779d > 0) { $spa8a4ff->where('category_id', $sp23779d); } $sp89bdae = $spe5a184->input('enabled'); if (strlen($sp89bdae)) { $spa8a4ff->whereIn('enabled', explode(',', $sp89bdae)); } $sp32b355 = (int) $spe5a184->input('current_page', 1); $sp048014 = (int) $spe5a184->input('per_page', 20); $spdf0cee = $spa8a4ff->orderBy('sort')->paginate($sp048014, array('*'), 'page', $sp32b355); foreach ($spdf0cee->items() as $spb395ca) { $spb395ca->setAppends(array('count', 'url')); } return Response::success($spdf0cee); } function sort(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'required|integer', 'sort' => 'required|integer')); $spb395ca = $this->authQuery($spe5a184, \App\Product::class)->findOrFail($spe5a184->post('id')); $spb395ca->sort = $spe5a184->post('sort'); $spb395ca->saveOrFail(); return Response::success(); } function set_count(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'required|integer', 'count' => 'required|integer')); $spb395ca = $this->authQuery($spe5a184, \App\Product::class)->findOrFail($spe5a184->post('id')); $spb395ca->count_all = $spb395ca->count_sold + $spe5a184->post('count'); $spb395ca->saveOrFail(); return Response::success(); } function category_change(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'required|integer', 'category_id' => 'required')); $spb395ca = $this->authQuery($spe5a184, \App\Product::class)->findOrFail($spe5a184->post('id')); $sp23779d = $spe5a184->input('category_id'); if (is_string($sp23779d) && @$sp23779d[0] === '+') { $spf6286b = \App\Category::create(array('user_id' => $spb395ca->user_id, 'name' => substr($sp23779d, 1), 'enabled' => true)); } else { $spf6286b = $this->authQuery($spe5a184, \App\Category::class)->findOrFail($sp23779d); } $spb395ca->category_id = $spf6286b->id; $spb395ca->save(); return Response::success($spf6286b); } function edit(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp23779d = $spe5a184->post('category_id'); $spa77d7c = is_string($sp23779d) && @$sp23779d[0] === '+'; if ($spa77d7c) { $spf6286b = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spe5a184), 'name' => substr($sp23779d, 1), 'enabled' => true)); } else { $spf6286b = $this->authQuery($spe5a184, \App\Category::class)->where('id', @intval($sp23779d))->first(); if (!$spf6286b) { return Response::fail('商品分类不存在'); } } $spbc4c78 = $spe5a184->post('name'); $sp1fa267 = $spe5a184->post('description'); $sp63cfec = $spe5a184->post('instructions'); $spb272d2 = (int) $spe5a184->post('buy_min', 0); $sp4aabc7 = (int) $spe5a184->post('buy_max', 0); $spea6f55 = (int) round($spe5a184->post('cost') * 100); $spc44785 = (int) round($spe5a184->post('price') * 100); $spfa2d7c = $spe5a184->post('price_whole'); $sp369141 = @json_decode($spfa2d7c, true); foreach ($sp369141 as $sp7dd49d) { if ($sp7dd49d[1] < 1 || $sp7dd49d[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spde3725 = explode('|', System::_get('filter_words')); if (($spa64ee0 = Helper::filterWords($spbc4c78, $spde3725)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spa64ee0); } if (($spa64ee0 = Helper::filterWords($sp1fa267, $spde3725)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spa64ee0); } if (($spa64ee0 = Helper::filterWords($sp63cfec, $spde3725)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spa64ee0); } } if ((int) $spe5a184->post('id')) { $spb395ca = $this->authQuery($spe5a184, \App\Product::class)->findOrFail($spe5a184->post('id')); } else { $spb395ca = new \App\Product(); $spb395ca->count_sold = 0; $spb395ca->user_id = $this->getUserIdOrFail($spe5a184); } $spb395ca->category_id = $spf6286b->id; $spb395ca->name = $spbc4c78; $sp5a7d94 = new AntiXSS(); $spb395ca->description = $sp5a7d94->xss_clean($sp1fa267); $spb395ca->instructions = $sp5a7d94->xss_clean($sp63cfec); $spb395ca->fields = $spe5a184->post('fields'); $spb395ca->delivery = (int) $spe5a184->post('delivery'); $spb395ca->sort = $spe5a184->post('sort'); $spb395ca->buy_min = $spb272d2; $spb395ca->buy_max = $sp4aabc7; $spb395ca->count_warn = $spe5a184->post('count_warn'); $spb395ca->support_coupon = $spe5a184->post('support_coupon') === 'true'; $spb395ca->password = $spe5a184->post('password'); $spb395ca->password_open = $spe5a184->post('password_open') === 'true'; $spb395ca->cost = $spea6f55; $spb395ca->price = $spc44785; $spb395ca->price_whole = $spfa2d7c; $spb395ca->enabled = (int) $spe5a184->post('enabled'); $spb395ca->inventory = (int) $spe5a184->post('inventory'); $spb395ca->saveOrFail(); $spca52a4 = array(); if ($spa77d7c) { $spca52a4['category'] = $spf6286b; } return Response::success($spca52a4); } function enable(Request $spe5a184) { $this->validate($spe5a184, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp8152f4 = $spe5a184->post('ids'); $sp89bdae = (int) $spe5a184->post('enabled'); $this->authQuery($spe5a184, \App\Product::class)->whereIn('id', explode(',', $sp8152f4))->update(array('enabled' => $sp89bdae)); return Response::success(); } function delete(Request $spe5a184) { $this->validate($spe5a184, array('ids' => 'required|string')); $sp8152f4 = $spe5a184->post('ids'); $sp8152f4 = explode(',', $sp8152f4); $sp429e29 = $this->authQuery($spe5a184, \App\Product::class)->whereIn('id', $sp8152f4); $sp400a8e = $this->authQuery($spe5a184, \App\Card::class)->whereIn('product_id', $sp8152f4); return DB::transaction(function () use($sp429e29, $sp400a8e) { $sp429e29->delete(); $sp400a8e->forceDelete(); return Response::success(); }); } function count_sync(Request $spe5a184) { \App\Product::refreshCount($this->getUser($spe5a184)); return Response::success(); } }