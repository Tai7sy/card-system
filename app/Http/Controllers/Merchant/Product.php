<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spccbfb6) { $sp479bde = $this->authQuery($spccbfb6, \App\Product::class)->with(array('category' => function (Relation $sp479bde) { $sp479bde->select(array('id', 'name', 'password_open')); })); $sp6f5fd7 = $spccbfb6->input('search', false); $spc4b2f5 = $spccbfb6->input('val', false); if ($sp6f5fd7 && $spc4b2f5) { if ($sp6f5fd7 == 'simple') { if ($spccbfb6->input('from') === 'card') { $sp479bde->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp479bde->where('category_id', $spc4b2f5)->get(array('id', 'name'))); } elseif ($sp6f5fd7 == 'id') { $sp479bde->where('id', $spc4b2f5); } elseif ($sp6f5fd7 == 'category_id') { $sp479bde->where('category_id', $spc4b2f5); } else { $sp479bde->where($sp6f5fd7, 'like', '%' . $spc4b2f5 . '%'); } } $sp76eadf = (int) $spccbfb6->input('category_id'); if ($sp76eadf > 0) { $sp479bde->where('category_id', $sp76eadf); } $sp64a3d6 = $spccbfb6->input('enabled'); if (strlen($sp64a3d6)) { $sp479bde->whereIn('enabled', explode(',', $sp64a3d6)); } $sp1e473f = (int) $spccbfb6->input('current_page', 1); $sped1e1d = (int) $spccbfb6->input('per_page', 20); $sp7d3bbd = $sp479bde->orderBy('sort')->paginate($sped1e1d, array('*'), 'page', $sp1e473f); foreach ($sp7d3bbd->items() as $sp886a9b) { $sp886a9b->setAppends(array('count', 'url')); } return Response::success($sp7d3bbd); } function sort(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp886a9b = $this->authQuery($spccbfb6, \App\Product::class)->findOrFail($spccbfb6->post('id')); $sp886a9b->sort = $spccbfb6->post('sort'); $sp886a9b->saveOrFail(); return Response::success(); } function set_count(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer', 'count' => 'required|integer')); $sp886a9b = $this->authQuery($spccbfb6, \App\Product::class)->findOrFail($spccbfb6->post('id')); $sp886a9b->count_all = $sp886a9b->count_sold + $spccbfb6->post('count'); $sp886a9b->saveOrFail(); return Response::success(); } function category_change(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer', 'category_id' => 'required')); $sp886a9b = $this->authQuery($spccbfb6, \App\Product::class)->findOrFail($spccbfb6->post('id')); $sp76eadf = $spccbfb6->input('category_id'); if (is_string($sp76eadf) && @$sp76eadf[0] === '+') { $sp6e5e3d = \App\Category::create(array('user_id' => $sp886a9b->user_id, 'name' => substr($sp76eadf, 1), 'enabled' => true)); } else { $sp6e5e3d = $this->authQuery($spccbfb6, \App\Category::class)->findOrFail($sp76eadf); } $sp886a9b->category_id = $sp6e5e3d->id; $sp886a9b->save(); return Response::success($sp6e5e3d); } function edit(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp76eadf = $spccbfb6->post('category_id'); $sp45d26d = is_string($sp76eadf) && @$sp76eadf[0] === '+'; if ($sp45d26d) { $sp6e5e3d = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spccbfb6), 'name' => substr($sp76eadf, 1), 'enabled' => true)); } else { $sp6e5e3d = $this->authQuery($spccbfb6, \App\Category::class)->where('id', @intval($sp76eadf))->first(); if (!$sp6e5e3d) { return Response::fail('商品分类不存在'); } } $sp7fb7ec = $spccbfb6->post('name'); $sp5e4978 = $spccbfb6->post('description'); $sp1682e4 = $spccbfb6->post('instructions'); $spefc3f4 = (int) $spccbfb6->post('buy_min', 0); $sp735d93 = (int) $spccbfb6->post('buy_max', 0); $sp1f80b5 = (int) round($spccbfb6->post('cost') * 100); $spbd6b66 = (int) round($spccbfb6->post('price') * 100); $sp5467a7 = $spccbfb6->post('price_whole'); $spd98e2b = @json_decode($sp5467a7, true); foreach ($spd98e2b as $sp1f0a3f) { if ($sp1f0a3f[1] < 1 || $sp1f0a3f[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp2ff8f2 = explode('|', System::_get('filter_words')); if (($spa51230 = Helper::filterWords($sp7fb7ec, $sp2ff8f2)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spa51230); } if (($spa51230 = Helper::filterWords($sp5e4978, $sp2ff8f2)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spa51230); } if (($spa51230 = Helper::filterWords($sp1682e4, $sp2ff8f2)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spa51230); } } if ((int) $spccbfb6->post('id')) { $sp886a9b = $this->authQuery($spccbfb6, \App\Product::class)->findOrFail($spccbfb6->post('id')); } else { $sp886a9b = new \App\Product(); $sp886a9b->count_sold = 0; $sp886a9b->user_id = $this->getUserIdOrFail($spccbfb6); } $sp886a9b->category_id = $sp6e5e3d->id; $sp886a9b->name = $sp7fb7ec; $spae77d0 = new AntiXSS(); $sp886a9b->description = $spae77d0->xss_clean($sp5e4978); $sp886a9b->instructions = $spae77d0->xss_clean($sp1682e4); $sp886a9b->fields = $spccbfb6->post('fields'); $sp886a9b->delivery = (int) $spccbfb6->post('delivery'); $sp886a9b->sort = $spccbfb6->post('sort'); $sp886a9b->buy_min = $spefc3f4; $sp886a9b->buy_max = $sp735d93; $sp886a9b->count_warn = $spccbfb6->post('count_warn'); $sp886a9b->support_coupon = $spccbfb6->post('support_coupon') === 'true'; $sp886a9b->password = $spccbfb6->post('password'); $sp886a9b->password_open = $spccbfb6->post('password_open') === 'true'; $sp886a9b->cost = $sp1f80b5; $sp886a9b->price = $spbd6b66; $sp886a9b->price_whole = $sp5467a7; $sp886a9b->enabled = (int) $spccbfb6->post('enabled'); $sp886a9b->inventory = (int) $spccbfb6->post('inventory'); $sp886a9b->saveOrFail(); $sp7fa26f = array(); if ($sp45d26d) { $sp7fa26f['category'] = $sp6e5e3d; } return Response::success($sp7fa26f); } function enable(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string', 'enabled' => 'required|integer')); $spdf2438 = $spccbfb6->post('ids'); $sp64a3d6 = (int) $spccbfb6->post('enabled'); $this->authQuery($spccbfb6, \App\Product::class)->whereIn('id', explode(',', $spdf2438))->update(array('enabled' => $sp64a3d6)); return Response::success(); } function delete(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string')); $spdf2438 = $spccbfb6->post('ids'); $spdf2438 = explode(',', $spdf2438); $spfd2bc7 = $this->authQuery($spccbfb6, \App\Product::class)->whereIn('id', $spdf2438); $sp5b3bc5 = $this->authQuery($spccbfb6, \App\Card::class)->whereIn('product_id', $spdf2438); return DB::transaction(function () use($spfd2bc7, $sp5b3bc5) { $spfd2bc7->delete(); $sp5b3bc5->forceDelete(); return Response::success(); }); } function count_sync(Request $spccbfb6) { \App\Product::refreshCount($this->getUser($spccbfb6)); return Response::success(); } }