<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spdf16c9) { $spc64cdd = $this->authQuery($spdf16c9, \App\Product::class)->with(array('category' => function (Relation $spc64cdd) { $spc64cdd->select(array('id', 'name', 'password_open')); })); $spdb3063 = $spdf16c9->input('search', false); $sp085db7 = $spdf16c9->input('val', false); if ($spdb3063 && $sp085db7) { if ($spdb3063 == 'simple') { if ($spdf16c9->input('from') === 'card') { $spc64cdd->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($spc64cdd->where('category_id', $sp085db7)->get(array('id', 'name'))); } elseif ($spdb3063 == 'id') { $spc64cdd->where('id', $sp085db7); } elseif ($spdb3063 == 'category_id') { $spc64cdd->where('category_id', $sp085db7); } else { $spc64cdd->where($spdb3063, 'like', '%' . $sp085db7 . '%'); } } $spf26f7e = (int) $spdf16c9->input('category_id'); if ($spf26f7e > 0) { $spc64cdd->where('category_id', $spf26f7e); } $sp0bc006 = $spdf16c9->input('enabled'); if (strlen($sp0bc006)) { $spc64cdd->whereIn('enabled', explode(',', $sp0bc006)); } $sp7ec90f = (int) $spdf16c9->input('current_page', 1); $spc4a487 = (int) $spdf16c9->input('per_page', 20); $sp61ff14 = $spc64cdd->orderBy('sort')->paginate($spc4a487, array('*'), 'page', $sp7ec90f); foreach ($sp61ff14->items() as $sp94204a) { $sp94204a->setAppends(array('count', 'url')); } return Response::success($sp61ff14); } function sort(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp94204a = $this->authQuery($spdf16c9, \App\Product::class)->findOrFail($spdf16c9->post('id')); $sp94204a->sort = $spdf16c9->post('sort'); $sp94204a->saveOrFail(); return Response::success(); } function set_count(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer', 'count' => 'required|integer')); $sp94204a = $this->authQuery($spdf16c9, \App\Product::class)->findOrFail($spdf16c9->post('id')); $sp94204a->count_all = $sp94204a->count_sold + $spdf16c9->post('count'); $sp94204a->saveOrFail(); return Response::success(); } function category_change(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer', 'category_id' => 'required')); $sp94204a = $this->authQuery($spdf16c9, \App\Product::class)->findOrFail($spdf16c9->post('id')); $spf26f7e = $spdf16c9->input('category_id'); if (is_string($spf26f7e) && @$spf26f7e[0] === '+') { $spb98da4 = \App\Category::create(array('user_id' => $sp94204a->user_id, 'name' => substr($spf26f7e, 1), 'enabled' => true)); } else { $spb98da4 = $this->authQuery($spdf16c9, \App\Category::class)->findOrFail($spf26f7e); } $sp94204a->category_id = $spb98da4->id; $sp94204a->save(); return Response::success($spb98da4); } function edit(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spf26f7e = $spdf16c9->post('category_id'); $spda2710 = is_string($spf26f7e) && @$spf26f7e[0] === '+'; if ($spda2710) { $spb98da4 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spdf16c9), 'name' => substr($spf26f7e, 1), 'enabled' => true)); } else { $spb98da4 = $this->authQuery($spdf16c9, \App\Category::class)->where('id', @intval($spf26f7e))->first(); if (!$spb98da4) { return Response::fail('商品分类不存在'); } } $spae6970 = $spdf16c9->post('name'); $sp652636 = $spdf16c9->post('description'); $sp25a8bf = $spdf16c9->post('instructions'); $sp8db4d7 = (int) $spdf16c9->post('buy_min', 0); $sp56aa29 = (int) $spdf16c9->post('buy_max', 0); $spba4f7c = (int) round($spdf16c9->post('cost') * 100); $spaca64f = (int) round($spdf16c9->post('price') * 100); $sp8d7490 = $spdf16c9->post('price_whole'); $spdeff33 = @json_decode($sp8d7490, true); foreach ($spdeff33 as $spd97e7c) { if ($spd97e7c[1] < 1 || $spd97e7c[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spc310c4 = explode('|', System::_get('filter_words')); if (($sp8ee8d3 = Helper::filterWords($spae6970, $spc310c4)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp8ee8d3); } if (($sp8ee8d3 = Helper::filterWords($sp652636, $spc310c4)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp8ee8d3); } if (($sp8ee8d3 = Helper::filterWords($sp25a8bf, $spc310c4)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp8ee8d3); } } if ((int) $spdf16c9->post('id')) { $sp94204a = $this->authQuery($spdf16c9, \App\Product::class)->findOrFail($spdf16c9->post('id')); } else { $sp94204a = new \App\Product(); $sp94204a->count_sold = 0; $sp94204a->user_id = $this->getUserIdOrFail($spdf16c9); } $sp94204a->category_id = $spb98da4->id; $sp94204a->name = $spae6970; $spd760b7 = new AntiXSS(); $sp94204a->description = $spd760b7->xss_clean($sp652636); $sp94204a->instructions = $spd760b7->xss_clean($sp25a8bf); $sp94204a->fields = $spdf16c9->post('fields'); $sp94204a->delivery = (int) $spdf16c9->post('delivery'); $sp94204a->sort = $spdf16c9->post('sort'); $sp94204a->buy_min = $sp8db4d7; $sp94204a->buy_max = $sp56aa29; $sp94204a->count_warn = $spdf16c9->post('count_warn'); $sp94204a->support_coupon = $spdf16c9->post('support_coupon') === 'true'; $sp94204a->password = $spdf16c9->post('password'); $sp94204a->password_open = $spdf16c9->post('password_open') === 'true'; $sp94204a->cost = $spba4f7c; $sp94204a->price = $spaca64f; $sp94204a->price_whole = $sp8d7490; $sp94204a->enabled = (int) $spdf16c9->post('enabled'); $sp94204a->inventory = (int) $spdf16c9->post('inventory'); $sp94204a->saveOrFail(); $sp4ffb9b = array(); if ($spda2710) { $sp4ffb9b['category'] = $spb98da4; } return Response::success($sp4ffb9b); } function enable(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string', 'enabled' => 'required|integer')); $spb19a2c = $spdf16c9->post('ids'); $sp0bc006 = (int) $spdf16c9->post('enabled'); $this->authQuery($spdf16c9, \App\Product::class)->whereIn('id', explode(',', $spb19a2c))->update(array('enabled' => $sp0bc006)); return Response::success(); } function delete(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string')); $spb19a2c = $spdf16c9->post('ids'); $spb19a2c = explode(',', $spb19a2c); $sp94a229 = $this->authQuery($spdf16c9, \App\Product::class)->whereIn('id', $spb19a2c); $sp98be69 = $this->authQuery($spdf16c9, \App\Card::class)->whereIn('product_id', $spb19a2c); return DB::transaction(function () use($sp94a229, $sp98be69) { $sp94a229->delete(); $sp98be69->forceDelete(); return Response::success(); }); } function count_sync(Request $spdf16c9) { \App\Product::refreshCount($this->getUser($spdf16c9)); return Response::success(); } }