<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spba756f) { $spca8acc = $this->authQuery($spba756f, \App\Product::class)->with(array('category' => function (Relation $spca8acc) { $spca8acc->select(array('id', 'name', 'password_open')); })); $speeddd9 = $spba756f->post('search', false); $spe1fc85 = $spba756f->post('val', false); if ($speeddd9 && $spe1fc85) { if ($speeddd9 == 'simple') { if ($spba756f->post('from') === 'card') { $spca8acc->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($spca8acc->where('category_id', $spe1fc85)->get(array('id', 'name'))); } elseif ($speeddd9 == 'id') { $spca8acc->where('id', $spe1fc85); } elseif ($speeddd9 == 'category_id') { $spca8acc->where('category_id', $spe1fc85); } else { $spca8acc->where($speeddd9, 'like', '%' . $spe1fc85 . '%'); } } $sp55f32c = (int) $spba756f->post('category_id'); if ($sp55f32c > 0) { $spca8acc->where('category_id', $sp55f32c); } $spc7c4ac = $spba756f->post('enabled'); if (strlen($spc7c4ac)) { $spca8acc->whereIn('enabled', explode(',', $spc7c4ac)); } $sp881a75 = (int) $spba756f->post('current_page', 1); $sp2a01a9 = (int) $spba756f->post('per_page', 20); $spfea7ce = $spca8acc->orderBy('sort')->paginate($sp2a01a9, array('*'), 'page', $sp881a75); foreach ($spfea7ce->items() as $sp9dfc99) { $sp9dfc99->setAppends(array('count', 'url')); } return Response::success($spfea7ce); } function sort(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp9dfc99 = $this->authQuery($spba756f, \App\Product::class)->findOrFail($spba756f->post('id')); $sp9dfc99->sort = $spba756f->post('sort'); $sp9dfc99->saveOrFail(); return Response::success(); } function set_count(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer', 'count' => 'required|integer')); $sp9dfc99 = $this->authQuery($spba756f, \App\Product::class)->findOrFail($spba756f->post('id')); $sp9dfc99->count_all = $sp9dfc99->count_sold + $spba756f->post('count'); $sp9dfc99->saveOrFail(); return Response::success(); } function category_change(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer', 'category_id' => 'required')); $sp9dfc99 = $this->authQuery($spba756f, \App\Product::class)->findOrFail($spba756f->post('id')); $sp55f32c = $spba756f->input('category_id'); if (is_string($sp55f32c) && @$sp55f32c[0] === '+') { $sp1cd1e4 = \App\Category::create(array('user_id' => $sp9dfc99->user_id, 'name' => substr($sp55f32c, 1), 'enabled' => true)); } else { $sp1cd1e4 = $this->authQuery($spba756f, \App\Category::class)->findOrFail($sp55f32c); } $sp9dfc99->category_id = $sp1cd1e4->id; $sp9dfc99->save(); return Response::success($sp1cd1e4); } function edit(Request $spba756f) { $this->validate($spba756f, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp55f32c = $spba756f->post('category_id'); $spf001d7 = is_string($sp55f32c) && @$sp55f32c[0] === '+'; if ($spf001d7) { $sp1cd1e4 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spba756f), 'name' => substr($sp55f32c, 1), 'enabled' => true)); } else { $sp1cd1e4 = $this->authQuery($spba756f, \App\Category::class)->where('id', @intval($sp55f32c))->first(); if (!$sp1cd1e4) { return Response::fail('商品分类不存在'); } } $sp387f04 = $spba756f->post('name'); $spfed9d4 = $spba756f->post('description'); $sp95255c = $spba756f->post('instructions'); $sp6f2b2c = (int) $spba756f->post('buy_min', 0); $spea57b7 = (int) $spba756f->post('buy_max', 0); $spdd18a5 = (int) round($spba756f->post('cost') * 100); $sp61875e = (int) round($spba756f->post('price') * 100); $sp75624c = $spba756f->post('price_whole'); $sp43ecd3 = @json_decode($sp75624c, true); foreach ($sp43ecd3 as $sp2cd3a5) { if ($sp2cd3a5[1] < 1 || $sp2cd3a5[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp585bcb = explode('|', System::_get('filter_words')); if (($sp5359c9 = Helper::filterWords($sp387f04, $sp585bcb)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp5359c9); } if (($sp5359c9 = Helper::filterWords($spfed9d4, $sp585bcb)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp5359c9); } if (($sp5359c9 = Helper::filterWords($sp95255c, $sp585bcb)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp5359c9); } } if ((int) $spba756f->post('id')) { $sp9dfc99 = $this->authQuery($spba756f, \App\Product::class)->findOrFail($spba756f->post('id')); } else { $sp9dfc99 = new \App\Product(); $sp9dfc99->count_sold = 0; $sp9dfc99->user_id = $this->getUserIdOrFail($spba756f); } $sp9dfc99->category_id = $sp1cd1e4->id; $sp9dfc99->name = $sp387f04; $sp183456 = new AntiXSS(); $sp9dfc99->description = $sp183456->xss_clean($spfed9d4); $sp9dfc99->instructions = $sp183456->xss_clean($sp95255c); $sp9dfc99->fields = $spba756f->post('fields'); $sp9dfc99->delivery = (int) $spba756f->post('delivery'); $sp9dfc99->sort = $spba756f->post('sort'); $sp9dfc99->buy_min = $sp6f2b2c; $sp9dfc99->buy_max = $spea57b7; $sp9dfc99->count_warn = $spba756f->post('count_warn'); $sp9dfc99->support_coupon = $spba756f->post('support_coupon') === 'true'; $sp9dfc99->password = $spba756f->post('password'); $sp9dfc99->password_open = $spba756f->post('password_open') === 'true'; $sp9dfc99->cost = $spdd18a5; $sp9dfc99->price = $sp61875e; $sp9dfc99->price_whole = $sp75624c; $sp9dfc99->enabled = (int) $spba756f->post('enabled'); $sp9dfc99->inventory = (int) $spba756f->post('inventory'); $sp9dfc99->saveOrFail(); $spb9364a = array(); if ($spf001d7) { $spb9364a['category'] = $sp1cd1e4; } return Response::success($spb9364a); } function enable(Request $spba756f) { $this->validate($spba756f, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp12026a = $spba756f->post('ids'); $spc7c4ac = (int) $spba756f->post('enabled'); $this->authQuery($spba756f, \App\Product::class)->whereIn('id', explode(',', $sp12026a))->update(array('enabled' => $spc7c4ac)); return Response::success(); } function delete(Request $spba756f) { $this->validate($spba756f, array('ids' => 'required|string')); $sp12026a = $spba756f->post('ids'); $sp12026a = explode(',', $sp12026a); $sp94e351 = $this->authQuery($spba756f, \App\Product::class)->whereIn('id', $sp12026a); $spd6fbf5 = $this->authQuery($spba756f, \App\Card::class)->whereIn('product_id', $sp12026a); return DB::transaction(function () use($sp94e351, $spd6fbf5) { $sp94e351->delete(); $spd6fbf5->forceDelete(); return Response::success(); }); } function count_sync(Request $spba756f) { \App\Product::refreshCount($this->getUser($spba756f)); return Response::success(); } }