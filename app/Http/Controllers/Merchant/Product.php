<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp7f7104) { $spbec213 = $this->authQuery($sp7f7104, \App\Product::class)->with(array('category' => function (Relation $spbec213) { $spbec213->select(array('id', 'name', 'password_open')); })); $spad233c = $sp7f7104->input('search', false); $spaefd46 = $sp7f7104->input('val', false); if ($spad233c && $spaefd46) { if ($spad233c == 'simple') { if ($sp7f7104->input('from') === 'card') { $spbec213->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($spbec213->where('category_id', $spaefd46)->get(array('id', 'name'))); } elseif ($spad233c == 'id') { $spbec213->where('id', $spaefd46); } elseif ($spad233c == 'category_id') { $spbec213->where('category_id', $spaefd46); } else { $spbec213->where($spad233c, 'like', '%' . $spaefd46 . '%'); } } $sp92ffbb = (int) $sp7f7104->input('category_id'); if ($sp92ffbb > 0) { $spbec213->where('category_id', $sp92ffbb); } $sp229dc8 = $sp7f7104->input('enabled'); if (strlen($sp229dc8)) { $spbec213->whereIn('enabled', explode(',', $sp229dc8)); } $spfe8869 = (int) $sp7f7104->input('current_page', 1); $spec5082 = (int) $sp7f7104->input('per_page', 20); $spa229b5 = $spbec213->orderBy('sort')->paginate($spec5082, array('*'), 'page', $spfe8869); foreach ($spa229b5->items() as $spfa410d) { $spfa410d->setAppends(array('count', 'url')); } return Response::success($spa229b5); } function sort(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer', 'sort' => 'required|integer')); $spfa410d = $this->authQuery($sp7f7104, \App\Product::class)->findOrFail($sp7f7104->post('id')); $spfa410d->sort = $sp7f7104->post('sort'); $spfa410d->saveOrFail(); return Response::success(); } function set_count(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer', 'count' => 'required|integer')); $spfa410d = $this->authQuery($sp7f7104, \App\Product::class)->findOrFail($sp7f7104->post('id')); $spfa410d->count_all = $spfa410d->count_sold + $sp7f7104->post('count'); $spfa410d->saveOrFail(); return Response::success(); } function category_change(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer', 'category_id' => 'required')); $spfa410d = $this->authQuery($sp7f7104, \App\Product::class)->findOrFail($sp7f7104->post('id')); $sp92ffbb = $sp7f7104->input('category_id'); if (is_string($sp92ffbb) && @$sp92ffbb[0] === '+') { $sp45344f = \App\Category::create(array('user_id' => $spfa410d->user_id, 'name' => substr($sp92ffbb, 1), 'enabled' => true)); } else { $sp45344f = $this->authQuery($sp7f7104, \App\Category::class)->findOrFail($sp92ffbb); } $spfa410d->category_id = $sp45344f->id; $spfa410d->save(); return Response::success($sp45344f); } function edit(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp92ffbb = $sp7f7104->post('category_id'); $spd42ce4 = is_string($sp92ffbb) && @$sp92ffbb[0] === '+'; if ($spd42ce4) { $sp45344f = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp7f7104), 'name' => substr($sp92ffbb, 1), 'enabled' => true)); } else { $sp45344f = $this->authQuery($sp7f7104, \App\Category::class)->where('id', @intval($sp92ffbb))->first(); if (!$sp45344f) { return Response::fail('商品分类不存在'); } } $sp6f359d = $sp7f7104->post('name'); $sp2a1496 = $sp7f7104->post('description'); $spdf97eb = $sp7f7104->post('instructions'); $spebce18 = (int) $sp7f7104->post('buy_min', 0); $sp10da28 = (int) $sp7f7104->post('buy_max', 0); $sp5791b2 = (int) round($sp7f7104->post('cost') * 100); $spf45afd = (int) round($sp7f7104->post('price') * 100); $sp61aab0 = $sp7f7104->post('price_whole'); $spdcd8e2 = @json_decode($sp61aab0, true); foreach ($spdcd8e2 as $spc5ba8b) { if ($spc5ba8b[1] < 1 || $spc5ba8b[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spfba772 = explode('|', System::_get('filter_words')); if (($sp6e55ba = Helper::filterWords($sp6f359d, $spfba772)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp6e55ba); } if (($sp6e55ba = Helper::filterWords($sp2a1496, $spfba772)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp6e55ba); } if (($sp6e55ba = Helper::filterWords($spdf97eb, $spfba772)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp6e55ba); } } if ((int) $sp7f7104->post('id')) { $spfa410d = $this->authQuery($sp7f7104, \App\Product::class)->findOrFail($sp7f7104->post('id')); } else { $spfa410d = new \App\Product(); $spfa410d->count_sold = 0; $spfa410d->user_id = $this->getUserIdOrFail($sp7f7104); } $spfa410d->category_id = $sp45344f->id; $spfa410d->name = $sp6f359d; $spdb254b = new AntiXSS(); $spfa410d->description = $spdb254b->xss_clean($sp2a1496); $spfa410d->instructions = $spdb254b->xss_clean($spdf97eb); $spfa410d->fields = $sp7f7104->post('fields'); $spfa410d->delivery = (int) $sp7f7104->post('delivery'); $spfa410d->sort = $sp7f7104->post('sort'); $spfa410d->buy_min = $spebce18; $spfa410d->buy_max = $sp10da28; $spfa410d->count_warn = $sp7f7104->post('count_warn'); $spfa410d->support_coupon = $sp7f7104->post('support_coupon') === 'true'; $spfa410d->password = $sp7f7104->post('password'); $spfa410d->password_open = $sp7f7104->post('password_open') === 'true'; $spfa410d->cost = $sp5791b2; $spfa410d->price = $spf45afd; $spfa410d->price_whole = $sp61aab0; $spfa410d->enabled = (int) $sp7f7104->post('enabled'); $spfa410d->inventory = (int) $sp7f7104->post('inventory'); $spfa410d->saveOrFail(); $sp0a301e = array(); if ($spd42ce4) { $sp0a301e['category'] = $sp45344f; } return Response::success($sp0a301e); } function enable(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp70cf7b = $sp7f7104->post('ids'); $sp229dc8 = (int) $sp7f7104->post('enabled'); $this->authQuery($sp7f7104, \App\Product::class)->whereIn('id', explode(',', $sp70cf7b))->update(array('enabled' => $sp229dc8)); return Response::success(); } function delete(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string')); $sp70cf7b = $sp7f7104->post('ids'); $sp70cf7b = explode(',', $sp70cf7b); $sp71460c = $this->authQuery($sp7f7104, \App\Product::class)->whereIn('id', $sp70cf7b); $sp2c9e4b = $this->authQuery($sp7f7104, \App\Card::class)->whereIn('product_id', $sp70cf7b); return DB::transaction(function () use($sp71460c, $sp2c9e4b) { $sp71460c->delete(); $sp2c9e4b->forceDelete(); return Response::success(); }); } function count_sync(Request $sp7f7104) { \App\Product::refreshCount($this->getUser($sp7f7104)); return Response::success(); } }