<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp147552) { $spd10097 = $this->authQuery($sp147552, \App\Product::class)->with(array('category' => function (Relation $spd10097) { $spd10097->select(array('id', 'name', 'password_open')); })); $spa1f2d3 = $sp147552->input('search', false); $spa55e11 = $sp147552->input('val', false); if ($spa1f2d3 && $spa55e11) { if ($spa1f2d3 == 'simple') { if ($sp147552->input('from') === 'card') { $spd10097->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($spd10097->where('category_id', $spa55e11)->get(array('id', 'name'))); } elseif ($spa1f2d3 == 'id') { $spd10097->where('id', $spa55e11); } elseif ($spa1f2d3 == 'category_id') { $spd10097->where('category_id', $spa55e11); } else { $spd10097->where($spa1f2d3, 'like', '%' . $spa55e11 . '%'); } } $sp43c1c1 = (int) $sp147552->input('category_id'); if ($sp43c1c1 > 0) { $spd10097->where('category_id', $sp43c1c1); } $sp23f506 = $sp147552->input('enabled'); if (strlen($sp23f506)) { $spd10097->whereIn('enabled', explode(',', $sp23f506)); } $sp95caec = (int) $sp147552->input('current_page', 1); $sp11fa7d = (int) $sp147552->input('per_page', 20); $sp8b8475 = $spd10097->orderBy('sort')->paginate($sp11fa7d, array('*'), 'page', $sp95caec); foreach ($sp8b8475->items() as $sp4aad76) { $sp4aad76->setAppends(array('count', 'url')); } return Response::success($sp8b8475); } function sort(Request $sp147552) { $this->validate($sp147552, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp4aad76 = $this->authQuery($sp147552, \App\Product::class)->findOrFail($sp147552->post('id')); $sp4aad76->sort = $sp147552->post('sort'); $sp4aad76->saveOrFail(); return Response::success(); } function set_count(Request $sp147552) { $this->validate($sp147552, array('id' => 'required|integer', 'count' => 'required|integer')); $sp4aad76 = $this->authQuery($sp147552, \App\Product::class)->findOrFail($sp147552->post('id')); $sp4aad76->count_all = $sp4aad76->count_sold + $sp147552->post('count'); $sp4aad76->saveOrFail(); return Response::success(); } function category_change(Request $sp147552) { $this->validate($sp147552, array('id' => 'required|integer', 'category_id' => 'required')); $sp4aad76 = $this->authQuery($sp147552, \App\Product::class)->findOrFail($sp147552->post('id')); $sp43c1c1 = $sp147552->input('category_id'); if (is_string($sp43c1c1) && @$sp43c1c1[0] === '+') { $sp62ae3e = \App\Category::create(array('user_id' => $sp4aad76->user_id, 'name' => substr($sp43c1c1, 1), 'enabled' => true)); } else { $sp62ae3e = $this->authQuery($sp147552, \App\Category::class)->findOrFail($sp43c1c1); } $sp4aad76->category_id = $sp62ae3e->id; $sp4aad76->save(); return Response::success($sp62ae3e); } function edit(Request $sp147552) { $this->validate($sp147552, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp43c1c1 = $sp147552->post('category_id'); $spc3b168 = is_string($sp43c1c1) && @$sp43c1c1[0] === '+'; if ($spc3b168) { $sp62ae3e = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp147552), 'name' => substr($sp43c1c1, 1), 'enabled' => true)); } else { $sp62ae3e = $this->authQuery($sp147552, \App\Category::class)->where('id', @intval($sp43c1c1))->first(); if (!$sp62ae3e) { return Response::fail('商品分类不存在'); } } $sp1a236c = $sp147552->post('name'); $spb402e7 = $sp147552->post('description'); $spdaf951 = $sp147552->post('instructions'); $spa4b429 = (int) $sp147552->post('buy_min', 0); $sp7f7258 = (int) $sp147552->post('buy_max', 0); $sp589765 = (int) round($sp147552->post('cost') * 100); $spa195a9 = (int) round($sp147552->post('price') * 100); $spf49f8b = $sp147552->post('price_whole'); $sp115fb7 = @json_decode($spf49f8b, true); foreach ($sp115fb7 as $sp23d50c) { if ($sp23d50c[1] < 1 || $sp23d50c[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spefb75f = explode('|', System::_get('filter_words')); if (($sp296935 = Helper::filterWords($sp1a236c, $spefb75f)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp296935); } if (($sp296935 = Helper::filterWords($spb402e7, $spefb75f)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp296935); } if (($sp296935 = Helper::filterWords($spdaf951, $spefb75f)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp296935); } } if ((int) $sp147552->post('id')) { $sp4aad76 = $this->authQuery($sp147552, \App\Product::class)->findOrFail($sp147552->post('id')); } else { $sp4aad76 = new \App\Product(); $sp4aad76->count_sold = 0; $sp4aad76->user_id = $this->getUserIdOrFail($sp147552); } $sp4aad76->category_id = $sp62ae3e->id; $sp4aad76->name = $sp1a236c; $sp29ae91 = new AntiXSS(); $sp4aad76->description = $sp29ae91->xss_clean($spb402e7); $sp4aad76->instructions = $sp29ae91->xss_clean($spdaf951); $sp4aad76->fields = $sp147552->post('fields'); $sp4aad76->delivery = (int) $sp147552->post('delivery'); $sp4aad76->sort = $sp147552->post('sort'); $sp4aad76->buy_min = $spa4b429; $sp4aad76->buy_max = $sp7f7258; $sp4aad76->count_warn = $sp147552->post('count_warn'); $sp4aad76->support_coupon = $sp147552->post('support_coupon') === 'true'; $sp4aad76->password = $sp147552->post('password'); $sp4aad76->password_open = $sp147552->post('password_open') === 'true'; $sp4aad76->cost = $sp589765; $sp4aad76->price = $spa195a9; $sp4aad76->price_whole = $spf49f8b; $sp4aad76->enabled = (int) $sp147552->post('enabled'); $sp4aad76->inventory = (int) $sp147552->post('inventory'); $sp4aad76->saveOrFail(); $sp014e61 = array(); if ($spc3b168) { $sp014e61['category'] = $sp62ae3e; } return Response::success($sp014e61); } function enable(Request $sp147552) { $this->validate($sp147552, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp548f2b = $sp147552->post('ids'); $sp23f506 = (int) $sp147552->post('enabled'); $this->authQuery($sp147552, \App\Product::class)->whereIn('id', explode(',', $sp548f2b))->update(array('enabled' => $sp23f506)); return Response::success(); } function delete(Request $sp147552) { $this->validate($sp147552, array('ids' => 'required|string')); $sp548f2b = $sp147552->post('ids'); $sp548f2b = explode(',', $sp548f2b); $sp8f2a97 = $this->authQuery($sp147552, \App\Product::class)->whereIn('id', $sp548f2b); $sp0a4a42 = $this->authQuery($sp147552, \App\Card::class)->whereIn('product_id', $sp548f2b); return DB::transaction(function () use($sp8f2a97, $sp0a4a42) { $sp8f2a97->delete(); $sp0a4a42->forceDelete(); return Response::success(); }); } function count_sync(Request $sp147552) { \App\Product::refreshCount($this->getUser($sp147552)); return Response::success(); } }