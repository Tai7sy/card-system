<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spfeab54) { $sp5786ca = $this->authQuery($spfeab54, \App\Product::class)->with(array('category' => function (Relation $sp5786ca) { $sp5786ca->select(array('id', 'name', 'password_open')); })); $sped0aef = $spfeab54->post('search', false); $sp86d9ea = $spfeab54->post('val', false); if ($sped0aef && $sp86d9ea) { if ($sped0aef == 'simple') { if ($spfeab54->post('from') === 'card') { $sp5786ca->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp5786ca->where('category_id', $sp86d9ea)->get(array('id', 'name'))); } elseif ($sped0aef == 'id') { $sp5786ca->where('id', $sp86d9ea); } elseif ($sped0aef == 'category_id') { $sp5786ca->where('category_id', $sp86d9ea); } else { $sp5786ca->where($sped0aef, 'like', '%' . $sp86d9ea . '%'); } } $sp790613 = (int) $spfeab54->post('category_id'); if ($sp790613 > 0) { $sp5786ca->where('category_id', $sp790613); } $sp17fe52 = $spfeab54->post('enabled'); if (strlen($sp17fe52)) { $sp5786ca->whereIn('enabled', explode(',', $sp17fe52)); } $spd5ff21 = (int) $spfeab54->post('current_page', 1); $sp372a98 = (int) $spfeab54->post('per_page', 20); $spaff91c = $sp5786ca->orderBy('sort')->paginate($sp372a98, array('*'), 'page', $spd5ff21); foreach ($spaff91c->items() as $sp71cb0c) { $sp71cb0c->setAppends(array('count', 'url')); } return Response::success($spaff91c); } function sort(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp71cb0c = $this->authQuery($spfeab54, \App\Product::class)->findOrFail($spfeab54->post('id')); $sp71cb0c->sort = $spfeab54->post('sort'); $sp71cb0c->saveOrFail(); return Response::success(); } function set_count(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer', 'count' => 'required|integer')); $sp71cb0c = $this->authQuery($spfeab54, \App\Product::class)->findOrFail($spfeab54->post('id')); $sp71cb0c->count_all = $sp71cb0c->count_sold + $spfeab54->post('count'); $sp71cb0c->saveOrFail(); return Response::success(); } function category_change(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer', 'category_id' => 'required|integer')); $spb7fea4 = $this->authQuery($spfeab54, \App\Category::class)->findOrFail($spfeab54->post('category_id')); $sp71cb0c = $this->authQuery($spfeab54, \App\Product::class)->findOrFail($spfeab54->post('id')); $sp71cb0c->category_id = $spb7fea4->id; $sp71cb0c->save(); return Response::success(); } function edit(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'sometimes|integer', 'category_id' => 'required|integer', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp790613 = (int) $spfeab54->post('category_id'); if (!$this->authQuery($spfeab54, \App\Category::class)->where('id', $sp790613)->exists()) { return Response::fail('商品分类不存在'); } $sp505b52 = $spfeab54->post('name'); $sp86f371 = $spfeab54->post('description'); $spca5ce7 = $spfeab54->post('instructions'); $sp48869c = (int) $spfeab54->post('buy_min', 0); $sp0c0148 = (int) $spfeab54->post('buy_max', 0); $sp585cd5 = (int) round($spfeab54->post('cost') * 100); $sp62b824 = (int) round($spfeab54->post('price') * 100); $sp4ab772 = $spfeab54->post('price_whole'); $speb09d0 = @json_decode($sp4ab772, true); foreach ($speb09d0 as $sp4703b0) { if ($sp4703b0[1] < 1 || $sp4703b0[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spe40b13 = explode('|', System::_get('filter_words')); if (($spb9589c = Helper::filterWords($sp505b52, $spe40b13)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spb9589c); } if (($spb9589c = Helper::filterWords($sp86f371, $spe40b13)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spb9589c); } if (($spb9589c = Helper::filterWords($spca5ce7, $spe40b13)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spb9589c); } } if ((int) $spfeab54->post('id')) { $sp71cb0c = $this->authQuery($spfeab54, \App\Product::class)->findOrFail($spfeab54->post('id')); if (\App\Card::whereProductId($sp71cb0c->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp48869c !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp0c0148 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } else { $sp71cb0c = new \App\Product(); $sp71cb0c->count_sold = 0; $sp71cb0c->user_id = $this->getUserIdOrFail($spfeab54); } $sp71cb0c->category_id = $sp790613; $sp71cb0c->name = $sp505b52; $spf3f2ca = new AntiXSS(); $sp71cb0c->description = $spf3f2ca->xss_clean($sp86f371); $sp71cb0c->instructions = $spf3f2ca->xss_clean($spca5ce7); $sp71cb0c->fields = $spfeab54->post('fields'); $sp71cb0c->delivery = (int) $spfeab54->post('delivery'); $sp71cb0c->sort = $spfeab54->post('sort'); $sp71cb0c->buy_min = $sp48869c; $sp71cb0c->buy_max = $sp0c0148; $sp71cb0c->count_warn = $spfeab54->post('count_warn'); $sp71cb0c->support_coupon = $spfeab54->post('support_coupon') === 'true'; $sp71cb0c->password = $spfeab54->post('password'); $sp71cb0c->password_open = $spfeab54->post('password_open') === 'true'; $sp71cb0c->cost = $sp585cd5; $sp71cb0c->price = $sp62b824; $sp71cb0c->price_whole = $sp4ab772; $sp71cb0c->enabled = (int) $spfeab54->post('enabled'); $sp71cb0c->inventory = (int) $spfeab54->post('inventory'); $sp71cb0c->saveOrFail(); return Response::success(); } function enable(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string', 'enabled' => 'required|integer')); $spbd9db0 = $spfeab54->post('ids'); $sp17fe52 = (int) $spfeab54->post('enabled'); $this->authQuery($spfeab54, \App\Product::class)->whereIn('id', explode(',', $spbd9db0))->update(array('enabled' => $sp17fe52)); return Response::success(); } function delete(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string')); $spbd9db0 = $spfeab54->post('ids'); $spbd9db0 = explode(',', $spbd9db0); $sp7d5568 = $this->authQuery($spfeab54, \App\Product::class)->whereIn('id', $spbd9db0); $sp51054d = $this->authQuery($spfeab54, \App\Card::class)->whereIn('product_id', $spbd9db0); return DB::transaction(function () use($sp7d5568, $sp51054d) { $sp7d5568->delete(); $sp51054d->forceDelete(); return Response::success(); }); } function count_sync(Request $spfeab54) { \App\Product::refreshCount($this->getUser($spfeab54)); return Response::success(); } }