<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp3c91bd) { $sp6cb35e = $this->authQuery($sp3c91bd, \App\Product::class)->with(array('category' => function (Relation $sp6cb35e) { $sp6cb35e->select(array('id', 'name', 'password_open')); })); $sp98fed8 = $sp3c91bd->post('search', false); $sp7f8b1d = $sp3c91bd->post('val', false); if ($sp98fed8 && $sp7f8b1d) { if ($sp98fed8 == 'simple') { if ($sp3c91bd->post('from') === 'card') { $sp6cb35e->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp6cb35e->where('category_id', $sp7f8b1d)->get(array('id', 'name'))); } elseif ($sp98fed8 == 'id') { $sp6cb35e->where('id', $sp7f8b1d); } elseif ($sp98fed8 == 'category_id') { $sp6cb35e->where('category_id', $sp7f8b1d); } else { $sp6cb35e->where($sp98fed8, 'like', '%' . $sp7f8b1d . '%'); } } $sp8af541 = (int) $sp3c91bd->post('category_id'); if ($sp8af541 > 0) { $sp6cb35e->where('category_id', $sp8af541); } $spa20949 = $sp3c91bd->post('enabled'); if (strlen($spa20949)) { $sp6cb35e->whereIn('enabled', explode(',', $spa20949)); } $spf8ae2a = (int) $sp3c91bd->post('current_page', 1); $spa4d3d7 = (int) $sp3c91bd->post('per_page', 20); $spdecb4c = $sp6cb35e->orderBy('sort')->paginate($spa4d3d7, array('*'), 'page', $spf8ae2a); foreach ($spdecb4c->items() as $spe7d79d) { $spe7d79d->setAppends(array('count', 'url')); } return Response::success($spdecb4c); } function sort(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer', 'sort' => 'required|integer')); $spe7d79d = $this->authQuery($sp3c91bd, \App\Product::class)->findOrFail($sp3c91bd->post('id')); $spe7d79d->sort = $sp3c91bd->post('sort'); $spe7d79d->saveOrFail(); return Response::success(); } function set_count(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer', 'count' => 'required|integer')); $spe7d79d = $this->authQuery($sp3c91bd, \App\Product::class)->findOrFail($sp3c91bd->post('id')); $spe7d79d->count_all = $spe7d79d->count_sold + $sp3c91bd->post('count'); $spe7d79d->saveOrFail(); return Response::success(); } function category_change(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer', 'category_id' => 'required')); $spe7d79d = $this->authQuery($sp3c91bd, \App\Product::class)->findOrFail($sp3c91bd->post('id')); $sp8af541 = $sp3c91bd->input('category_id'); if (is_string($sp8af541) && @$sp8af541[0] === '+') { $spa74819 = \App\Category::create(array('user_id' => $spe7d79d->user_id, 'name' => substr($sp8af541, 1), 'enabled' => true)); } else { $spa74819 = $this->authQuery($sp3c91bd, \App\Category::class)->findOrFail($sp8af541); } $spe7d79d->category_id = $spa74819->id; $spe7d79d->save(); return Response::success($spa74819); } function edit(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp8af541 = $sp3c91bd->post('category_id'); $sp4237d5 = is_string($sp8af541) && @$sp8af541[0] === '+'; if ($sp4237d5) { $spa74819 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp3c91bd), 'name' => substr($sp8af541, 1), 'enabled' => true)); } else { $spa74819 = $this->authQuery($sp3c91bd, \App\Category::class)->where('id', @intval($sp8af541))->first(); if (!$spa74819) { return Response::fail('商品分类不存在'); } } $sp6b4dc2 = $sp3c91bd->post('name'); $spdab1b1 = $sp3c91bd->post('description'); $sp5dbece = $sp3c91bd->post('instructions'); $spd6ba1c = (int) $sp3c91bd->post('buy_min', 0); $sp76ae21 = (int) $sp3c91bd->post('buy_max', 0); $sp971da7 = (int) round($sp3c91bd->post('cost') * 100); $sp8af8bc = (int) round($sp3c91bd->post('price') * 100); $spbd77db = $sp3c91bd->post('price_whole'); $sp89ebd3 = @json_decode($spbd77db, true); foreach ($sp89ebd3 as $spd87a95) { if ($spd87a95[1] < 1 || $spd87a95[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spcd9c68 = explode('|', System::_get('filter_words')); if (($sp6a22d6 = Helper::filterWords($sp6b4dc2, $spcd9c68)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp6a22d6); } if (($sp6a22d6 = Helper::filterWords($spdab1b1, $spcd9c68)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp6a22d6); } if (($sp6a22d6 = Helper::filterWords($sp5dbece, $spcd9c68)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp6a22d6); } } if ((int) $sp3c91bd->post('id')) { $spe7d79d = $this->authQuery($sp3c91bd, \App\Product::class)->findOrFail($sp3c91bd->post('id')); } else { $spe7d79d = new \App\Product(); $spe7d79d->count_sold = 0; $spe7d79d->user_id = $this->getUserIdOrFail($sp3c91bd); } $spe7d79d->category_id = $spa74819->id; $spe7d79d->name = $sp6b4dc2; $sp63b7aa = new AntiXSS(); $spe7d79d->description = $sp63b7aa->xss_clean($spdab1b1); $spe7d79d->instructions = $sp63b7aa->xss_clean($sp5dbece); $spe7d79d->fields = $sp3c91bd->post('fields'); $spe7d79d->delivery = (int) $sp3c91bd->post('delivery'); $spe7d79d->sort = $sp3c91bd->post('sort'); $spe7d79d->buy_min = $spd6ba1c; $spe7d79d->buy_max = $sp76ae21; $spe7d79d->count_warn = $sp3c91bd->post('count_warn'); $spe7d79d->support_coupon = $sp3c91bd->post('support_coupon') === 'true'; $spe7d79d->password = $sp3c91bd->post('password'); $spe7d79d->password_open = $sp3c91bd->post('password_open') === 'true'; $spe7d79d->cost = $sp971da7; $spe7d79d->price = $sp8af8bc; $spe7d79d->price_whole = $spbd77db; $spe7d79d->enabled = (int) $sp3c91bd->post('enabled'); $spe7d79d->inventory = (int) $sp3c91bd->post('inventory'); $spe7d79d->saveOrFail(); $sp9d3345 = array(); if ($sp4237d5) { $sp9d3345['category'] = $spa74819; } return Response::success($sp9d3345); } function enable(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string', 'enabled' => 'required|integer')); $spdbdb98 = $sp3c91bd->post('ids'); $spa20949 = (int) $sp3c91bd->post('enabled'); $this->authQuery($sp3c91bd, \App\Product::class)->whereIn('id', explode(',', $spdbdb98))->update(array('enabled' => $spa20949)); return Response::success(); } function delete(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string')); $spdbdb98 = $sp3c91bd->post('ids'); $spdbdb98 = explode(',', $spdbdb98); $sp8f7ce7 = $this->authQuery($sp3c91bd, \App\Product::class)->whereIn('id', $spdbdb98); $sp0a8e96 = $this->authQuery($sp3c91bd, \App\Card::class)->whereIn('product_id', $spdbdb98); return DB::transaction(function () use($sp8f7ce7, $sp0a8e96) { $sp8f7ce7->delete(); $sp0a8e96->forceDelete(); return Response::success(); }); } function count_sync(Request $sp3c91bd) { \App\Product::refreshCount($this->getUser($sp3c91bd)); return Response::success(); } }