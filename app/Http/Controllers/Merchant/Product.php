<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spa20801) { $sp6c3275 = $this->authQuery($spa20801, \App\Product::class)->with(array('category' => function (Relation $sp6c3275) { $sp6c3275->select(array('id', 'name', 'password_open')); })); $sp50974d = $spa20801->input('search', false); $sp7a8e14 = $spa20801->input('val', false); if ($sp50974d && $sp7a8e14) { if ($sp50974d == 'simple') { if ($spa20801->input('from') === 'card') { $sp6c3275->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp6c3275->where('category_id', $sp7a8e14)->get(array('id', 'name'))); } elseif ($sp50974d == 'id') { $sp6c3275->where('id', $sp7a8e14); } elseif ($sp50974d == 'category_id') { $sp6c3275->where('category_id', $sp7a8e14); } else { $sp6c3275->where($sp50974d, 'like', '%' . $sp7a8e14 . '%'); } } $sp664160 = (int) $spa20801->input('category_id'); if ($sp664160 > 0) { $sp6c3275->where('category_id', $sp664160); } $sp34b10a = $spa20801->input('enabled'); if (strlen($sp34b10a)) { $sp6c3275->whereIn('enabled', explode(',', $sp34b10a)); } $sp2c377e = (int) $spa20801->input('current_page', 1); $sp896436 = (int) $spa20801->input('per_page', 20); $spa79e9a = $sp6c3275->orderBy('sort')->paginate($sp896436, array('*'), 'page', $sp2c377e); foreach ($spa79e9a->items() as $sp0a72f9) { $sp0a72f9->setAppends(array('count', 'url')); } return Response::success($spa79e9a); } function sort(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp0a72f9 = $this->authQuery($spa20801, \App\Product::class)->findOrFail($spa20801->post('id')); $sp0a72f9->sort = $spa20801->post('sort'); $sp0a72f9->saveOrFail(); return Response::success(); } function set_count(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer', 'count' => 'required|integer')); $sp0a72f9 = $this->authQuery($spa20801, \App\Product::class)->findOrFail($spa20801->post('id')); $sp0a72f9->count_all = $sp0a72f9->count_sold + $spa20801->post('count'); $sp0a72f9->saveOrFail(); return Response::success(); } function category_change(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer', 'category_id' => 'required')); $sp0a72f9 = $this->authQuery($spa20801, \App\Product::class)->findOrFail($spa20801->post('id')); $sp664160 = $spa20801->input('category_id'); if (is_string($sp664160) && @$sp664160[0] === '+') { $spdd6a6c = \App\Category::create(array('user_id' => $sp0a72f9->user_id, 'name' => substr($sp664160, 1), 'enabled' => true)); } else { $spdd6a6c = $this->authQuery($spa20801, \App\Category::class)->findOrFail($sp664160); } $sp0a72f9->category_id = $spdd6a6c->id; $sp0a72f9->save(); return Response::success($spdd6a6c); } function edit(Request $spa20801) { $this->validate($spa20801, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp664160 = $spa20801->post('category_id'); $sp287316 = is_string($sp664160) && @$sp664160[0] === '+'; if ($sp287316) { $spdd6a6c = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spa20801), 'name' => substr($sp664160, 1), 'enabled' => true)); } else { $spdd6a6c = $this->authQuery($spa20801, \App\Category::class)->where('id', @intval($sp664160))->first(); if (!$spdd6a6c) { return Response::fail('商品分类不存在'); } } $sp8951ca = $spa20801->post('name'); $spe610ad = $spa20801->post('description'); $spa72c98 = $spa20801->post('instructions'); $spa0e5e9 = (int) $spa20801->post('buy_min', 0); $spb5011f = (int) $spa20801->post('buy_max', 0); $sp1fe4ff = (int) round($spa20801->post('cost') * 100); $spe2c722 = (int) round($spa20801->post('price') * 100); $sp7273ad = $spa20801->post('price_whole'); $sp23856e = @json_decode($sp7273ad, true); foreach ($sp23856e as $sp467e37) { if ($sp467e37[1] < 1 || $sp467e37[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spb8db8e = explode('|', System::_get('filter_words')); if (($sp179a17 = Helper::filterWords($sp8951ca, $spb8db8e)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp179a17); } if (($sp179a17 = Helper::filterWords($spe610ad, $spb8db8e)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp179a17); } if (($sp179a17 = Helper::filterWords($spa72c98, $spb8db8e)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp179a17); } } if ((int) $spa20801->post('id')) { $sp0a72f9 = $this->authQuery($spa20801, \App\Product::class)->findOrFail($spa20801->post('id')); } else { $sp0a72f9 = new \App\Product(); $sp0a72f9->count_sold = 0; $sp0a72f9->user_id = $this->getUserIdOrFail($spa20801); } $sp0a72f9->category_id = $spdd6a6c->id; $sp0a72f9->name = $sp8951ca; $sp5fd9e7 = new AntiXSS(); $sp0a72f9->description = $sp5fd9e7->xss_clean($spe610ad); $sp0a72f9->instructions = $sp5fd9e7->xss_clean($spa72c98); $sp0a72f9->fields = $spa20801->post('fields'); $sp0a72f9->delivery = (int) $spa20801->post('delivery'); $sp0a72f9->sort = $spa20801->post('sort'); $sp0a72f9->buy_min = $spa0e5e9; $sp0a72f9->buy_max = $spb5011f; $sp0a72f9->count_warn = $spa20801->post('count_warn'); $sp0a72f9->support_coupon = $spa20801->post('support_coupon') === 'true'; $sp0a72f9->password = $spa20801->post('password'); $sp0a72f9->password_open = $spa20801->post('password_open') === 'true'; $sp0a72f9->cost = $sp1fe4ff; $sp0a72f9->price = $spe2c722; $sp0a72f9->price_whole = $sp7273ad; $sp0a72f9->enabled = (int) $spa20801->post('enabled'); $sp0a72f9->inventory = (int) $spa20801->post('inventory'); $sp0a72f9->saveOrFail(); $sp945da0 = array(); if ($sp287316) { $sp945da0['category'] = $spdd6a6c; } return Response::success($sp945da0); } function enable(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp4a6f27 = $spa20801->post('ids'); $sp34b10a = (int) $spa20801->post('enabled'); $this->authQuery($spa20801, \App\Product::class)->whereIn('id', explode(',', $sp4a6f27))->update(array('enabled' => $sp34b10a)); return Response::success(); } function delete(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string')); $sp4a6f27 = $spa20801->post('ids'); $sp4a6f27 = explode(',', $sp4a6f27); $sp13d9e0 = $this->authQuery($spa20801, \App\Product::class)->whereIn('id', $sp4a6f27); $sp22d976 = $this->authQuery($spa20801, \App\Card::class)->whereIn('product_id', $sp4a6f27); return DB::transaction(function () use($sp13d9e0, $sp22d976) { $sp13d9e0->delete(); $sp22d976->forceDelete(); return Response::success(); }); } function count_sync(Request $spa20801) { \App\Product::refreshCount($this->getUser($spa20801)); return Response::success(); } }