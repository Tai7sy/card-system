<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spf066f3) { $sp5044a7 = $this->authQuery($spf066f3, \App\Product::class)->with(array('category' => function (Relation $sp5044a7) { $sp5044a7->select(array('id', 'name', 'password_open')); })); $spca736c = $spf066f3->post('search', false); $sp56dec1 = $spf066f3->post('val', false); if ($spca736c && $sp56dec1) { if ($spca736c == 'simple') { if ($spf066f3->post('from') === 'card') { $sp5044a7->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp5044a7->where('category_id', $sp56dec1)->get(array('id', 'name'))); } elseif ($spca736c == 'id') { $sp5044a7->where('id', $sp56dec1); } elseif ($spca736c == 'category_id') { $sp5044a7->where('category_id', $sp56dec1); } else { $sp5044a7->where($spca736c, 'like', '%' . $sp56dec1 . '%'); } } $spe478dd = (int) $spf066f3->post('category_id'); if ($spe478dd > 0) { $sp5044a7->where('category_id', $spe478dd); } $sp4ec09d = $spf066f3->post('enabled'); if (strlen($sp4ec09d)) { $sp5044a7->whereIn('enabled', explode(',', $sp4ec09d)); } $sp72b123 = (int) $spf066f3->post('current_page', 1); $spcfcad4 = (int) $spf066f3->post('per_page', 20); $sp293456 = $sp5044a7->orderBy('sort')->paginate($spcfcad4, array('*'), 'page', $sp72b123); foreach ($sp293456->items() as $sp2cf004) { $sp2cf004->setAppends(array('count', 'url')); } return Response::success($sp293456); } function sort(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp2cf004 = $this->authQuery($spf066f3, \App\Product::class)->findOrFail($spf066f3->post('id')); $sp2cf004->sort = $spf066f3->post('sort'); $sp2cf004->saveOrFail(); return Response::success(); } function set_count(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer', 'count' => 'required|integer')); $sp2cf004 = $this->authQuery($spf066f3, \App\Product::class)->findOrFail($spf066f3->post('id')); $sp2cf004->count_all = $sp2cf004->count_sold + $spf066f3->post('count'); $sp2cf004->saveOrFail(); return Response::success(); } function category_change(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer', 'category_id' => 'required|integer')); $sped57d9 = $this->authQuery($spf066f3, \App\Category::class)->findOrFail($spf066f3->post('category_id')); $sp2cf004 = $this->authQuery($spf066f3, \App\Product::class)->findOrFail($spf066f3->post('id')); $sp2cf004->category_id = $sped57d9->id; $sp2cf004->save(); return Response::success(); } function edit(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'sometimes|integer', 'category_id' => 'required|integer', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spe478dd = (int) $spf066f3->post('category_id'); if (!$this->authQuery($spf066f3, \App\Category::class)->where('id', $spe478dd)->exists()) { return Response::fail('商品分类不存在'); } $sp34e4b5 = $spf066f3->post('name'); $sp1eddd3 = $spf066f3->post('description'); $sp9349d1 = $spf066f3->post('instructions'); $spf5ec7d = (int) $spf066f3->post('buy_min', 0); $sp05d365 = (int) $spf066f3->post('buy_max', 0); $spb03602 = (int) round($spf066f3->post('cost') * 100); $sp45d662 = (int) round($spf066f3->post('price') * 100); $sp806a0f = $spf066f3->post('price_whole'); $sp66b443 = @json_decode($sp806a0f, true); foreach ($sp66b443 as $spf44cbe) { if ($spf44cbe[1] < 1 || $spf44cbe[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spe817ab = explode('|', System::_get('filter_words')); if (($sp9b52fe = Helper::filterWords($sp34e4b5, $spe817ab)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp9b52fe); } if (($sp9b52fe = Helper::filterWords($sp1eddd3, $spe817ab)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp9b52fe); } if (($sp9b52fe = Helper::filterWords($sp9349d1, $spe817ab)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp9b52fe); } } if ((int) $spf066f3->post('id')) { $sp2cf004 = $this->authQuery($spf066f3, \App\Product::class)->findOrFail($spf066f3->post('id')); if (\App\Card::whereProductId($sp2cf004->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($spf5ec7d !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp05d365 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } else { $sp2cf004 = new \App\Product(); $sp2cf004->count_sold = 0; $sp2cf004->user_id = $this->getUserIdOrFail($spf066f3); } $sp2cf004->category_id = $spe478dd; $sp2cf004->name = $sp34e4b5; $spadd670 = new AntiXSS(); $sp2cf004->description = $spadd670->xss_clean($sp1eddd3); $sp2cf004->instructions = $spadd670->xss_clean($sp9349d1); $sp2cf004->fields = $spf066f3->post('fields'); $sp2cf004->delivery = (int) $spf066f3->post('delivery'); $sp2cf004->sort = $spf066f3->post('sort'); $sp2cf004->buy_min = $spf5ec7d; $sp2cf004->buy_max = $sp05d365; $sp2cf004->count_warn = $spf066f3->post('count_warn'); $sp2cf004->support_coupon = $spf066f3->post('support_coupon') === 'true'; $sp2cf004->password = $spf066f3->post('password'); $sp2cf004->password_open = $spf066f3->post('password_open') === 'true'; $sp2cf004->cost = $spb03602; $sp2cf004->price = $sp45d662; $sp2cf004->price_whole = $sp806a0f; $sp2cf004->enabled = (int) $spf066f3->post('enabled'); $sp2cf004->inventory = (int) $spf066f3->post('inventory'); $sp2cf004->saveOrFail(); return Response::success(); } function enable(Request $spf066f3) { $this->validate($spf066f3, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp1f71d9 = $spf066f3->post('ids'); $sp4ec09d = (int) $spf066f3->post('enabled'); $this->authQuery($spf066f3, \App\Product::class)->whereIn('id', explode(',', $sp1f71d9))->update(array('enabled' => $sp4ec09d)); return Response::success(); } function delete(Request $spf066f3) { $this->validate($spf066f3, array('ids' => 'required|string')); $sp1f71d9 = $spf066f3->post('ids'); $sp1f71d9 = explode(',', $sp1f71d9); $sp273177 = $this->authQuery($spf066f3, \App\Product::class)->whereIn('id', $sp1f71d9); $sp626a3f = $this->authQuery($spf066f3, \App\Card::class)->whereIn('product_id', $sp1f71d9); return DB::transaction(function () use($sp273177, $sp626a3f) { $sp273177->delete(); $sp626a3f->forceDelete(); return Response::success(); }); } function count_sync(Request $spf066f3) { \App\Product::refreshCount($this->getUser($spf066f3)); return Response::success(); } }