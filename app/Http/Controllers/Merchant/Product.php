<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spa27895) { $sp7e6fa3 = $this->authQuery($spa27895, \App\Product::class)->with(array('category' => function (Relation $sp7e6fa3) { $sp7e6fa3->select(array('id', 'name', 'password_open')); })); $spfe451d = $spa27895->post('search', false); $sp0edb8f = $spa27895->post('val', false); if ($spfe451d && $sp0edb8f) { if ($spfe451d == 'simple') { if ($spa27895->post('from') === 'card') { $sp7e6fa3->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp7e6fa3->where('category_id', $sp0edb8f)->get(array('id', 'name'))); } elseif ($spfe451d == 'id') { $sp7e6fa3->where('id', $sp0edb8f); } elseif ($spfe451d == 'category_id') { $sp7e6fa3->where('category_id', $sp0edb8f); } else { $sp7e6fa3->where($spfe451d, 'like', '%' . $sp0edb8f . '%'); } } $sp980f44 = (int) $spa27895->post('category_id'); if ($sp980f44 > 0) { $sp7e6fa3->where('category_id', $sp980f44); } $sp2a8f09 = $spa27895->post('enabled'); if (strlen($sp2a8f09)) { $sp7e6fa3->whereIn('enabled', explode(',', $sp2a8f09)); } $spf69625 = (int) $spa27895->post('current_page', 1); $spe8f5a8 = (int) $spa27895->post('per_page', 20); $sp966ae1 = $sp7e6fa3->orderBy('sort')->paginate($spe8f5a8, array('*'), 'page', $spf69625); foreach ($sp966ae1->items() as $sp1a3ec5) { $sp1a3ec5->setAppends(array('count', 'url')); } return Response::success($sp966ae1); } function sort(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp1a3ec5 = $this->authQuery($spa27895, \App\Product::class)->findOrFail($spa27895->post('id')); $sp1a3ec5->sort = $spa27895->post('sort'); $sp1a3ec5->saveOrFail(); return Response::success(); } function set_count(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer', 'count' => 'required|integer')); $sp1a3ec5 = $this->authQuery($spa27895, \App\Product::class)->findOrFail($spa27895->post('id')); $sp1a3ec5->count_all = $sp1a3ec5->count_sold + $spa27895->post('count'); $sp1a3ec5->saveOrFail(); return Response::success(); } function category_change(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer', 'category_id' => 'required')); $sp1a3ec5 = $this->authQuery($spa27895, \App\Product::class)->findOrFail($spa27895->post('id')); $sp980f44 = $spa27895->input('category_id'); if (is_string($sp980f44) && @$sp980f44[0] === '+') { $spd14ca3 = \App\Category::create(array('user_id' => $sp1a3ec5->user_id, 'name' => substr($sp980f44, 1), 'enabled' => true)); } else { $spd14ca3 = $this->authQuery($spa27895, \App\Category::class)->findOrFail($sp980f44); } $sp1a3ec5->category_id = $spd14ca3->id; $sp1a3ec5->save(); return Response::success($spd14ca3); } function edit(Request $spa27895) { $this->validate($spa27895, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp980f44 = $spa27895->post('category_id'); $sp3a2a1f = is_string($sp980f44) && @$sp980f44[0] === '+'; if ($sp3a2a1f) { $spd14ca3 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spa27895), 'name' => substr($sp980f44, 1), 'enabled' => true)); } else { $spd14ca3 = $this->authQuery($spa27895, \App\Category::class)->where('id', @intval($sp980f44))->first(); if (!$spd14ca3) { return Response::fail('商品分类不存在'); } } $sp104c39 = $spa27895->post('name'); $sp64c022 = $spa27895->post('description'); $sp769e0a = $spa27895->post('instructions'); $sp61b91e = (int) $spa27895->post('buy_min', 0); $sp8f725d = (int) $spa27895->post('buy_max', 0); $sp40d222 = (int) round($spa27895->post('cost') * 100); $sp2a8f2c = (int) round($spa27895->post('price') * 100); $sp7523bd = $spa27895->post('price_whole'); $sp256278 = @json_decode($sp7523bd, true); foreach ($sp256278 as $sp7f1160) { if ($sp7f1160[1] < 1 || $sp7f1160[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spfe8b9b = explode('|', System::_get('filter_words')); if (($sp786169 = Helper::filterWords($sp104c39, $spfe8b9b)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp786169); } if (($sp786169 = Helper::filterWords($sp64c022, $spfe8b9b)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp786169); } if (($sp786169 = Helper::filterWords($sp769e0a, $spfe8b9b)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp786169); } } if ((int) $spa27895->post('id')) { $sp1a3ec5 = $this->authQuery($spa27895, \App\Product::class)->findOrFail($spa27895->post('id')); } else { $sp1a3ec5 = new \App\Product(); $sp1a3ec5->count_sold = 0; $sp1a3ec5->user_id = $this->getUserIdOrFail($spa27895); } $sp1a3ec5->category_id = $spd14ca3->id; $sp1a3ec5->name = $sp104c39; $sp1ea6f2 = new AntiXSS(); $sp1a3ec5->description = $sp1ea6f2->xss_clean($sp64c022); $sp1a3ec5->instructions = $sp1ea6f2->xss_clean($sp769e0a); $sp1a3ec5->fields = $spa27895->post('fields'); $sp1a3ec5->delivery = (int) $spa27895->post('delivery'); $sp1a3ec5->sort = $spa27895->post('sort'); $sp1a3ec5->buy_min = $sp61b91e; $sp1a3ec5->buy_max = $sp8f725d; $sp1a3ec5->count_warn = $spa27895->post('count_warn'); $sp1a3ec5->support_coupon = $spa27895->post('support_coupon') === 'true'; $sp1a3ec5->password = $spa27895->post('password'); $sp1a3ec5->password_open = $spa27895->post('password_open') === 'true'; $sp1a3ec5->cost = $sp40d222; $sp1a3ec5->price = $sp2a8f2c; $sp1a3ec5->price_whole = $sp7523bd; $sp1a3ec5->enabled = (int) $spa27895->post('enabled'); $sp1a3ec5->inventory = (int) $spa27895->post('inventory'); $sp1a3ec5->saveOrFail(); $spf16c1a = array(); if ($sp3a2a1f) { $spf16c1a['category'] = $spd14ca3; } return Response::success($spf16c1a); } function enable(Request $spa27895) { $this->validate($spa27895, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp8e4c06 = $spa27895->post('ids'); $sp2a8f09 = (int) $spa27895->post('enabled'); $this->authQuery($spa27895, \App\Product::class)->whereIn('id', explode(',', $sp8e4c06))->update(array('enabled' => $sp2a8f09)); return Response::success(); } function delete(Request $spa27895) { $this->validate($spa27895, array('ids' => 'required|string')); $sp8e4c06 = $spa27895->post('ids'); $sp8e4c06 = explode(',', $sp8e4c06); $sp40a694 = $this->authQuery($spa27895, \App\Product::class)->whereIn('id', $sp8e4c06); $sp0c9f47 = $this->authQuery($spa27895, \App\Card::class)->whereIn('product_id', $sp8e4c06); return DB::transaction(function () use($sp40a694, $sp0c9f47) { $sp40a694->delete(); $sp0c9f47->forceDelete(); return Response::success(); }); } function count_sync(Request $spa27895) { \App\Product::refreshCount($this->getUser($spa27895)); return Response::success(); } }