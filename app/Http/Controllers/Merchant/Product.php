<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp517903) { $sp30241a = $this->authQuery($sp517903, \App\Product::class)->with(array('category' => function (Relation $sp30241a) { $sp30241a->select(array('id', 'name', 'password_open')); })); $spee2f3d = $sp517903->input('search', false); $sp5d286a = $sp517903->input('val', false); if ($spee2f3d && $sp5d286a) { if ($spee2f3d == 'simple') { if ($sp517903->input('from') === 'card') { $sp30241a->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp30241a->where('category_id', $sp5d286a)->get(array('id', 'name'))); } elseif ($spee2f3d == 'id') { $sp30241a->where('id', $sp5d286a); } elseif ($spee2f3d == 'category_id') { $sp30241a->where('category_id', $sp5d286a); } else { $sp30241a->where($spee2f3d, 'like', '%' . $sp5d286a . '%'); } } $spc4a21e = (int) $sp517903->input('category_id'); if ($spc4a21e > 0) { $sp30241a->where('category_id', $spc4a21e); } $spb38401 = $sp517903->input('enabled'); if (strlen($spb38401)) { $sp30241a->whereIn('enabled', explode(',', $spb38401)); } $sp542adc = (int) $sp517903->input('current_page', 1); $spf40cb2 = (int) $sp517903->input('per_page', 20); $sp38cdfb = $sp30241a->orderBy('sort')->paginate($spf40cb2, array('*'), 'page', $sp542adc); foreach ($sp38cdfb->items() as $sp427eba) { $sp427eba->setAppends(array('count', 'url')); } return Response::success($sp38cdfb); } function sort(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp427eba = $this->authQuery($sp517903, \App\Product::class)->findOrFail($sp517903->post('id')); $sp427eba->sort = $sp517903->post('sort'); $sp427eba->saveOrFail(); return Response::success(); } function set_count(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer', 'count' => 'required|integer')); $sp427eba = $this->authQuery($sp517903, \App\Product::class)->findOrFail($sp517903->post('id')); $sp427eba->count_all = $sp427eba->count_sold + $sp517903->post('count'); $sp427eba->saveOrFail(); return Response::success(); } function category_change(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer', 'category_id' => 'required')); $sp427eba = $this->authQuery($sp517903, \App\Product::class)->findOrFail($sp517903->post('id')); $spc4a21e = $sp517903->input('category_id'); if (is_string($spc4a21e) && @$spc4a21e[0] === '+') { $spe223d2 = \App\Category::create(array('user_id' => $sp427eba->user_id, 'name' => substr($spc4a21e, 1), 'enabled' => true)); } else { $spe223d2 = $this->authQuery($sp517903, \App\Category::class)->findOrFail($spc4a21e); } $sp427eba->category_id = $spe223d2->id; $sp427eba->save(); return Response::success($spe223d2); } function edit(Request $sp517903) { $this->validate($sp517903, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spc4a21e = $sp517903->post('category_id'); $spc5888c = is_string($spc4a21e) && @$spc4a21e[0] === '+'; if ($spc5888c) { $spe223d2 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp517903), 'name' => substr($spc4a21e, 1), 'enabled' => true)); } else { $spe223d2 = $this->authQuery($sp517903, \App\Category::class)->where('id', @intval($spc4a21e))->first(); if (!$spe223d2) { return Response::fail('商品分类不存在'); } } $sp832442 = $sp517903->post('name'); $specbf72 = $sp517903->post('description'); $spe50799 = $sp517903->post('instructions'); $spf86a23 = (int) $sp517903->post('buy_min', 0); $sp58248a = (int) $sp517903->post('buy_max', 0); $sp1d4095 = (int) round($sp517903->post('cost') * 100); $sp0ec680 = (int) round($sp517903->post('price') * 100); $sp9d4eb4 = $sp517903->post('price_whole'); $spc791fa = @json_decode($sp9d4eb4, true); foreach ($spc791fa as $spa9bde0) { if ($spa9bde0[1] < 1 || $spa9bde0[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp00414c = explode('|', System::_get('filter_words')); if (($spd9807c = Helper::filterWords($sp832442, $sp00414c)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spd9807c); } if (($spd9807c = Helper::filterWords($specbf72, $sp00414c)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spd9807c); } if (($spd9807c = Helper::filterWords($spe50799, $sp00414c)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spd9807c); } } if ((int) $sp517903->post('id')) { $sp427eba = $this->authQuery($sp517903, \App\Product::class)->findOrFail($sp517903->post('id')); } else { $sp427eba = new \App\Product(); $sp427eba->count_sold = 0; $sp427eba->user_id = $this->getUserIdOrFail($sp517903); } $sp427eba->category_id = $spe223d2->id; $sp427eba->name = $sp832442; $sp38d7db = new AntiXSS(); $sp427eba->description = $sp38d7db->xss_clean($specbf72); $sp427eba->instructions = $sp38d7db->xss_clean($spe50799); $sp427eba->fields = $sp517903->post('fields'); $sp427eba->delivery = (int) $sp517903->post('delivery'); $sp427eba->sort = $sp517903->post('sort'); $sp427eba->buy_min = $spf86a23; $sp427eba->buy_max = $sp58248a; $sp427eba->count_warn = $sp517903->post('count_warn'); $sp427eba->support_coupon = $sp517903->post('support_coupon') === 'true'; $sp427eba->password = $sp517903->post('password'); $sp427eba->password_open = $sp517903->post('password_open') === 'true'; $sp427eba->cost = $sp1d4095; $sp427eba->price = $sp0ec680; $sp427eba->price_whole = $sp9d4eb4; $sp427eba->enabled = (int) $sp517903->post('enabled'); $sp427eba->inventory = (int) $sp517903->post('inventory'); $sp427eba->saveOrFail(); $sp0223d2 = array(); if ($spc5888c) { $sp0223d2['category'] = $spe223d2; } return Response::success($sp0223d2); } function enable(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp315ad7 = $sp517903->post('ids'); $spb38401 = (int) $sp517903->post('enabled'); $this->authQuery($sp517903, \App\Product::class)->whereIn('id', explode(',', $sp315ad7))->update(array('enabled' => $spb38401)); return Response::success(); } function delete(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string')); $sp315ad7 = $sp517903->post('ids'); $sp315ad7 = explode(',', $sp315ad7); $spcf2ce4 = $this->authQuery($sp517903, \App\Product::class)->whereIn('id', $sp315ad7); $spc6f413 = $this->authQuery($sp517903, \App\Card::class)->whereIn('product_id', $sp315ad7); return DB::transaction(function () use($spcf2ce4, $spc6f413) { $spcf2ce4->delete(); $spc6f413->forceDelete(); return Response::success(); }); } function count_sync(Request $sp517903) { \App\Product::refreshCount($this->getUser($sp517903)); return Response::success(); } }