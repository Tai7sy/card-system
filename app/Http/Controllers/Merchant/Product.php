<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spd5cc4d) { $spe440a8 = $this->authQuery($spd5cc4d, \App\Product::class)->with(array('category' => function (Relation $spe440a8) { $spe440a8->select(array('id', 'name', 'password_open')); })); $spc9965c = $spd5cc4d->post('search', false); $spee86b9 = $spd5cc4d->post('val', false); if ($spc9965c && $spee86b9) { if ($spc9965c == 'simple') { if ($spd5cc4d->post('from') === 'card') { $spe440a8->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($spe440a8->where('category_id', $spee86b9)->get(array('id', 'name'))); } elseif ($spc9965c == 'id') { $spe440a8->where('id', $spee86b9); } elseif ($spc9965c == 'category_id') { $spe440a8->where('category_id', $spee86b9); } else { $spe440a8->where($spc9965c, 'like', '%' . $spee86b9 . '%'); } } $sp7b7cc9 = (int) $spd5cc4d->post('category_id'); if ($sp7b7cc9 > 0) { $spe440a8->where('category_id', $sp7b7cc9); } $spd508cb = $spd5cc4d->post('enabled'); if (strlen($spd508cb)) { $spe440a8->whereIn('enabled', explode(',', $spd508cb)); } $sp707577 = (int) $spd5cc4d->post('current_page', 1); $sp82c87f = (int) $spd5cc4d->post('per_page', 20); $sp78c70b = $spe440a8->orderBy('sort')->paginate($sp82c87f, array('*'), 'page', $sp707577); foreach ($sp78c70b->items() as $spaeec37) { $spaeec37->setAppends(array('count', 'url')); } return Response::success($sp78c70b); } function sort(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer', 'sort' => 'required|integer')); $spaeec37 = $this->authQuery($spd5cc4d, \App\Product::class)->findOrFail($spd5cc4d->post('id')); $spaeec37->sort = $spd5cc4d->post('sort'); $spaeec37->saveOrFail(); return Response::success(); } function set_count(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer', 'count' => 'required|integer')); $spaeec37 = $this->authQuery($spd5cc4d, \App\Product::class)->findOrFail($spd5cc4d->post('id')); $spaeec37->count_all = $spaeec37->count_sold + $spd5cc4d->post('count'); $spaeec37->saveOrFail(); return Response::success(); } function category_change(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer', 'category_id' => 'required|integer')); $sp2e76be = $this->authQuery($spd5cc4d, \App\Category::class)->findOrFail($spd5cc4d->post('category_id')); $spaeec37 = $this->authQuery($spd5cc4d, \App\Product::class)->findOrFail($spd5cc4d->post('id')); $spaeec37->category_id = $sp2e76be->id; $spaeec37->save(); return Response::success(); } function edit(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'sometimes|integer', 'category_id' => 'required|integer', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp7b7cc9 = (int) $spd5cc4d->post('category_id'); if (!$this->authQuery($spd5cc4d, \App\Category::class)->where('id', $sp7b7cc9)->exists()) { return Response::fail('商品分类不存在'); } $spcc609a = $spd5cc4d->post('name'); $sp47517b = $spd5cc4d->post('description'); $spda9bb6 = $spd5cc4d->post('instructions'); $sp11a63f = (int) $spd5cc4d->post('buy_min', 0); $sp2a19ec = (int) $spd5cc4d->post('buy_max', 0); $sp92a485 = (int) round($spd5cc4d->post('cost') * 100); $spac16b8 = (int) round($spd5cc4d->post('price') * 100); $spf6a624 = $spd5cc4d->post('price_whole'); $sp0ad956 = @json_decode($spf6a624, true); foreach ($sp0ad956 as $sp49a67a) { if ($sp49a67a[1] < 1 || $sp49a67a[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp1bfcab = explode('|', System::_get('filter_words')); if (($sp29a775 = Helper::filterWords($spcc609a, $sp1bfcab)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp29a775); } if (($sp29a775 = Helper::filterWords($sp47517b, $sp1bfcab)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp29a775); } if (($sp29a775 = Helper::filterWords($spda9bb6, $sp1bfcab)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp29a775); } } if ((int) $spd5cc4d->post('id')) { $spaeec37 = $this->authQuery($spd5cc4d, \App\Product::class)->findOrFail($spd5cc4d->post('id')); if (\App\Card::whereProductId($spaeec37->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp11a63f !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp2a19ec !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } else { $spaeec37 = new \App\Product(); $spaeec37->count_sold = 0; $spaeec37->user_id = $this->getUserIdOrFail($spd5cc4d); } $spaeec37->category_id = $sp7b7cc9; $spaeec37->name = $spcc609a; $spce62c7 = new AntiXSS(); $spaeec37->description = $spce62c7->xss_clean($sp47517b); $spaeec37->instructions = $spce62c7->xss_clean($spda9bb6); $spaeec37->fields = $spd5cc4d->post('fields'); $spaeec37->delivery = (int) $spd5cc4d->post('delivery'); $spaeec37->sort = $spd5cc4d->post('sort'); $spaeec37->buy_min = $sp11a63f; $spaeec37->buy_max = $sp2a19ec; $spaeec37->count_warn = $spd5cc4d->post('count_warn'); $spaeec37->support_coupon = $spd5cc4d->post('support_coupon') === 'true'; $spaeec37->password = $spd5cc4d->post('password'); $spaeec37->password_open = $spd5cc4d->post('password_open') === 'true'; $spaeec37->cost = $sp92a485; $spaeec37->price = $spac16b8; $spaeec37->price_whole = $spf6a624; $spaeec37->enabled = (int) $spd5cc4d->post('enabled'); $spaeec37->inventory = (int) $spd5cc4d->post('inventory'); $spaeec37->saveOrFail(); return Response::success(); } function enable(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string', 'enabled' => 'required|integer')); $spf46353 = $spd5cc4d->post('ids'); $spd508cb = (int) $spd5cc4d->post('enabled'); $this->authQuery($spd5cc4d, \App\Product::class)->whereIn('id', explode(',', $spf46353))->update(array('enabled' => $spd508cb)); return Response::success(); } function delete(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string')); $spf46353 = $spd5cc4d->post('ids'); $spf46353 = explode(',', $spf46353); $spbfba52 = $this->authQuery($spd5cc4d, \App\Product::class)->whereIn('id', $spf46353); $sp8a8c37 = $this->authQuery($spd5cc4d, \App\Card::class)->whereIn('product_id', $spf46353); return DB::transaction(function () use($spbfba52, $sp8a8c37) { $spbfba52->delete(); $sp8a8c37->forceDelete(); return Response::success(); }); } function count_sync(Request $spd5cc4d) { \App\Product::refreshCount($this->getUser($spd5cc4d)); return Response::success(); } }