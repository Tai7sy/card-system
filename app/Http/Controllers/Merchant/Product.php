<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spbaac90) { $sp50919b = $this->authQuery($spbaac90, \App\Product::class)->with(array('category' => function (Relation $sp50919b) { $sp50919b->select(array('id', 'name', 'password_open')); })); $sp4d9eeb = $spbaac90->post('search', false); $spbd7375 = $spbaac90->post('val', false); if ($sp4d9eeb && $spbd7375) { if ($sp4d9eeb == 'simple') { if ($spbaac90->post('from') === 'card') { $sp50919b->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp50919b->where('category_id', $spbd7375)->get(array('id', 'name'))); } elseif ($sp4d9eeb == 'id') { $sp50919b->where('id', $spbd7375); } elseif ($sp4d9eeb == 'category_id') { $sp50919b->where('category_id', $spbd7375); } else { $sp50919b->where($sp4d9eeb, 'like', '%' . $spbd7375 . '%'); } } $sp35f37e = (int) $spbaac90->post('category_id'); if ($sp35f37e > 0) { $sp50919b->where('category_id', $sp35f37e); } $sped8f24 = $spbaac90->post('enabled'); if (strlen($sped8f24)) { $sp50919b->whereIn('enabled', explode(',', $sped8f24)); } $spb32f8f = (int) $spbaac90->post('current_page', 1); $sp731c42 = (int) $spbaac90->post('per_page', 20); $spd5d914 = $sp50919b->orderBy('sort')->paginate($sp731c42, array('*'), 'page', $spb32f8f); foreach ($spd5d914->items() as $sp73d110) { $sp73d110->setAppends(array('count', 'url')); } return Response::success($spd5d914); } function sort(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp73d110 = $this->authQuery($spbaac90, \App\Product::class)->findOrFail($spbaac90->post('id')); $sp73d110->sort = $spbaac90->post('sort'); $sp73d110->saveOrFail(); return Response::success(); } function set_count(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer', 'count' => 'required|integer')); $sp73d110 = $this->authQuery($spbaac90, \App\Product::class)->findOrFail($spbaac90->post('id')); $sp73d110->count_all = $sp73d110->count_sold + $spbaac90->post('count'); $sp73d110->saveOrFail(); return Response::success(); } function category_change(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer', 'category_id' => 'required|integer')); $sp7a6bf9 = $this->authQuery($spbaac90, \App\Category::class)->findOrFail($spbaac90->post('category_id')); $sp73d110 = $this->authQuery($spbaac90, \App\Product::class)->findOrFail($spbaac90->post('id')); $sp73d110->category_id = $sp7a6bf9->id; $sp73d110->save(); return Response::success(); } function edit(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'sometimes|integer', 'category_id' => 'required|integer', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp35f37e = (int) $spbaac90->post('category_id'); if (!$this->authQuery($spbaac90, \App\Category::class)->where('id', $sp35f37e)->exists()) { return Response::fail('商品分类不存在'); } $specbd57 = $spbaac90->post('name'); $sped403c = $spbaac90->post('description'); $spf50bb9 = $spbaac90->post('instructions'); $sp96e5ac = (int) $spbaac90->post('buy_min', 0); $spacdd00 = (int) $spbaac90->post('buy_max', 0); $sp313203 = (int) round($spbaac90->post('cost') * 100); $spe0d52b = (int) round($spbaac90->post('price') * 100); $spfacff6 = $spbaac90->post('price_whole'); $spe677dd = @json_decode($spfacff6, true); foreach ($spe677dd as $spaa6bdc) { if ($spaa6bdc[1] < 1 || $spaa6bdc[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp8c69a0 = explode('|', System::_get('filter_words')); if (($sp599084 = Helper::filterWords($specbd57, $sp8c69a0)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp599084); } if (($sp599084 = Helper::filterWords($sped403c, $sp8c69a0)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp599084); } if (($sp599084 = Helper::filterWords($spf50bb9, $sp8c69a0)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp599084); } } if ((int) $spbaac90->post('id')) { $sp73d110 = $this->authQuery($spbaac90, \App\Product::class)->findOrFail($spbaac90->post('id')); if (\App\Card::whereProductId($sp73d110->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp96e5ac !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($spacdd00 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } else { $sp73d110 = new \App\Product(); $sp73d110->count_sold = 0; $sp73d110->user_id = $this->getUserIdOrFail($spbaac90); } $sp73d110->category_id = $sp35f37e; $sp73d110->name = $specbd57; $sp367d56 = new AntiXSS(); $sp73d110->description = $sp367d56->xss_clean($sped403c); $sp73d110->instructions = $sp367d56->xss_clean($spf50bb9); $sp73d110->fields = $spbaac90->post('fields'); $sp73d110->delivery = (int) $spbaac90->post('delivery'); $sp73d110->sort = $spbaac90->post('sort'); $sp73d110->buy_min = $sp96e5ac; $sp73d110->buy_max = $spacdd00; $sp73d110->count_warn = $spbaac90->post('count_warn'); $sp73d110->support_coupon = $spbaac90->post('support_coupon') === 'true'; $sp73d110->password = $spbaac90->post('password'); $sp73d110->password_open = $spbaac90->post('password_open') === 'true'; $sp73d110->cost = $sp313203; $sp73d110->price = $spe0d52b; $sp73d110->price_whole = $spfacff6; $sp73d110->enabled = (int) $spbaac90->post('enabled'); $sp73d110->inventory = (int) $spbaac90->post('inventory'); $sp73d110->saveOrFail(); return Response::success(); } function enable(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp2d798e = $spbaac90->post('ids'); $sped8f24 = (int) $spbaac90->post('enabled'); $this->authQuery($spbaac90, \App\Product::class)->whereIn('id', explode(',', $sp2d798e))->update(array('enabled' => $sped8f24)); return Response::success(); } function delete(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string')); $sp2d798e = $spbaac90->post('ids'); $sp2d798e = explode(',', $sp2d798e); $sp013aae = $this->authQuery($spbaac90, \App\Product::class)->whereIn('id', $sp2d798e); $sp766d0e = $this->authQuery($spbaac90, \App\Card::class)->whereIn('product_id', $sp2d798e); return DB::transaction(function () use($sp013aae, $sp766d0e) { $sp013aae->delete(); $sp766d0e->forceDelete(); return Response::success(); }); } function count_sync(Request $spbaac90) { \App\Product::refreshCount($this->getUser($spbaac90)); return Response::success(); } }