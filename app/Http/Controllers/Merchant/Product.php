<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp375069) { $sped9569 = $this->authQuery($sp375069, \App\Product::class)->with(array('category' => function (Relation $sped9569) { $sped9569->select(array('id', 'name', 'password_open')); })); $spca3671 = $sp375069->input('search', false); $spb689af = $sp375069->input('val', false); if ($spca3671 && $spb689af) { if ($spca3671 == 'simple') { if ($sp375069->input('from') === 'card') { $sped9569->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sped9569->where('category_id', $spb689af)->get(array('id', 'name'))); } elseif ($spca3671 == 'id') { $sped9569->where('id', $spb689af); } elseif ($spca3671 == 'category_id') { $sped9569->where('category_id', $spb689af); } else { $sped9569->where($spca3671, 'like', '%' . $spb689af . '%'); } } $spca39ca = (int) $sp375069->input('category_id'); if ($spca39ca > 0) { $sped9569->where('category_id', $spca39ca); } $spedd1a7 = $sp375069->input('enabled'); if (strlen($spedd1a7)) { $sped9569->whereIn('enabled', explode(',', $spedd1a7)); } $sp19fe4a = (int) $sp375069->input('current_page', 1); $sp90d207 = (int) $sp375069->input('per_page', 20); $sp3aa6bd = $sped9569->orderBy('sort')->paginate($sp90d207, array('*'), 'page', $sp19fe4a); foreach ($sp3aa6bd->items() as $sp6018c8) { $sp6018c8->setAppends(array('count', 'url')); } return Response::success($sp3aa6bd); } function sort(Request $sp375069) { $this->validate($sp375069, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp6018c8 = $this->authQuery($sp375069, \App\Product::class)->findOrFail($sp375069->post('id')); $sp6018c8->sort = $sp375069->post('sort'); $sp6018c8->saveOrFail(); return Response::success(); } function set_count(Request $sp375069) { $this->validate($sp375069, array('id' => 'required|integer', 'count' => 'required|integer')); $sp6018c8 = $this->authQuery($sp375069, \App\Product::class)->findOrFail($sp375069->post('id')); $sp6018c8->count_all = $sp6018c8->count_sold + $sp375069->post('count'); $sp6018c8->saveOrFail(); return Response::success(); } function category_change(Request $sp375069) { $this->validate($sp375069, array('id' => 'required|integer', 'category_id' => 'required')); $sp6018c8 = $this->authQuery($sp375069, \App\Product::class)->findOrFail($sp375069->post('id')); $spca39ca = $sp375069->input('category_id'); if (is_string($spca39ca) && @$spca39ca[0] === '+') { $spe4707e = \App\Category::create(array('user_id' => $sp6018c8->user_id, 'name' => substr($spca39ca, 1), 'enabled' => true)); } else { $spe4707e = $this->authQuery($sp375069, \App\Category::class)->findOrFail($spca39ca); } $sp6018c8->category_id = $spe4707e->id; $sp6018c8->save(); return Response::success($spe4707e); } function edit(Request $sp375069) { $this->validate($sp375069, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spca39ca = $sp375069->post('category_id'); $sp34a436 = is_string($spca39ca) && @$spca39ca[0] === '+'; if ($sp34a436) { $spe4707e = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp375069), 'name' => substr($spca39ca, 1), 'enabled' => true)); } else { $spe4707e = $this->authQuery($sp375069, \App\Category::class)->where('id', @intval($spca39ca))->first(); if (!$spe4707e) { return Response::fail('商品分类不存在'); } } $spa58881 = $sp375069->post('name'); $sp11a5d7 = $sp375069->post('description'); $sp84d558 = $sp375069->post('instructions'); $sp31c0e5 = (int) $sp375069->post('buy_min', 0); $sp1bf0ca = (int) $sp375069->post('buy_max', 0); $sp34b55b = (int) round($sp375069->post('cost') * 100); $sp6f4ec1 = (int) round($sp375069->post('price') * 100); $spbc9d22 = $sp375069->post('price_whole'); $spe1d59c = @json_decode($spbc9d22, true); foreach ($spe1d59c as $spe8f2fe) { if ($spe8f2fe[1] < 1 || $spe8f2fe[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp3893f0 = explode('|', System::_get('filter_words')); if (($sp6706d8 = Helper::filterWords($spa58881, $sp3893f0)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp6706d8); } if (($sp6706d8 = Helper::filterWords($sp11a5d7, $sp3893f0)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp6706d8); } if (($sp6706d8 = Helper::filterWords($sp84d558, $sp3893f0)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp6706d8); } } if ((int) $sp375069->post('id')) { $sp6018c8 = $this->authQuery($sp375069, \App\Product::class)->findOrFail($sp375069->post('id')); } else { $sp6018c8 = new \App\Product(); $sp6018c8->count_sold = 0; $sp6018c8->user_id = $this->getUserIdOrFail($sp375069); } $sp6018c8->category_id = $spe4707e->id; $sp6018c8->name = $spa58881; $sp346320 = new AntiXSS(); $sp6018c8->description = $sp346320->xss_clean($sp11a5d7); $sp6018c8->instructions = $sp346320->xss_clean($sp84d558); $sp6018c8->fields = $sp375069->post('fields'); $sp6018c8->delivery = (int) $sp375069->post('delivery'); $sp6018c8->sort = $sp375069->post('sort'); $sp6018c8->buy_min = $sp31c0e5; $sp6018c8->buy_max = $sp1bf0ca; $sp6018c8->count_warn = $sp375069->post('count_warn'); $sp6018c8->support_coupon = $sp375069->post('support_coupon') === 'true'; $sp6018c8->password = $sp375069->post('password'); $sp6018c8->password_open = $sp375069->post('password_open') === 'true'; $sp6018c8->cost = $sp34b55b; $sp6018c8->price = $sp6f4ec1; $sp6018c8->price_whole = $spbc9d22; $sp6018c8->enabled = (int) $sp375069->post('enabled'); $sp6018c8->inventory = (int) $sp375069->post('inventory'); $sp6018c8->saveOrFail(); $sp2a9a03 = array(); if ($sp34a436) { $sp2a9a03['category'] = $spe4707e; } return Response::success($sp2a9a03); } function enable(Request $sp375069) { $this->validate($sp375069, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp630e91 = $sp375069->post('ids'); $spedd1a7 = (int) $sp375069->post('enabled'); $this->authQuery($sp375069, \App\Product::class)->whereIn('id', explode(',', $sp630e91))->update(array('enabled' => $spedd1a7)); return Response::success(); } function delete(Request $sp375069) { $this->validate($sp375069, array('ids' => 'required|string')); $sp630e91 = $sp375069->post('ids'); $sp630e91 = explode(',', $sp630e91); $sp98b459 = $this->authQuery($sp375069, \App\Product::class)->whereIn('id', $sp630e91); $sp0f7c76 = $this->authQuery($sp375069, \App\Card::class)->whereIn('product_id', $sp630e91); return DB::transaction(function () use($sp98b459, $sp0f7c76) { $sp98b459->delete(); $sp0f7c76->forceDelete(); return Response::success(); }); } function count_sync(Request $sp375069) { \App\Product::refreshCount($this->getUser($sp375069)); return Response::success(); } }