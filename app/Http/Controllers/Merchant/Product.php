<?php
 namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $request) { $query = $this->authQuery($request, \App\Product::class) ->with(['category' => function (Relation $query) { $query->select(['id', 'name', 'password_open']); }]); $searchType = $request->post('search', false); $searchVal = $request->post('val', false); if ($searchType && $searchVal) { if ($searchType == 'simple') { if ($request->post('from') === 'card') { $query->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($query->where('category_id', $searchVal)->get(['id', 'name'])); } elseif ($searchType == 'id') { $query->where('id', $searchVal); } elseif ($searchType == 'category_id') { $query->where('category_id', $searchVal); } else { $query->where($searchType, 'like', '%' . $searchVal . '%'); } } $category_id = (int)$request->post('category_id'); if ($category_id > 0) $query->where('category_id', $category_id); $enabled = $request->post('enabled'); if (strlen($enabled)) $query->whereIn('enabled', explode(',', $enabled)); $page = (int)$request->post('current_page', 1); $pageSize = (int)$request->post('per_page', 20); $list = $query->orderBy('sort')->paginate($pageSize, ['*'], 'page', $page); foreach ($list->items() as $product) { $product->setAppends(['count', 'url']); } return Response::success($list); } function sort(Request $request) { $this->validate($request, [ 'id' => 'required|integer', 'sort' => 'required|integer', ]); $product = $this->authQuery($request, \App\Product::class) ->findOrFail($request->post('id')); $product->sort = $request->post('sort'); $product->saveOrFail(); return Response::success(); } function set_count(Request $request) { $this->validate($request, [ 'id' => 'required|integer', 'count' => 'required|integer', ]); $product = $this->authQuery($request, \App\Product::class) ->findOrFail($request->post('id')); $product->count_all = $product->count_sold + $request->post('count'); $product->saveOrFail(); return Response::success(); } function category_change(Request $request) { $this->validate($request, [ 'id' => 'required|integer', 'category_id' => 'required', ]); $product = $this->authQuery($request, \App\Product::class) ->findOrFail($request->post('id')); $category_id = $request->input('category_id'); if (is_string($category_id) && @$category_id[0] === '+') { $category = \App\Category::create([ 'user_id' => $product->user_id, 'name' => substr($category_id, 1), 'enabled' => true ]); } else { $category = $this->authQuery($request, \App\Category::class) ->findOrFail($category_id); } $product->category_id = $category->id; $product->save(); return Response::success(); } function edit(Request $request) { $this->validate($request, [ 'id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1' ]); $category_id = $request->post('category_id'); if (is_string($category_id) && @$category_id[0] === '+') { $category_id = (\App\Category::create([ 'user_id' => $this->getUserIdOrFail($request), 'name' => substr($category_id, 1), 'enabled' => true ]))->id; } else { $category_id = @intval($category_id); if (!$this->authQuery($request, \App\Category::class)->where('id', $category_id)->exists()) { return Response::fail('商品分类不存在'); } } $name = $request->post('name'); $description = $request->post('description'); $instructions = $request->post('instructions'); $buy_min = (int)$request->post('buy_min', 0); $buy_max = (int)$request->post('buy_max', 0); $cost = (int)round($request->post('cost') * 100); $price = (int)round($request->post('price') * 100); $price_whole = $request->post('price_whole'); $price_whole_arr = @json_decode($price_whole, true); foreach ($price_whole_arr as $whole_item) { if ($whole_item[1] < 1 || $whole_item[1] > 1000000000) return Response::fail('商品批发价需要在 0.01-10000000 之间'); } if (System::_getInt('filter_words_open') === 1) { $words = explode('|', System::_get('filter_words')); if (($ret = Helper::filterWords($name, $words)) !== false) return Response::fail('提交失败! 商品名称包含敏感词: ' . $ret); if (($ret = Helper::filterWords($description, $words)) !== false) return Response::fail('提交失败! 商品描述包含敏感词: ' . $ret); if (($ret = Helper::filterWords($instructions, $words)) !== false) return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $ret); } if ((int)$request->post('id')) { $product = $this->authQuery($request, \App\Product::class) ->findOrFail($request->post('id')); if (\App\Card::whereProductId($product->id) ->where('type', \App\Card::TYPE_REPEAT) ->whereRaw('`count_all`>`count_sold`') ->exists()) { if ($buy_min !== 1) return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); if ($buy_max !== 1) return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } else { $product = new \App\Product; $product->count_sold = 0; $product->user_id = $this->getUserIdOrFail($request); } $product->category_id = $category_id; $product->name = $name; $antiXss = new AntiXSS(); $product->description = $antiXss->xss_clean($description); $product->instructions = $antiXss->xss_clean($instructions); $product->fields = $request->post('fields'); $product->delivery = (int)$request->post('delivery'); $product->sort = $request->post('sort'); $product->buy_min = $buy_min; $product->buy_max = $buy_max; $product->count_warn = $request->post('count_warn'); $product->support_coupon = $request->post('support_coupon') === 'true'; $product->password = $request->post('password'); $product->password_open = $request->post('password_open') === 'true'; $product->cost = $cost; $product->price = $price; $product->price_whole = $price_whole; $product->enabled = (int)$request->post('enabled'); $product->inventory = (int)$request->post('inventory'); $product->saveOrFail(); return Response::success(); } function enable(Request $request) { $this->validate($request, [ 'ids' => 'required|string', 'enabled' => 'required|integer' ]); $ids = $request->post('ids'); $enabled = (int)$request->post('enabled'); $this->authQuery($request, \App\Product::class) ->whereIn('id', explode(',', $ids)) ->update(['enabled' => $enabled]); return Response::success(); } function delete(Request $request) { $this->validate($request, [ 'ids' => 'required|string' ]); $ids = $request->post('ids'); $ids = explode(',', $ids); $product_sql = $this->authQuery($request, \App\Product::class) ->whereIn('id', $ids); $card_sql = $this->authQuery($request, \App\Card::class) ->whereIn('product_id', $ids); return DB::transaction(function () use ($product_sql, $card_sql) { $product_sql->delete(); $card_sql->forceDelete(); return Response::success(); }); } function count_sync(Request $request) { \App\Product::refreshCount($this->getUser($request)); return Response::success(); } } 