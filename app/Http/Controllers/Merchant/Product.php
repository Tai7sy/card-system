<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spfb5ae3) { $sp32b0d3 = $this->authQuery($spfb5ae3, \App\Product::class)->with(array('category' => function (Relation $sp32b0d3) { $sp32b0d3->select(array('id', 'name', 'password_open')); })); $spb59184 = $spfb5ae3->post('search', false); $sp809177 = $spfb5ae3->post('val', false); if ($spb59184 && $sp809177) { if ($spb59184 == 'simple') { if ($spfb5ae3->post('from') === 'card') { $sp32b0d3->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($sp32b0d3->where('category_id', $sp809177)->get(array('id', 'name'))); } elseif ($spb59184 == 'id') { $sp32b0d3->where('id', $sp809177); } elseif ($spb59184 == 'category_id') { $sp32b0d3->where('category_id', $sp809177); } else { $sp32b0d3->where($spb59184, 'like', '%' . $sp809177 . '%'); } } $sp66458a = (int) $spfb5ae3->post('category_id'); if ($sp66458a > 0) { $sp32b0d3->where('category_id', $sp66458a); } $sp607943 = $spfb5ae3->post('enabled'); if (strlen($sp607943)) { $sp32b0d3->whereIn('enabled', explode(',', $sp607943)); } $spd43f26 = (int) $spfb5ae3->post('current_page', 1); $spce7281 = (int) $spfb5ae3->post('per_page', 20); $spfa99a5 = $sp32b0d3->orderBy('sort')->paginate($spce7281, array('*'), 'page', $spd43f26); foreach ($spfa99a5->items() as $sp7eba0d) { $sp7eba0d->setAppends(array('count', 'url')); } return Response::success($spfa99a5); } function sort(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp7eba0d = $this->authQuery($spfb5ae3, \App\Product::class)->findOrFail($spfb5ae3->post('id')); $sp7eba0d->sort = $spfb5ae3->post('sort'); $sp7eba0d->saveOrFail(); return Response::success(); } function set_count(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer', 'count' => 'required|integer')); $sp7eba0d = $this->authQuery($spfb5ae3, \App\Product::class)->findOrFail($spfb5ae3->post('id')); $sp7eba0d->count_all = $sp7eba0d->count_sold + $spfb5ae3->post('count'); $sp7eba0d->saveOrFail(); return Response::success(); } function category_change(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer', 'category_id' => 'required')); $sp7eba0d = $this->authQuery($spfb5ae3, \App\Product::class)->findOrFail($spfb5ae3->post('id')); $sp66458a = $spfb5ae3->input('category_id'); if (is_string($sp66458a) && @$sp66458a[0] === '+') { $sp0ff930 = \App\Category::create(array('user_id' => $sp7eba0d->user_id, 'name' => substr($sp66458a, 1), 'enabled' => true)); } else { $sp0ff930 = $this->authQuery($spfb5ae3, \App\Category::class)->findOrFail($sp66458a); } $sp7eba0d->category_id = $sp0ff930->id; $sp7eba0d->save(); return Response::success($sp0ff930); } function edit(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp66458a = $spfb5ae3->post('category_id'); $sp9175be = is_string($sp66458a) && @$sp66458a[0] === '+'; if ($sp9175be) { $sp0ff930 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($spfb5ae3), 'name' => substr($sp66458a, 1), 'enabled' => true)); } else { $sp0ff930 = $this->authQuery($spfb5ae3, \App\Category::class)->where('id', @intval($sp66458a))->first(); if (!$sp0ff930) { return Response::fail('商品分类不存在'); } } $sp4c25fd = $spfb5ae3->post('name'); $sp4ba6f8 = $spfb5ae3->post('description'); $spd3b701 = $spfb5ae3->post('instructions'); $spafbaa7 = (int) $spfb5ae3->post('buy_min', 0); $sp7c284b = (int) $spfb5ae3->post('buy_max', 0); $sp0dee07 = (int) round($spfb5ae3->post('cost') * 100); $sp5bf5aa = (int) round($spfb5ae3->post('price') * 100); $sp99651a = $spfb5ae3->post('price_whole'); $sp304f6b = @json_decode($sp99651a, true); foreach ($sp304f6b as $spbfac02) { if ($spbfac02[1] < 1 || $spbfac02[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp566e22 = explode('|', System::_get('filter_words')); if (($sp5f5153 = Helper::filterWords($sp4c25fd, $sp566e22)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp5f5153); } if (($sp5f5153 = Helper::filterWords($sp4ba6f8, $sp566e22)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp5f5153); } if (($sp5f5153 = Helper::filterWords($spd3b701, $sp566e22)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp5f5153); } } if ((int) $spfb5ae3->post('id')) { $sp7eba0d = $this->authQuery($spfb5ae3, \App\Product::class)->findOrFail($spfb5ae3->post('id')); } else { $sp7eba0d = new \App\Product(); $sp7eba0d->count_sold = 0; $sp7eba0d->user_id = $this->getUserIdOrFail($spfb5ae3); } $sp7eba0d->category_id = $sp0ff930->id; $sp7eba0d->name = $sp4c25fd; $spe2e579 = new AntiXSS(); $sp7eba0d->description = $spe2e579->xss_clean($sp4ba6f8); $sp7eba0d->instructions = $spe2e579->xss_clean($spd3b701); $sp7eba0d->fields = $spfb5ae3->post('fields'); $sp7eba0d->delivery = (int) $spfb5ae3->post('delivery'); $sp7eba0d->sort = $spfb5ae3->post('sort'); $sp7eba0d->buy_min = $spafbaa7; $sp7eba0d->buy_max = $sp7c284b; $sp7eba0d->count_warn = $spfb5ae3->post('count_warn'); $sp7eba0d->support_coupon = $spfb5ae3->post('support_coupon') === 'true'; $sp7eba0d->password = $spfb5ae3->post('password'); $sp7eba0d->password_open = $spfb5ae3->post('password_open') === 'true'; $sp7eba0d->cost = $sp0dee07; $sp7eba0d->price = $sp5bf5aa; $sp7eba0d->price_whole = $sp99651a; $sp7eba0d->enabled = (int) $spfb5ae3->post('enabled'); $sp7eba0d->inventory = (int) $spfb5ae3->post('inventory'); $sp7eba0d->saveOrFail(); $sp15108c = array(); if ($sp9175be) { $sp15108c['category'] = $sp0ff930; } return Response::success($sp15108c); } function enable(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string', 'enabled' => 'required|integer')); $speab0da = $spfb5ae3->post('ids'); $sp607943 = (int) $spfb5ae3->post('enabled'); $this->authQuery($spfb5ae3, \App\Product::class)->whereIn('id', explode(',', $speab0da))->update(array('enabled' => $sp607943)); return Response::success(); } function delete(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string')); $speab0da = $spfb5ae3->post('ids'); $speab0da = explode(',', $speab0da); $sp3af739 = $this->authQuery($spfb5ae3, \App\Product::class)->whereIn('id', $speab0da); $sp203609 = $this->authQuery($spfb5ae3, \App\Card::class)->whereIn('product_id', $speab0da); return DB::transaction(function () use($sp3af739, $sp203609) { $sp3af739->delete(); $sp203609->forceDelete(); return Response::success(); }); } function count_sync(Request $spfb5ae3) { \App\Product::refreshCount($this->getUser($spfb5ae3)); return Response::success(); } }