<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp26e527) { $spcfdf85 = $this->authQuery($sp26e527, \App\Product::class)->with(array('category' => function (Relation $spcfdf85) { $spcfdf85->select(array('id', 'name', 'password_open')); })); $sp78cca0 = $sp26e527->input('search', false); $sp79e569 = $sp26e527->input('val', false); if ($sp78cca0 && $sp79e569) { if ($sp78cca0 == 'simple') { if ($sp26e527->input('from') === 'card') { $spcfdf85->where('delivery', \App\Product::DELIVERY_AUTO); } return Response::success($spcfdf85->where('category_id', $sp79e569)->get(array('id', 'name'))); } elseif ($sp78cca0 == 'id') { $spcfdf85->where('id', $sp79e569); } elseif ($sp78cca0 == 'category_id') { $spcfdf85->where('category_id', $sp79e569); } else { $spcfdf85->where($sp78cca0, 'like', '%' . $sp79e569 . '%'); } } $sp735ffa = (int) $sp26e527->input('category_id'); if ($sp735ffa > 0) { $spcfdf85->where('category_id', $sp735ffa); } $spc9cacd = $sp26e527->input('enabled'); if (strlen($spc9cacd)) { $spcfdf85->whereIn('enabled', explode(',', $spc9cacd)); } $sp81cf40 = (int) $sp26e527->input('current_page', 1); $sp8de1f1 = (int) $sp26e527->input('per_page', 20); $spccc256 = $spcfdf85->orderBy('sort')->paginate($sp8de1f1, array('*'), 'page', $sp81cf40); foreach ($spccc256->items() as $sp222f58) { $sp222f58->setAppends(array('count', 'url')); } return Response::success($spccc256); } function sort(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer', 'sort' => 'required|integer')); $sp222f58 = $this->authQuery($sp26e527, \App\Product::class)->findOrFail($sp26e527->post('id')); $sp222f58->sort = $sp26e527->post('sort'); $sp222f58->saveOrFail(); return Response::success(); } function set_count(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer', 'count' => 'required|integer')); $sp222f58 = $this->authQuery($sp26e527, \App\Product::class)->findOrFail($sp26e527->post('id')); $sp222f58->count_all = $sp222f58->count_sold + $sp26e527->post('count'); $sp222f58->saveOrFail(); return Response::success(); } function category_change(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer', 'category_id' => 'required')); $sp222f58 = $this->authQuery($sp26e527, \App\Product::class)->findOrFail($sp26e527->post('id')); $sp735ffa = $sp26e527->input('category_id'); if (is_string($sp735ffa) && @$sp735ffa[0] === '+') { $sp08b465 = \App\Category::create(array('user_id' => $sp222f58->user_id, 'name' => substr($sp735ffa, 1), 'enabled' => true)); } else { $sp08b465 = $this->authQuery($sp26e527, \App\Category::class)->findOrFail($sp735ffa); } $sp222f58->category_id = $sp08b465->id; $sp222f58->save(); return Response::success($sp08b465); } function edit(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'sometimes|integer', 'category_id' => 'required', 'description' => 'required|string', 'instructions' => 'required|string', 'fields' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp735ffa = $sp26e527->post('category_id'); $sp15b6b4 = is_string($sp735ffa) && @$sp735ffa[0] === '+'; if ($sp15b6b4) { $sp08b465 = \App\Category::create(array('user_id' => $this->getUserIdOrFail($sp26e527), 'name' => substr($sp735ffa, 1), 'enabled' => true)); } else { $sp08b465 = $this->authQuery($sp26e527, \App\Category::class)->where('id', @intval($sp735ffa))->first(); if (!$sp08b465) { return Response::fail('商品分类不存在'); } } $sp2dce9c = $sp26e527->post('name'); $sp7cb065 = $sp26e527->post('description'); $spc28838 = $sp26e527->post('instructions'); $spf9ee57 = (int) $sp26e527->post('buy_min', 0); $sp86ae65 = (int) $sp26e527->post('buy_max', 0); $sp3d08df = (int) round($sp26e527->post('cost') * 100); $spa5d52b = (int) round($sp26e527->post('price') * 100); $sp2c950a = $sp26e527->post('price_whole'); $spd039e9 = @json_decode($sp2c950a, true); foreach ($spd039e9 as $sp715bc5) { if ($sp715bc5[1] < 1 || $sp715bc5[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $sp3135c5 = explode('|', System::_get('filter_words')); if (($spa87332 = Helper::filterWords($sp2dce9c, $sp3135c5)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spa87332); } if (($spa87332 = Helper::filterWords($sp7cb065, $sp3135c5)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spa87332); } if (($spa87332 = Helper::filterWords($spc28838, $sp3135c5)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spa87332); } } if ((int) $sp26e527->post('id')) { $sp222f58 = $this->authQuery($sp26e527, \App\Product::class)->findOrFail($sp26e527->post('id')); } else { $sp222f58 = new \App\Product(); $sp222f58->count_sold = 0; $sp222f58->user_id = $this->getUserIdOrFail($sp26e527); } $sp222f58->category_id = $sp08b465->id; $sp222f58->name = $sp2dce9c; $spe46a44 = new AntiXSS(); $sp222f58->description = $spe46a44->xss_clean($sp7cb065); $sp222f58->instructions = $spe46a44->xss_clean($spc28838); $sp222f58->fields = $sp26e527->post('fields'); $sp222f58->delivery = (int) $sp26e527->post('delivery'); $sp222f58->sort = $sp26e527->post('sort'); $sp222f58->buy_min = $spf9ee57; $sp222f58->buy_max = $sp86ae65; $sp222f58->count_warn = $sp26e527->post('count_warn'); $sp222f58->support_coupon = $sp26e527->post('support_coupon') === 'true'; $sp222f58->password = $sp26e527->post('password'); $sp222f58->password_open = $sp26e527->post('password_open') === 'true'; $sp222f58->cost = $sp3d08df; $sp222f58->price = $spa5d52b; $sp222f58->price_whole = $sp2c950a; $sp222f58->enabled = (int) $sp26e527->post('enabled'); $sp222f58->inventory = (int) $sp26e527->post('inventory'); $sp222f58->saveOrFail(); $sp7c95a4 = array(); if ($sp15b6b4) { $sp7c95a4['category'] = $sp08b465; } return Response::success($sp7c95a4); } function enable(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp892962 = $sp26e527->post('ids'); $spc9cacd = (int) $sp26e527->post('enabled'); $this->authQuery($sp26e527, \App\Product::class)->whereIn('id', explode(',', $sp892962))->update(array('enabled' => $spc9cacd)); return Response::success(); } function delete(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string')); $sp892962 = $sp26e527->post('ids'); $sp892962 = explode(',', $sp892962); $sp3a21aa = $this->authQuery($sp26e527, \App\Product::class)->whereIn('id', $sp892962); $spb7ad9e = $this->authQuery($sp26e527, \App\Card::class)->whereIn('product_id', $sp892962); return DB::transaction(function () use($sp3a21aa, $spb7ad9e) { $sp3a21aa->delete(); $spb7ad9e->forceDelete(); return Response::success(); }); } function count_sync(Request $sp26e527) { \App\Product::refreshCount($this->getUser($sp26e527)); return Response::success(); } }