<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spd5cc4d) { $sp707577 = $spd5cc4d->post('current_page', 1); $sp82c87f = $spd5cc4d->post('per_page', 20); $spe440a8 = $this->authQuery($spd5cc4d, \App\Category::class); $spc9965c = $spd5cc4d->post('search', false); $spee86b9 = $spd5cc4d->post('val', false); if ($spc9965c && $spee86b9) { if ($spc9965c == 'simple') { return Response::success($spe440a8->get(array('id', 'name'))); } elseif ($spc9965c == 'id') { $spe440a8->where('id', $spee86b9); } else { $spe440a8->where($spc9965c, 'like', '%' . $spee86b9 . '%'); } } $spd508cb = $spd5cc4d->post('enabled'); if (strlen($spd508cb)) { $spe440a8->whereIn('enabled', explode(',', $spd508cb)); } $sp78c70b = $spe440a8->withCount('products')->orderBy('sort')->paginate($sp82c87f, array('*'), 'page', $sp707577); foreach ($sp78c70b->items() as $sp2e76be) { $sp2e76be->setAppends(array('url')); } return Response::success($sp78c70b); } function sort(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer')); $sp2e76be = $this->authQuery($spd5cc4d, \App\Category::class)->findOrFail($spd5cc4d->post('id')); $sp2e76be->sort = (int) $spd5cc4d->post('sort', 1000); $sp2e76be->save(); return Response::success(); } function edit(Request $spd5cc4d) { $this->validate($spd5cc4d, array('name' => 'required|string|max:128')); $spcc609a = $spd5cc4d->post('name'); $spd508cb = (int) $spd5cc4d->post('enabled'); $sp316cc7 = $spd5cc4d->post('sort'); $sp316cc7 = $sp316cc7 === NULL ? 1000 : (int) $sp316cc7; if (System::_getInt('filter_words_open') === 1) { $sp1bfcab = explode('|', System::_get('filter_words')); if (($sp29a775 = Helper::filterWords($spcc609a, $sp1bfcab)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp29a775); } } if ($sp316cc7 < 0 || $sp316cc7 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spb07b5d = $spd5cc4d->post('password'); $sp9fe06e = $spd5cc4d->post('password_open') === 'true'; if ((int) $spd5cc4d->post('id')) { $sp2e76be = $this->authQuery($spd5cc4d, \App\Category::class)->findOrFail($spd5cc4d->post('id')); } else { $sp2e76be = new \App\Category(); $sp2e76be->user_id = $this->getUserIdOrFail($spd5cc4d); } $sp2e76be->name = $spcc609a; $sp2e76be->sort = $sp316cc7; $sp2e76be->password = $spb07b5d; $sp2e76be->password_open = $sp9fe06e; $sp2e76be->enabled = $spd508cb; $sp2e76be->saveOrFail(); return Response::success(); } function enable(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spf46353 = $spd5cc4d->post('ids', ''); $spd508cb = (int) $spd5cc4d->post('enabled'); $this->authQuery($spd5cc4d, \App\Category::class)->whereIn('id', explode(',', $spf46353))->update(array('enabled' => $spd508cb)); return Response::success(); } function delete(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string')); $spf46353 = $spd5cc4d->post('ids', ''); $this->authQuery($spd5cc4d, \App\Category::class)->whereIn('id', explode(',', $spf46353))->delete(); return Response::success(); } }