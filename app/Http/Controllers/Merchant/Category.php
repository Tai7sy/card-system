<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp517903) { $sp542adc = (int) $sp517903->input('current_page', 1); $spf40cb2 = (int) $sp517903->input('per_page', 20); $sp30241a = $this->authQuery($sp517903, \App\Category::class); $spee2f3d = $sp517903->input('search', false); $sp5d286a = $sp517903->input('val', false); if ($spee2f3d && $sp5d286a) { if ($spee2f3d == 'simple') { return Response::success($sp30241a->get(array('id', 'name'))); } elseif ($spee2f3d == 'id') { $sp30241a->where('id', $sp5d286a); } else { $sp30241a->where($spee2f3d, 'like', '%' . $sp5d286a . '%'); } } $spb38401 = $sp517903->input('enabled'); if (strlen($spb38401)) { $sp30241a->whereIn('enabled', explode(',', $spb38401)); } $sp38cdfb = $sp30241a->withCount('products')->orderBy('sort')->paginate($spf40cb2, array('*'), 'page', $sp542adc); foreach ($sp38cdfb->items() as $spe223d2) { $spe223d2->setAppends(array('url')); } return Response::success($sp38cdfb); } function sort(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer')); $spe223d2 = $this->authQuery($sp517903, \App\Category::class)->findOrFail($sp517903->post('id')); $spe223d2->sort = (int) $sp517903->post('sort', 1000); $spe223d2->save(); return Response::success(); } function edit(Request $sp517903) { $this->validate($sp517903, array('name' => 'required|string|max:128')); $sp832442 = $sp517903->post('name'); $spb38401 = (int) $sp517903->post('enabled'); $sp2e69ed = $sp517903->post('sort'); $sp2e69ed = $sp2e69ed === NULL ? 1000 : (int) $sp2e69ed; if (System::_getInt('filter_words_open') === 1) { $sp00414c = explode('|', System::_get('filter_words')); if (($spd9807c = Helper::filterWords($sp832442, $sp00414c)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spd9807c); } } if ($sp2e69ed < 0 || $sp2e69ed > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spe46211 = $sp517903->post('password'); $sp462f71 = $sp517903->post('password_open') === 'true'; if ((int) $sp517903->post('id')) { $spe223d2 = $this->authQuery($sp517903, \App\Category::class)->findOrFail($sp517903->post('id')); } else { $spe223d2 = new \App\Category(); $spe223d2->user_id = $this->getUserIdOrFail($sp517903); } $spe223d2->name = $sp832442; $spe223d2->sort = $sp2e69ed; $spe223d2->password = $spe46211; $spe223d2->password_open = $sp462f71; $spe223d2->enabled = $spb38401; $spe223d2->saveOrFail(); return Response::success(); } function enable(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp315ad7 = $sp517903->post('ids', ''); $spb38401 = (int) $sp517903->post('enabled'); $this->authQuery($sp517903, \App\Category::class)->whereIn('id', explode(',', $sp315ad7))->update(array('enabled' => $spb38401)); return Response::success(); } function delete(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string')); $sp315ad7 = $sp517903->post('ids', ''); $this->authQuery($sp517903, \App\Category::class)->whereIn('id', explode(',', $sp315ad7))->delete(); return Response::success(); } }