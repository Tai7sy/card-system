<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp16eb02) { $sp93b624 = $sp16eb02->post('current_page', 1); $spaec2f0 = $sp16eb02->post('per_page', 20); $spf5b559 = $this->authQuery($sp16eb02, \App\Category::class); $sp420e7b = $sp16eb02->post('search', false); $spd3086f = $sp16eb02->post('val', false); if ($sp420e7b && $spd3086f) { if ($sp420e7b == 'simple') { return Response::success($spf5b559->get(array('id', 'name'))); } elseif ($sp420e7b == 'id') { $spf5b559->where('id', $spd3086f); } else { $spf5b559->where($sp420e7b, 'like', '%' . $spd3086f . '%'); } } $sp66afb5 = $sp16eb02->post('enabled'); if (strlen($sp66afb5)) { $spf5b559->whereIn('enabled', explode(',', $sp66afb5)); } $sp218bb0 = $spf5b559->withCount('products')->orderBy('sort')->paginate($spaec2f0, array('*'), 'page', $sp93b624); foreach ($sp218bb0->items() as $sp1012fd) { $sp1012fd->setAppends(array('url')); } return Response::success($sp218bb0); } function sort(Request $sp16eb02) { $this->validate($sp16eb02, array('id' => 'required|integer')); $sp1012fd = $this->authQuery($sp16eb02, \App\Category::class)->findOrFail($sp16eb02->post('id')); $sp1012fd->sort = (int) $sp16eb02->post('sort', 1000); $sp1012fd->save(); return Response::success(); } function edit(Request $sp16eb02) { $this->validate($sp16eb02, array('name' => 'required|string|max:128')); $spb6a91a = $sp16eb02->post('name'); $sp66afb5 = (int) $sp16eb02->post('enabled'); $spd847d8 = $sp16eb02->post('sort'); $spd847d8 = $spd847d8 === NULL ? 1000 : (int) $spd847d8; if (System::_getInt('filter_words_open') === 1) { $spc93461 = explode('|', System::_get('filter_words')); if (($spc31330 = Helper::filterWords($spb6a91a, $spc93461)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spc31330); } } if ($spd847d8 < 0 || $spd847d8 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp35e64e = $sp16eb02->post('password'); $sp41e920 = $sp16eb02->post('password_open') === 'true'; if ((int) $sp16eb02->post('id')) { $sp1012fd = $this->authQuery($sp16eb02, \App\Category::class)->findOrFail($sp16eb02->post('id')); } else { $sp1012fd = new \App\Category(); $sp1012fd->user_id = $this->getUserIdOrFail($sp16eb02); } $sp1012fd->name = $spb6a91a; $sp1012fd->sort = $spd847d8; $sp1012fd->password = $sp35e64e; $sp1012fd->password_open = $sp41e920; $sp1012fd->enabled = $sp66afb5; $sp1012fd->saveOrFail(); return Response::success(); } function enable(Request $sp16eb02) { $this->validate($sp16eb02, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spf99fa0 = $sp16eb02->post('ids', ''); $sp66afb5 = (int) $sp16eb02->post('enabled'); $this->authQuery($sp16eb02, \App\Category::class)->whereIn('id', explode(',', $spf99fa0))->update(array('enabled' => $sp66afb5)); return Response::success(); } function delete(Request $sp16eb02) { $this->validate($sp16eb02, array('ids' => 'required|string')); $spf99fa0 = $sp16eb02->post('ids', ''); $this->authQuery($sp16eb02, \App\Category::class)->whereIn('id', explode(',', $spf99fa0))->delete(); return Response::success(); } }