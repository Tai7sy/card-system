<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spccbfb6) { $sp1e473f = (int) $spccbfb6->input('current_page', 1); $sped1e1d = (int) $spccbfb6->input('per_page', 20); $sp479bde = $this->authQuery($spccbfb6, \App\Category::class); $sp6f5fd7 = $spccbfb6->input('search', false); $spc4b2f5 = $spccbfb6->input('val', false); if ($sp6f5fd7 && $spc4b2f5) { if ($sp6f5fd7 == 'simple') { return Response::success($sp479bde->get(array('id', 'name'))); } elseif ($sp6f5fd7 == 'id') { $sp479bde->where('id', $spc4b2f5); } else { $sp479bde->where($sp6f5fd7, 'like', '%' . $spc4b2f5 . '%'); } } $sp64a3d6 = $spccbfb6->input('enabled'); if (strlen($sp64a3d6)) { $sp479bde->whereIn('enabled', explode(',', $sp64a3d6)); } $sp7d3bbd = $sp479bde->withCount('products')->orderBy('sort')->paginate($sped1e1d, array('*'), 'page', $sp1e473f); foreach ($sp7d3bbd->items() as $sp6e5e3d) { $sp6e5e3d->setAppends(array('url')); } return Response::success($sp7d3bbd); } function sort(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer')); $sp6e5e3d = $this->authQuery($spccbfb6, \App\Category::class)->findOrFail($spccbfb6->post('id')); $sp6e5e3d->sort = (int) $spccbfb6->post('sort', 1000); $sp6e5e3d->save(); return Response::success(); } function edit(Request $spccbfb6) { $this->validate($spccbfb6, array('name' => 'required|string|max:128')); $sp7fb7ec = $spccbfb6->post('name'); $sp64a3d6 = (int) $spccbfb6->post('enabled'); $sp5218ed = $spccbfb6->post('sort'); $sp5218ed = $sp5218ed === NULL ? 1000 : (int) $sp5218ed; if (System::_getInt('filter_words_open') === 1) { $sp2ff8f2 = explode('|', System::_get('filter_words')); if (($spa51230 = Helper::filterWords($sp7fb7ec, $sp2ff8f2)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spa51230); } } if ($sp5218ed < 0 || $sp5218ed > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp966f65 = $spccbfb6->post('password'); $spd3267d = $spccbfb6->post('password_open') === 'true'; if ((int) $spccbfb6->post('id')) { $sp6e5e3d = $this->authQuery($spccbfb6, \App\Category::class)->findOrFail($spccbfb6->post('id')); } else { $sp6e5e3d = new \App\Category(); $sp6e5e3d->user_id = $this->getUserIdOrFail($spccbfb6); } $sp6e5e3d->name = $sp7fb7ec; $sp6e5e3d->sort = $sp5218ed; $sp6e5e3d->password = $sp966f65; $sp6e5e3d->password_open = $spd3267d; $sp6e5e3d->enabled = $sp64a3d6; $sp6e5e3d->saveOrFail(); return Response::success(); } function enable(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spdf2438 = $spccbfb6->post('ids', ''); $sp64a3d6 = (int) $spccbfb6->post('enabled'); $this->authQuery($spccbfb6, \App\Category::class)->whereIn('id', explode(',', $spdf2438))->update(array('enabled' => $sp64a3d6)); return Response::success(); } function delete(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string')); $spdf2438 = $spccbfb6->post('ids', ''); $this->authQuery($spccbfb6, \App\Category::class)->whereIn('id', explode(',', $spdf2438))->delete(); return Response::success(); } }