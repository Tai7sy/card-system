<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spba756f) { $sp881a75 = $spba756f->post('current_page', 1); $sp2a01a9 = $spba756f->post('per_page', 20); $spca8acc = $this->authQuery($spba756f, \App\Category::class); $speeddd9 = $spba756f->post('search', false); $spe1fc85 = $spba756f->post('val', false); if ($speeddd9 && $spe1fc85) { if ($speeddd9 == 'simple') { return Response::success($spca8acc->get(array('id', 'name'))); } elseif ($speeddd9 == 'id') { $spca8acc->where('id', $spe1fc85); } else { $spca8acc->where($speeddd9, 'like', '%' . $spe1fc85 . '%'); } } $spc7c4ac = $spba756f->post('enabled'); if (strlen($spc7c4ac)) { $spca8acc->whereIn('enabled', explode(',', $spc7c4ac)); } $spfea7ce = $spca8acc->withCount('products')->orderBy('sort')->paginate($sp2a01a9, array('*'), 'page', $sp881a75); foreach ($spfea7ce->items() as $sp1cd1e4) { $sp1cd1e4->setAppends(array('url')); } return Response::success($spfea7ce); } function sort(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer')); $sp1cd1e4 = $this->authQuery($spba756f, \App\Category::class)->findOrFail($spba756f->post('id')); $sp1cd1e4->sort = (int) $spba756f->post('sort', 1000); $sp1cd1e4->save(); return Response::success(); } function edit(Request $spba756f) { $this->validate($spba756f, array('name' => 'required|string|max:128')); $sp387f04 = $spba756f->post('name'); $spc7c4ac = (int) $spba756f->post('enabled'); $spfdaefb = $spba756f->post('sort'); $spfdaefb = $spfdaefb === NULL ? 1000 : (int) $spfdaefb; if (System::_getInt('filter_words_open') === 1) { $sp585bcb = explode('|', System::_get('filter_words')); if (($sp5359c9 = Helper::filterWords($sp387f04, $sp585bcb)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp5359c9); } } if ($spfdaefb < 0 || $spfdaefb > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spdc3802 = $spba756f->post('password'); $spcb4f03 = $spba756f->post('password_open') === 'true'; if ((int) $spba756f->post('id')) { $sp1cd1e4 = $this->authQuery($spba756f, \App\Category::class)->findOrFail($spba756f->post('id')); } else { $sp1cd1e4 = new \App\Category(); $sp1cd1e4->user_id = $this->getUserIdOrFail($spba756f); } $sp1cd1e4->name = $sp387f04; $sp1cd1e4->sort = $spfdaefb; $sp1cd1e4->password = $spdc3802; $sp1cd1e4->password_open = $spcb4f03; $sp1cd1e4->enabled = $spc7c4ac; $sp1cd1e4->saveOrFail(); return Response::success(); } function enable(Request $spba756f) { $this->validate($spba756f, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp12026a = $spba756f->post('ids', ''); $spc7c4ac = (int) $spba756f->post('enabled'); $this->authQuery($spba756f, \App\Category::class)->whereIn('id', explode(',', $sp12026a))->update(array('enabled' => $spc7c4ac)); return Response::success(); } function delete(Request $spba756f) { $this->validate($spba756f, array('ids' => 'required|string')); $sp12026a = $spba756f->post('ids', ''); $this->authQuery($spba756f, \App\Category::class)->whereIn('id', explode(',', $sp12026a))->delete(); return Response::success(); } }