<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp7fb11a) { $sp916b0f = $sp7fb11a->post('current_page', 1); $spb6941e = $sp7fb11a->post('per_page', 20); $spbea74d = $this->authQuery($sp7fb11a, \App\Category::class); $sp952760 = $sp7fb11a->post('search', false); $sp574a8e = $sp7fb11a->post('val', false); if ($sp952760 && $sp574a8e) { if ($sp952760 == 'simple') { return Response::success($spbea74d->get(array('id', 'name'))); } elseif ($sp952760 == 'id') { $spbea74d->where('id', $sp574a8e); } else { $spbea74d->where($sp952760, 'like', '%' . $sp574a8e . '%'); } } $spbd6fea = $sp7fb11a->post('enabled'); if (strlen($spbd6fea)) { $spbea74d->whereIn('enabled', explode(',', $spbd6fea)); } $sp90a30c = $spbea74d->withCount('products')->orderBy('sort')->paginate($spb6941e, array('*'), 'page', $sp916b0f); foreach ($sp90a30c->items() as $spbbde80) { $spbbde80->setAppends(array('url')); } return Response::success($sp90a30c); } function sort(Request $sp7fb11a) { $this->validate($sp7fb11a, array('id' => 'required|integer')); $spbbde80 = $this->authQuery($sp7fb11a, \App\Category::class)->findOrFail($sp7fb11a->post('id')); $spbbde80->sort = (int) $sp7fb11a->post('sort', 1000); $spbbde80->save(); return Response::success(); } function edit(Request $sp7fb11a) { $this->validate($sp7fb11a, array('name' => 'required|string|max:128')); $sp7961e5 = $sp7fb11a->post('name'); $spbd6fea = (int) $sp7fb11a->post('enabled'); $spde1acc = $sp7fb11a->post('sort'); $spde1acc = $spde1acc === NULL ? 1000 : (int) $spde1acc; if (System::_getInt('filter_words_open') === 1) { $sp739550 = explode('|', System::_get('filter_words')); if (($sp44edeb = Helper::filterWords($sp7961e5, $sp739550)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp44edeb); } } if ($spde1acc < 0 || $spde1acc > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spfc40b6 = $sp7fb11a->post('password'); $spa323da = $sp7fb11a->post('password_open') === 'true'; if ((int) $sp7fb11a->post('id')) { $spbbde80 = $this->authQuery($sp7fb11a, \App\Category::class)->findOrFail($sp7fb11a->post('id')); } else { $spbbde80 = new \App\Category(); $spbbde80->user_id = $this->getUserIdOrFail($sp7fb11a); } $spbbde80->name = $sp7961e5; $spbbde80->sort = $spde1acc; $spbbde80->password = $spfc40b6; $spbbde80->password_open = $spa323da; $spbbde80->enabled = $spbd6fea; $spbbde80->saveOrFail(); return Response::success(); } function enable(Request $sp7fb11a) { $this->validate($sp7fb11a, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spee7cac = $sp7fb11a->post('ids', ''); $spbd6fea = (int) $sp7fb11a->post('enabled'); $this->authQuery($sp7fb11a, \App\Category::class)->whereIn('id', explode(',', $spee7cac))->update(array('enabled' => $spbd6fea)); return Response::success(); } function delete(Request $sp7fb11a) { $this->validate($sp7fb11a, array('ids' => 'required|string')); $spee7cac = $sp7fb11a->post('ids', ''); $this->authQuery($sp7fb11a, \App\Category::class)->whereIn('id', explode(',', $spee7cac))->delete(); return Response::success(); } }