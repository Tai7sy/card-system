<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp179c14) { $spababe9 = $sp179c14->post('current_page', 1); $sp4b1688 = $sp179c14->post('per_page', 20); $sp78fbd3 = $this->authQuery($sp179c14, \App\Category::class); $sp2ae16a = $sp179c14->post('search', false); $sp2fe7b9 = $sp179c14->post('val', false); if ($sp2ae16a && $sp2fe7b9) { if ($sp2ae16a == 'simple') { return Response::success($sp78fbd3->get(array('id', 'name'))); } elseif ($sp2ae16a == 'id') { $sp78fbd3->where('id', $sp2fe7b9); } else { $sp78fbd3->where($sp2ae16a, 'like', '%' . $sp2fe7b9 . '%'); } } $sp2cc7da = $sp179c14->post('enabled'); if (strlen($sp2cc7da)) { $sp78fbd3->whereIn('enabled', explode(',', $sp2cc7da)); } $spe11c26 = $sp78fbd3->withCount('products')->orderBy('sort')->paginate($sp4b1688, array('*'), 'page', $spababe9); foreach ($spe11c26->items() as $sp555b23) { $sp555b23->setAppends(array('url')); } return Response::success($spe11c26); } function sort(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer')); $sp555b23 = $this->authQuery($sp179c14, \App\Category::class)->findOrFail($sp179c14->post('id')); $sp555b23->sort = (int) $sp179c14->post('sort', 1000); $sp555b23->save(); return Response::success(); } function edit(Request $sp179c14) { $this->validate($sp179c14, array('name' => 'required|string|max:128')); $spf9ff9c = $sp179c14->post('name'); $sp2cc7da = (int) $sp179c14->post('enabled'); $sp8a6f93 = $sp179c14->post('sort'); $sp8a6f93 = $sp8a6f93 === NULL ? 1000 : (int) $sp8a6f93; if (System::_getInt('filter_words_open') === 1) { $sp830800 = explode('|', System::_get('filter_words')); if (($spa6aab5 = Helper::filterWords($spf9ff9c, $sp830800)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spa6aab5); } } if ($sp8a6f93 < 0 || $sp8a6f93 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp99d854 = $sp179c14->post('password'); $sp781b05 = $sp179c14->post('password_open') === 'true'; if ((int) $sp179c14->post('id')) { $sp555b23 = $this->authQuery($sp179c14, \App\Category::class)->findOrFail($sp179c14->post('id')); } else { $sp555b23 = new \App\Category(); $sp555b23->user_id = $this->getUserIdOrFail($sp179c14); } $sp555b23->name = $spf9ff9c; $sp555b23->sort = $sp8a6f93; $sp555b23->password = $sp99d854; $sp555b23->password_open = $sp781b05; $sp555b23->enabled = $sp2cc7da; $sp555b23->saveOrFail(); return Response::success(); } function enable(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp786967 = $sp179c14->post('ids', ''); $sp2cc7da = (int) $sp179c14->post('enabled'); $this->authQuery($sp179c14, \App\Category::class)->whereIn('id', explode(',', $sp786967))->update(array('enabled' => $sp2cc7da)); return Response::success(); } function delete(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string')); $sp786967 = $sp179c14->post('ids', ''); $this->authQuery($sp179c14, \App\Category::class)->whereIn('id', explode(',', $sp786967))->delete(); return Response::success(); } }