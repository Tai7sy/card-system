<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spfb41ce) { $sp91e8e3 = $spfb41ce->post('current_page', 1); $sp3cad87 = $spfb41ce->post('per_page', 20); $sp61dd0f = $this->authQuery($spfb41ce, \App\Category::class); $sp2e420a = $spfb41ce->post('search', false); $sp286c56 = $spfb41ce->post('val', false); if ($sp2e420a && $sp286c56) { if ($sp2e420a == 'simple') { return Response::success($sp61dd0f->get(array('id', 'name'))); } elseif ($sp2e420a == 'id') { $sp61dd0f->where('id', $sp286c56); } else { $sp61dd0f->where($sp2e420a, 'like', '%' . $sp286c56 . '%'); } } $sp691786 = $spfb41ce->post('enabled'); if (strlen($sp691786)) { $sp61dd0f->whereIn('enabled', explode(',', $sp691786)); } $sp32d442 = $sp61dd0f->withCount('products')->orderBy('sort')->paginate($sp3cad87, array('*'), 'page', $sp91e8e3); foreach ($sp32d442->items() as $sp6ebb48) { $sp6ebb48->setAppends(array('url')); } return Response::success($sp32d442); } function sort(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'required|integer')); $sp6ebb48 = $this->authQuery($spfb41ce, \App\Category::class)->findOrFail($spfb41ce->post('id')); $sp6ebb48->sort = (int) $spfb41ce->post('sort', 1000); $sp6ebb48->save(); return Response::success(); } function edit(Request $spfb41ce) { $this->validate($spfb41ce, array('name' => 'required|string|max:128')); $spf4db88 = $spfb41ce->post('name'); $sp691786 = (int) $spfb41ce->post('enabled'); $spbcdac2 = $spfb41ce->post('sort'); $spbcdac2 = $spbcdac2 === NULL ? 1000 : (int) $spbcdac2; if (System::_getInt('filter_words_open') === 1) { $speb9745 = explode('|', System::_get('filter_words')); if (($spd7b285 = Helper::filterWords($spf4db88, $speb9745)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spd7b285); } } if ($spbcdac2 < 0 || $spbcdac2 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp9b547f = $spfb41ce->post('password'); $sp2fac46 = $spfb41ce->post('password_open') === 'true'; if ((int) $spfb41ce->post('id')) { $sp6ebb48 = $this->authQuery($spfb41ce, \App\Category::class)->findOrFail($spfb41ce->post('id')); } else { $sp6ebb48 = new \App\Category(); $sp6ebb48->user_id = $this->getUserIdOrFail($spfb41ce); } $sp6ebb48->name = $spf4db88; $sp6ebb48->sort = $spbcdac2; $sp6ebb48->password = $sp9b547f; $sp6ebb48->password_open = $sp2fac46; $sp6ebb48->enabled = $sp691786; $sp6ebb48->saveOrFail(); return Response::success(); } function enable(Request $spfb41ce) { $this->validate($spfb41ce, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp87851e = $spfb41ce->post('ids', ''); $sp691786 = (int) $spfb41ce->post('enabled'); $this->authQuery($spfb41ce, \App\Category::class)->whereIn('id', explode(',', $sp87851e))->update(array('enabled' => $sp691786)); return Response::success(); } function delete(Request $spfb41ce) { $this->validate($spfb41ce, array('ids' => 'required|string')); $sp87851e = $spfb41ce->post('ids', ''); $this->authQuery($spfb41ce, \App\Category::class)->whereIn('id', explode(',', $sp87851e))->delete(); return Response::success(); } }