<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spa20801) { $sp2c377e = (int) $spa20801->input('current_page', 1); $sp896436 = (int) $spa20801->input('per_page', 20); $sp6c3275 = $this->authQuery($spa20801, \App\Category::class); $sp50974d = $spa20801->input('search', false); $sp7a8e14 = $spa20801->input('val', false); if ($sp50974d && $sp7a8e14) { if ($sp50974d == 'simple') { return Response::success($sp6c3275->get(array('id', 'name'))); } elseif ($sp50974d == 'id') { $sp6c3275->where('id', $sp7a8e14); } else { $sp6c3275->where($sp50974d, 'like', '%' . $sp7a8e14 . '%'); } } $sp34b10a = $spa20801->input('enabled'); if (strlen($sp34b10a)) { $sp6c3275->whereIn('enabled', explode(',', $sp34b10a)); } $spa79e9a = $sp6c3275->withCount('products')->orderBy('sort')->paginate($sp896436, array('*'), 'page', $sp2c377e); foreach ($spa79e9a->items() as $spdd6a6c) { $spdd6a6c->setAppends(array('url')); } return Response::success($spa79e9a); } function sort(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer')); $spdd6a6c = $this->authQuery($spa20801, \App\Category::class)->findOrFail($spa20801->post('id')); $spdd6a6c->sort = (int) $spa20801->post('sort', 1000); $spdd6a6c->save(); return Response::success(); } function edit(Request $spa20801) { $this->validate($spa20801, array('name' => 'required|string|max:128')); $sp8951ca = $spa20801->post('name'); $sp34b10a = (int) $spa20801->post('enabled'); $sp17946d = $spa20801->post('sort'); $sp17946d = $sp17946d === NULL ? 1000 : (int) $sp17946d; if (System::_getInt('filter_words_open') === 1) { $spb8db8e = explode('|', System::_get('filter_words')); if (($sp179a17 = Helper::filterWords($sp8951ca, $spb8db8e)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp179a17); } } if ($sp17946d < 0 || $sp17946d > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp4c9d0a = $spa20801->post('password'); $sp7cbb19 = $spa20801->post('password_open') === 'true'; if ((int) $spa20801->post('id')) { $spdd6a6c = $this->authQuery($spa20801, \App\Category::class)->findOrFail($spa20801->post('id')); } else { $spdd6a6c = new \App\Category(); $spdd6a6c->user_id = $this->getUserIdOrFail($spa20801); } $spdd6a6c->name = $sp8951ca; $spdd6a6c->sort = $sp17946d; $spdd6a6c->password = $sp4c9d0a; $spdd6a6c->password_open = $sp7cbb19; $spdd6a6c->enabled = $sp34b10a; $spdd6a6c->saveOrFail(); return Response::success(); } function enable(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp4a6f27 = $spa20801->post('ids', ''); $sp34b10a = (int) $spa20801->post('enabled'); $this->authQuery($spa20801, \App\Category::class)->whereIn('id', explode(',', $sp4a6f27))->update(array('enabled' => $sp34b10a)); return Response::success(); } function delete(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string')); $sp4a6f27 = $spa20801->post('ids', ''); $this->authQuery($spa20801, \App\Category::class)->whereIn('id', explode(',', $sp4a6f27))->delete(); return Response::success(); } }