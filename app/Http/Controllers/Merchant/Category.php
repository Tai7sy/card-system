<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spaa0004) { $spf1f2aa = $spaa0004->post('current_page', 1); $spe98b78 = $spaa0004->post('per_page', 20); $sp3b6564 = $this->authQuery($spaa0004, \App\Category::class); $sp29e241 = $spaa0004->post('search', false); $sp1a6789 = $spaa0004->post('val', false); if ($sp29e241 && $sp1a6789) { if ($sp29e241 == 'simple') { return Response::success($sp3b6564->get(array('id', 'name'))); } elseif ($sp29e241 == 'id') { $sp3b6564->where('id', $sp1a6789); } else { $sp3b6564->where($sp29e241, 'like', '%' . $sp1a6789 . '%'); } } $spee6fb0 = $spaa0004->post('enabled'); if (strlen($spee6fb0)) { $sp3b6564->whereIn('enabled', explode(',', $spee6fb0)); } $sp94fc94 = $sp3b6564->withCount('products')->orderBy('sort')->paginate($spe98b78, array('*'), 'page', $spf1f2aa); foreach ($sp94fc94->items() as $sp9c1285) { $sp9c1285->setAppends(array('url')); } return Response::success($sp94fc94); } function sort(Request $spaa0004) { $this->validate($spaa0004, array('id' => 'required|integer')); $sp9c1285 = $this->authQuery($spaa0004, \App\Category::class)->findOrFail($spaa0004->post('id')); $sp9c1285->sort = (int) $spaa0004->post('sort', 1000); $sp9c1285->save(); return Response::success(); } function edit(Request $spaa0004) { $this->validate($spaa0004, array('name' => 'required|string|max:128')); $sp4fd574 = $spaa0004->post('name'); $spee6fb0 = (int) $spaa0004->post('enabled'); $sp404e93 = $spaa0004->post('sort'); $sp404e93 = $sp404e93 === NULL ? 1000 : (int) $sp404e93; if (System::_getInt('filter_words_open') === 1) { $spcbc6cb = explode('|', System::_get('filter_words')); if (($sp4e109c = Helper::filterWords($sp4fd574, $spcbc6cb)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp4e109c); } } if ($sp404e93 < 0 || $sp404e93 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp332898 = $spaa0004->post('password'); $sp6fbc79 = $spaa0004->post('password_open') === 'true'; if ((int) $spaa0004->post('id')) { $sp9c1285 = $this->authQuery($spaa0004, \App\Category::class)->findOrFail($spaa0004->post('id')); } else { $sp9c1285 = new \App\Category(); $sp9c1285->user_id = $this->getUserIdOrFail($spaa0004); } $sp9c1285->name = $sp4fd574; $sp9c1285->sort = $sp404e93; $sp9c1285->password = $sp332898; $sp9c1285->password_open = $sp6fbc79; $sp9c1285->enabled = $spee6fb0; $sp9c1285->saveOrFail(); return Response::success(); } function enable(Request $spaa0004) { $this->validate($spaa0004, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp5bbe0c = $spaa0004->post('ids', ''); $spee6fb0 = (int) $spaa0004->post('enabled'); $this->authQuery($spaa0004, \App\Category::class)->whereIn('id', explode(',', $sp5bbe0c))->update(array('enabled' => $spee6fb0)); return Response::success(); } function delete(Request $spaa0004) { $this->validate($spaa0004, array('ids' => 'required|string')); $sp5bbe0c = $spaa0004->post('ids', ''); $this->authQuery($spaa0004, \App\Category::class)->whereIn('id', explode(',', $sp5bbe0c))->delete(); return Response::success(); } }