<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp13451b) { $sp26dcb6 = (int) $sp13451b->input('current_page', 1); $sp769c3e = (int) $sp13451b->input('per_page', 20); $sp8e2ceb = $this->authQuery($sp13451b, \App\Category::class); $sp54e0e6 = $sp13451b->input('search', false); $sp59b33b = $sp13451b->input('val', false); if ($sp54e0e6 && $sp59b33b) { if ($sp54e0e6 == 'simple') { return Response::success($sp8e2ceb->get(array('id', 'name'))); } elseif ($sp54e0e6 == 'id') { $sp8e2ceb->where('id', $sp59b33b); } else { $sp8e2ceb->where($sp54e0e6, 'like', '%' . $sp59b33b . '%'); } } $sp6a3468 = $sp13451b->input('enabled'); if (strlen($sp6a3468)) { $sp8e2ceb->whereIn('enabled', explode(',', $sp6a3468)); } $spa67529 = $sp8e2ceb->withCount('products')->orderBy('sort')->paginate($sp769c3e, array('*'), 'page', $sp26dcb6); foreach ($spa67529->items() as $spd58c4f) { $spd58c4f->setAppends(array('url')); } return Response::success($spa67529); } function sort(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer')); $spd58c4f = $this->authQuery($sp13451b, \App\Category::class)->findOrFail($sp13451b->post('id')); $spd58c4f->sort = (int) $sp13451b->post('sort', 1000); $spd58c4f->save(); return Response::success(); } function edit(Request $sp13451b) { $this->validate($sp13451b, array('name' => 'required|string|max:128')); $sp664a00 = $sp13451b->post('name'); $sp6a3468 = (int) $sp13451b->post('enabled'); $spa43429 = $sp13451b->post('sort'); $spa43429 = $spa43429 === NULL ? 1000 : (int) $spa43429; if (System::_getInt('filter_words_open') === 1) { $sp9e7840 = explode('|', System::_get('filter_words')); if (($sp00ac62 = Helper::filterWords($sp664a00, $sp9e7840)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp00ac62); } } if ($spa43429 < 0 || $spa43429 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spf35053 = $sp13451b->post('password'); $sp5ca76b = $sp13451b->post('password_open') === 'true'; if ((int) $sp13451b->post('id')) { $spd58c4f = $this->authQuery($sp13451b, \App\Category::class)->findOrFail($sp13451b->post('id')); } else { $spd58c4f = new \App\Category(); $spd58c4f->user_id = $this->getUserIdOrFail($sp13451b); } $spd58c4f->name = $sp664a00; $spd58c4f->sort = $spa43429; $spd58c4f->password = $spf35053; $spd58c4f->password_open = $sp5ca76b; $spd58c4f->enabled = $sp6a3468; $spd58c4f->saveOrFail(); return Response::success(); } function enable(Request $sp13451b) { $this->validate($sp13451b, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp60bb7e = $sp13451b->post('ids', ''); $sp6a3468 = (int) $sp13451b->post('enabled'); $this->authQuery($sp13451b, \App\Category::class)->whereIn('id', explode(',', $sp60bb7e))->update(array('enabled' => $sp6a3468)); return Response::success(); } function delete(Request $sp13451b) { $this->validate($sp13451b, array('ids' => 'required|string')); $sp60bb7e = $sp13451b->post('ids', ''); $this->authQuery($sp13451b, \App\Category::class)->whereIn('id', explode(',', $sp60bb7e))->delete(); return Response::success(); } }