<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp3c91bd) { $spf8ae2a = $sp3c91bd->post('current_page', 1); $spa4d3d7 = $sp3c91bd->post('per_page', 20); $sp6cb35e = $this->authQuery($sp3c91bd, \App\Category::class); $sp98fed8 = $sp3c91bd->post('search', false); $sp7f8b1d = $sp3c91bd->post('val', false); if ($sp98fed8 && $sp7f8b1d) { if ($sp98fed8 == 'simple') { return Response::success($sp6cb35e->get(array('id', 'name'))); } elseif ($sp98fed8 == 'id') { $sp6cb35e->where('id', $sp7f8b1d); } else { $sp6cb35e->where($sp98fed8, 'like', '%' . $sp7f8b1d . '%'); } } $spa20949 = $sp3c91bd->post('enabled'); if (strlen($spa20949)) { $sp6cb35e->whereIn('enabled', explode(',', $spa20949)); } $spdecb4c = $sp6cb35e->withCount('products')->orderBy('sort')->paginate($spa4d3d7, array('*'), 'page', $spf8ae2a); foreach ($spdecb4c->items() as $spa74819) { $spa74819->setAppends(array('url')); } return Response::success($spdecb4c); } function sort(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer')); $spa74819 = $this->authQuery($sp3c91bd, \App\Category::class)->findOrFail($sp3c91bd->post('id')); $spa74819->sort = (int) $sp3c91bd->post('sort', 1000); $spa74819->save(); return Response::success(); } function edit(Request $sp3c91bd) { $this->validate($sp3c91bd, array('name' => 'required|string|max:128')); $sp6b4dc2 = $sp3c91bd->post('name'); $spa20949 = (int) $sp3c91bd->post('enabled'); $sp6dd879 = $sp3c91bd->post('sort'); $sp6dd879 = $sp6dd879 === NULL ? 1000 : (int) $sp6dd879; if (System::_getInt('filter_words_open') === 1) { $spcd9c68 = explode('|', System::_get('filter_words')); if (($sp6a22d6 = Helper::filterWords($sp6b4dc2, $spcd9c68)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp6a22d6); } } if ($sp6dd879 < 0 || $sp6dd879 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp42016f = $sp3c91bd->post('password'); $sp48ffe1 = $sp3c91bd->post('password_open') === 'true'; if ((int) $sp3c91bd->post('id')) { $spa74819 = $this->authQuery($sp3c91bd, \App\Category::class)->findOrFail($sp3c91bd->post('id')); } else { $spa74819 = new \App\Category(); $spa74819->user_id = $this->getUserIdOrFail($sp3c91bd); } $spa74819->name = $sp6b4dc2; $spa74819->sort = $sp6dd879; $spa74819->password = $sp42016f; $spa74819->password_open = $sp48ffe1; $spa74819->enabled = $spa20949; $spa74819->saveOrFail(); return Response::success(); } function enable(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spdbdb98 = $sp3c91bd->post('ids', ''); $spa20949 = (int) $sp3c91bd->post('enabled'); $this->authQuery($sp3c91bd, \App\Category::class)->whereIn('id', explode(',', $spdbdb98))->update(array('enabled' => $spa20949)); return Response::success(); } function delete(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string')); $spdbdb98 = $sp3c91bd->post('ids', ''); $this->authQuery($sp3c91bd, \App\Category::class)->whereIn('id', explode(',', $spdbdb98))->delete(); return Response::success(); } }