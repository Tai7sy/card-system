<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spfb5ae3) { $spd43f26 = $spfb5ae3->post('current_page', 1); $spce7281 = $spfb5ae3->post('per_page', 20); $sp32b0d3 = $this->authQuery($spfb5ae3, \App\Category::class); $spb59184 = $spfb5ae3->post('search', false); $sp809177 = $spfb5ae3->post('val', false); if ($spb59184 && $sp809177) { if ($spb59184 == 'simple') { return Response::success($sp32b0d3->get(array('id', 'name'))); } elseif ($spb59184 == 'id') { $sp32b0d3->where('id', $sp809177); } else { $sp32b0d3->where($spb59184, 'like', '%' . $sp809177 . '%'); } } $sp607943 = $spfb5ae3->post('enabled'); if (strlen($sp607943)) { $sp32b0d3->whereIn('enabled', explode(',', $sp607943)); } $spfa99a5 = $sp32b0d3->withCount('products')->orderBy('sort')->paginate($spce7281, array('*'), 'page', $spd43f26); foreach ($spfa99a5->items() as $sp0ff930) { $sp0ff930->setAppends(array('url')); } return Response::success($spfa99a5); } function sort(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer')); $sp0ff930 = $this->authQuery($spfb5ae3, \App\Category::class)->findOrFail($spfb5ae3->post('id')); $sp0ff930->sort = (int) $spfb5ae3->post('sort', 1000); $sp0ff930->save(); return Response::success(); } function edit(Request $spfb5ae3) { $this->validate($spfb5ae3, array('name' => 'required|string|max:128')); $sp4c25fd = $spfb5ae3->post('name'); $sp607943 = (int) $spfb5ae3->post('enabled'); $spf2519d = $spfb5ae3->post('sort'); $spf2519d = $spf2519d === NULL ? 1000 : (int) $spf2519d; if (System::_getInt('filter_words_open') === 1) { $sp566e22 = explode('|', System::_get('filter_words')); if (($sp5f5153 = Helper::filterWords($sp4c25fd, $sp566e22)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp5f5153); } } if ($spf2519d < 0 || $spf2519d > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spc9d50c = $spfb5ae3->post('password'); $spbdc2fe = $spfb5ae3->post('password_open') === 'true'; if ((int) $spfb5ae3->post('id')) { $sp0ff930 = $this->authQuery($spfb5ae3, \App\Category::class)->findOrFail($spfb5ae3->post('id')); } else { $sp0ff930 = new \App\Category(); $sp0ff930->user_id = $this->getUserIdOrFail($spfb5ae3); } $sp0ff930->name = $sp4c25fd; $sp0ff930->sort = $spf2519d; $sp0ff930->password = $spc9d50c; $sp0ff930->password_open = $spbdc2fe; $sp0ff930->enabled = $sp607943; $sp0ff930->saveOrFail(); return Response::success(); } function enable(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $speab0da = $spfb5ae3->post('ids', ''); $sp607943 = (int) $spfb5ae3->post('enabled'); $this->authQuery($spfb5ae3, \App\Category::class)->whereIn('id', explode(',', $speab0da))->update(array('enabled' => $sp607943)); return Response::success(); } function delete(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string')); $speab0da = $spfb5ae3->post('ids', ''); $this->authQuery($spfb5ae3, \App\Category::class)->whereIn('id', explode(',', $speab0da))->delete(); return Response::success(); } }