<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp7f7104) { $spfe8869 = (int) $sp7f7104->input('current_page', 1); $spec5082 = (int) $sp7f7104->input('per_page', 20); $spbec213 = $this->authQuery($sp7f7104, \App\Category::class); $spad233c = $sp7f7104->input('search', false); $spaefd46 = $sp7f7104->input('val', false); if ($spad233c && $spaefd46) { if ($spad233c == 'simple') { return Response::success($spbec213->get(array('id', 'name'))); } elseif ($spad233c == 'id') { $spbec213->where('id', $spaefd46); } else { $spbec213->where($spad233c, 'like', '%' . $spaefd46 . '%'); } } $sp229dc8 = $sp7f7104->input('enabled'); if (strlen($sp229dc8)) { $spbec213->whereIn('enabled', explode(',', $sp229dc8)); } $spa229b5 = $spbec213->withCount('products')->orderBy('sort')->paginate($spec5082, array('*'), 'page', $spfe8869); foreach ($spa229b5->items() as $sp45344f) { $sp45344f->setAppends(array('url')); } return Response::success($spa229b5); } function sort(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer')); $sp45344f = $this->authQuery($sp7f7104, \App\Category::class)->findOrFail($sp7f7104->post('id')); $sp45344f->sort = (int) $sp7f7104->post('sort', 1000); $sp45344f->save(); return Response::success(); } function edit(Request $sp7f7104) { $this->validate($sp7f7104, array('name' => 'required|string|max:128')); $sp6f359d = $sp7f7104->post('name'); $sp229dc8 = (int) $sp7f7104->post('enabled'); $spae2ba5 = $sp7f7104->post('sort'); $spae2ba5 = $spae2ba5 === NULL ? 1000 : (int) $spae2ba5; if (System::_getInt('filter_words_open') === 1) { $spfba772 = explode('|', System::_get('filter_words')); if (($sp6e55ba = Helper::filterWords($sp6f359d, $spfba772)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp6e55ba); } } if ($spae2ba5 < 0 || $spae2ba5 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp364426 = $sp7f7104->post('password'); $sp98b1df = $sp7f7104->post('password_open') === 'true'; if ((int) $sp7f7104->post('id')) { $sp45344f = $this->authQuery($sp7f7104, \App\Category::class)->findOrFail($sp7f7104->post('id')); } else { $sp45344f = new \App\Category(); $sp45344f->user_id = $this->getUserIdOrFail($sp7f7104); } $sp45344f->name = $sp6f359d; $sp45344f->sort = $spae2ba5; $sp45344f->password = $sp364426; $sp45344f->password_open = $sp98b1df; $sp45344f->enabled = $sp229dc8; $sp45344f->saveOrFail(); return Response::success(); } function enable(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp70cf7b = $sp7f7104->post('ids', ''); $sp229dc8 = (int) $sp7f7104->post('enabled'); $this->authQuery($sp7f7104, \App\Category::class)->whereIn('id', explode(',', $sp70cf7b))->update(array('enabled' => $sp229dc8)); return Response::success(); } function delete(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string')); $sp70cf7b = $sp7f7104->post('ids', ''); $this->authQuery($sp7f7104, \App\Category::class)->whereIn('id', explode(',', $sp70cf7b))->delete(); return Response::success(); } }