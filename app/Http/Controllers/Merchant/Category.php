<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp0aae4c) { $sp35a866 = $sp0aae4c->post('current_page', 1); $spa0426f = $sp0aae4c->post('per_page', 20); $spb0a50e = $this->authQuery($sp0aae4c, \App\Category::class); $spb66be1 = $sp0aae4c->post('search', false); $spc82c62 = $sp0aae4c->post('val', false); if ($spb66be1 && $spc82c62) { if ($spb66be1 == 'simple') { return Response::success($spb0a50e->get(array('id', 'name'))); } elseif ($spb66be1 == 'id') { $spb0a50e->where('id', $spc82c62); } else { $spb0a50e->where($spb66be1, 'like', '%' . $spc82c62 . '%'); } } $sp22895e = $sp0aae4c->post('enabled'); if (strlen($sp22895e)) { $spb0a50e->whereIn('enabled', explode(',', $sp22895e)); } $sp4e4cfe = $spb0a50e->withCount('products')->orderBy('sort')->paginate($spa0426f, array('*'), 'page', $sp35a866); foreach ($sp4e4cfe->items() as $spe1f015) { $spe1f015->setAppends(array('url')); } return Response::success($sp4e4cfe); } function sort(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'required|integer')); $spe1f015 = $this->authQuery($sp0aae4c, \App\Category::class)->findOrFail($sp0aae4c->post('id')); $spe1f015->sort = (int) $sp0aae4c->post('sort', 1000); $spe1f015->save(); return Response::success(); } function edit(Request $sp0aae4c) { $this->validate($sp0aae4c, array('name' => 'required|string|max:128')); $sp023357 = $sp0aae4c->post('name'); $sp22895e = (int) $sp0aae4c->post('enabled'); $spe0f397 = $sp0aae4c->post('sort'); $spe0f397 = $spe0f397 === NULL ? 1000 : (int) $spe0f397; if (System::_getInt('filter_words_open') === 1) { $sp1a4e67 = explode('|', System::_get('filter_words')); if (($spf96e67 = Helper::filterWords($sp023357, $sp1a4e67)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spf96e67); } } if ($spe0f397 < 0 || $spe0f397 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp86b1f2 = $sp0aae4c->post('password'); $sp1dcf38 = $sp0aae4c->post('password_open') === 'true'; if ((int) $sp0aae4c->post('id')) { $spe1f015 = $this->authQuery($sp0aae4c, \App\Category::class)->findOrFail($sp0aae4c->post('id')); } else { $spe1f015 = new \App\Category(); $spe1f015->user_id = $this->getUserIdOrFail($sp0aae4c); } $spe1f015->name = $sp023357; $spe1f015->sort = $spe0f397; $spe1f015->password = $sp86b1f2; $spe1f015->password_open = $sp1dcf38; $spe1f015->enabled = $sp22895e; $spe1f015->saveOrFail(); return Response::success(); } function enable(Request $sp0aae4c) { $this->validate($sp0aae4c, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spcffd00 = $sp0aae4c->post('ids', ''); $sp22895e = (int) $sp0aae4c->post('enabled'); $this->authQuery($sp0aae4c, \App\Category::class)->whereIn('id', explode(',', $spcffd00))->update(array('enabled' => $sp22895e)); return Response::success(); } function delete(Request $sp0aae4c) { $this->validate($sp0aae4c, array('ids' => 'required|string')); $spcffd00 = $sp0aae4c->post('ids', ''); $this->authQuery($sp0aae4c, \App\Category::class)->whereIn('id', explode(',', $spcffd00))->delete(); return Response::success(); } }