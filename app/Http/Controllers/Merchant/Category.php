<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp510ef3) { $spb02a8e = (int) $sp510ef3->input('current_page', 1); $sp95f730 = (int) $sp510ef3->input('per_page', 20); $sp90af04 = $this->authQuery($sp510ef3, \App\Category::class); $spebf2d9 = $sp510ef3->input('search', false); $spac3bf6 = $sp510ef3->input('val', false); if ($spebf2d9 && $spac3bf6) { if ($spebf2d9 == 'simple') { return Response::success($sp90af04->get(array('id', 'name'))); } elseif ($spebf2d9 == 'id') { $sp90af04->where('id', $spac3bf6); } else { $sp90af04->where($spebf2d9, 'like', '%' . $spac3bf6 . '%'); } } $sp73556e = $sp510ef3->input('enabled'); if (strlen($sp73556e)) { $sp90af04->whereIn('enabled', explode(',', $sp73556e)); } $spe24324 = $sp90af04->withCount('products')->orderBy('sort')->paginate($sp95f730, array('*'), 'page', $spb02a8e); foreach ($spe24324->items() as $sp577aae) { $sp577aae->setAppends(array('url')); } return Response::success($spe24324); } function sort(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer')); $sp577aae = $this->authQuery($sp510ef3, \App\Category::class)->findOrFail($sp510ef3->post('id')); $sp577aae->sort = (int) $sp510ef3->post('sort', 1000); $sp577aae->save(); return Response::success(); } function edit(Request $sp510ef3) { $this->validate($sp510ef3, array('name' => 'required|string|max:128')); $spd7c47a = $sp510ef3->post('name'); $sp73556e = (int) $sp510ef3->post('enabled'); $spce8850 = $sp510ef3->post('sort'); $spce8850 = $spce8850 === NULL ? 1000 : (int) $spce8850; if (System::_getInt('filter_words_open') === 1) { $spa9cfcd = explode('|', System::_get('filter_words')); if (($spced997 = Helper::filterWords($spd7c47a, $spa9cfcd)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spced997); } } if ($spce8850 < 0 || $spce8850 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp7a8ba8 = $sp510ef3->post('password'); $sp01408d = $sp510ef3->post('password_open') === 'true'; if ((int) $sp510ef3->post('id')) { $sp577aae = $this->authQuery($sp510ef3, \App\Category::class)->findOrFail($sp510ef3->post('id')); } else { $sp577aae = new \App\Category(); $sp577aae->user_id = $this->getUserIdOrFail($sp510ef3); } $sp577aae->name = $spd7c47a; $sp577aae->sort = $spce8850; $sp577aae->password = $sp7a8ba8; $sp577aae->password_open = $sp01408d; $sp577aae->enabled = $sp73556e; $sp577aae->saveOrFail(); return Response::success(); } function enable(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp3cf93f = $sp510ef3->post('ids', ''); $sp73556e = (int) $sp510ef3->post('enabled'); $this->authQuery($sp510ef3, \App\Category::class)->whereIn('id', explode(',', $sp3cf93f))->update(array('enabled' => $sp73556e)); return Response::success(); } function delete(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string')); $sp3cf93f = $sp510ef3->post('ids', ''); $this->authQuery($sp510ef3, \App\Category::class)->whereIn('id', explode(',', $sp3cf93f))->delete(); return Response::success(); } }