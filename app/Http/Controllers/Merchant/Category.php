<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp375069) { $sp19fe4a = (int) $sp375069->input('current_page', 1); $sp90d207 = (int) $sp375069->input('per_page', 20); $sped9569 = $this->authQuery($sp375069, \App\Category::class); $spca3671 = $sp375069->input('search', false); $spb689af = $sp375069->input('val', false); if ($spca3671 && $spb689af) { if ($spca3671 == 'simple') { return Response::success($sped9569->get(array('id', 'name'))); } elseif ($spca3671 == 'id') { $sped9569->where('id', $spb689af); } else { $sped9569->where($spca3671, 'like', '%' . $spb689af . '%'); } } $spedd1a7 = $sp375069->input('enabled'); if (strlen($spedd1a7)) { $sped9569->whereIn('enabled', explode(',', $spedd1a7)); } $sp3aa6bd = $sped9569->withCount('products')->orderBy('sort')->paginate($sp90d207, array('*'), 'page', $sp19fe4a); foreach ($sp3aa6bd->items() as $spe4707e) { $spe4707e->setAppends(array('url')); } return Response::success($sp3aa6bd); } function sort(Request $sp375069) { $this->validate($sp375069, array('id' => 'required|integer')); $spe4707e = $this->authQuery($sp375069, \App\Category::class)->findOrFail($sp375069->post('id')); $spe4707e->sort = (int) $sp375069->post('sort', 1000); $spe4707e->save(); return Response::success(); } function edit(Request $sp375069) { $this->validate($sp375069, array('name' => 'required|string|max:128')); $spa58881 = $sp375069->post('name'); $spedd1a7 = (int) $sp375069->post('enabled'); $sp6e5383 = $sp375069->post('sort'); $sp6e5383 = $sp6e5383 === NULL ? 1000 : (int) $sp6e5383; if (System::_getInt('filter_words_open') === 1) { $sp3893f0 = explode('|', System::_get('filter_words')); if (($sp6706d8 = Helper::filterWords($spa58881, $sp3893f0)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp6706d8); } } if ($sp6e5383 < 0 || $sp6e5383 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp22c05f = $sp375069->post('password'); $sp4ffd3b = $sp375069->post('password_open') === 'true'; if ((int) $sp375069->post('id')) { $spe4707e = $this->authQuery($sp375069, \App\Category::class)->findOrFail($sp375069->post('id')); } else { $spe4707e = new \App\Category(); $spe4707e->user_id = $this->getUserIdOrFail($sp375069); } $spe4707e->name = $spa58881; $spe4707e->sort = $sp6e5383; $spe4707e->password = $sp22c05f; $spe4707e->password_open = $sp4ffd3b; $spe4707e->enabled = $spedd1a7; $spe4707e->saveOrFail(); return Response::success(); } function enable(Request $sp375069) { $this->validate($sp375069, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp630e91 = $sp375069->post('ids', ''); $spedd1a7 = (int) $sp375069->post('enabled'); $this->authQuery($sp375069, \App\Category::class)->whereIn('id', explode(',', $sp630e91))->update(array('enabled' => $spedd1a7)); return Response::success(); } function delete(Request $sp375069) { $this->validate($sp375069, array('ids' => 'required|string')); $sp630e91 = $sp375069->post('ids', ''); $this->authQuery($sp375069, \App\Category::class)->whereIn('id', explode(',', $sp630e91))->delete(); return Response::success(); } }