<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spfeab54) { $spd5ff21 = $spfeab54->post('current_page', 1); $sp372a98 = $spfeab54->post('per_page', 20); $sp5786ca = $this->authQuery($spfeab54, \App\Category::class); $sped0aef = $spfeab54->post('search', false); $sp86d9ea = $spfeab54->post('val', false); if ($sped0aef && $sp86d9ea) { if ($sped0aef == 'simple') { return Response::success($sp5786ca->get(array('id', 'name'))); } elseif ($sped0aef == 'id') { $sp5786ca->where('id', $sp86d9ea); } else { $sp5786ca->where($sped0aef, 'like', '%' . $sp86d9ea . '%'); } } $sp17fe52 = $spfeab54->post('enabled'); if (strlen($sp17fe52)) { $sp5786ca->whereIn('enabled', explode(',', $sp17fe52)); } $spaff91c = $sp5786ca->withCount('products')->orderBy('sort')->paginate($sp372a98, array('*'), 'page', $spd5ff21); foreach ($spaff91c->items() as $spb7fea4) { $spb7fea4->setAppends(array('url')); } return Response::success($spaff91c); } function sort(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer')); $spb7fea4 = $this->authQuery($spfeab54, \App\Category::class)->findOrFail($spfeab54->post('id')); $spb7fea4->sort = (int) $spfeab54->post('sort', 1000); $spb7fea4->save(); return Response::success(); } function edit(Request $spfeab54) { $this->validate($spfeab54, array('name' => 'required|string|max:128')); $sp505b52 = $spfeab54->post('name'); $sp17fe52 = (int) $spfeab54->post('enabled'); $spea978f = $spfeab54->post('sort'); $spea978f = $spea978f === NULL ? 1000 : (int) $spea978f; if (System::_getInt('filter_words_open') === 1) { $spe40b13 = explode('|', System::_get('filter_words')); if (($spb9589c = Helper::filterWords($sp505b52, $spe40b13)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spb9589c); } } if ($spea978f < 0 || $spea978f > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spb6833a = $spfeab54->post('password'); $spe8f36f = $spfeab54->post('password_open') === 'true'; if ((int) $spfeab54->post('id')) { $spb7fea4 = $this->authQuery($spfeab54, \App\Category::class)->findOrFail($spfeab54->post('id')); } else { $spb7fea4 = new \App\Category(); $spb7fea4->user_id = $this->getUserIdOrFail($spfeab54); } $spb7fea4->name = $sp505b52; $spb7fea4->sort = $spea978f; $spb7fea4->password = $spb6833a; $spb7fea4->password_open = $spe8f36f; $spb7fea4->enabled = $sp17fe52; $spb7fea4->saveOrFail(); return Response::success(); } function enable(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spbd9db0 = $spfeab54->post('ids', ''); $sp17fe52 = (int) $spfeab54->post('enabled'); $this->authQuery($spfeab54, \App\Category::class)->whereIn('id', explode(',', $spbd9db0))->update(array('enabled' => $sp17fe52)); return Response::success(); } function delete(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string')); $spbd9db0 = $spfeab54->post('ids', ''); $this->authQuery($spfeab54, \App\Category::class)->whereIn('id', explode(',', $spbd9db0))->delete(); return Response::success(); } }