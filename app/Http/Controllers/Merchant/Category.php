<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spdf16c9) { $sp7ec90f = (int) $spdf16c9->input('current_page', 1); $spc4a487 = (int) $spdf16c9->input('per_page', 20); $spc64cdd = $this->authQuery($spdf16c9, \App\Category::class); $spdb3063 = $spdf16c9->input('search', false); $sp085db7 = $spdf16c9->input('val', false); if ($spdb3063 && $sp085db7) { if ($spdb3063 == 'simple') { return Response::success($spc64cdd->get(array('id', 'name'))); } elseif ($spdb3063 == 'id') { $spc64cdd->where('id', $sp085db7); } else { $spc64cdd->where($spdb3063, 'like', '%' . $sp085db7 . '%'); } } $sp0bc006 = $spdf16c9->input('enabled'); if (strlen($sp0bc006)) { $spc64cdd->whereIn('enabled', explode(',', $sp0bc006)); } $sp61ff14 = $spc64cdd->withCount('products')->orderBy('sort')->paginate($spc4a487, array('*'), 'page', $sp7ec90f); foreach ($sp61ff14->items() as $spb98da4) { $spb98da4->setAppends(array('url')); } return Response::success($sp61ff14); } function sort(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer')); $spb98da4 = $this->authQuery($spdf16c9, \App\Category::class)->findOrFail($spdf16c9->post('id')); $spb98da4->sort = (int) $spdf16c9->post('sort', 1000); $spb98da4->save(); return Response::success(); } function edit(Request $spdf16c9) { $this->validate($spdf16c9, array('name' => 'required|string|max:128')); $spae6970 = $spdf16c9->post('name'); $sp0bc006 = (int) $spdf16c9->post('enabled'); $sp966912 = $spdf16c9->post('sort'); $sp966912 = $sp966912 === NULL ? 1000 : (int) $sp966912; if (System::_getInt('filter_words_open') === 1) { $spc310c4 = explode('|', System::_get('filter_words')); if (($sp8ee8d3 = Helper::filterWords($spae6970, $spc310c4)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp8ee8d3); } } if ($sp966912 < 0 || $sp966912 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp7e9f47 = $spdf16c9->post('password'); $spb53211 = $spdf16c9->post('password_open') === 'true'; if ((int) $spdf16c9->post('id')) { $spb98da4 = $this->authQuery($spdf16c9, \App\Category::class)->findOrFail($spdf16c9->post('id')); } else { $spb98da4 = new \App\Category(); $spb98da4->user_id = $this->getUserIdOrFail($spdf16c9); } $spb98da4->name = $spae6970; $spb98da4->sort = $sp966912; $spb98da4->password = $sp7e9f47; $spb98da4->password_open = $spb53211; $spb98da4->enabled = $sp0bc006; $spb98da4->saveOrFail(); return Response::success(); } function enable(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spb19a2c = $spdf16c9->post('ids', ''); $sp0bc006 = (int) $spdf16c9->post('enabled'); $this->authQuery($spdf16c9, \App\Category::class)->whereIn('id', explode(',', $spb19a2c))->update(array('enabled' => $sp0bc006)); return Response::success(); } function delete(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string')); $spb19a2c = $spdf16c9->post('ids', ''); $this->authQuery($spdf16c9, \App\Category::class)->whereIn('id', explode(',', $spb19a2c))->delete(); return Response::success(); } }