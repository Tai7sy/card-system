<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spf066f3) { $sp72b123 = $spf066f3->post('current_page', 1); $spcfcad4 = $spf066f3->post('per_page', 20); $sp5044a7 = $this->authQuery($spf066f3, \App\Category::class); $spca736c = $spf066f3->post('search', false); $sp56dec1 = $spf066f3->post('val', false); if ($spca736c && $sp56dec1) { if ($spca736c == 'simple') { return Response::success($sp5044a7->get(array('id', 'name'))); } elseif ($spca736c == 'id') { $sp5044a7->where('id', $sp56dec1); } else { $sp5044a7->where($spca736c, 'like', '%' . $sp56dec1 . '%'); } } $sp4ec09d = $spf066f3->post('enabled'); if (strlen($sp4ec09d)) { $sp5044a7->whereIn('enabled', explode(',', $sp4ec09d)); } $sp293456 = $sp5044a7->withCount('products')->orderBy('sort')->paginate($spcfcad4, array('*'), 'page', $sp72b123); foreach ($sp293456->items() as $sped57d9) { $sped57d9->setAppends(array('url')); } return Response::success($sp293456); } function sort(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer')); $sped57d9 = $this->authQuery($spf066f3, \App\Category::class)->findOrFail($spf066f3->post('id')); $sped57d9->sort = (int) $spf066f3->post('sort', 1000); $sped57d9->save(); return Response::success(); } function edit(Request $spf066f3) { $this->validate($spf066f3, array('name' => 'required|string|max:128')); $sp34e4b5 = $spf066f3->post('name'); $sp4ec09d = (int) $spf066f3->post('enabled'); $sp2ee169 = $spf066f3->post('sort'); $sp2ee169 = $sp2ee169 === NULL ? 1000 : (int) $sp2ee169; if (System::_getInt('filter_words_open') === 1) { $spe817ab = explode('|', System::_get('filter_words')); if (($sp9b52fe = Helper::filterWords($sp34e4b5, $spe817ab)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp9b52fe); } } if ($sp2ee169 < 0 || $sp2ee169 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp8f68ce = $spf066f3->post('password'); $sp8092e7 = $spf066f3->post('password_open') === 'true'; if ((int) $spf066f3->post('id')) { $sped57d9 = $this->authQuery($spf066f3, \App\Category::class)->findOrFail($spf066f3->post('id')); } else { $sped57d9 = new \App\Category(); $sped57d9->user_id = $this->getUserIdOrFail($spf066f3); } $sped57d9->name = $sp34e4b5; $sped57d9->sort = $sp2ee169; $sped57d9->password = $sp8f68ce; $sped57d9->password_open = $sp8092e7; $sped57d9->enabled = $sp4ec09d; $sped57d9->saveOrFail(); return Response::success(); } function enable(Request $spf066f3) { $this->validate($spf066f3, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp1f71d9 = $spf066f3->post('ids', ''); $sp4ec09d = (int) $spf066f3->post('enabled'); $this->authQuery($spf066f3, \App\Category::class)->whereIn('id', explode(',', $sp1f71d9))->update(array('enabled' => $sp4ec09d)); return Response::success(); } function delete(Request $spf066f3) { $this->validate($spf066f3, array('ids' => 'required|string')); $sp1f71d9 = $spf066f3->post('ids', ''); $this->authQuery($spf066f3, \App\Category::class)->whereIn('id', explode(',', $sp1f71d9))->delete(); return Response::success(); } }