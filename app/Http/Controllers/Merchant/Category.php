<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp62e4cd) { $sp295466 = (int) $sp62e4cd->input('current_page', 1); $spe5b040 = (int) $sp62e4cd->input('per_page', 20); $sp4210ad = $this->authQuery($sp62e4cd, \App\Category::class); $spe0aaed = $sp62e4cd->input('search', false); $sp75c4d8 = $sp62e4cd->input('val', false); if ($spe0aaed && $sp75c4d8) { if ($spe0aaed == 'simple') { return Response::success($sp4210ad->get(array('id', 'name'))); } elseif ($spe0aaed == 'id') { $sp4210ad->where('id', $sp75c4d8); } else { $sp4210ad->where($spe0aaed, 'like', '%' . $sp75c4d8 . '%'); } } $sp3022f1 = $sp62e4cd->input('enabled'); if (strlen($sp3022f1)) { $sp4210ad->whereIn('enabled', explode(',', $sp3022f1)); } $sp6492f8 = $sp4210ad->withCount('products')->orderBy('sort')->paginate($spe5b040, array('*'), 'page', $sp295466); foreach ($sp6492f8->items() as $sp1b7790) { $sp1b7790->setAppends(array('url')); } return Response::success($sp6492f8); } function sort(Request $sp62e4cd) { $this->validate($sp62e4cd, array('id' => 'required|integer')); $sp1b7790 = $this->authQuery($sp62e4cd, \App\Category::class)->findOrFail($sp62e4cd->post('id')); $sp1b7790->sort = (int) $sp62e4cd->post('sort', 1000); $sp1b7790->save(); return Response::success(); } function edit(Request $sp62e4cd) { $this->validate($sp62e4cd, array('name' => 'required|string|max:128')); $spb54a76 = $sp62e4cd->post('name'); $sp3022f1 = (int) $sp62e4cd->post('enabled'); $spe11ae8 = $sp62e4cd->post('sort'); $spe11ae8 = $spe11ae8 === NULL ? 1000 : (int) $spe11ae8; if (System::_getInt('filter_words_open') === 1) { $sp773684 = explode('|', System::_get('filter_words')); if (($spa59707 = Helper::filterWords($spb54a76, $sp773684)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spa59707); } } if ($spe11ae8 < 0 || $spe11ae8 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp02bf0b = $sp62e4cd->post('password'); $spb1cfd8 = $sp62e4cd->post('password_open') === 'true'; if ((int) $sp62e4cd->post('id')) { $sp1b7790 = $this->authQuery($sp62e4cd, \App\Category::class)->findOrFail($sp62e4cd->post('id')); } else { $sp1b7790 = new \App\Category(); $sp1b7790->user_id = $this->getUserIdOrFail($sp62e4cd); } $sp1b7790->name = $spb54a76; $sp1b7790->sort = $spe11ae8; $sp1b7790->password = $sp02bf0b; $sp1b7790->password_open = $spb1cfd8; $sp1b7790->enabled = $sp3022f1; $sp1b7790->saveOrFail(); return Response::success(); } function enable(Request $sp62e4cd) { $this->validate($sp62e4cd, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $spb0cc9a = $sp62e4cd->post('ids', ''); $sp3022f1 = (int) $sp62e4cd->post('enabled'); $this->authQuery($sp62e4cd, \App\Category::class)->whereIn('id', explode(',', $spb0cc9a))->update(array('enabled' => $sp3022f1)); return Response::success(); } function delete(Request $sp62e4cd) { $this->validate($sp62e4cd, array('ids' => 'required|string')); $spb0cc9a = $sp62e4cd->post('ids', ''); $this->authQuery($sp62e4cd, \App\Category::class)->whereIn('id', explode(',', $spb0cc9a))->delete(); return Response::success(); } }