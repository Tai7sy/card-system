<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spf09a96) { $sp5b4065 = (int) $spf09a96->input('current_page', 1); $spe24165 = (int) $spf09a96->input('per_page', 20); $sp40bc20 = $this->authQuery($spf09a96, \App\Category::class); $sp5974e9 = $spf09a96->input('search', false); $spc265e8 = $spf09a96->input('val', false); if ($sp5974e9 && $spc265e8) { if ($sp5974e9 == 'simple') { return Response::success($sp40bc20->get(array('id', 'name'))); } elseif ($sp5974e9 == 'id') { $sp40bc20->where('id', $spc265e8); } else { $sp40bc20->where($sp5974e9, 'like', '%' . $spc265e8 . '%'); } } $spc7c736 = $spf09a96->input('enabled'); if (strlen($spc7c736)) { $sp40bc20->whereIn('enabled', explode(',', $spc7c736)); } $sp3fe1fa = $sp40bc20->withCount('products')->orderBy('sort')->paginate($spe24165, array('*'), 'page', $sp5b4065); foreach ($sp3fe1fa->items() as $spf5ac2c) { $spf5ac2c->setAppends(array('url')); } return Response::success($sp3fe1fa); } function sort(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer')); $spf5ac2c = $this->authQuery($spf09a96, \App\Category::class)->findOrFail($spf09a96->post('id')); $spf5ac2c->sort = (int) $spf09a96->post('sort', 1000); $spf5ac2c->save(); return Response::success(); } function edit(Request $spf09a96) { $this->validate($spf09a96, array('name' => 'required|string|max:128')); $sp66f74c = $spf09a96->post('name'); $spc7c736 = (int) $spf09a96->post('enabled'); $sp34d6bf = $spf09a96->post('sort'); $sp34d6bf = $sp34d6bf === NULL ? 1000 : (int) $sp34d6bf; if (System::_getInt('filter_words_open') === 1) { $sp82333a = explode('|', System::_get('filter_words')); if (($sp571ce3 = Helper::filterWords($sp66f74c, $sp82333a)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp571ce3); } } if ($sp34d6bf < 0 || $sp34d6bf > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp1f7a77 = $spf09a96->post('password'); $sp5865bc = $spf09a96->post('password_open') === 'true'; if ((int) $spf09a96->post('id')) { $spf5ac2c = $this->authQuery($spf09a96, \App\Category::class)->findOrFail($spf09a96->post('id')); } else { $spf5ac2c = new \App\Category(); $spf5ac2c->user_id = $this->getUserIdOrFail($spf09a96); } $spf5ac2c->name = $sp66f74c; $spf5ac2c->sort = $sp34d6bf; $spf5ac2c->password = $sp1f7a77; $spf5ac2c->password_open = $sp5865bc; $spf5ac2c->enabled = $spc7c736; $spf5ac2c->saveOrFail(); return Response::success(); } function enable(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp864000 = $spf09a96->post('ids', ''); $spc7c736 = (int) $spf09a96->post('enabled'); $this->authQuery($spf09a96, \App\Category::class)->whereIn('id', explode(',', $sp864000))->update(array('enabled' => $spc7c736)); return Response::success(); } function delete(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string')); $sp864000 = $spf09a96->post('ids', ''); $this->authQuery($spf09a96, \App\Category::class)->whereIn('id', explode(',', $sp864000))->delete(); return Response::success(); } }