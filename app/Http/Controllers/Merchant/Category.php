<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spbaac90) { $spb32f8f = $spbaac90->post('current_page', 1); $sp731c42 = $spbaac90->post('per_page', 20); $sp50919b = $this->authQuery($spbaac90, \App\Category::class); $sp4d9eeb = $spbaac90->post('search', false); $spbd7375 = $spbaac90->post('val', false); if ($sp4d9eeb && $spbd7375) { if ($sp4d9eeb == 'simple') { return Response::success($sp50919b->get(array('id', 'name'))); } elseif ($sp4d9eeb == 'id') { $sp50919b->where('id', $spbd7375); } else { $sp50919b->where($sp4d9eeb, 'like', '%' . $spbd7375 . '%'); } } $sped8f24 = $spbaac90->post('enabled'); if (strlen($sped8f24)) { $sp50919b->whereIn('enabled', explode(',', $sped8f24)); } $spd5d914 = $sp50919b->withCount('products')->orderBy('sort')->paginate($sp731c42, array('*'), 'page', $spb32f8f); foreach ($spd5d914->items() as $sp7a6bf9) { $sp7a6bf9->setAppends(array('url')); } return Response::success($spd5d914); } function sort(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer')); $sp7a6bf9 = $this->authQuery($spbaac90, \App\Category::class)->findOrFail($spbaac90->post('id')); $sp7a6bf9->sort = (int) $spbaac90->post('sort', 1000); $sp7a6bf9->save(); return Response::success(); } function edit(Request $spbaac90) { $this->validate($spbaac90, array('name' => 'required|string|max:128')); $specbd57 = $spbaac90->post('name'); $sped8f24 = (int) $spbaac90->post('enabled'); $spf14039 = $spbaac90->post('sort'); $spf14039 = $spf14039 === NULL ? 1000 : (int) $spf14039; if (System::_getInt('filter_words_open') === 1) { $sp8c69a0 = explode('|', System::_get('filter_words')); if (($sp599084 = Helper::filterWords($specbd57, $sp8c69a0)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp599084); } } if ($spf14039 < 0 || $spf14039 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp5b61e2 = $spbaac90->post('password'); $sp827c98 = $spbaac90->post('password_open') === 'true'; if ((int) $spbaac90->post('id')) { $sp7a6bf9 = $this->authQuery($spbaac90, \App\Category::class)->findOrFail($spbaac90->post('id')); } else { $sp7a6bf9 = new \App\Category(); $sp7a6bf9->user_id = $this->getUserIdOrFail($spbaac90); } $sp7a6bf9->name = $specbd57; $sp7a6bf9->sort = $spf14039; $sp7a6bf9->password = $sp5b61e2; $sp7a6bf9->password_open = $sp827c98; $sp7a6bf9->enabled = $sped8f24; $sp7a6bf9->saveOrFail(); return Response::success(); } function enable(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp2d798e = $spbaac90->post('ids', ''); $sped8f24 = (int) $spbaac90->post('enabled'); $this->authQuery($spbaac90, \App\Category::class)->whereIn('id', explode(',', $sp2d798e))->update(array('enabled' => $sped8f24)); return Response::success(); } function delete(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string')); $sp2d798e = $spbaac90->post('ids', ''); $this->authQuery($spbaac90, \App\Category::class)->whereIn('id', explode(',', $sp2d798e))->delete(); return Response::success(); } }