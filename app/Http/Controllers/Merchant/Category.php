<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp26e527) { $sp81cf40 = (int) $sp26e527->input('current_page', 1); $sp8de1f1 = (int) $sp26e527->input('per_page', 20); $spcfdf85 = $this->authQuery($sp26e527, \App\Category::class); $sp78cca0 = $sp26e527->input('search', false); $sp79e569 = $sp26e527->input('val', false); if ($sp78cca0 && $sp79e569) { if ($sp78cca0 == 'simple') { return Response::success($spcfdf85->get(array('id', 'name'))); } elseif ($sp78cca0 == 'id') { $spcfdf85->where('id', $sp79e569); } else { $spcfdf85->where($sp78cca0, 'like', '%' . $sp79e569 . '%'); } } $spc9cacd = $sp26e527->input('enabled'); if (strlen($spc9cacd)) { $spcfdf85->whereIn('enabled', explode(',', $spc9cacd)); } $spccc256 = $spcfdf85->withCount('products')->orderBy('sort')->paginate($sp8de1f1, array('*'), 'page', $sp81cf40); foreach ($spccc256->items() as $sp08b465) { $sp08b465->setAppends(array('url')); } return Response::success($spccc256); } function sort(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer')); $sp08b465 = $this->authQuery($sp26e527, \App\Category::class)->findOrFail($sp26e527->post('id')); $sp08b465->sort = (int) $sp26e527->post('sort', 1000); $sp08b465->save(); return Response::success(); } function edit(Request $sp26e527) { $this->validate($sp26e527, array('name' => 'required|string|max:128')); $sp2dce9c = $sp26e527->post('name'); $spc9cacd = (int) $sp26e527->post('enabled'); $sp0a2dcb = $sp26e527->post('sort'); $sp0a2dcb = $sp0a2dcb === NULL ? 1000 : (int) $sp0a2dcb; if (System::_getInt('filter_words_open') === 1) { $sp3135c5 = explode('|', System::_get('filter_words')); if (($spa87332 = Helper::filterWords($sp2dce9c, $sp3135c5)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spa87332); } } if ($sp0a2dcb < 0 || $sp0a2dcb > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp4b3985 = $sp26e527->post('password'); $sp830544 = $sp26e527->post('password_open') === 'true'; if ((int) $sp26e527->post('id')) { $sp08b465 = $this->authQuery($sp26e527, \App\Category::class)->findOrFail($sp26e527->post('id')); } else { $sp08b465 = new \App\Category(); $sp08b465->user_id = $this->getUserIdOrFail($sp26e527); } $sp08b465->name = $sp2dce9c; $sp08b465->sort = $sp0a2dcb; $sp08b465->password = $sp4b3985; $sp08b465->password_open = $sp830544; $sp08b465->enabled = $spc9cacd; $sp08b465->saveOrFail(); return Response::success(); } function enable(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp892962 = $sp26e527->post('ids', ''); $spc9cacd = (int) $sp26e527->post('enabled'); $this->authQuery($sp26e527, \App\Category::class)->whereIn('id', explode(',', $sp892962))->update(array('enabled' => $spc9cacd)); return Response::success(); } function delete(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string')); $sp892962 = $sp26e527->post('ids', ''); $this->authQuery($sp26e527, \App\Category::class)->whereIn('id', explode(',', $sp892962))->delete(); return Response::success(); } }