<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $spa27895) { $spf69625 = $spa27895->post('current_page', 1); $spe8f5a8 = $spa27895->post('per_page', 20); $sp7e6fa3 = $this->authQuery($spa27895, \App\Category::class); $spfe451d = $spa27895->post('search', false); $sp0edb8f = $spa27895->post('val', false); if ($spfe451d && $sp0edb8f) { if ($spfe451d == 'simple') { return Response::success($sp7e6fa3->get(array('id', 'name'))); } elseif ($spfe451d == 'id') { $sp7e6fa3->where('id', $sp0edb8f); } else { $sp7e6fa3->where($spfe451d, 'like', '%' . $sp0edb8f . '%'); } } $sp2a8f09 = $spa27895->post('enabled'); if (strlen($sp2a8f09)) { $sp7e6fa3->whereIn('enabled', explode(',', $sp2a8f09)); } $sp966ae1 = $sp7e6fa3->withCount('products')->orderBy('sort')->paginate($spe8f5a8, array('*'), 'page', $spf69625); foreach ($sp966ae1->items() as $spd14ca3) { $spd14ca3->setAppends(array('url')); } return Response::success($sp966ae1); } function sort(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer')); $spd14ca3 = $this->authQuery($spa27895, \App\Category::class)->findOrFail($spa27895->post('id')); $spd14ca3->sort = (int) $spa27895->post('sort', 1000); $spd14ca3->save(); return Response::success(); } function edit(Request $spa27895) { $this->validate($spa27895, array('name' => 'required|string|max:128')); $sp104c39 = $spa27895->post('name'); $sp2a8f09 = (int) $spa27895->post('enabled'); $sp065312 = $spa27895->post('sort'); $sp065312 = $sp065312 === NULL ? 1000 : (int) $sp065312; if (System::_getInt('filter_words_open') === 1) { $spfe8b9b = explode('|', System::_get('filter_words')); if (($sp786169 = Helper::filterWords($sp104c39, $spfe8b9b)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp786169); } } if ($sp065312 < 0 || $sp065312 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp943c4c = $spa27895->post('password'); $sp637893 = $spa27895->post('password_open') === 'true'; if ((int) $spa27895->post('id')) { $spd14ca3 = $this->authQuery($spa27895, \App\Category::class)->findOrFail($spa27895->post('id')); } else { $spd14ca3 = new \App\Category(); $spd14ca3->user_id = $this->getUserIdOrFail($spa27895); } $spd14ca3->name = $sp104c39; $spd14ca3->sort = $sp065312; $spd14ca3->password = $sp943c4c; $spd14ca3->password_open = $sp637893; $spd14ca3->enabled = $sp2a8f09; $spd14ca3->saveOrFail(); return Response::success(); } function enable(Request $spa27895) { $this->validate($spa27895, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp8e4c06 = $spa27895->post('ids', ''); $sp2a8f09 = (int) $spa27895->post('enabled'); $this->authQuery($spa27895, \App\Category::class)->whereIn('id', explode(',', $sp8e4c06))->update(array('enabled' => $sp2a8f09)); return Response::success(); } function delete(Request $spa27895) { $this->validate($spa27895, array('ids' => 'required|string')); $sp8e4c06 = $spa27895->post('ids', ''); $this->authQuery($spa27895, \App\Category::class)->whereIn('id', explode(',', $sp8e4c06))->delete(); return Response::success(); } }