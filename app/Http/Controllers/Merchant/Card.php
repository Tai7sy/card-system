<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp3c91bd, $spbf8e79 = false, $spd76466 = false, $spf634c5 = false) { $sp6cb35e = $this->authQuery($sp3c91bd, \App\Card::class)->with(array('product' => function ($sp6cb35e) { $sp6cb35e->select(array('id', 'name')); })); $sp98fed8 = $sp3c91bd->input('search', false); $sp7f8b1d = $sp3c91bd->input('val', false); if ($sp98fed8 && $sp7f8b1d) { if ($sp98fed8 == 'id') { $sp6cb35e->where('id', $sp7f8b1d); } else { $sp6cb35e->where($sp98fed8, 'like', '%' . $sp7f8b1d . '%'); } } $sp8af541 = (int) $sp3c91bd->input('category_id'); $sp5d967e = $sp3c91bd->input('product_id', -1); if ($sp8af541 > 0) { if ($sp5d967e > 0) { $sp6cb35e->where('product_id', $sp5d967e); } else { $sp6cb35e->whereHas('product', function ($sp6cb35e) use($sp8af541) { $sp6cb35e->where('category_id', $sp8af541); }); } } $sp31859f = $sp3c91bd->input('status'); if (strlen($sp31859f)) { $sp6cb35e->whereIn('status', explode(',', $sp31859f)); } $sp19a35c = (int) $sp3c91bd->input('onlyCanSell'); if ($sp19a35c) { $sp6cb35e->whereRaw('`count_all`>`count_sold`'); } $sp0fe7ec = $sp3c91bd->input('type'); if (strlen($sp0fe7ec)) { $sp6cb35e->whereIn('type', explode(',', $sp0fe7ec)); } $sp24dca8 = $sp3c91bd->input('trashed') === 'true'; if ($sp24dca8) { $sp6cb35e->onlyTrashed(); } if ($spd76466 === true) { if ($sp24dca8) { $sp6cb35e->forceDelete(); } else { \App\Card::_trash($sp6cb35e); } return Response::success(); } else { if ($sp24dca8 && $spf634c5 === true) { \App\Card::_restore($sp6cb35e); return Response::success(); } else { $sp6cb35e->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spbf8e79 === true) { $sp8c364b = ''; $sp6cb35e->chunk(100, function ($spf7b822) use(&$sp8c364b) { foreach ($spf7b822 as $sp3fbb89) { $sp8c364b .= $sp3fbb89->card . '
'; } }); $sp491909 = 'export_cards_' . $this->getUserIdOrFail($sp3c91bd) . '_' . date('YmdHis') . '.txt'; $spa565dd = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp491909), 'Content-Length' => strlen($sp8c364b)); return response()->make($sp8c364b, 200, $spa565dd); } $spf8ae2a = $sp3c91bd->input('current_page', 1); $spa4d3d7 = $sp3c91bd->input('per_page', 20); $spdecb4c = $sp6cb35e->paginate($spa4d3d7, array('*'), 'page', $spf8ae2a); return Response::success($spdecb4c); } } } function export(Request $sp3c91bd) { return self::get($sp3c91bd, true); } function trash(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string')); $spdbdb98 = $sp3c91bd->post('ids'); $sp6cb35e = $this->authQuery($sp3c91bd, \App\Card::class)->whereIn('id', explode(',', $spdbdb98)); \App\Card::_trash($sp6cb35e); return Response::success(); } function restoreTrashed(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string')); $spdbdb98 = $sp3c91bd->post('ids'); $sp6cb35e = $this->authQuery($sp3c91bd, \App\Card::class)->whereIn('id', explode(',', $spdbdb98)); \App\Card::_restore($sp6cb35e); return Response::success(); } function deleteTrashed(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string')); $spdbdb98 = $sp3c91bd->post('ids'); $this->authQuery($sp3c91bd, \App\Card::class)->whereIn('id', explode(',', $spdbdb98))->forceDelete(); return Response::success(); } function deleteAll(Request $sp3c91bd) { return $this->get($sp3c91bd, false, true); } function restoreAll(Request $sp3c91bd) { return $this->get($sp3c91bd, false, false, true); } function add(Request $sp3c91bd) { $sp5d967e = (int) $sp3c91bd->post('product_id'); $spf7b822 = $sp3c91bd->post('card'); $sp0fe7ec = (int) $sp3c91bd->post('type', \App\Card::TYPE_ONETIME); $sp0d89d4 = $sp3c91bd->post('is_check') === 'true'; if (str_contains($spf7b822, '<') || str_contains($spf7b822, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spdad372 = $this->getUserIdOrFail($sp3c91bd); $sp8f7ce7 = $this->authQuery($sp3c91bd, \App\Product::class)->where('id', $sp5d967e); $sp8f7ce7->firstOrFail(array('id')); if ($sp0fe7ec === \App\Card::TYPE_REPEAT) { if ($sp0d89d4) { if (\App\Card::where('product_id', $sp5d967e)->where('card', $spf7b822)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp3fbb89 = new \App\Card(array('user_id' => $spdad372, 'product_id' => $sp5d967e, 'card' => $spf7b822, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp3c91bd->post('count_all', 1))); if ($sp3fbb89->count_all < 1 || $sp3fbb89->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp8f7ce7, $sp3fbb89) { $sp3fbb89->saveOrFail(); $spe7d79d = $sp8f7ce7->lockForUpdate()->firstOrFail(); $spe7d79d->count_all += $sp3fbb89->count_all; $spe7d79d->saveOrFail(); return Response::success(); }); } else { $sp3301fd = explode('
', $spf7b822); $speef520 = count($sp3301fd); $sp485aa2 = 50000; if ($speef520 > $sp485aa2) { return Response::fail('每次添加不能超过 ' . $sp485aa2 . ' 张'); } $spcd19cb = array(); if ($sp0d89d4) { $sp6378bd = \App\Card::where('user_id', $spdad372)->where('product_id', $sp5d967e)->get(array('card'))->all(); foreach ($sp6378bd as $sp0fd495) { $spcd19cb[] = $sp0fd495['card']; } } $spdbab8f = array(); $sp82c5ea = 0; for ($spe89d11 = 0; $spe89d11 < $speef520; $spe89d11++) { $sp2e3b9a = trim($sp3301fd[$spe89d11]); if (strlen($sp2e3b9a) < 1) { continue; } if (strlen($sp2e3b9a) > 255) { return Response::fail('第 ' . $spe89d11 . ' 张卡密 ' . $sp2e3b9a . ' 长度错误<br>卡密最大长度为255'); } if ($sp0d89d4) { if (in_array($sp2e3b9a, $spcd19cb)) { continue; } $spcd19cb[] = $sp2e3b9a; } $spdbab8f[] = array('user_id' => $spdad372, 'product_id' => $sp5d967e, 'card' => $sp2e3b9a, 'type' => \App\Card::TYPE_ONETIME); $sp82c5ea++; } if ($sp82c5ea === 0) { return Response::success(); } return DB::transaction(function () use($sp8f7ce7, $spdbab8f, $sp82c5ea) { \App\Card::insert($spdbab8f); $spe7d79d = $sp8f7ce7->lockForUpdate()->firstOrFail(); $spe7d79d->count_all += $sp82c5ea; $spe7d79d->saveOrFail(); return Response::success(); }); } } function edit(Request $sp3c91bd) { $spbabe1d = (int) $sp3c91bd->post('id'); $sp3fbb89 = $this->authQuery($sp3c91bd, \App\Card::class)->findOrFail($spbabe1d); if ($sp3fbb89) { $sp93b5fa = $sp3c91bd->post('card'); $sp0fe7ec = (int) $sp3c91bd->post('type', \App\Card::TYPE_ONETIME); $sp879eed = (int) $sp3c91bd->post('count_all', 1); return DB::transaction(function () use($sp3fbb89, $sp93b5fa, $sp0fe7ec, $sp879eed) { $sp3fbb89 = \App\Card::where('id', $sp3fbb89->id)->lockForUpdate()->firstOrFail(); $sp3fbb89->card = $sp93b5fa; $sp3fbb89->type = $sp0fe7ec; if ($sp3fbb89->type === \App\Card::TYPE_REPEAT) { if ($sp879eed < $sp3fbb89->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp879eed < 1 || $sp879eed > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp3fbb89->count_all = $sp879eed; } else { $sp3fbb89->count_all = 1; } $sp3fbb89->saveOrFail(); $spe7d79d = $sp3fbb89->product()->lockForUpdate()->firstOrFail(); $spe7d79d->count_all -= $sp3fbb89->count_all; $spe7d79d->count_all += $sp879eed; $spe7d79d->saveOrFail(); return Response::success(); }); } return Response::success(); } }