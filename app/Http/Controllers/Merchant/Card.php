<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp375069, $spa7914e = false, $sp8b7606 = false, $sp6438c0 = false) { $sped9569 = $this->authQuery($sp375069, \App\Card::class)->with(array('product' => function ($sped9569) { $sped9569->select(array('id', 'name')); })); $spca3671 = $sp375069->input('search', false); $spb689af = $sp375069->input('val', false); if ($spca3671 && $spb689af) { if ($spca3671 == 'id') { $sped9569->where('id', $spb689af); } else { $sped9569->where($spca3671, 'like', '%' . $spb689af . '%'); } } $spca39ca = (int) $sp375069->input('category_id'); $sp138ddb = $sp375069->input('product_id', -1); if ($spca39ca > 0) { if ($sp138ddb > 0) { $sped9569->where('product_id', $sp138ddb); } else { $sped9569->whereHas('product', function ($sped9569) use($spca39ca) { $sped9569->where('category_id', $spca39ca); }); } } $spfc8a83 = $sp375069->input('status'); if (strlen($spfc8a83)) { $sped9569->whereIn('status', explode(',', $spfc8a83)); } $spf52605 = (int) $sp375069->input('onlyCanSell'); if ($spf52605) { $sped9569->whereRaw('`count_all`>`count_sold`'); } $sp2d4d5b = $sp375069->input('type'); if (strlen($sp2d4d5b)) { $sped9569->whereIn('type', explode(',', $sp2d4d5b)); } $spbb3218 = $sp375069->input('trashed') === 'true'; if ($spbb3218) { $sped9569->onlyTrashed(); } if ($sp8b7606 === true) { if ($spbb3218) { $sped9569->forceDelete(); } else { \App\Card::_trash($sped9569); } return Response::success(); } else { if ($spbb3218 && $sp6438c0 === true) { \App\Card::_restore($sped9569); return Response::success(); } else { $sped9569->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spa7914e === true) { $speb259b = ''; $sped9569->chunk(100, function ($sp10f8f9) use(&$speb259b) { foreach ($sp10f8f9 as $spd915af) { $speb259b .= $spd915af->card . '
'; } }); $spab814e = 'export_cards_' . $this->getUserIdOrFail($sp375069) . '_' . date('YmdHis') . '.txt'; $sp472234 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spab814e), 'Content-Length' => strlen($speb259b)); return response()->make($speb259b, 200, $sp472234); } $sp19fe4a = (int) $sp375069->input('current_page', 1); $sp90d207 = (int) $sp375069->input('per_page', 20); $sp3aa6bd = $sped9569->paginate($sp90d207, array('*'), 'page', $sp19fe4a); return Response::success($sp3aa6bd); } } } function export(Request $sp375069) { return self::get($sp375069, true); } function trash(Request $sp375069) { $this->validate($sp375069, array('ids' => 'required|string')); $sp630e91 = $sp375069->post('ids'); $sped9569 = $this->authQuery($sp375069, \App\Card::class)->whereIn('id', explode(',', $sp630e91)); \App\Card::_trash($sped9569); return Response::success(); } function restoreTrashed(Request $sp375069) { $this->validate($sp375069, array('ids' => 'required|string')); $sp630e91 = $sp375069->post('ids'); $sped9569 = $this->authQuery($sp375069, \App\Card::class)->whereIn('id', explode(',', $sp630e91)); \App\Card::_restore($sped9569); return Response::success(); } function deleteTrashed(Request $sp375069) { $this->validate($sp375069, array('ids' => 'required|string')); $sp630e91 = $sp375069->post('ids'); $this->authQuery($sp375069, \App\Card::class)->whereIn('id', explode(',', $sp630e91))->forceDelete(); return Response::success(); } function deleteAll(Request $sp375069) { return $this->get($sp375069, false, true); } function restoreAll(Request $sp375069) { return $this->get($sp375069, false, false, true); } function add(Request $sp375069) { $sp138ddb = (int) $sp375069->post('product_id'); $sp10f8f9 = $sp375069->post('card'); $sp2d4d5b = (int) $sp375069->post('type', \App\Card::TYPE_ONETIME); $spa79ada = $sp375069->post('is_check') === 'true'; if (str_contains($sp10f8f9, '<') || str_contains($sp10f8f9, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spc2f05b = $this->getUserIdOrFail($sp375069); $sp98b459 = $this->authQuery($sp375069, \App\Product::class)->where('id', $sp138ddb); $sp98b459->firstOrFail(array('id')); if ($sp2d4d5b === \App\Card::TYPE_REPEAT) { if ($spa79ada) { if (\App\Card::where('product_id', $sp138ddb)->where('card', $sp10f8f9)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spd915af = new \App\Card(array('user_id' => $spc2f05b, 'product_id' => $sp138ddb, 'card' => $sp10f8f9, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp375069->post('count_all', 1))); if ($spd915af->count_all < 1 || $spd915af->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp98b459, $spd915af) { $spd915af->saveOrFail(); $sp6018c8 = $sp98b459->lockForUpdate()->firstOrFail(); $sp6018c8->count_all += $spd915af->count_all; $sp6018c8->saveOrFail(); return Response::success(); }); } else { $sp1318bc = explode('
', $sp10f8f9); $sp9f8bd5 = count($sp1318bc); $sp603f0b = 50000; if ($sp9f8bd5 > $sp603f0b) { return Response::fail('每次添加不能超过 ' . $sp603f0b . ' 张'); } $spbc25b6 = array(); if ($spa79ada) { $sp80c361 = \App\Card::where('user_id', $spc2f05b)->where('product_id', $sp138ddb)->get(array('card'))->all(); foreach ($sp80c361 as $sp86a770) { $spbc25b6[] = $sp86a770['card']; } } $spc85bdc = array(); $sp5783d5 = 0; for ($sp9d4bce = 0; $sp9d4bce < $sp9f8bd5; $sp9d4bce++) { $spc911d2 = trim($sp1318bc[$sp9d4bce]); if (strlen($spc911d2) < 1) { continue; } if (strlen($spc911d2) > 255) { return Response::fail('第 ' . $sp9d4bce . ' 张卡密 ' . $spc911d2 . ' 长度错误<br>卡密最大长度为255'); } if ($spa79ada) { if (in_array($spc911d2, $spbc25b6)) { continue; } $spbc25b6[] = $spc911d2; } $spc85bdc[] = array('user_id' => $spc2f05b, 'product_id' => $sp138ddb, 'card' => $spc911d2, 'type' => \App\Card::TYPE_ONETIME); $sp5783d5++; } if ($sp5783d5 === 0) { return Response::success(); } return DB::transaction(function () use($sp98b459, $spc85bdc, $sp5783d5) { \App\Card::insert($spc85bdc); $sp6018c8 = $sp98b459->lockForUpdate()->firstOrFail(); $sp6018c8->count_all += $sp5783d5; $sp6018c8->saveOrFail(); return Response::success(); }); } } function edit(Request $sp375069) { $sp39113c = (int) $sp375069->post('id'); $spd915af = $this->authQuery($sp375069, \App\Card::class)->findOrFail($sp39113c); if ($spd915af) { $sp20850c = $sp375069->post('card'); $sp2d4d5b = (int) $sp375069->post('type', \App\Card::TYPE_ONETIME); $sp50e452 = (int) $sp375069->post('count_all', 1); return DB::transaction(function () use($spd915af, $sp20850c, $sp2d4d5b, $sp50e452) { $spd915af = \App\Card::where('id', $spd915af->id)->lockForUpdate()->firstOrFail(); $spd915af->card = $sp20850c; $spd915af->type = $sp2d4d5b; if ($spd915af->type === \App\Card::TYPE_REPEAT) { if ($sp50e452 < $spd915af->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp50e452 < 1 || $sp50e452 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spd915af->count_all = $sp50e452; } else { $spd915af->count_all = 1; } $spd915af->saveOrFail(); $sp6018c8 = $spd915af->product()->lockForUpdate()->firstOrFail(); $sp6018c8->count_all -= $spd915af->count_all; $sp6018c8->count_all += $sp50e452; $sp6018c8->saveOrFail(); return Response::success(); }); } return Response::success(); } }