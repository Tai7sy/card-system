<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spd5cc4d, $sp42dd26 = false, $sp2852d8 = false, $sp515941 = false) { $spe440a8 = $this->authQuery($spd5cc4d, \App\Card::class)->with(array('product' => function ($spe440a8) { $spe440a8->select(array('id', 'name')); })); $spc9965c = $spd5cc4d->input('search', false); $spee86b9 = $spd5cc4d->input('val', false); if ($spc9965c && $spee86b9) { if ($spc9965c == 'id') { $spe440a8->where('id', $spee86b9); } else { $spe440a8->where($spc9965c, 'like', '%' . $spee86b9 . '%'); } } $sp7b7cc9 = (int) $spd5cc4d->input('category_id'); $spad8100 = $spd5cc4d->input('product_id', -1); if ($sp7b7cc9 > 0) { if ($spad8100 > 0) { $spe440a8->where('product_id', $spad8100); } else { $spe440a8->whereHas('product', function ($spe440a8) use($sp7b7cc9) { $spe440a8->where('category_id', $sp7b7cc9); }); } } $spc3ee59 = $spd5cc4d->input('status'); if (strlen($spc3ee59)) { $spe440a8->whereIn('status', explode(',', $spc3ee59)); } $sp361467 = (int) $spd5cc4d->input('onlyCanSell'); if ($sp361467) { $spe440a8->whereRaw('`count_all`>`count_sold`'); } $spdc3fe5 = $spd5cc4d->input('type'); if (strlen($spdc3fe5)) { $spe440a8->whereIn('type', explode(',', $spdc3fe5)); } $spa0de16 = $spd5cc4d->input('trashed') === 'true'; if ($spa0de16) { $spe440a8->onlyTrashed(); } if ($sp2852d8 === true) { if ($spa0de16) { $spe440a8->forceDelete(); } else { \App\Card::_trash($spe440a8); } return Response::success(); } else { if ($spa0de16 && $sp515941 === true) { \App\Card::_restore($spe440a8); return Response::success(); } else { $spe440a8->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp42dd26 === true) { $sp953d91 = ''; $spe440a8->chunk(100, function ($spac6360) use(&$sp953d91) { foreach ($spac6360 as $sp21b3f0) { $sp953d91 .= $sp21b3f0->card . '
'; } }); $sp6113bd = 'export_cards_' . $this->getUserIdOrFail($spd5cc4d) . '_' . date('YmdHis') . '.txt'; $spdf7b97 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp6113bd), 'Content-Length' => strlen($sp953d91)); return response()->make($sp953d91, 200, $spdf7b97); } $sp707577 = $spd5cc4d->input('current_page', 1); $sp82c87f = $spd5cc4d->input('per_page', 20); $sp78c70b = $spe440a8->paginate($sp82c87f, array('*'), 'page', $sp707577); return Response::success($sp78c70b); } } } function export(Request $spd5cc4d) { return self::get($spd5cc4d, true); } function trash(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string')); $spf46353 = $spd5cc4d->post('ids'); $spe440a8 = $this->authQuery($spd5cc4d, \App\Card::class)->whereIn('id', explode(',', $spf46353)); \App\Card::_trash($spe440a8); return Response::success(); } function restoreTrashed(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string')); $spf46353 = $spd5cc4d->post('ids'); $spe440a8 = $this->authQuery($spd5cc4d, \App\Card::class)->whereIn('id', explode(',', $spf46353)); \App\Card::_restore($spe440a8); return Response::success(); } function deleteTrashed(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string')); $spf46353 = $spd5cc4d->post('ids'); $this->authQuery($spd5cc4d, \App\Card::class)->whereIn('id', explode(',', $spf46353))->forceDelete(); return Response::success(); } function deleteAll(Request $spd5cc4d) { return $this->get($spd5cc4d, false, true); } function restoreAll(Request $spd5cc4d) { return $this->get($spd5cc4d, false, false, true); } function add(Request $spd5cc4d) { $spad8100 = (int) $spd5cc4d->post('product_id'); $spac6360 = $spd5cc4d->post('card'); $spdc3fe5 = (int) $spd5cc4d->post('type', \App\Card::TYPE_ONETIME); $sp425ca9 = $spd5cc4d->post('is_check') === 'true'; if (str_contains($spac6360, '<') || str_contains($spac6360, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spfaef2f = $this->getUserIdOrFail($spd5cc4d); $spbfba52 = $this->authQuery($spd5cc4d, \App\Product::class)->where('id', $spad8100); $spbfba52->firstOrFail(array('id')); if ($spdc3fe5 === \App\Card::TYPE_REPEAT) { if ($sp425ca9) { if (\App\Card::where('product_id', $spad8100)->where('card', $spac6360)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp21b3f0 = new \App\Card(array('user_id' => $spfaef2f, 'product_id' => $spad8100, 'card' => $spac6360, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spd5cc4d->post('count_all', 1))); if ($sp21b3f0->count_all < 1 || $sp21b3f0->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($spbfba52, $sp21b3f0) { $sp21b3f0->saveOrFail(); $spaeec37 = $spbfba52->lockForUpdate()->firstOrFail(); $spaeec37->buy_max = 1; $spaeec37->count_all += $sp21b3f0->count_all; $spaeec37->saveOrFail(); return Response::success(); }); } else { $sp28982f = explode('
', $spac6360); $spa13b43 = count($sp28982f); $sp4215f4 = 500; if ($spa13b43 > $sp4215f4) { return Response::fail('每次添加不能超过 ' . $sp4215f4 . ' 张'); } $sp93bef0 = array(); if ($sp425ca9) { $spb77256 = \App\Card::where('user_id', $spfaef2f)->where('product_id', $spad8100)->get(array('card'))->all(); foreach ($spb77256 as $spdef25e) { $sp93bef0[] = $spdef25e['card']; } } $sp72b4d9 = array(); $sp486293 = 0; for ($spb75665 = 0; $spb75665 < $spa13b43; $spb75665++) { $sp21b3f0 = trim($sp28982f[$spb75665]); if (strlen($sp21b3f0) < 1) { continue; } if (strlen($sp21b3f0) > 255) { return Response::fail('第 ' . $spb75665 . ' 张卡密 ' . $sp21b3f0 . ' 长度错误<br>卡密最大长度为255'); } if ($sp425ca9) { if (in_array($sp21b3f0, $sp93bef0)) { continue; } $sp93bef0[] = $sp21b3f0; } $sp72b4d9[] = array('user_id' => $spfaef2f, 'product_id' => $spad8100, 'card' => $sp21b3f0, 'type' => \App\Card::TYPE_ONETIME); $sp486293++; } if ($sp486293 === 0) { return Response::success(); } return DB::transaction(function () use($spbfba52, $sp72b4d9, $sp486293) { \App\Card::insert($sp72b4d9); $spaeec37 = $spbfba52->lockForUpdate()->firstOrFail(); $spaeec37->count_all += $sp486293; $spaeec37->saveOrFail(); return Response::success(); }); } } function edit(Request $spd5cc4d) { $spe00284 = (int) $spd5cc4d->post('id'); $sp240084 = $spd5cc4d->post('card'); $spdc3fe5 = (int) $spd5cc4d->post('type', \App\Card::TYPE_ONETIME); $sp21b3f0 = $this->authQuery($spd5cc4d, \App\Card::class)->findOrFail($spe00284); if ($sp21b3f0) { $sp21b3f0->card = $sp240084; $sp21b3f0->type = $spdc3fe5; $spd8fac0 = (int) $spd5cc4d->post('count_all', 1); $spbfba52 = $sp21b3f0->product(); if ($spdc3fe5 === \App\Card::TYPE_REPEAT) { return DB::transaction(function () use($spbfba52, $sp21b3f0, $spd8fac0) { $sp21b3f0 = \App\Card::where('id', $sp21b3f0->id)->lockForUpdate()->firstOrFail(); if ($spd8fac0 < $sp21b3f0->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spd8fac0 < 1 || $spd8fac0 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spaeec37 = $spbfba52->lockForUpdate()->firstOrFail(); $spaeec37->buy_max = 1; $spaeec37->count_all -= $sp21b3f0->count_all; $spaeec37->count_all += $spd8fac0; $spaeec37->saveOrFail(); $sp21b3f0->count_all = $spd8fac0; $sp21b3f0->saveOrFail(); return Response::success(); }); } else { return DB::transaction(function () use($spbfba52, $sp21b3f0, $spd8fac0) { $sp21b3f0 = \App\Card::where('id', $sp21b3f0->id)->lockForUpdate()->firstOrFail(); $spaeec37 = $spbfba52->lockForUpdate()->firstOrFail(); $spaeec37->count_all -= $sp21b3f0->count_all; $spaeec37->count_all += 1; $spaeec37->saveOrFail(); $sp21b3f0->count_all = 1; $sp21b3f0->saveOrFail(); return Response::success(); }); } } return Response::success(); } }