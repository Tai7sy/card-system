<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp517903, $sp89e1b7 = false, $spcfb3e2 = false, $spa4ea04 = false) { $sp30241a = $this->authQuery($sp517903, \App\Card::class)->with(array('product' => function ($sp30241a) { $sp30241a->select(array('id', 'name')); })); $spee2f3d = $sp517903->input('search', false); $sp5d286a = $sp517903->input('val', false); if ($spee2f3d && $sp5d286a) { if ($spee2f3d == 'id') { $sp30241a->where('id', $sp5d286a); } else { $sp30241a->where($spee2f3d, 'like', '%' . $sp5d286a . '%'); } } $spc4a21e = (int) $sp517903->input('category_id'); $spb429e3 = $sp517903->input('product_id', -1); if ($spc4a21e > 0) { if ($spb429e3 > 0) { $sp30241a->where('product_id', $spb429e3); } else { $sp30241a->whereHas('product', function ($sp30241a) use($spc4a21e) { $sp30241a->where('category_id', $spc4a21e); }); } } $sp0194a7 = $sp517903->input('status'); if (strlen($sp0194a7)) { $sp30241a->whereIn('status', explode(',', $sp0194a7)); } $sp09b366 = (int) $sp517903->input('onlyCanSell'); if ($sp09b366) { $sp30241a->whereRaw('`count_all`>`count_sold`'); } $sp22c639 = $sp517903->input('type'); if (strlen($sp22c639)) { $sp30241a->whereIn('type', explode(',', $sp22c639)); } $sp7e7b8f = $sp517903->input('trashed') === 'true'; if ($sp7e7b8f) { $sp30241a->onlyTrashed(); } if ($spcfb3e2 === true) { if ($sp7e7b8f) { $sp30241a->forceDelete(); } else { \App\Card::_trash($sp30241a); } return Response::success(); } else { if ($sp7e7b8f && $spa4ea04 === true) { \App\Card::_restore($sp30241a); return Response::success(); } else { $sp30241a->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp89e1b7 === true) { $sp02bd0d = ''; $sp30241a->chunk(100, function ($sp3d31e0) use(&$sp02bd0d) { foreach ($sp3d31e0 as $sp431b94) { $sp02bd0d .= $sp431b94->card . '
'; } }); $sp86de39 = 'export_cards_' . $this->getUserIdOrFail($sp517903) . '_' . date('YmdHis') . '.txt'; $sp5d00a4 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp86de39), 'Content-Length' => strlen($sp02bd0d)); return response()->make($sp02bd0d, 200, $sp5d00a4); } $sp542adc = (int) $sp517903->input('current_page', 1); $spf40cb2 = (int) $sp517903->input('per_page', 20); $sp38cdfb = $sp30241a->paginate($spf40cb2, array('*'), 'page', $sp542adc); return Response::success($sp38cdfb); } } } function export(Request $sp517903) { return self::get($sp517903, true); } function trash(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string')); $sp315ad7 = $sp517903->post('ids'); $sp30241a = $this->authQuery($sp517903, \App\Card::class)->whereIn('id', explode(',', $sp315ad7)); \App\Card::_trash($sp30241a); return Response::success(); } function restoreTrashed(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string')); $sp315ad7 = $sp517903->post('ids'); $sp30241a = $this->authQuery($sp517903, \App\Card::class)->whereIn('id', explode(',', $sp315ad7)); \App\Card::_restore($sp30241a); return Response::success(); } function deleteTrashed(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string')); $sp315ad7 = $sp517903->post('ids'); $this->authQuery($sp517903, \App\Card::class)->whereIn('id', explode(',', $sp315ad7))->forceDelete(); return Response::success(); } function deleteAll(Request $sp517903) { return $this->get($sp517903, false, true); } function restoreAll(Request $sp517903) { return $this->get($sp517903, false, false, true); } function add(Request $sp517903) { $spb429e3 = (int) $sp517903->post('product_id'); $sp3d31e0 = $sp517903->post('card'); $sp22c639 = (int) $sp517903->post('type', \App\Card::TYPE_ONETIME); $sp12232b = $sp517903->post('is_check') === 'true'; if (str_contains($sp3d31e0, '<') || str_contains($sp3d31e0, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spacf00d = $this->getUserIdOrFail($sp517903); $spcf2ce4 = $this->authQuery($sp517903, \App\Product::class)->where('id', $spb429e3); $spcf2ce4->firstOrFail(array('id')); if ($sp22c639 === \App\Card::TYPE_REPEAT) { if ($sp12232b) { if (\App\Card::where('product_id', $spb429e3)->where('card', $sp3d31e0)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp431b94 = new \App\Card(array('user_id' => $spacf00d, 'product_id' => $spb429e3, 'card' => $sp3d31e0, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp517903->post('count_all', 1))); if ($sp431b94->count_all < 1 || $sp431b94->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($spcf2ce4, $sp431b94) { $sp431b94->saveOrFail(); $sp427eba = $spcf2ce4->lockForUpdate()->firstOrFail(); $sp427eba->count_all += $sp431b94->count_all; $sp427eba->saveOrFail(); return Response::success(); }); } else { $sp84f9ba = explode('
', $sp3d31e0); $sp2ccd55 = count($sp84f9ba); $spb39bf3 = 50000; if ($sp2ccd55 > $spb39bf3) { return Response::fail('每次添加不能超过 ' . $spb39bf3 . ' 张'); } $spd2a659 = array(); if ($sp12232b) { $sp62a7f2 = \App\Card::where('user_id', $spacf00d)->where('product_id', $spb429e3)->get(array('card'))->all(); foreach ($sp62a7f2 as $sp36a420) { $spd2a659[] = $sp36a420['card']; } } $sp89f757 = array(); $sp992fc6 = 0; for ($sp1148f5 = 0; $sp1148f5 < $sp2ccd55; $sp1148f5++) { $sp4cb1ad = trim($sp84f9ba[$sp1148f5]); if (strlen($sp4cb1ad) < 1) { continue; } if (strlen($sp4cb1ad) > 1024) { return Response::fail('第 ' . $sp1148f5 . ' 张卡密 ' . $sp4cb1ad . ' 长度错误<br>卡密最大长度为1024'); } if ($sp12232b) { if (in_array($sp4cb1ad, $spd2a659)) { continue; } $spd2a659[] = $sp4cb1ad; } $sp89f757[] = array('user_id' => $spacf00d, 'product_id' => $spb429e3, 'card' => $sp4cb1ad, 'type' => \App\Card::TYPE_ONETIME); $sp992fc6++; } if ($sp992fc6 === 0) { return Response::success(); } return DB::transaction(function () use($spcf2ce4, $sp89f757, $sp992fc6) { \App\Card::insert($sp89f757); $sp427eba = $spcf2ce4->lockForUpdate()->firstOrFail(); $sp427eba->count_all += $sp992fc6; $sp427eba->saveOrFail(); return Response::success(); }); } } function edit(Request $sp517903) { $spd5afc6 = (int) $sp517903->post('id'); $sp431b94 = $this->authQuery($sp517903, \App\Card::class)->findOrFail($spd5afc6); if ($sp431b94) { $sp729fac = $sp517903->post('card'); $sp22c639 = (int) $sp517903->post('type', \App\Card::TYPE_ONETIME); $sp11383b = (int) $sp517903->post('count_all', 1); return DB::transaction(function () use($sp431b94, $sp729fac, $sp22c639, $sp11383b) { $sp431b94 = \App\Card::where('id', $sp431b94->id)->lockForUpdate()->firstOrFail(); $sp431b94->card = $sp729fac; $sp431b94->type = $sp22c639; if ($sp431b94->type === \App\Card::TYPE_REPEAT) { if ($sp11383b < $sp431b94->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp11383b < 1 || $sp11383b > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp431b94->count_all = $sp11383b; } else { $sp431b94->count_all = 1; } $sp431b94->saveOrFail(); $sp427eba = $sp431b94->product()->lockForUpdate()->firstOrFail(); $sp427eba->count_all -= $sp431b94->count_all; $sp427eba->count_all += $sp11383b; $sp427eba->saveOrFail(); return Response::success(); }); } return Response::success(); } }