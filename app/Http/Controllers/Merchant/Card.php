<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spaa0004, $sp0967eb = false, $spc6fef9 = false, $sp201439 = false) { $sp3b6564 = $this->authQuery($spaa0004, \App\Card::class)->with(array('product' => function ($sp3b6564) { $sp3b6564->select(array('id', 'name')); })); $sp29e241 = $spaa0004->input('search', false); $sp1a6789 = $spaa0004->input('val', false); if ($sp29e241 && $sp1a6789) { if ($sp29e241 == 'id') { $sp3b6564->where('id', $sp1a6789); } else { $sp3b6564->where($sp29e241, 'like', '%' . $sp1a6789 . '%'); } } $spa990f1 = (int) $spaa0004->input('category_id'); $sp52bbb2 = $spaa0004->input('product_id', -1); if ($spa990f1 > 0) { if ($sp52bbb2 > 0) { $sp3b6564->where('product_id', $sp52bbb2); } else { $sp3b6564->whereHas('product', function ($sp3b6564) use($spa990f1) { $sp3b6564->where('category_id', $spa990f1); }); } } $sp8d8a6c = $spaa0004->input('status'); if (strlen($sp8d8a6c)) { $sp3b6564->whereIn('status', explode(',', $sp8d8a6c)); } $sp2d2603 = (int) $spaa0004->input('onlyCanSell'); if ($sp2d2603) { $sp3b6564->whereRaw('`count_all`>`count_sold`'); } $sp8480f1 = $spaa0004->input('type'); if (strlen($sp8480f1)) { $sp3b6564->whereIn('type', explode(',', $sp8480f1)); } $sp88ed5b = $spaa0004->input('trashed') === 'true'; if ($sp88ed5b) { $sp3b6564->onlyTrashed(); } if ($spc6fef9 === true) { if ($sp88ed5b) { $sp3b6564->forceDelete(); } else { \App\Card::_trash($sp3b6564); } return Response::success(); } else { if ($sp88ed5b && $sp201439 === true) { \App\Card::_restore($sp3b6564); return Response::success(); } else { $sp3b6564->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp0967eb === true) { $sp392c88 = ''; $sp3b6564->chunk(100, function ($sp42fc07) use(&$sp392c88) { foreach ($sp42fc07 as $sp11c399) { $sp392c88 .= $sp11c399->card . '
'; } }); $sp40596c = 'export_cards_' . $this->getUserIdOrFail($spaa0004) . '_' . date('YmdHis') . '.txt'; $sp234b3d = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp40596c), 'Content-Length' => strlen($sp392c88)); return response()->make($sp392c88, 200, $sp234b3d); } $spf1f2aa = $spaa0004->input('current_page', 1); $spe98b78 = $spaa0004->input('per_page', 20); $sp94fc94 = $sp3b6564->paginate($spe98b78, array('*'), 'page', $spf1f2aa); return Response::success($sp94fc94); } } } function export(Request $spaa0004) { return self::get($spaa0004, true); } function trash(Request $spaa0004) { $this->validate($spaa0004, array('ids' => 'required|string')); $sp5bbe0c = $spaa0004->post('ids'); $sp3b6564 = $this->authQuery($spaa0004, \App\Card::class)->whereIn('id', explode(',', $sp5bbe0c)); \App\Card::_trash($sp3b6564); return Response::success(); } function restoreTrashed(Request $spaa0004) { $this->validate($spaa0004, array('ids' => 'required|string')); $sp5bbe0c = $spaa0004->post('ids'); $sp3b6564 = $this->authQuery($spaa0004, \App\Card::class)->whereIn('id', explode(',', $sp5bbe0c)); \App\Card::_restore($sp3b6564); return Response::success(); } function deleteTrashed(Request $spaa0004) { $this->validate($spaa0004, array('ids' => 'required|string')); $sp5bbe0c = $spaa0004->post('ids'); $this->authQuery($spaa0004, \App\Card::class)->whereIn('id', explode(',', $sp5bbe0c))->forceDelete(); return Response::success(); } function deleteAll(Request $spaa0004) { return $this->get($spaa0004, false, true); } function restoreAll(Request $spaa0004) { return $this->get($spaa0004, false, false, true); } function add(Request $spaa0004) { $sp52bbb2 = (int) $spaa0004->post('product_id'); $sp42fc07 = $spaa0004->post('card'); $sp8480f1 = (int) $spaa0004->post('type', \App\Card::TYPE_ONETIME); $sp5cdbec = $spaa0004->post('is_check') === 'true'; if (str_contains($sp42fc07, '<') || str_contains($sp42fc07, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp71c904 = $this->getUserIdOrFail($spaa0004); $spae61c7 = $this->authQuery($spaa0004, \App\Product::class)->where('id', $sp52bbb2); $spae61c7->firstOrFail(array('id')); if ($sp8480f1 === \App\Card::TYPE_REPEAT) { if ($sp5cdbec) { if (\App\Card::where('product_id', $sp52bbb2)->where('card', $sp42fc07)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp11c399 = new \App\Card(array('user_id' => $sp71c904, 'product_id' => $sp52bbb2, 'card' => $sp42fc07, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spaa0004->post('count_all', 1))); if ($sp11c399->count_all < 1 || $sp11c399->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($spae61c7, $sp11c399) { $sp11c399->saveOrFail(); $sp59cabc = $spae61c7->lockForUpdate()->firstOrFail(); $sp59cabc->buy_max = 1; $sp59cabc->count_all += $sp11c399->count_all; $sp59cabc->saveOrFail(); return Response::success(); }); } else { $sp2ab3cf = explode('
', $sp42fc07); $spfd17d3 = count($sp2ab3cf); $spfe2014 = 500; if ($spfd17d3 > $spfe2014) { return Response::fail('每次添加不能超过 ' . $spfe2014 . ' 张'); } $spdf7f08 = array(); if ($sp5cdbec) { $sp4913a2 = \App\Card::where('user_id', $sp71c904)->where('product_id', $sp52bbb2)->get(array('card'))->all(); foreach ($sp4913a2 as $sp13712b) { $spdf7f08[] = $sp13712b['card']; } } $sp3ad940 = array(); $spb1b2c3 = 0; for ($spb11c4c = 0; $spb11c4c < $spfd17d3; $spb11c4c++) { $sp11c399 = trim($sp2ab3cf[$spb11c4c]); if (strlen($sp11c399) < 1) { continue; } if (strlen($sp11c399) > 255) { return Response::fail('第 ' . $spb11c4c . ' 张卡密 ' . $sp11c399 . ' 长度错误<br>卡密最大长度为255'); } if ($sp5cdbec) { if (in_array($sp11c399, $spdf7f08)) { continue; } $spdf7f08[] = $sp11c399; } $sp3ad940[] = array('user_id' => $sp71c904, 'product_id' => $sp52bbb2, 'card' => $sp11c399, 'type' => \App\Card::TYPE_ONETIME); $spb1b2c3++; } if ($spb1b2c3 === 0) { return Response::success(); } return DB::transaction(function () use($spae61c7, $sp3ad940, $spb1b2c3) { \App\Card::insert($sp3ad940); $sp59cabc = $spae61c7->lockForUpdate()->firstOrFail(); $sp59cabc->count_all += $spb1b2c3; $sp59cabc->saveOrFail(); return Response::success(); }); } } function edit(Request $spaa0004) { $sp805277 = (int) $spaa0004->post('id'); $sp11c399 = $this->authQuery($spaa0004, \App\Card::class)->findOrFail($sp805277); if ($sp11c399) { $sp1c2237 = $spaa0004->post('card'); $sp8480f1 = (int) $spaa0004->post('type', \App\Card::TYPE_ONETIME); $spe27319 = (int) $spaa0004->post('count_all', 1); return DB::transaction(function () use($sp11c399, $sp1c2237, $sp8480f1, $spe27319) { $sp11c399 = \App\Card::where('id', $sp11c399->id)->lockForUpdate()->firstOrFail(); $sp11c399->card = $sp1c2237; $sp11c399->type = $sp8480f1; if ($sp11c399->type === \App\Card::TYPE_REPEAT) { if ($spe27319 < $sp11c399->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spe27319 < 1 || $spe27319 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp11c399->count_all = $spe27319; } else { $sp11c399->count_all = 1; } $sp11c399->saveOrFail(); $sp59cabc = $sp11c399->product()->lockForUpdate()->firstOrFail(); if ($sp11c399->type === \App\Card::TYPE_REPEAT) { $sp59cabc->buy_max = 1; } $sp59cabc->count_all -= $sp11c399->count_all; $sp59cabc->count_all += $spe27319; $sp59cabc->saveOrFail(); return Response::success(); }); } return Response::success(); } }