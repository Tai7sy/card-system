<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp510ef3, $spfbb848 = false, $spc08328 = false, $sp112f0a = false) { $sp90af04 = $this->authQuery($sp510ef3, \App\Card::class)->with(array('product' => function ($sp90af04) { $sp90af04->select(array('id', 'name')); })); $spebf2d9 = $sp510ef3->input('search', false); $spac3bf6 = $sp510ef3->input('val', false); if ($spebf2d9 && $spac3bf6) { if ($spebf2d9 == 'id') { $sp90af04->where('id', $spac3bf6); } else { $sp90af04->where($spebf2d9, 'like', '%' . $spac3bf6 . '%'); } } $sp40435f = (int) $sp510ef3->input('category_id'); $sp2f9632 = $sp510ef3->input('product_id', -1); if ($sp40435f > 0) { if ($sp2f9632 > 0) { $sp90af04->where('product_id', $sp2f9632); } else { $sp90af04->whereHas('product', function ($sp90af04) use($sp40435f) { $sp90af04->where('category_id', $sp40435f); }); } } $sp671ce9 = $sp510ef3->input('status'); if (strlen($sp671ce9)) { $sp90af04->whereIn('status', explode(',', $sp671ce9)); } $sp89643e = (int) $sp510ef3->input('onlyCanSell'); if ($sp89643e) { $sp90af04->whereRaw('`count_all`>`count_sold`'); } $spb2a0bb = $sp510ef3->input('type'); if (strlen($spb2a0bb)) { $sp90af04->whereIn('type', explode(',', $spb2a0bb)); } $sp319cbb = $sp510ef3->input('trashed') === 'true'; if ($sp319cbb) { $sp90af04->onlyTrashed(); } if ($spc08328 === true) { if ($sp319cbb) { $sp90af04->forceDelete(); } else { \App\Card::_trash($sp90af04); } return Response::success(); } else { if ($sp319cbb && $sp112f0a === true) { \App\Card::_restore($sp90af04); return Response::success(); } else { $sp90af04->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spfbb848 === true) { $sp505cdc = ''; $sp90af04->chunk(100, function ($sp0d18ea) use(&$sp505cdc) { foreach ($sp0d18ea as $spb1f3d6) { $sp505cdc .= $spb1f3d6->card . '
'; } }); $sp56effb = 'export_cards_' . $this->getUserIdOrFail($sp510ef3) . '_' . date('YmdHis') . '.txt'; $sp09e2ff = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp56effb), 'Content-Length' => strlen($sp505cdc)); return response()->make($sp505cdc, 200, $sp09e2ff); } $spb02a8e = (int) $sp510ef3->input('current_page', 1); $sp95f730 = (int) $sp510ef3->input('per_page', 20); $spe24324 = $sp90af04->paginate($sp95f730, array('*'), 'page', $spb02a8e); return Response::success($spe24324); } } } function export(Request $sp510ef3) { return self::get($sp510ef3, true); } function trash(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string')); $sp3cf93f = $sp510ef3->post('ids'); $sp90af04 = $this->authQuery($sp510ef3, \App\Card::class)->whereIn('id', explode(',', $sp3cf93f)); \App\Card::_trash($sp90af04); return Response::success(); } function restoreTrashed(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string')); $sp3cf93f = $sp510ef3->post('ids'); $sp90af04 = $this->authQuery($sp510ef3, \App\Card::class)->whereIn('id', explode(',', $sp3cf93f)); \App\Card::_restore($sp90af04); return Response::success(); } function deleteTrashed(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string')); $sp3cf93f = $sp510ef3->post('ids'); $this->authQuery($sp510ef3, \App\Card::class)->whereIn('id', explode(',', $sp3cf93f))->forceDelete(); return Response::success(); } function deleteAll(Request $sp510ef3) { return $this->get($sp510ef3, false, true); } function restoreAll(Request $sp510ef3) { return $this->get($sp510ef3, false, false, true); } function add(Request $sp510ef3) { $sp2f9632 = (int) $sp510ef3->post('product_id'); $sp0d18ea = $sp510ef3->post('card'); $spb2a0bb = (int) $sp510ef3->post('type', \App\Card::TYPE_ONETIME); $sp4b22b4 = $sp510ef3->post('is_check') === 'true'; if (str_contains($sp0d18ea, '<') || str_contains($sp0d18ea, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp3546ff = $this->getUserIdOrFail($sp510ef3); $spc1ce1d = $this->authQuery($sp510ef3, \App\Product::class)->where('id', $sp2f9632); $spc1ce1d->firstOrFail(array('id')); if ($spb2a0bb === \App\Card::TYPE_REPEAT) { if ($sp4b22b4) { if (\App\Card::where('product_id', $sp2f9632)->where('card', $sp0d18ea)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spb1f3d6 = new \App\Card(array('user_id' => $sp3546ff, 'product_id' => $sp2f9632, 'card' => $sp0d18ea, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp510ef3->post('count_all', 1))); if ($spb1f3d6->count_all < 1 || $spb1f3d6->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($spc1ce1d, $spb1f3d6) { $spb1f3d6->saveOrFail(); $spd39704 = $spc1ce1d->lockForUpdate()->firstOrFail(); $spd39704->count_all += $spb1f3d6->count_all; $spd39704->saveOrFail(); return Response::success(); }); } else { $sp114fae = explode('
', $sp0d18ea); $sp843e47 = count($sp114fae); $sp0e0fa4 = 50000; if ($sp843e47 > $sp0e0fa4) { return Response::fail('每次添加不能超过 ' . $sp0e0fa4 . ' 张'); } $spdd66a1 = array(); if ($sp4b22b4) { $sp80f3fa = \App\Card::where('user_id', $sp3546ff)->where('product_id', $sp2f9632)->get(array('card'))->all(); foreach ($sp80f3fa as $sp2b3577) { $spdd66a1[] = $sp2b3577['card']; } } $sp20141a = array(); $spf0d424 = 0; for ($sp59ca22 = 0; $sp59ca22 < $sp843e47; $sp59ca22++) { $sp7183af = trim($sp114fae[$sp59ca22]); if (strlen($sp7183af) < 1) { continue; } if (strlen($sp7183af) > 1024) { return Response::fail('第 ' . $sp59ca22 . ' 张卡密 ' . $sp7183af . ' 长度错误<br>卡密最大长度为1024'); } if ($sp4b22b4) { if (in_array($sp7183af, $spdd66a1)) { continue; } $spdd66a1[] = $sp7183af; } $sp20141a[] = array('user_id' => $sp3546ff, 'product_id' => $sp2f9632, 'card' => $sp7183af, 'type' => \App\Card::TYPE_ONETIME); $spf0d424++; } if ($spf0d424 === 0) { return Response::success(); } return DB::transaction(function () use($spc1ce1d, $sp20141a, $spf0d424) { \App\Card::insert($sp20141a); $spd39704 = $spc1ce1d->lockForUpdate()->firstOrFail(); $spd39704->count_all += $spf0d424; $spd39704->saveOrFail(); return Response::success(); }); } } function edit(Request $sp510ef3) { $sp258ace = (int) $sp510ef3->post('id'); $spb1f3d6 = $this->authQuery($sp510ef3, \App\Card::class)->findOrFail($sp258ace); if ($spb1f3d6) { $sp2fd9a0 = $sp510ef3->post('card'); $spb2a0bb = (int) $sp510ef3->post('type', \App\Card::TYPE_ONETIME); $sp117805 = (int) $sp510ef3->post('count_all', 1); return DB::transaction(function () use($spb1f3d6, $sp2fd9a0, $spb2a0bb, $sp117805) { $spb1f3d6 = \App\Card::where('id', $spb1f3d6->id)->lockForUpdate()->firstOrFail(); $spb1f3d6->card = $sp2fd9a0; $spb1f3d6->type = $spb2a0bb; if ($spb1f3d6->type === \App\Card::TYPE_REPEAT) { if ($sp117805 < $spb1f3d6->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp117805 < 1 || $sp117805 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spb1f3d6->count_all = $sp117805; } else { $spb1f3d6->count_all = 1; } $spb1f3d6->saveOrFail(); $spd39704 = $spb1f3d6->product()->lockForUpdate()->firstOrFail(); $spd39704->count_all -= $spb1f3d6->count_all; $spd39704->count_all += $sp117805; $spd39704->saveOrFail(); return Response::success(); }); } return Response::success(); } }