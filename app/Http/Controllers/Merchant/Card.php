<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp16eb02, $sp1b7ae3 = false, $spde935e = false, $sp4ef2a9 = false) { $spf5b559 = $this->authQuery($sp16eb02, \App\Card::class)->with(array('product' => function ($spf5b559) { $spf5b559->select(array('id', 'name')); })); $sp420e7b = $sp16eb02->input('search', false); $spd3086f = $sp16eb02->input('val', false); if ($sp420e7b && $spd3086f) { if ($sp420e7b == 'id') { $spf5b559->where('id', $spd3086f); } else { $spf5b559->where($sp420e7b, 'like', '%' . $spd3086f . '%'); } } $sp2d88a9 = (int) $sp16eb02->input('category_id'); $spc53a3f = $sp16eb02->input('product_id', -1); if ($sp2d88a9 > 0) { if ($spc53a3f > 0) { $spf5b559->where('product_id', $spc53a3f); } else { $spf5b559->whereHas('product', function ($spf5b559) use($sp2d88a9) { $spf5b559->where('category_id', $sp2d88a9); }); } } $spd0cfb0 = $sp16eb02->input('status'); if (strlen($spd0cfb0)) { $spf5b559->whereIn('status', explode(',', $spd0cfb0)); } $sp7b5ef7 = (int) $sp16eb02->input('onlyCanSell'); if ($sp7b5ef7) { $spf5b559->whereRaw('`count_all`>`count_sold`'); } $sp827f09 = $sp16eb02->input('type'); if (strlen($sp827f09)) { $spf5b559->whereIn('type', explode(',', $sp827f09)); } $sp9c4685 = $sp16eb02->input('trashed') === 'true'; if ($sp9c4685) { $spf5b559->onlyTrashed(); } if ($spde935e === true) { if ($sp9c4685) { $spf5b559->forceDelete(); } else { \App\Card::_trash($spf5b559); } return Response::success(); } else { if ($sp9c4685 && $sp4ef2a9 === true) { \App\Card::_restore($spf5b559); return Response::success(); } else { $spf5b559->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp1b7ae3 === true) { $spa08748 = ''; $spf5b559->chunk(100, function ($sp49b79c) use(&$spa08748) { foreach ($sp49b79c as $sp93f85e) { $spa08748 .= $sp93f85e->card . '
'; } }); $spc79c9a = 'export_cards_' . $this->getUserIdOrFail($sp16eb02) . '_' . date('YmdHis') . '.txt'; $sp297ae4 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spc79c9a), 'Content-Length' => strlen($spa08748)); return response()->make($spa08748, 200, $sp297ae4); } $sp93b624 = $sp16eb02->input('current_page', 1); $spaec2f0 = $sp16eb02->input('per_page', 20); $sp218bb0 = $spf5b559->paginate($spaec2f0, array('*'), 'page', $sp93b624); return Response::success($sp218bb0); } } } function export(Request $sp16eb02) { return self::get($sp16eb02, true); } function trash(Request $sp16eb02) { $this->validate($sp16eb02, array('ids' => 'required|string')); $spf99fa0 = $sp16eb02->post('ids'); $spf5b559 = $this->authQuery($sp16eb02, \App\Card::class)->whereIn('id', explode(',', $spf99fa0)); \App\Card::_trash($spf5b559); return Response::success(); } function restoreTrashed(Request $sp16eb02) { $this->validate($sp16eb02, array('ids' => 'required|string')); $spf99fa0 = $sp16eb02->post('ids'); $spf5b559 = $this->authQuery($sp16eb02, \App\Card::class)->whereIn('id', explode(',', $spf99fa0)); \App\Card::_restore($spf5b559); return Response::success(); } function deleteTrashed(Request $sp16eb02) { $this->validate($sp16eb02, array('ids' => 'required|string')); $spf99fa0 = $sp16eb02->post('ids'); $this->authQuery($sp16eb02, \App\Card::class)->whereIn('id', explode(',', $spf99fa0))->forceDelete(); return Response::success(); } function deleteAll(Request $sp16eb02) { return $this->get($sp16eb02, false, true); } function restoreAll(Request $sp16eb02) { return $this->get($sp16eb02, false, false, true); } function add(Request $sp16eb02) { $spc53a3f = (int) $sp16eb02->post('product_id'); $sp49b79c = $sp16eb02->post('card'); $sp827f09 = (int) $sp16eb02->post('type', \App\Card::TYPE_ONETIME); $sp863f33 = $sp16eb02->post('is_check') === 'true'; if (str_contains($sp49b79c, '<') || str_contains($sp49b79c, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spaa7e02 = $this->getUserIdOrFail($sp16eb02); $sp71074f = $this->authQuery($sp16eb02, \App\Product::class)->where('id', $spc53a3f); $sp71074f->firstOrFail(array('id')); if ($sp827f09 === \App\Card::TYPE_REPEAT) { if ($sp863f33) { if (\App\Card::where('product_id', $spc53a3f)->where('card', $sp49b79c)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp93f85e = new \App\Card(array('user_id' => $spaa7e02, 'product_id' => $spc53a3f, 'card' => $sp49b79c, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp16eb02->post('count_all', 1))); if ($sp93f85e->count_all < 1 || $sp93f85e->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp71074f, $sp93f85e) { $sp93f85e->saveOrFail(); $sp48b1b0 = $sp71074f->lockForUpdate()->firstOrFail(); $sp48b1b0->buy_max = 1; $sp48b1b0->count_all += $sp93f85e->count_all; $sp48b1b0->saveOrFail(); return Response::success(); }); } else { $spc95f60 = explode('
', $sp49b79c); $spbf0b52 = count($spc95f60); $sp4601e1 = 500; if ($spbf0b52 > $sp4601e1) { return Response::fail('每次添加不能超过 ' . $sp4601e1 . ' 张'); } $sp23d0fd = array(); if ($sp863f33) { $sp08aaf1 = \App\Card::where('user_id', $spaa7e02)->where('product_id', $spc53a3f)->get(array('card'))->all(); foreach ($sp08aaf1 as $sp4a62a1) { $sp23d0fd[] = $sp4a62a1['card']; } } $spf601e4 = array(); $sp28e124 = 0; for ($spc24184 = 0; $spc24184 < $spbf0b52; $spc24184++) { $sp93f85e = trim($spc95f60[$spc24184]); if (strlen($sp93f85e) < 1) { continue; } if (strlen($sp93f85e) > 255) { return Response::fail('第 ' . $spc24184 . ' 张卡密 ' . $sp93f85e . ' 长度错误<br>卡密最大长度为255'); } if ($sp863f33) { if (in_array($sp93f85e, $sp23d0fd)) { continue; } $sp23d0fd[] = $sp93f85e; } $spf601e4[] = array('user_id' => $spaa7e02, 'product_id' => $spc53a3f, 'card' => $sp93f85e, 'type' => \App\Card::TYPE_ONETIME); $sp28e124++; } if ($sp28e124 === 0) { return Response::success(); } return DB::transaction(function () use($sp71074f, $spf601e4, $sp28e124) { \App\Card::insert($spf601e4); $sp48b1b0 = $sp71074f->lockForUpdate()->firstOrFail(); $sp48b1b0->count_all += $sp28e124; $sp48b1b0->saveOrFail(); return Response::success(); }); } } function edit(Request $sp16eb02) { $sp0bf346 = (int) $sp16eb02->post('id'); $sp93f85e = $this->authQuery($sp16eb02, \App\Card::class)->findOrFail($sp0bf346); if ($sp93f85e) { $sp2fc068 = $sp16eb02->post('card'); $sp827f09 = (int) $sp16eb02->post('type', \App\Card::TYPE_ONETIME); $spc7499c = (int) $sp16eb02->post('count_all', 1); return DB::transaction(function () use($sp93f85e, $sp2fc068, $sp827f09, $spc7499c) { $sp93f85e = \App\Card::where('id', $sp93f85e->id)->lockForUpdate()->firstOrFail(); $sp93f85e->card = $sp2fc068; $sp93f85e->type = $sp827f09; if ($sp93f85e->type === \App\Card::TYPE_REPEAT) { if ($spc7499c < $sp93f85e->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spc7499c < 1 || $spc7499c > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp93f85e->count_all = $spc7499c; } else { $sp93f85e->count_all = 1; } $sp93f85e->saveOrFail(); $sp48b1b0 = $sp93f85e->product()->lockForUpdate()->firstOrFail(); if ($sp93f85e->type === \App\Card::TYPE_REPEAT) { $sp48b1b0->buy_max = 1; } $sp48b1b0->count_all -= $sp93f85e->count_all; $sp48b1b0->count_all += $spc7499c; $sp48b1b0->saveOrFail(); return Response::success(); }); } return Response::success(); } }