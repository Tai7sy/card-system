<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spfeab54, $sp5389f4 = false, $sp63c1ab = false, $spe223bf = false) { $sp5786ca = $this->authQuery($spfeab54, \App\Card::class)->with(array('product' => function ($sp5786ca) { $sp5786ca->select(array('id', 'name')); })); $sped0aef = $spfeab54->input('search', false); $sp86d9ea = $spfeab54->input('val', false); if ($sped0aef && $sp86d9ea) { if ($sped0aef == 'id') { $sp5786ca->where('id', $sp86d9ea); } else { $sp5786ca->where($sped0aef, 'like', '%' . $sp86d9ea . '%'); } } $sp790613 = (int) $spfeab54->input('category_id'); $sp0e30a6 = $spfeab54->input('product_id', -1); if ($sp790613 > 0) { if ($sp0e30a6 > 0) { $sp5786ca->where('product_id', $sp0e30a6); } else { $sp5786ca->whereHas('product', function ($sp5786ca) use($sp790613) { $sp5786ca->where('category_id', $sp790613); }); } } $sp7a9982 = $spfeab54->input('status'); if (strlen($sp7a9982)) { $sp5786ca->whereIn('status', explode(',', $sp7a9982)); } $spad6849 = (int) $spfeab54->input('onlyCanSell'); if ($spad6849) { $sp5786ca->whereRaw('`count_all`>`count_sold`'); } $sp8f5ac7 = $spfeab54->input('type'); if (strlen($sp8f5ac7)) { $sp5786ca->whereIn('type', explode(',', $sp8f5ac7)); } $spd6f8c7 = $spfeab54->input('trashed') === 'true'; if ($spd6f8c7) { $sp5786ca->onlyTrashed(); } if ($sp63c1ab === true) { if ($spd6f8c7) { $sp5786ca->forceDelete(); } else { \App\Card::_trash($sp5786ca); } return Response::success(); } else { if ($spd6f8c7 && $spe223bf === true) { \App\Card::_restore($sp5786ca); return Response::success(); } else { $sp5786ca->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp5389f4 === true) { $spb41b87 = ''; $sp5786ca->chunk(100, function ($sp33f345) use(&$spb41b87) { foreach ($sp33f345 as $sp0f75bb) { $spb41b87 .= $sp0f75bb->card . '
'; } }); $spcf532d = 'export_cards_' . $this->getUserIdOrFail($spfeab54) . '_' . date('YmdHis') . '.txt'; $sp28070b = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spcf532d), 'Content-Length' => strlen($spb41b87)); return response()->make($spb41b87, 200, $sp28070b); } $spd5ff21 = $spfeab54->input('current_page', 1); $sp372a98 = $spfeab54->input('per_page', 20); $spaff91c = $sp5786ca->paginate($sp372a98, array('*'), 'page', $spd5ff21); return Response::success($spaff91c); } } } function export(Request $spfeab54) { return self::get($spfeab54, true); } function trash(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string')); $spbd9db0 = $spfeab54->post('ids'); $sp5786ca = $this->authQuery($spfeab54, \App\Card::class)->whereIn('id', explode(',', $spbd9db0)); \App\Card::_trash($sp5786ca); return Response::success(); } function restoreTrashed(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string')); $spbd9db0 = $spfeab54->post('ids'); $sp5786ca = $this->authQuery($spfeab54, \App\Card::class)->whereIn('id', explode(',', $spbd9db0)); \App\Card::_restore($sp5786ca); return Response::success(); } function deleteTrashed(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string')); $spbd9db0 = $spfeab54->post('ids'); $this->authQuery($spfeab54, \App\Card::class)->whereIn('id', explode(',', $spbd9db0))->forceDelete(); return Response::success(); } function deleteAll(Request $spfeab54) { return $this->get($spfeab54, false, true); } function restoreAll(Request $spfeab54) { return $this->get($spfeab54, false, false, true); } function add(Request $spfeab54) { $sp0e30a6 = (int) $spfeab54->post('product_id'); $sp33f345 = $spfeab54->post('card'); $sp8f5ac7 = (int) $spfeab54->post('type', \App\Card::TYPE_ONETIME); $sp518449 = $spfeab54->post('is_check') === 'true'; if (str_contains($sp33f345, '<') || str_contains($sp33f345, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spfa021e = $this->getUserIdOrFail($spfeab54); $sp7d5568 = $this->authQuery($spfeab54, \App\Product::class)->where('id', $sp0e30a6); $sp7d5568->firstOrFail(array('id')); if ($sp8f5ac7 === \App\Card::TYPE_REPEAT) { if ($sp518449) { if (\App\Card::where('product_id', $sp0e30a6)->where('card', $sp33f345)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp0f75bb = new \App\Card(array('user_id' => $spfa021e, 'product_id' => $sp0e30a6, 'card' => $sp33f345, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spfeab54->post('count_all', 1))); if ($sp0f75bb->count_all < 1 || $sp0f75bb->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp7d5568, $sp0f75bb) { $sp0f75bb->saveOrFail(); $sp71cb0c = $sp7d5568->lockForUpdate()->firstOrFail(); $sp71cb0c->buy_max = 1; $sp71cb0c->count_all += $sp0f75bb->count_all; $sp71cb0c->saveOrFail(); return Response::success(); }); } else { $sp62ca36 = explode('
', $sp33f345); $sp88fa34 = count($sp62ca36); $spd766ff = 500; if ($sp88fa34 > $spd766ff) { return Response::fail('每次添加不能超过 ' . $spd766ff . ' 张'); } $sp4a02d3 = array(); if ($sp518449) { $spc5ff53 = \App\Card::where('user_id', $spfa021e)->where('product_id', $sp0e30a6)->get(array('card'))->all(); foreach ($spc5ff53 as $sp10dbb4) { $sp4a02d3[] = $sp10dbb4['card']; } } $spc387f8 = array(); $sp4a4b10 = 0; for ($spea591f = 0; $spea591f < $sp88fa34; $spea591f++) { $sp0f75bb = trim($sp62ca36[$spea591f]); if (strlen($sp0f75bb) < 1) { continue; } if (strlen($sp0f75bb) > 255) { return Response::fail('第 ' . $spea591f . ' 张卡密 ' . $sp0f75bb . ' 长度错误<br>卡密最大长度为255'); } if ($sp518449) { if (in_array($sp0f75bb, $sp4a02d3)) { continue; } $sp4a02d3[] = $sp0f75bb; } $spc387f8[] = array('user_id' => $spfa021e, 'product_id' => $sp0e30a6, 'card' => $sp0f75bb, 'type' => \App\Card::TYPE_ONETIME); $sp4a4b10++; } if ($sp4a4b10 === 0) { return Response::success(); } return DB::transaction(function () use($sp7d5568, $spc387f8, $sp4a4b10) { \App\Card::insert($spc387f8); $sp71cb0c = $sp7d5568->lockForUpdate()->firstOrFail(); $sp71cb0c->count_all += $sp4a4b10; $sp71cb0c->saveOrFail(); return Response::success(); }); } } function edit(Request $spfeab54) { $sp53f8aa = (int) $spfeab54->post('id'); $sp0f75bb = $this->authQuery($spfeab54, \App\Card::class)->findOrFail($sp53f8aa); if ($sp0f75bb) { $spb80db2 = $spfeab54->post('card'); $sp8f5ac7 = (int) $spfeab54->post('type', \App\Card::TYPE_ONETIME); $spca59a8 = (int) $spfeab54->post('count_all', 1); return DB::transaction(function () use($sp0f75bb, $spb80db2, $sp8f5ac7, $spca59a8) { $sp0f75bb = \App\Card::where('id', $sp0f75bb->id)->lockForUpdate()->firstOrFail(); $sp0f75bb->card = $spb80db2; $sp0f75bb->type = $sp8f5ac7; if ($sp0f75bb->type === \App\Card::TYPE_REPEAT) { if ($spca59a8 < $sp0f75bb->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spca59a8 < 1 || $spca59a8 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp0f75bb->count_all = $spca59a8; } else { $sp0f75bb->count_all = 1; } $sp0f75bb->saveOrFail(); $sp71cb0c = $sp0f75bb->product()->lockForUpdate()->firstOrFail(); if ($sp0f75bb->type === \App\Card::TYPE_REPEAT) { $sp71cb0c->buy_max = 1; } $sp71cb0c->count_all -= $sp0f75bb->count_all; $sp71cb0c->count_all += $spca59a8; $sp71cb0c->saveOrFail(); return Response::success(); }); } return Response::success(); } }