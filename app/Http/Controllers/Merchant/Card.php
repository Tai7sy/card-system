<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp26e527, $spf2a246 = false, $sp7851ec = false, $spa4b084 = false) { $spcfdf85 = $this->authQuery($sp26e527, \App\Card::class)->with(array('product' => function ($spcfdf85) { $spcfdf85->select(array('id', 'name')); })); $sp78cca0 = $sp26e527->input('search', false); $sp79e569 = $sp26e527->input('val', false); if ($sp78cca0 && $sp79e569) { if ($sp78cca0 == 'id') { $spcfdf85->where('id', $sp79e569); } else { $spcfdf85->where($sp78cca0, 'like', '%' . $sp79e569 . '%'); } } $sp735ffa = (int) $sp26e527->input('category_id'); $sp517398 = $sp26e527->input('product_id', -1); if ($sp735ffa > 0) { if ($sp517398 > 0) { $spcfdf85->where('product_id', $sp517398); } else { $spcfdf85->whereHas('product', function ($spcfdf85) use($sp735ffa) { $spcfdf85->where('category_id', $sp735ffa); }); } } $sp0f5dbe = $sp26e527->input('status'); if (strlen($sp0f5dbe)) { $spcfdf85->whereIn('status', explode(',', $sp0f5dbe)); } $spbf1539 = (int) $sp26e527->input('onlyCanSell'); if ($spbf1539) { $spcfdf85->whereRaw('`count_all`>`count_sold`'); } $spa0789d = $sp26e527->input('type'); if (strlen($spa0789d)) { $spcfdf85->whereIn('type', explode(',', $spa0789d)); } $spbe528d = $sp26e527->input('trashed') === 'true'; if ($spbe528d) { $spcfdf85->onlyTrashed(); } if ($sp7851ec === true) { if ($spbe528d) { $spcfdf85->forceDelete(); } else { \App\Card::_trash($spcfdf85); } return Response::success(); } else { if ($spbe528d && $spa4b084 === true) { \App\Card::_restore($spcfdf85); return Response::success(); } else { $spcfdf85->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spf2a246 === true) { $sp2c2786 = ''; $spcfdf85->chunk(100, function ($sp8088f0) use(&$sp2c2786) { foreach ($sp8088f0 as $spaeb7b9) { $sp2c2786 .= $spaeb7b9->card . '
'; } }); $sp7c2257 = 'export_cards_' . $this->getUserIdOrFail($sp26e527) . '_' . date('YmdHis') . '.txt'; $spfeddd9 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp7c2257), 'Content-Length' => strlen($sp2c2786)); return response()->make($sp2c2786, 200, $spfeddd9); } $sp81cf40 = (int) $sp26e527->input('current_page', 1); $sp8de1f1 = (int) $sp26e527->input('per_page', 20); $spccc256 = $spcfdf85->paginate($sp8de1f1, array('*'), 'page', $sp81cf40); return Response::success($spccc256); } } } function export(Request $sp26e527) { return self::get($sp26e527, true); } function trash(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string')); $sp892962 = $sp26e527->post('ids'); $spcfdf85 = $this->authQuery($sp26e527, \App\Card::class)->whereIn('id', explode(',', $sp892962)); \App\Card::_trash($spcfdf85); return Response::success(); } function restoreTrashed(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string')); $sp892962 = $sp26e527->post('ids'); $spcfdf85 = $this->authQuery($sp26e527, \App\Card::class)->whereIn('id', explode(',', $sp892962)); \App\Card::_restore($spcfdf85); return Response::success(); } function deleteTrashed(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string')); $sp892962 = $sp26e527->post('ids'); $this->authQuery($sp26e527, \App\Card::class)->whereIn('id', explode(',', $sp892962))->forceDelete(); return Response::success(); } function deleteAll(Request $sp26e527) { return $this->get($sp26e527, false, true); } function restoreAll(Request $sp26e527) { return $this->get($sp26e527, false, false, true); } function add(Request $sp26e527) { $sp517398 = (int) $sp26e527->post('product_id'); $sp8088f0 = $sp26e527->post('card'); $spa0789d = (int) $sp26e527->post('type', \App\Card::TYPE_ONETIME); $sp736e02 = $sp26e527->post('is_check') === 'true'; if (str_contains($sp8088f0, '<') || str_contains($sp8088f0, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp699450 = $this->getUserIdOrFail($sp26e527); $sp3a21aa = $this->authQuery($sp26e527, \App\Product::class)->where('id', $sp517398); $sp3a21aa->firstOrFail(array('id')); if ($spa0789d === \App\Card::TYPE_REPEAT) { if ($sp736e02) { if (\App\Card::where('product_id', $sp517398)->where('card', $sp8088f0)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spaeb7b9 = new \App\Card(array('user_id' => $sp699450, 'product_id' => $sp517398, 'card' => $sp8088f0, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp26e527->post('count_all', 1))); if ($spaeb7b9->count_all < 1 || $spaeb7b9->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp3a21aa, $spaeb7b9) { $spaeb7b9->saveOrFail(); $sp222f58 = $sp3a21aa->lockForUpdate()->firstOrFail(); $sp222f58->count_all += $spaeb7b9->count_all; $sp222f58->saveOrFail(); return Response::success(); }); } else { $sp107491 = explode('
', $sp8088f0); $sp4e8cb3 = count($sp107491); $spb85309 = 50000; if ($sp4e8cb3 > $spb85309) { return Response::fail('每次添加不能超过 ' . $spb85309 . ' 张'); } $sp76c8ca = array(); if ($sp736e02) { $sp2a0fef = \App\Card::where('user_id', $sp699450)->where('product_id', $sp517398)->get(array('card'))->all(); foreach ($sp2a0fef as $sp00b323) { $sp76c8ca[] = $sp00b323['card']; } } $sp353c24 = array(); $sp941e52 = 0; for ($sp8f2283 = 0; $sp8f2283 < $sp4e8cb3; $sp8f2283++) { $spbf4838 = trim($sp107491[$sp8f2283]); if (strlen($spbf4838) < 1) { continue; } if (strlen($spbf4838) > 255) { return Response::fail('第 ' . $sp8f2283 . ' 张卡密 ' . $spbf4838 . ' 长度错误<br>卡密最大长度为255'); } if ($sp736e02) { if (in_array($spbf4838, $sp76c8ca)) { continue; } $sp76c8ca[] = $spbf4838; } $sp353c24[] = array('user_id' => $sp699450, 'product_id' => $sp517398, 'card' => $spbf4838, 'type' => \App\Card::TYPE_ONETIME); $sp941e52++; } if ($sp941e52 === 0) { return Response::success(); } return DB::transaction(function () use($sp3a21aa, $sp353c24, $sp941e52) { \App\Card::insert($sp353c24); $sp222f58 = $sp3a21aa->lockForUpdate()->firstOrFail(); $sp222f58->count_all += $sp941e52; $sp222f58->saveOrFail(); return Response::success(); }); } } function edit(Request $sp26e527) { $sp138835 = (int) $sp26e527->post('id'); $spaeb7b9 = $this->authQuery($sp26e527, \App\Card::class)->findOrFail($sp138835); if ($spaeb7b9) { $sp00b380 = $sp26e527->post('card'); $spa0789d = (int) $sp26e527->post('type', \App\Card::TYPE_ONETIME); $spa34f2c = (int) $sp26e527->post('count_all', 1); return DB::transaction(function () use($spaeb7b9, $sp00b380, $spa0789d, $spa34f2c) { $spaeb7b9 = \App\Card::where('id', $spaeb7b9->id)->lockForUpdate()->firstOrFail(); $spaeb7b9->card = $sp00b380; $spaeb7b9->type = $spa0789d; if ($spaeb7b9->type === \App\Card::TYPE_REPEAT) { if ($spa34f2c < $spaeb7b9->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spa34f2c < 1 || $spa34f2c > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spaeb7b9->count_all = $spa34f2c; } else { $spaeb7b9->count_all = 1; } $spaeb7b9->saveOrFail(); $sp222f58 = $spaeb7b9->product()->lockForUpdate()->firstOrFail(); $sp222f58->count_all -= $spaeb7b9->count_all; $sp222f58->count_all += $spa34f2c; $sp222f58->saveOrFail(); return Response::success(); }); } return Response::success(); } }