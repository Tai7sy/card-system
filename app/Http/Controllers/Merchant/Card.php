<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp147552, $sp68c760 = false, $spf1f573 = false, $spb5fe07 = false) { $spd10097 = $this->authQuery($sp147552, \App\Card::class)->with(array('product' => function ($spd10097) { $spd10097->select(array('id', 'name')); })); $spa1f2d3 = $sp147552->input('search', false); $spa55e11 = $sp147552->input('val', false); if ($spa1f2d3 && $spa55e11) { if ($spa1f2d3 == 'id') { $spd10097->where('id', $spa55e11); } else { $spd10097->where($spa1f2d3, 'like', '%' . $spa55e11 . '%'); } } $sp43c1c1 = (int) $sp147552->input('category_id'); $sp52cac1 = $sp147552->input('product_id', -1); if ($sp43c1c1 > 0) { if ($sp52cac1 > 0) { $spd10097->where('product_id', $sp52cac1); } else { $spd10097->whereHas('product', function ($spd10097) use($sp43c1c1) { $spd10097->where('category_id', $sp43c1c1); }); } } $sp415e3d = $sp147552->input('status'); if (strlen($sp415e3d)) { $spd10097->whereIn('status', explode(',', $sp415e3d)); } $sp8f9955 = (int) $sp147552->input('onlyCanSell'); if ($sp8f9955) { $spd10097->whereRaw('`count_all`>`count_sold`'); } $sp4ad441 = $sp147552->input('type'); if (strlen($sp4ad441)) { $spd10097->whereIn('type', explode(',', $sp4ad441)); } $spe6c569 = $sp147552->input('trashed') === 'true'; if ($spe6c569) { $spd10097->onlyTrashed(); } if ($spf1f573 === true) { if ($spe6c569) { $spd10097->forceDelete(); } else { \App\Card::_trash($spd10097); } return Response::success(); } else { if ($spe6c569 && $spb5fe07 === true) { \App\Card::_restore($spd10097); return Response::success(); } else { $spd10097->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp68c760 === true) { $spd51764 = ''; $spd10097->chunk(100, function ($sp8bdf7a) use(&$spd51764) { foreach ($sp8bdf7a as $spb3ffd5) { $spd51764 .= $spb3ffd5->card . '
'; } }); $spc4e83e = 'export_cards_' . $this->getUserIdOrFail($sp147552) . '_' . date('YmdHis') . '.txt'; $spd8c799 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spc4e83e), 'Content-Length' => strlen($spd51764)); return response()->make($spd51764, 200, $spd8c799); } $sp95caec = (int) $sp147552->input('current_page', 1); $sp11fa7d = (int) $sp147552->input('per_page', 20); $sp8b8475 = $spd10097->paginate($sp11fa7d, array('*'), 'page', $sp95caec); return Response::success($sp8b8475); } } } function export(Request $sp147552) { return self::get($sp147552, true); } function trash(Request $sp147552) { $this->validate($sp147552, array('ids' => 'required|string')); $sp548f2b = $sp147552->post('ids'); $spd10097 = $this->authQuery($sp147552, \App\Card::class)->whereIn('id', explode(',', $sp548f2b)); \App\Card::_trash($spd10097); return Response::success(); } function restoreTrashed(Request $sp147552) { $this->validate($sp147552, array('ids' => 'required|string')); $sp548f2b = $sp147552->post('ids'); $spd10097 = $this->authQuery($sp147552, \App\Card::class)->whereIn('id', explode(',', $sp548f2b)); \App\Card::_restore($spd10097); return Response::success(); } function deleteTrashed(Request $sp147552) { $this->validate($sp147552, array('ids' => 'required|string')); $sp548f2b = $sp147552->post('ids'); $this->authQuery($sp147552, \App\Card::class)->whereIn('id', explode(',', $sp548f2b))->forceDelete(); return Response::success(); } function deleteAll(Request $sp147552) { return $this->get($sp147552, false, true); } function restoreAll(Request $sp147552) { return $this->get($sp147552, false, false, true); } function add(Request $sp147552) { $sp52cac1 = (int) $sp147552->post('product_id'); $sp8bdf7a = $sp147552->post('card'); $sp4ad441 = (int) $sp147552->post('type', \App\Card::TYPE_ONETIME); $sp24ed58 = $sp147552->post('is_check') === 'true'; if (str_contains($sp8bdf7a, '<') || str_contains($sp8bdf7a, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spa27b73 = $this->getUserIdOrFail($sp147552); $sp8f2a97 = $this->authQuery($sp147552, \App\Product::class)->where('id', $sp52cac1); $sp8f2a97->firstOrFail(array('id')); if ($sp4ad441 === \App\Card::TYPE_REPEAT) { if ($sp24ed58) { if (\App\Card::where('product_id', $sp52cac1)->where('card', $sp8bdf7a)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spb3ffd5 = new \App\Card(array('user_id' => $spa27b73, 'product_id' => $sp52cac1, 'card' => $sp8bdf7a, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp147552->post('count_all', 1))); if ($spb3ffd5->count_all < 1 || $spb3ffd5->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp8f2a97, $spb3ffd5) { $spb3ffd5->saveOrFail(); $sp4aad76 = $sp8f2a97->lockForUpdate()->firstOrFail(); $sp4aad76->count_all += $spb3ffd5->count_all; $sp4aad76->saveOrFail(); return Response::success(); }); } else { $spa504de = explode('
', $sp8bdf7a); $sp61c459 = count($spa504de); $sp047601 = 50000; if ($sp61c459 > $sp047601) { return Response::fail('每次添加不能超过 ' . $sp047601 . ' 张'); } $spb6f865 = array(); if ($sp24ed58) { $spb6c28c = \App\Card::where('user_id', $spa27b73)->where('product_id', $sp52cac1)->get(array('card'))->all(); foreach ($spb6c28c as $sp1acbcd) { $spb6f865[] = $sp1acbcd['card']; } } $spdeaa0a = array(); $sp7fbba4 = 0; for ($sp80b4fe = 0; $sp80b4fe < $sp61c459; $sp80b4fe++) { $sp209bf4 = trim($spa504de[$sp80b4fe]); if (strlen($sp209bf4) < 1) { continue; } if (strlen($sp209bf4) > 255) { return Response::fail('第 ' . $sp80b4fe . ' 张卡密 ' . $sp209bf4 . ' 长度错误<br>卡密最大长度为255'); } if ($sp24ed58) { if (in_array($sp209bf4, $spb6f865)) { continue; } $spb6f865[] = $sp209bf4; } $spdeaa0a[] = array('user_id' => $spa27b73, 'product_id' => $sp52cac1, 'card' => $sp209bf4, 'type' => \App\Card::TYPE_ONETIME); $sp7fbba4++; } if ($sp7fbba4 === 0) { return Response::success(); } return DB::transaction(function () use($sp8f2a97, $spdeaa0a, $sp7fbba4) { \App\Card::insert($spdeaa0a); $sp4aad76 = $sp8f2a97->lockForUpdate()->firstOrFail(); $sp4aad76->count_all += $sp7fbba4; $sp4aad76->saveOrFail(); return Response::success(); }); } } function edit(Request $sp147552) { $speb3ceb = (int) $sp147552->post('id'); $spb3ffd5 = $this->authQuery($sp147552, \App\Card::class)->findOrFail($speb3ceb); if ($spb3ffd5) { $sp6e7435 = $sp147552->post('card'); $sp4ad441 = (int) $sp147552->post('type', \App\Card::TYPE_ONETIME); $spd6e28e = (int) $sp147552->post('count_all', 1); return DB::transaction(function () use($spb3ffd5, $sp6e7435, $sp4ad441, $spd6e28e) { $spb3ffd5 = \App\Card::where('id', $spb3ffd5->id)->lockForUpdate()->firstOrFail(); $spb3ffd5->card = $sp6e7435; $spb3ffd5->type = $sp4ad441; if ($spb3ffd5->type === \App\Card::TYPE_REPEAT) { if ($spd6e28e < $spb3ffd5->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spd6e28e < 1 || $spd6e28e > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spb3ffd5->count_all = $spd6e28e; } else { $spb3ffd5->count_all = 1; } $spb3ffd5->saveOrFail(); $sp4aad76 = $spb3ffd5->product()->lockForUpdate()->firstOrFail(); $sp4aad76->count_all -= $spb3ffd5->count_all; $sp4aad76->count_all += $spd6e28e; $sp4aad76->saveOrFail(); return Response::success(); }); } return Response::success(); } }