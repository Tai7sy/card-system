<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spa20801, $sp604d2f = false, $sp0bce8e = false, $spf922da = false) { $sp6c3275 = $this->authQuery($spa20801, \App\Card::class)->with(array('product' => function ($sp6c3275) { $sp6c3275->select(array('id', 'name')); })); $sp50974d = $spa20801->input('search', false); $sp7a8e14 = $spa20801->input('val', false); if ($sp50974d && $sp7a8e14) { if ($sp50974d == 'id') { $sp6c3275->where('id', $sp7a8e14); } else { $sp6c3275->where($sp50974d, 'like', '%' . $sp7a8e14 . '%'); } } $sp664160 = (int) $spa20801->input('category_id'); $sp17d280 = $spa20801->input('product_id', -1); if ($sp664160 > 0) { if ($sp17d280 > 0) { $sp6c3275->where('product_id', $sp17d280); } else { $sp6c3275->whereHas('product', function ($sp6c3275) use($sp664160) { $sp6c3275->where('category_id', $sp664160); }); } } $sp59ae99 = $spa20801->input('status'); if (strlen($sp59ae99)) { $sp6c3275->whereIn('status', explode(',', $sp59ae99)); } $sp097470 = (int) $spa20801->input('onlyCanSell'); if ($sp097470) { $sp6c3275->whereRaw('`count_all`>`count_sold`'); } $spf46b4f = $spa20801->input('type'); if (strlen($spf46b4f)) { $sp6c3275->whereIn('type', explode(',', $spf46b4f)); } $spea890b = $spa20801->input('trashed') === 'true'; if ($spea890b) { $sp6c3275->onlyTrashed(); } if ($sp0bce8e === true) { if ($spea890b) { $sp6c3275->forceDelete(); } else { \App\Card::_trash($sp6c3275); } return Response::success(); } else { if ($spea890b && $spf922da === true) { \App\Card::_restore($sp6c3275); return Response::success(); } else { $sp6c3275->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp604d2f === true) { $sp62b66b = ''; $sp6c3275->chunk(100, function ($spbccba7) use(&$sp62b66b) { foreach ($spbccba7 as $spe34968) { $sp62b66b .= $spe34968->card . '
'; } }); $sp00cfe1 = 'export_cards_' . $this->getUserIdOrFail($spa20801) . '_' . date('YmdHis') . '.txt'; $spa9286c = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp00cfe1), 'Content-Length' => strlen($sp62b66b)); return response()->make($sp62b66b, 200, $spa9286c); } $sp2c377e = (int) $spa20801->input('current_page', 1); $sp896436 = (int) $spa20801->input('per_page', 20); $spa79e9a = $sp6c3275->paginate($sp896436, array('*'), 'page', $sp2c377e); return Response::success($spa79e9a); } } } function export(Request $spa20801) { return self::get($spa20801, true); } function trash(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string')); $sp4a6f27 = $spa20801->post('ids'); $sp6c3275 = $this->authQuery($spa20801, \App\Card::class)->whereIn('id', explode(',', $sp4a6f27)); \App\Card::_trash($sp6c3275); return Response::success(); } function restoreTrashed(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string')); $sp4a6f27 = $spa20801->post('ids'); $sp6c3275 = $this->authQuery($spa20801, \App\Card::class)->whereIn('id', explode(',', $sp4a6f27)); \App\Card::_restore($sp6c3275); return Response::success(); } function deleteTrashed(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string')); $sp4a6f27 = $spa20801->post('ids'); $this->authQuery($spa20801, \App\Card::class)->whereIn('id', explode(',', $sp4a6f27))->forceDelete(); return Response::success(); } function deleteAll(Request $spa20801) { return $this->get($spa20801, false, true); } function restoreAll(Request $spa20801) { return $this->get($spa20801, false, false, true); } function add(Request $spa20801) { $sp17d280 = (int) $spa20801->post('product_id'); $spbccba7 = $spa20801->post('card'); $spf46b4f = (int) $spa20801->post('type', \App\Card::TYPE_ONETIME); $sp3afcf8 = $spa20801->post('is_check') === 'true'; if (str_contains($spbccba7, '<') || str_contains($spbccba7, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp6fe8b9 = $this->getUserIdOrFail($spa20801); $sp13d9e0 = $this->authQuery($spa20801, \App\Product::class)->where('id', $sp17d280); $sp13d9e0->firstOrFail(array('id')); if ($spf46b4f === \App\Card::TYPE_REPEAT) { if ($sp3afcf8) { if (\App\Card::where('product_id', $sp17d280)->where('card', $spbccba7)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spe34968 = new \App\Card(array('user_id' => $sp6fe8b9, 'product_id' => $sp17d280, 'card' => $spbccba7, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spa20801->post('count_all', 1))); if ($spe34968->count_all < 1 || $spe34968->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp13d9e0, $spe34968) { $spe34968->saveOrFail(); $sp0a72f9 = $sp13d9e0->lockForUpdate()->firstOrFail(); $sp0a72f9->count_all += $spe34968->count_all; $sp0a72f9->saveOrFail(); return Response::success(); }); } else { $spad1f18 = explode('
', $spbccba7); $spc8a26f = count($spad1f18); $sp047cfa = 50000; if ($spc8a26f > $sp047cfa) { return Response::fail('每次添加不能超过 ' . $sp047cfa . ' 张'); } $sp33ca5f = array(); if ($sp3afcf8) { $spcb652e = \App\Card::where('user_id', $sp6fe8b9)->where('product_id', $sp17d280)->get(array('card'))->all(); foreach ($spcb652e as $spc0c116) { $sp33ca5f[] = $spc0c116['card']; } } $spfa77bf = array(); $spb9f869 = 0; for ($spec1f96 = 0; $spec1f96 < $spc8a26f; $spec1f96++) { $spe82738 = trim($spad1f18[$spec1f96]); if (strlen($spe82738) < 1) { continue; } if (strlen($spe82738) > 255) { return Response::fail('第 ' . $spec1f96 . ' 张卡密 ' . $spe82738 . ' 长度错误<br>卡密最大长度为255'); } if ($sp3afcf8) { if (in_array($spe82738, $sp33ca5f)) { continue; } $sp33ca5f[] = $spe82738; } $spfa77bf[] = array('user_id' => $sp6fe8b9, 'product_id' => $sp17d280, 'card' => $spe82738, 'type' => \App\Card::TYPE_ONETIME); $spb9f869++; } if ($spb9f869 === 0) { return Response::success(); } return DB::transaction(function () use($sp13d9e0, $spfa77bf, $spb9f869) { \App\Card::insert($spfa77bf); $sp0a72f9 = $sp13d9e0->lockForUpdate()->firstOrFail(); $sp0a72f9->count_all += $spb9f869; $sp0a72f9->saveOrFail(); return Response::success(); }); } } function edit(Request $spa20801) { $spbc2f9d = (int) $spa20801->post('id'); $spe34968 = $this->authQuery($spa20801, \App\Card::class)->findOrFail($spbc2f9d); if ($spe34968) { $sp70b5eb = $spa20801->post('card'); $spf46b4f = (int) $spa20801->post('type', \App\Card::TYPE_ONETIME); $sp49a96a = (int) $spa20801->post('count_all', 1); return DB::transaction(function () use($spe34968, $sp70b5eb, $spf46b4f, $sp49a96a) { $spe34968 = \App\Card::where('id', $spe34968->id)->lockForUpdate()->firstOrFail(); $spe34968->card = $sp70b5eb; $spe34968->type = $spf46b4f; if ($spe34968->type === \App\Card::TYPE_REPEAT) { if ($sp49a96a < $spe34968->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp49a96a < 1 || $sp49a96a > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spe34968->count_all = $sp49a96a; } else { $spe34968->count_all = 1; } $spe34968->saveOrFail(); $sp0a72f9 = $spe34968->product()->lockForUpdate()->firstOrFail(); $sp0a72f9->count_all -= $spe34968->count_all; $sp0a72f9->count_all += $sp49a96a; $sp0a72f9->saveOrFail(); return Response::success(); }); } return Response::success(); } }