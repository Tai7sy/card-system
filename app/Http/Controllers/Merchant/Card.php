<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spccbfb6, $sp62ca4e = false, $sp5ddc3c = false, $spbe9b1a = false) { $sp479bde = $this->authQuery($spccbfb6, \App\Card::class)->with(array('product' => function ($sp479bde) { $sp479bde->select(array('id', 'name')); })); $sp6f5fd7 = $spccbfb6->input('search', false); $spc4b2f5 = $spccbfb6->input('val', false); if ($sp6f5fd7 && $spc4b2f5) { if ($sp6f5fd7 == 'id') { $sp479bde->where('id', $spc4b2f5); } else { $sp479bde->where($sp6f5fd7, 'like', '%' . $spc4b2f5 . '%'); } } $sp76eadf = (int) $spccbfb6->input('category_id'); $spa981f6 = $spccbfb6->input('product_id', -1); if ($sp76eadf > 0) { if ($spa981f6 > 0) { $sp479bde->where('product_id', $spa981f6); } else { $sp479bde->whereHas('product', function ($sp479bde) use($sp76eadf) { $sp479bde->where('category_id', $sp76eadf); }); } } $spfe6f53 = $spccbfb6->input('status'); if (strlen($spfe6f53)) { $sp479bde->whereIn('status', explode(',', $spfe6f53)); } $sp233e56 = (int) $spccbfb6->input('onlyCanSell'); if ($sp233e56) { $sp479bde->whereRaw('`count_all`>`count_sold`'); } $sp55be16 = $spccbfb6->input('type'); if (strlen($sp55be16)) { $sp479bde->whereIn('type', explode(',', $sp55be16)); } $spa077d8 = $spccbfb6->input('trashed') === 'true'; if ($spa077d8) { $sp479bde->onlyTrashed(); } if ($sp5ddc3c === true) { if ($spa077d8) { $sp479bde->forceDelete(); } else { \App\Card::_trash($sp479bde); } return Response::success(); } else { if ($spa077d8 && $spbe9b1a === true) { \App\Card::_restore($sp479bde); return Response::success(); } else { $sp479bde->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp62ca4e === true) { $sp67d951 = ''; $sp479bde->chunk(100, function ($spb6331b) use(&$sp67d951) { foreach ($spb6331b as $sp8bda65) { $sp67d951 .= $sp8bda65->card . '
'; } }); $sp76b960 = 'export_cards_' . $this->getUserIdOrFail($spccbfb6) . '_' . date('YmdHis') . '.txt'; $sp95ef3b = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp76b960), 'Content-Length' => strlen($sp67d951)); return response()->make($sp67d951, 200, $sp95ef3b); } $sp1e473f = (int) $spccbfb6->input('current_page', 1); $sped1e1d = (int) $spccbfb6->input('per_page', 20); $sp7d3bbd = $sp479bde->paginate($sped1e1d, array('*'), 'page', $sp1e473f); return Response::success($sp7d3bbd); } } } function export(Request $spccbfb6) { return self::get($spccbfb6, true); } function trash(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string')); $spdf2438 = $spccbfb6->post('ids'); $sp479bde = $this->authQuery($spccbfb6, \App\Card::class)->whereIn('id', explode(',', $spdf2438)); \App\Card::_trash($sp479bde); return Response::success(); } function restoreTrashed(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string')); $spdf2438 = $spccbfb6->post('ids'); $sp479bde = $this->authQuery($spccbfb6, \App\Card::class)->whereIn('id', explode(',', $spdf2438)); \App\Card::_restore($sp479bde); return Response::success(); } function deleteTrashed(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string')); $spdf2438 = $spccbfb6->post('ids'); $this->authQuery($spccbfb6, \App\Card::class)->whereIn('id', explode(',', $spdf2438))->forceDelete(); return Response::success(); } function deleteAll(Request $spccbfb6) { return $this->get($spccbfb6, false, true); } function restoreAll(Request $spccbfb6) { return $this->get($spccbfb6, false, false, true); } function add(Request $spccbfb6) { $spa981f6 = (int) $spccbfb6->post('product_id'); $spb6331b = $spccbfb6->post('card'); $sp55be16 = (int) $spccbfb6->post('type', \App\Card::TYPE_ONETIME); $sp0d949b = $spccbfb6->post('is_check') === 'true'; if (str_contains($spb6331b, '<') || str_contains($spb6331b, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spe58da5 = $this->getUserIdOrFail($spccbfb6); $spfd2bc7 = $this->authQuery($spccbfb6, \App\Product::class)->where('id', $spa981f6); $spfd2bc7->firstOrFail(array('id')); if ($sp55be16 === \App\Card::TYPE_REPEAT) { if ($sp0d949b) { if (\App\Card::where('product_id', $spa981f6)->where('card', $spb6331b)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp8bda65 = new \App\Card(array('user_id' => $spe58da5, 'product_id' => $spa981f6, 'card' => $spb6331b, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spccbfb6->post('count_all', 1))); if ($sp8bda65->count_all < 1 || $sp8bda65->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($spfd2bc7, $sp8bda65) { $sp8bda65->saveOrFail(); $sp886a9b = $spfd2bc7->lockForUpdate()->firstOrFail(); $sp886a9b->count_all += $sp8bda65->count_all; $sp886a9b->saveOrFail(); return Response::success(); }); } else { $spdbb01a = explode('
', $spb6331b); $specb55a = count($spdbb01a); $sp7b946f = 50000; if ($specb55a > $sp7b946f) { return Response::fail('每次添加不能超过 ' . $sp7b946f . ' 张'); } $sp9dd5bc = array(); if ($sp0d949b) { $sp74c76b = \App\Card::where('user_id', $spe58da5)->where('product_id', $spa981f6)->get(array('card'))->all(); foreach ($sp74c76b as $spb29acf) { $sp9dd5bc[] = $spb29acf['card']; } } $spa7514a = array(); $spfe473d = 0; for ($spa4cc2a = 0; $spa4cc2a < $specb55a; $spa4cc2a++) { $sp23ca94 = trim($spdbb01a[$spa4cc2a]); if (strlen($sp23ca94) < 1) { continue; } if (strlen($sp23ca94) > 255) { return Response::fail('第 ' . $spa4cc2a . ' 张卡密 ' . $sp23ca94 . ' 长度错误<br>卡密最大长度为255'); } if ($sp0d949b) { if (in_array($sp23ca94, $sp9dd5bc)) { continue; } $sp9dd5bc[] = $sp23ca94; } $spa7514a[] = array('user_id' => $spe58da5, 'product_id' => $spa981f6, 'card' => $sp23ca94, 'type' => \App\Card::TYPE_ONETIME); $spfe473d++; } if ($spfe473d === 0) { return Response::success(); } return DB::transaction(function () use($spfd2bc7, $spa7514a, $spfe473d) { \App\Card::insert($spa7514a); $sp886a9b = $spfd2bc7->lockForUpdate()->firstOrFail(); $sp886a9b->count_all += $spfe473d; $sp886a9b->saveOrFail(); return Response::success(); }); } } function edit(Request $spccbfb6) { $spbf68a1 = (int) $spccbfb6->post('id'); $sp8bda65 = $this->authQuery($spccbfb6, \App\Card::class)->findOrFail($spbf68a1); if ($sp8bda65) { $sp980ea6 = $spccbfb6->post('card'); $sp55be16 = (int) $spccbfb6->post('type', \App\Card::TYPE_ONETIME); $spb74853 = (int) $spccbfb6->post('count_all', 1); return DB::transaction(function () use($sp8bda65, $sp980ea6, $sp55be16, $spb74853) { $sp8bda65 = \App\Card::where('id', $sp8bda65->id)->lockForUpdate()->firstOrFail(); $sp8bda65->card = $sp980ea6; $sp8bda65->type = $sp55be16; if ($sp8bda65->type === \App\Card::TYPE_REPEAT) { if ($spb74853 < $sp8bda65->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spb74853 < 1 || $spb74853 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp8bda65->count_all = $spb74853; } else { $sp8bda65->count_all = 1; } $sp8bda65->saveOrFail(); $sp886a9b = $sp8bda65->product()->lockForUpdate()->firstOrFail(); $sp886a9b->count_all -= $sp8bda65->count_all; $sp886a9b->count_all += $spb74853; $sp886a9b->saveOrFail(); return Response::success(); }); } return Response::success(); } }