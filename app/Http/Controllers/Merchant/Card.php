<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp0aae4c, $spba6f71 = false, $sp6b9f27 = false, $spea6976 = false) { $spb0a50e = $this->authQuery($sp0aae4c, \App\Card::class)->with(array('product' => function ($spb0a50e) { $spb0a50e->select(array('id', 'name')); })); $spb66be1 = $sp0aae4c->input('search', false); $spc82c62 = $sp0aae4c->input('val', false); if ($spb66be1 && $spc82c62) { if ($spb66be1 == 'id') { $spb0a50e->where('id', $spc82c62); } else { $spb0a50e->where($spb66be1, 'like', '%' . $spc82c62 . '%'); } } $sp18887c = (int) $sp0aae4c->input('category_id'); $sp2baf03 = $sp0aae4c->input('product_id', -1); if ($sp18887c > 0) { if ($sp2baf03 > 0) { $spb0a50e->where('product_id', $sp2baf03); } else { $spb0a50e->whereHas('product', function ($spb0a50e) use($sp18887c) { $spb0a50e->where('category_id', $sp18887c); }); } } $sp2e8268 = $sp0aae4c->input('status'); if (strlen($sp2e8268)) { $spb0a50e->whereIn('status', explode(',', $sp2e8268)); } $sp230976 = (int) $sp0aae4c->input('onlyCanSell'); if ($sp230976) { $spb0a50e->whereRaw('`count_all`>`count_sold`'); } $spaabe45 = $sp0aae4c->input('type'); if (strlen($spaabe45)) { $spb0a50e->whereIn('type', explode(',', $spaabe45)); } $sp8cb711 = $sp0aae4c->input('trashed') === 'true'; if ($sp8cb711) { $spb0a50e->onlyTrashed(); } if ($sp6b9f27 === true) { if ($sp8cb711) { $spb0a50e->forceDelete(); } else { \App\Card::_trash($spb0a50e); } return Response::success(); } else { if ($sp8cb711 && $spea6976 === true) { \App\Card::_restore($spb0a50e); return Response::success(); } else { $spb0a50e->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spba6f71 === true) { $spf10a9b = ''; $spb0a50e->chunk(100, function ($sp5d4a61) use(&$spf10a9b) { foreach ($sp5d4a61 as $spcf055a) { $spf10a9b .= $spcf055a->card . '
'; } }); $sp0ba917 = 'export_cards_' . $this->getUserIdOrFail($sp0aae4c) . '_' . date('YmdHis') . '.txt'; $sp401ae7 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp0ba917), 'Content-Length' => strlen($spf10a9b)); return response()->make($spf10a9b, 200, $sp401ae7); } $sp35a866 = $sp0aae4c->input('current_page', 1); $spa0426f = $sp0aae4c->input('per_page', 20); $sp4e4cfe = $spb0a50e->paginate($spa0426f, array('*'), 'page', $sp35a866); return Response::success($sp4e4cfe); } } } function export(Request $sp0aae4c) { return self::get($sp0aae4c, true); } function trash(Request $sp0aae4c) { $this->validate($sp0aae4c, array('ids' => 'required|string')); $spcffd00 = $sp0aae4c->post('ids'); $spb0a50e = $this->authQuery($sp0aae4c, \App\Card::class)->whereIn('id', explode(',', $spcffd00)); \App\Card::_trash($spb0a50e); return Response::success(); } function restoreTrashed(Request $sp0aae4c) { $this->validate($sp0aae4c, array('ids' => 'required|string')); $spcffd00 = $sp0aae4c->post('ids'); $spb0a50e = $this->authQuery($sp0aae4c, \App\Card::class)->whereIn('id', explode(',', $spcffd00)); \App\Card::_restore($spb0a50e); return Response::success(); } function deleteTrashed(Request $sp0aae4c) { $this->validate($sp0aae4c, array('ids' => 'required|string')); $spcffd00 = $sp0aae4c->post('ids'); $this->authQuery($sp0aae4c, \App\Card::class)->whereIn('id', explode(',', $spcffd00))->forceDelete(); return Response::success(); } function deleteAll(Request $sp0aae4c) { return $this->get($sp0aae4c, false, true); } function restoreAll(Request $sp0aae4c) { return $this->get($sp0aae4c, false, false, true); } function add(Request $sp0aae4c) { $sp2baf03 = (int) $sp0aae4c->post('product_id'); $sp5d4a61 = $sp0aae4c->post('card'); $spaabe45 = (int) $sp0aae4c->post('type', \App\Card::TYPE_ONETIME); $spe4de2e = $sp0aae4c->post('is_check') === 'true'; if (str_contains($sp5d4a61, '<') || str_contains($sp5d4a61, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp9935c9 = $this->getUserIdOrFail($sp0aae4c); $sp40605e = $this->authQuery($sp0aae4c, \App\Product::class)->where('id', $sp2baf03); $sp40605e->firstOrFail(array('id')); if ($spaabe45 === \App\Card::TYPE_REPEAT) { if ($spe4de2e) { if (\App\Card::where('product_id', $sp2baf03)->where('card', $sp5d4a61)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spcf055a = new \App\Card(array('user_id' => $sp9935c9, 'product_id' => $sp2baf03, 'card' => $sp5d4a61, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp0aae4c->post('count_all', 1))); if ($spcf055a->count_all < 1 || $spcf055a->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp40605e, $spcf055a) { $spcf055a->saveOrFail(); $spddd5a8 = $sp40605e->lockForUpdate()->firstOrFail(); $spddd5a8->buy_max = 1; $spddd5a8->count_all += $spcf055a->count_all; $spddd5a8->saveOrFail(); return Response::success(); }); } else { $sp023092 = explode('
', $sp5d4a61); $sp535688 = count($sp023092); $sp53796f = 500; if ($sp535688 > $sp53796f) { return Response::fail('每次添加不能超过 ' . $sp53796f . ' 张'); } $spe2a8a4 = array(); if ($spe4de2e) { $sp96cdf6 = \App\Card::where('user_id', $sp9935c9)->where('product_id', $sp2baf03)->get(array('card'))->all(); foreach ($sp96cdf6 as $sp288691) { $spe2a8a4[] = $sp288691['card']; } } $spb9fc84 = array(); $sp01a657 = 0; for ($spda68a1 = 0; $spda68a1 < $sp535688; $spda68a1++) { $spcf055a = trim($sp023092[$spda68a1]); if (strlen($spcf055a) < 1) { continue; } if (strlen($spcf055a) > 255) { return Response::fail('第 ' . $spda68a1 . ' 张卡密 ' . $spcf055a . ' 长度错误<br>卡密最大长度为255'); } if ($spe4de2e) { if (in_array($spcf055a, $spe2a8a4)) { continue; } $spe2a8a4[] = $spcf055a; } $spb9fc84[] = array('user_id' => $sp9935c9, 'product_id' => $sp2baf03, 'card' => $spcf055a, 'type' => \App\Card::TYPE_ONETIME); $sp01a657++; } if ($sp01a657 === 0) { return Response::success(); } return DB::transaction(function () use($sp40605e, $spb9fc84, $sp01a657) { \App\Card::insert($spb9fc84); $spddd5a8 = $sp40605e->lockForUpdate()->firstOrFail(); $spddd5a8->count_all += $sp01a657; $spddd5a8->saveOrFail(); return Response::success(); }); } } function edit(Request $sp0aae4c) { $spaaa5c2 = (int) $sp0aae4c->post('id'); $spcf055a = $this->authQuery($sp0aae4c, \App\Card::class)->findOrFail($spaaa5c2); if ($spcf055a) { $sp99753d = $sp0aae4c->post('card'); $spaabe45 = (int) $sp0aae4c->post('type', \App\Card::TYPE_ONETIME); $sp8826db = (int) $sp0aae4c->post('count_all', 1); return DB::transaction(function () use($spcf055a, $sp99753d, $spaabe45, $sp8826db) { $spcf055a = \App\Card::where('id', $spcf055a->id)->lockForUpdate()->firstOrFail(); $spcf055a->card = $sp99753d; $spcf055a->type = $spaabe45; if ($spcf055a->type === \App\Card::TYPE_REPEAT) { if ($sp8826db < $spcf055a->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp8826db < 1 || $sp8826db > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spcf055a->count_all = $sp8826db; } else { $spcf055a->count_all = 1; } $spcf055a->saveOrFail(); $spddd5a8 = $spcf055a->product()->lockForUpdate()->firstOrFail(); if ($spcf055a->type === \App\Card::TYPE_REPEAT) { $spddd5a8->buy_max = 1; } $spddd5a8->count_all -= $spcf055a->count_all; $spddd5a8->count_all += $sp8826db; $spddd5a8->saveOrFail(); return Response::success(); }); } return Response::success(); } }