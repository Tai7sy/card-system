<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp7fb11a, $sp35a9f8 = false, $sp257444 = false, $sp876451 = false) { $spbea74d = $this->authQuery($sp7fb11a, \App\Card::class)->with(array('product' => function ($spbea74d) { $spbea74d->select(array('id', 'name')); })); $sp952760 = $sp7fb11a->input('search', false); $sp574a8e = $sp7fb11a->input('val', false); if ($sp952760 && $sp574a8e) { if ($sp952760 == 'id') { $spbea74d->where('id', $sp574a8e); } else { $spbea74d->where($sp952760, 'like', '%' . $sp574a8e . '%'); } } $sp2dac50 = (int) $sp7fb11a->input('category_id'); $spac20cb = $sp7fb11a->input('product_id', -1); if ($sp2dac50 > 0) { if ($spac20cb > 0) { $spbea74d->where('product_id', $spac20cb); } else { $spbea74d->whereHas('product', function ($spbea74d) use($sp2dac50) { $spbea74d->where('category_id', $sp2dac50); }); } } $sp964b7d = $sp7fb11a->input('status'); if (strlen($sp964b7d)) { $spbea74d->whereIn('status', explode(',', $sp964b7d)); } $sp643866 = (int) $sp7fb11a->input('onlyCanSell'); if ($sp643866) { $spbea74d->whereRaw('`count_all`>`count_sold`'); } $sp6d9a17 = $sp7fb11a->input('type'); if (strlen($sp6d9a17)) { $spbea74d->whereIn('type', explode(',', $sp6d9a17)); } $sp152c6d = $sp7fb11a->input('trashed') === 'true'; if ($sp152c6d) { $spbea74d->onlyTrashed(); } if ($sp257444 === true) { if ($sp152c6d) { $spbea74d->forceDelete(); } else { \App\Card::_trash($spbea74d); } return Response::success(); } else { if ($sp152c6d && $sp876451 === true) { \App\Card::_restore($spbea74d); return Response::success(); } else { $spbea74d->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp35a9f8 === true) { $spcbe631 = ''; $spbea74d->chunk(100, function ($spe232c0) use(&$spcbe631) { foreach ($spe232c0 as $spc2cc9a) { $spcbe631 .= $spc2cc9a->card . '
'; } }); $sp785577 = 'export_cards_' . $this->getUserIdOrFail($sp7fb11a) . '_' . date('YmdHis') . '.txt'; $sp5899b8 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp785577), 'Content-Length' => strlen($spcbe631)); return response()->make($spcbe631, 200, $sp5899b8); } $sp916b0f = $sp7fb11a->input('current_page', 1); $spb6941e = $sp7fb11a->input('per_page', 20); $sp90a30c = $spbea74d->paginate($spb6941e, array('*'), 'page', $sp916b0f); return Response::success($sp90a30c); } } } function export(Request $sp7fb11a) { return self::get($sp7fb11a, true); } function trash(Request $sp7fb11a) { $this->validate($sp7fb11a, array('ids' => 'required|string')); $spee7cac = $sp7fb11a->post('ids'); $spbea74d = $this->authQuery($sp7fb11a, \App\Card::class)->whereIn('id', explode(',', $spee7cac)); \App\Card::_trash($spbea74d); return Response::success(); } function restoreTrashed(Request $sp7fb11a) { $this->validate($sp7fb11a, array('ids' => 'required|string')); $spee7cac = $sp7fb11a->post('ids'); $spbea74d = $this->authQuery($sp7fb11a, \App\Card::class)->whereIn('id', explode(',', $spee7cac)); \App\Card::_restore($spbea74d); return Response::success(); } function deleteTrashed(Request $sp7fb11a) { $this->validate($sp7fb11a, array('ids' => 'required|string')); $spee7cac = $sp7fb11a->post('ids'); $this->authQuery($sp7fb11a, \App\Card::class)->whereIn('id', explode(',', $spee7cac))->forceDelete(); return Response::success(); } function deleteAll(Request $sp7fb11a) { return $this->get($sp7fb11a, false, true); } function restoreAll(Request $sp7fb11a) { return $this->get($sp7fb11a, false, false, true); } function add(Request $sp7fb11a) { $spac20cb = (int) $sp7fb11a->post('product_id'); $spe232c0 = $sp7fb11a->post('card'); $sp6d9a17 = (int) $sp7fb11a->post('type', \App\Card::TYPE_ONETIME); $sp2dd44a = $sp7fb11a->post('is_check') === 'true'; if (str_contains($spe232c0, '<') || str_contains($spe232c0, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp95525e = $this->getUserIdOrFail($sp7fb11a); $sp0a2867 = $this->authQuery($sp7fb11a, \App\Product::class)->where('id', $spac20cb); $sp0a2867->firstOrFail(array('id')); if ($sp6d9a17 === \App\Card::TYPE_REPEAT) { if ($sp2dd44a) { if (\App\Card::where('product_id', $spac20cb)->where('card', $spe232c0)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spc2cc9a = new \App\Card(array('user_id' => $sp95525e, 'product_id' => $spac20cb, 'card' => $spe232c0, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp7fb11a->post('count_all', 1))); if ($spc2cc9a->count_all < 1 || $spc2cc9a->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp0a2867, $spc2cc9a) { $spc2cc9a->saveOrFail(); $spb0646a = $sp0a2867->lockForUpdate()->firstOrFail(); $spb0646a->buy_max = 1; $spb0646a->count_all += $spc2cc9a->count_all; $spb0646a->saveOrFail(); return Response::success(); }); } else { $sp8d3776 = explode('
', $spe232c0); $spdf6bf2 = count($sp8d3776); $spb17fd5 = 500; if ($spdf6bf2 > $spb17fd5) { return Response::fail('每次添加不能超过 ' . $spb17fd5 . ' 张'); } $spe90770 = array(); if ($sp2dd44a) { $spe503c5 = \App\Card::where('user_id', $sp95525e)->where('product_id', $spac20cb)->get(array('card'))->all(); foreach ($spe503c5 as $spc7411b) { $spe90770[] = $spc7411b['card']; } } $sp7b79bc = array(); $sp46d7ab = 0; for ($sp677ef3 = 0; $sp677ef3 < $spdf6bf2; $sp677ef3++) { $spc2cc9a = trim($sp8d3776[$sp677ef3]); if (strlen($spc2cc9a) < 1) { continue; } if (strlen($spc2cc9a) > 255) { return Response::fail('第 ' . $sp677ef3 . ' 张卡密 ' . $spc2cc9a . ' 长度错误<br>卡密最大长度为255'); } if ($sp2dd44a) { if (in_array($spc2cc9a, $spe90770)) { continue; } $spe90770[] = $spc2cc9a; } $sp7b79bc[] = array('user_id' => $sp95525e, 'product_id' => $spac20cb, 'card' => $spc2cc9a, 'type' => \App\Card::TYPE_ONETIME); $sp46d7ab++; } if ($sp46d7ab === 0) { return Response::success(); } return DB::transaction(function () use($sp0a2867, $sp7b79bc, $sp46d7ab) { \App\Card::insert($sp7b79bc); $spb0646a = $sp0a2867->lockForUpdate()->firstOrFail(); $spb0646a->count_all += $sp46d7ab; $spb0646a->saveOrFail(); return Response::success(); }); } } function edit(Request $sp7fb11a) { $spf448d5 = (int) $sp7fb11a->post('id'); $spc2cc9a = $this->authQuery($sp7fb11a, \App\Card::class)->findOrFail($spf448d5); if ($spc2cc9a) { $spcba121 = $sp7fb11a->post('card'); $sp6d9a17 = (int) $sp7fb11a->post('type', \App\Card::TYPE_ONETIME); $sp620535 = (int) $sp7fb11a->post('count_all', 1); return DB::transaction(function () use($spc2cc9a, $spcba121, $sp6d9a17, $sp620535) { $spc2cc9a = \App\Card::where('id', $spc2cc9a->id)->lockForUpdate()->firstOrFail(); $spc2cc9a->card = $spcba121; $spc2cc9a->type = $sp6d9a17; if ($spc2cc9a->type === \App\Card::TYPE_REPEAT) { if ($sp620535 < $spc2cc9a->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp620535 < 1 || $sp620535 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spc2cc9a->count_all = $sp620535; } else { $spc2cc9a->count_all = 1; } $spc2cc9a->saveOrFail(); $spb0646a = $spc2cc9a->product()->lockForUpdate()->firstOrFail(); if ($spc2cc9a->type === \App\Card::TYPE_REPEAT) { $spb0646a->buy_max = 1; } $spb0646a->count_all -= $spc2cc9a->count_all; $spb0646a->count_all += $sp620535; $spb0646a->saveOrFail(); return Response::success(); }); } return Response::success(); } }