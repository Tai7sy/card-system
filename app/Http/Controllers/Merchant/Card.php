<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp7f7104, $spbc467f = false, $spc1d3b2 = false, $sp3d8f3d = false) { $spbec213 = $this->authQuery($sp7f7104, \App\Card::class)->with(array('product' => function ($spbec213) { $spbec213->select(array('id', 'name')); })); $spad233c = $sp7f7104->input('search', false); $spaefd46 = $sp7f7104->input('val', false); if ($spad233c && $spaefd46) { if ($spad233c == 'id') { $spbec213->where('id', $spaefd46); } else { $spbec213->where($spad233c, 'like', '%' . $spaefd46 . '%'); } } $sp92ffbb = (int) $sp7f7104->input('category_id'); $sp727288 = $sp7f7104->input('product_id', -1); if ($sp92ffbb > 0) { if ($sp727288 > 0) { $spbec213->where('product_id', $sp727288); } else { $spbec213->whereHas('product', function ($spbec213) use($sp92ffbb) { $spbec213->where('category_id', $sp92ffbb); }); } } $spe7fff0 = $sp7f7104->input('status'); if (strlen($spe7fff0)) { $spbec213->whereIn('status', explode(',', $spe7fff0)); } $sp144e5a = (int) $sp7f7104->input('onlyCanSell'); if ($sp144e5a) { $spbec213->whereRaw('`count_all`>`count_sold`'); } $sp1a26a5 = $sp7f7104->input('type'); if (strlen($sp1a26a5)) { $spbec213->whereIn('type', explode(',', $sp1a26a5)); } $sp04af53 = $sp7f7104->input('trashed') === 'true'; if ($sp04af53) { $spbec213->onlyTrashed(); } if ($spc1d3b2 === true) { if ($sp04af53) { $spbec213->forceDelete(); } else { \App\Card::_trash($spbec213); } return Response::success(); } else { if ($sp04af53 && $sp3d8f3d === true) { \App\Card::_restore($spbec213); return Response::success(); } else { $spbec213->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spbc467f === true) { $spa70430 = ''; $spbec213->chunk(100, function ($spefb732) use(&$spa70430) { foreach ($spefb732 as $sp5eba29) { $spa70430 .= $sp5eba29->card . '
'; } }); $sp7df801 = 'export_cards_' . $this->getUserIdOrFail($sp7f7104) . '_' . date('YmdHis') . '.txt'; $sp0a5e42 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp7df801), 'Content-Length' => strlen($spa70430)); return response()->make($spa70430, 200, $sp0a5e42); } $spfe8869 = (int) $sp7f7104->input('current_page', 1); $spec5082 = (int) $sp7f7104->input('per_page', 20); $spa229b5 = $spbec213->paginate($spec5082, array('*'), 'page', $spfe8869); return Response::success($spa229b5); } } } function export(Request $sp7f7104) { return self::get($sp7f7104, true); } function trash(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string')); $sp70cf7b = $sp7f7104->post('ids'); $spbec213 = $this->authQuery($sp7f7104, \App\Card::class)->whereIn('id', explode(',', $sp70cf7b)); \App\Card::_trash($spbec213); return Response::success(); } function restoreTrashed(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string')); $sp70cf7b = $sp7f7104->post('ids'); $spbec213 = $this->authQuery($sp7f7104, \App\Card::class)->whereIn('id', explode(',', $sp70cf7b)); \App\Card::_restore($spbec213); return Response::success(); } function deleteTrashed(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string')); $sp70cf7b = $sp7f7104->post('ids'); $this->authQuery($sp7f7104, \App\Card::class)->whereIn('id', explode(',', $sp70cf7b))->forceDelete(); return Response::success(); } function deleteAll(Request $sp7f7104) { return $this->get($sp7f7104, false, true); } function restoreAll(Request $sp7f7104) { return $this->get($sp7f7104, false, false, true); } function add(Request $sp7f7104) { $sp727288 = (int) $sp7f7104->post('product_id'); $spefb732 = $sp7f7104->post('card'); $sp1a26a5 = (int) $sp7f7104->post('type', \App\Card::TYPE_ONETIME); $spddf36a = $sp7f7104->post('is_check') === 'true'; if (str_contains($spefb732, '<') || str_contains($spefb732, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp279789 = $this->getUserIdOrFail($sp7f7104); $sp71460c = $this->authQuery($sp7f7104, \App\Product::class)->where('id', $sp727288); $sp71460c->firstOrFail(array('id')); if ($sp1a26a5 === \App\Card::TYPE_REPEAT) { if ($spddf36a) { if (\App\Card::where('product_id', $sp727288)->where('card', $spefb732)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp5eba29 = new \App\Card(array('user_id' => $sp279789, 'product_id' => $sp727288, 'card' => $spefb732, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp7f7104->post('count_all', 1))); if ($sp5eba29->count_all < 1 || $sp5eba29->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp71460c, $sp5eba29) { $sp5eba29->saveOrFail(); $spfa410d = $sp71460c->lockForUpdate()->firstOrFail(); $spfa410d->count_all += $sp5eba29->count_all; $spfa410d->saveOrFail(); return Response::success(); }); } else { $sp2e76fb = explode('
', $spefb732); $sp685bea = count($sp2e76fb); $sp82dd89 = 50000; if ($sp685bea > $sp82dd89) { return Response::fail('每次添加不能超过 ' . $sp82dd89 . ' 张'); } $sp0e16c9 = array(); if ($spddf36a) { $sp136e97 = \App\Card::where('user_id', $sp279789)->where('product_id', $sp727288)->get(array('card'))->all(); foreach ($sp136e97 as $spb49d37) { $sp0e16c9[] = $spb49d37['card']; } } $sp281e16 = array(); $sp73d661 = 0; for ($spf3a567 = 0; $spf3a567 < $sp685bea; $spf3a567++) { $spe13e89 = trim($sp2e76fb[$spf3a567]); if (strlen($spe13e89) < 1) { continue; } if (strlen($spe13e89) > 255) { return Response::fail('第 ' . $spf3a567 . ' 张卡密 ' . $spe13e89 . ' 长度错误<br>卡密最大长度为255'); } if ($spddf36a) { if (in_array($spe13e89, $sp0e16c9)) { continue; } $sp0e16c9[] = $spe13e89; } $sp281e16[] = array('user_id' => $sp279789, 'product_id' => $sp727288, 'card' => $spe13e89, 'type' => \App\Card::TYPE_ONETIME); $sp73d661++; } if ($sp73d661 === 0) { return Response::success(); } return DB::transaction(function () use($sp71460c, $sp281e16, $sp73d661) { \App\Card::insert($sp281e16); $spfa410d = $sp71460c->lockForUpdate()->firstOrFail(); $spfa410d->count_all += $sp73d661; $spfa410d->saveOrFail(); return Response::success(); }); } } function edit(Request $sp7f7104) { $sp1beabb = (int) $sp7f7104->post('id'); $sp5eba29 = $this->authQuery($sp7f7104, \App\Card::class)->findOrFail($sp1beabb); if ($sp5eba29) { $sp81399a = $sp7f7104->post('card'); $sp1a26a5 = (int) $sp7f7104->post('type', \App\Card::TYPE_ONETIME); $sp55dc3f = (int) $sp7f7104->post('count_all', 1); return DB::transaction(function () use($sp5eba29, $sp81399a, $sp1a26a5, $sp55dc3f) { $sp5eba29 = \App\Card::where('id', $sp5eba29->id)->lockForUpdate()->firstOrFail(); $sp5eba29->card = $sp81399a; $sp5eba29->type = $sp1a26a5; if ($sp5eba29->type === \App\Card::TYPE_REPEAT) { if ($sp55dc3f < $sp5eba29->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp55dc3f < 1 || $sp55dc3f > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp5eba29->count_all = $sp55dc3f; } else { $sp5eba29->count_all = 1; } $sp5eba29->saveOrFail(); $spfa410d = $sp5eba29->product()->lockForUpdate()->firstOrFail(); $spfa410d->count_all -= $sp5eba29->count_all; $spfa410d->count_all += $sp55dc3f; $spfa410d->saveOrFail(); return Response::success(); }); } return Response::success(); } }