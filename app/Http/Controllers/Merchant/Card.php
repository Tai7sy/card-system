<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spbaac90, $spab49e7 = false, $sp1ef0cd = false, $spfd65bd = false) { $sp50919b = $this->authQuery($spbaac90, \App\Card::class)->with(array('product' => function ($sp50919b) { $sp50919b->select(array('id', 'name')); })); $sp4d9eeb = $spbaac90->input('search', false); $spbd7375 = $spbaac90->input('val', false); if ($sp4d9eeb && $spbd7375) { if ($sp4d9eeb == 'id') { $sp50919b->where('id', $spbd7375); } else { $sp50919b->where($sp4d9eeb, 'like', '%' . $spbd7375 . '%'); } } $sp35f37e = (int) $spbaac90->input('category_id'); $sp1849cc = $spbaac90->input('product_id', -1); if ($sp35f37e > 0) { if ($sp1849cc > 0) { $sp50919b->where('product_id', $sp1849cc); } else { $sp50919b->whereHas('product', function ($sp50919b) use($sp35f37e) { $sp50919b->where('category_id', $sp35f37e); }); } } $sp646c5e = $spbaac90->input('status'); if (strlen($sp646c5e)) { $sp50919b->whereIn('status', explode(',', $sp646c5e)); } $spfa1745 = (int) $spbaac90->input('onlyCanSell'); if ($spfa1745) { $sp50919b->whereRaw('`count_all`>`count_sold`'); } $sp53ba26 = $spbaac90->input('type'); if (strlen($sp53ba26)) { $sp50919b->whereIn('type', explode(',', $sp53ba26)); } $sp577cf1 = $spbaac90->input('trashed') === 'true'; if ($sp577cf1) { $sp50919b->onlyTrashed(); } if ($sp1ef0cd === true) { if ($sp577cf1) { $sp50919b->forceDelete(); } else { \App\Card::_trash($sp50919b); } return Response::success(); } else { if ($sp577cf1 && $spfd65bd === true) { \App\Card::_restore($sp50919b); return Response::success(); } else { $sp50919b->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spab49e7 === true) { $sp91a4a4 = ''; $sp50919b->chunk(100, function ($sp93fc77) use(&$sp91a4a4) { foreach ($sp93fc77 as $sp836f4b) { $sp91a4a4 .= $sp836f4b->card . '
'; } }); $sp4b0528 = 'export_cards_' . $this->getUserIdOrFail($spbaac90) . '_' . date('YmdHis') . '.txt'; $sp9e3fb1 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp4b0528), 'Content-Length' => strlen($sp91a4a4)); return response()->make($sp91a4a4, 200, $sp9e3fb1); } $spb32f8f = $spbaac90->input('current_page', 1); $sp731c42 = $spbaac90->input('per_page', 20); $spd5d914 = $sp50919b->paginate($sp731c42, array('*'), 'page', $spb32f8f); return Response::success($spd5d914); } } } function export(Request $spbaac90) { return self::get($spbaac90, true); } function trash(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string')); $sp2d798e = $spbaac90->post('ids'); $sp50919b = $this->authQuery($spbaac90, \App\Card::class)->whereIn('id', explode(',', $sp2d798e)); \App\Card::_trash($sp50919b); return Response::success(); } function restoreTrashed(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string')); $sp2d798e = $spbaac90->post('ids'); $sp50919b = $this->authQuery($spbaac90, \App\Card::class)->whereIn('id', explode(',', $sp2d798e)); \App\Card::_restore($sp50919b); return Response::success(); } function deleteTrashed(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string')); $sp2d798e = $spbaac90->post('ids'); $this->authQuery($spbaac90, \App\Card::class)->whereIn('id', explode(',', $sp2d798e))->forceDelete(); return Response::success(); } function deleteAll(Request $spbaac90) { return $this->get($spbaac90, false, true); } function restoreAll(Request $spbaac90) { return $this->get($spbaac90, false, false, true); } function add(Request $spbaac90) { $sp1849cc = (int) $spbaac90->post('product_id'); $sp93fc77 = $spbaac90->post('card'); $sp53ba26 = (int) $spbaac90->post('type', \App\Card::TYPE_ONETIME); $sp7479a4 = $spbaac90->post('is_check') === 'true'; if (str_contains($sp93fc77, '<') || str_contains($sp93fc77, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp45cf7f = $this->getUserIdOrFail($spbaac90); $sp013aae = $this->authQuery($spbaac90, \App\Product::class)->where('id', $sp1849cc); $sp013aae->firstOrFail(array('id')); if ($sp53ba26 === \App\Card::TYPE_REPEAT) { if ($sp7479a4) { if (\App\Card::where('product_id', $sp1849cc)->where('card', $sp93fc77)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp836f4b = new \App\Card(array('user_id' => $sp45cf7f, 'product_id' => $sp1849cc, 'card' => $sp93fc77, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spbaac90->post('count_all', 1))); if ($sp836f4b->count_all < 1 || $sp836f4b->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp013aae, $sp836f4b) { $sp836f4b->saveOrFail(); $sp73d110 = $sp013aae->lockForUpdate()->firstOrFail(); $sp73d110->buy_max = 1; $sp73d110->count_all += $sp836f4b->count_all; $sp73d110->saveOrFail(); return Response::success(); }); } else { $sp221ed7 = explode('
', $sp93fc77); $spc3e7b9 = count($sp221ed7); $sp1a443e = 500; if ($spc3e7b9 > $sp1a443e) { return Response::fail('每次添加不能超过 ' . $sp1a443e . ' 张'); } $spe2d0c4 = array(); if ($sp7479a4) { $spdbd0f0 = \App\Card::where('user_id', $sp45cf7f)->where('product_id', $sp1849cc)->get(array('card'))->all(); foreach ($spdbd0f0 as $sp28f7bc) { $spe2d0c4[] = $sp28f7bc['card']; } } $sp1a2058 = array(); $sp63f1d5 = 0; for ($sp626673 = 0; $sp626673 < $spc3e7b9; $sp626673++) { $sp836f4b = trim($sp221ed7[$sp626673]); if (strlen($sp836f4b) < 1) { continue; } if (strlen($sp836f4b) > 255) { return Response::fail('第 ' . $sp626673 . ' 张卡密 ' . $sp836f4b . ' 长度错误<br>卡密最大长度为255'); } if ($sp7479a4) { if (in_array($sp836f4b, $spe2d0c4)) { continue; } $spe2d0c4[] = $sp836f4b; } $sp1a2058[] = array('user_id' => $sp45cf7f, 'product_id' => $sp1849cc, 'card' => $sp836f4b, 'type' => \App\Card::TYPE_ONETIME); $sp63f1d5++; } if ($sp63f1d5 === 0) { return Response::success(); } return DB::transaction(function () use($sp013aae, $sp1a2058, $sp63f1d5) { \App\Card::insert($sp1a2058); $sp73d110 = $sp013aae->lockForUpdate()->firstOrFail(); $sp73d110->count_all += $sp63f1d5; $sp73d110->saveOrFail(); return Response::success(); }); } } function edit(Request $spbaac90) { $sp1ffc0e = (int) $spbaac90->post('id'); $sp836f4b = $this->authQuery($spbaac90, \App\Card::class)->findOrFail($sp1ffc0e); if ($sp836f4b) { $sp5f0e7b = $spbaac90->post('card'); $sp53ba26 = (int) $spbaac90->post('type', \App\Card::TYPE_ONETIME); $spd47c8e = (int) $spbaac90->post('count_all', 1); return DB::transaction(function () use($sp836f4b, $sp5f0e7b, $sp53ba26, $spd47c8e) { $sp836f4b = \App\Card::where('id', $sp836f4b->id)->lockForUpdate()->firstOrFail(); $sp836f4b->card = $sp5f0e7b; $sp836f4b->type = $sp53ba26; if ($sp836f4b->type === \App\Card::TYPE_REPEAT) { if ($spd47c8e < $sp836f4b->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spd47c8e < 1 || $spd47c8e > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp836f4b->count_all = $spd47c8e; } else { $sp836f4b->count_all = 1; } $sp836f4b->saveOrFail(); $sp73d110 = $sp836f4b->product()->lockForUpdate()->firstOrFail(); if ($sp836f4b->type === \App\Card::TYPE_REPEAT) { $sp73d110->buy_max = 1; } $sp73d110->count_all -= $sp836f4b->count_all; $sp73d110->count_all += $spd47c8e; $sp73d110->saveOrFail(); return Response::success(); }); } return Response::success(); } }