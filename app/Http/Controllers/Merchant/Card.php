<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spfb5ae3, $spe873f3 = false, $sp5fb123 = false, $sp531873 = false) { $sp32b0d3 = $this->authQuery($spfb5ae3, \App\Card::class)->with(array('product' => function ($sp32b0d3) { $sp32b0d3->select(array('id', 'name')); })); $spb59184 = $spfb5ae3->input('search', false); $sp809177 = $spfb5ae3->input('val', false); if ($spb59184 && $sp809177) { if ($spb59184 == 'id') { $sp32b0d3->where('id', $sp809177); } else { $sp32b0d3->where($spb59184, 'like', '%' . $sp809177 . '%'); } } $sp66458a = (int) $spfb5ae3->input('category_id'); $sp3edfae = $spfb5ae3->input('product_id', -1); if ($sp66458a > 0) { if ($sp3edfae > 0) { $sp32b0d3->where('product_id', $sp3edfae); } else { $sp32b0d3->whereHas('product', function ($sp32b0d3) use($sp66458a) { $sp32b0d3->where('category_id', $sp66458a); }); } } $spb35169 = $spfb5ae3->input('status'); if (strlen($spb35169)) { $sp32b0d3->whereIn('status', explode(',', $spb35169)); } $sp576e4f = (int) $spfb5ae3->input('onlyCanSell'); if ($sp576e4f) { $sp32b0d3->whereRaw('`count_all`>`count_sold`'); } $sp0e721b = $spfb5ae3->input('type'); if (strlen($sp0e721b)) { $sp32b0d3->whereIn('type', explode(',', $sp0e721b)); } $spebc4c4 = $spfb5ae3->input('trashed') === 'true'; if ($spebc4c4) { $sp32b0d3->onlyTrashed(); } if ($sp5fb123 === true) { if ($spebc4c4) { $sp32b0d3->forceDelete(); } else { \App\Card::_trash($sp32b0d3); } return Response::success(); } else { if ($spebc4c4 && $sp531873 === true) { \App\Card::_restore($sp32b0d3); return Response::success(); } else { $sp32b0d3->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spe873f3 === true) { $spf76fd1 = ''; $sp32b0d3->chunk(100, function ($spcbd80a) use(&$spf76fd1) { foreach ($spcbd80a as $sp62d3f6) { $spf76fd1 .= $sp62d3f6->card . '
'; } }); $spfd8e44 = 'export_cards_' . $this->getUserIdOrFail($spfb5ae3) . '_' . date('YmdHis') . '.txt'; $sp5ab84b = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spfd8e44), 'Content-Length' => strlen($spf76fd1)); return response()->make($spf76fd1, 200, $sp5ab84b); } $spd43f26 = $spfb5ae3->input('current_page', 1); $spce7281 = $spfb5ae3->input('per_page', 20); $spfa99a5 = $sp32b0d3->paginate($spce7281, array('*'), 'page', $spd43f26); return Response::success($spfa99a5); } } } function export(Request $spfb5ae3) { return self::get($spfb5ae3, true); } function trash(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string')); $speab0da = $spfb5ae3->post('ids'); $sp32b0d3 = $this->authQuery($spfb5ae3, \App\Card::class)->whereIn('id', explode(',', $speab0da)); \App\Card::_trash($sp32b0d3); return Response::success(); } function restoreTrashed(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string')); $speab0da = $spfb5ae3->post('ids'); $sp32b0d3 = $this->authQuery($spfb5ae3, \App\Card::class)->whereIn('id', explode(',', $speab0da)); \App\Card::_restore($sp32b0d3); return Response::success(); } function deleteTrashed(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string')); $speab0da = $spfb5ae3->post('ids'); $this->authQuery($spfb5ae3, \App\Card::class)->whereIn('id', explode(',', $speab0da))->forceDelete(); return Response::success(); } function deleteAll(Request $spfb5ae3) { return $this->get($spfb5ae3, false, true); } function restoreAll(Request $spfb5ae3) { return $this->get($spfb5ae3, false, false, true); } function add(Request $spfb5ae3) { $sp3edfae = (int) $spfb5ae3->post('product_id'); $spcbd80a = $spfb5ae3->post('card'); $sp0e721b = (int) $spfb5ae3->post('type', \App\Card::TYPE_ONETIME); $sp0c80d2 = $spfb5ae3->post('is_check') === 'true'; if (str_contains($spcbd80a, '<') || str_contains($spcbd80a, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp134e80 = $this->getUserIdOrFail($spfb5ae3); $sp3af739 = $this->authQuery($spfb5ae3, \App\Product::class)->where('id', $sp3edfae); $sp3af739->firstOrFail(array('id')); if ($sp0e721b === \App\Card::TYPE_REPEAT) { if ($sp0c80d2) { if (\App\Card::where('product_id', $sp3edfae)->where('card', $spcbd80a)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp62d3f6 = new \App\Card(array('user_id' => $sp134e80, 'product_id' => $sp3edfae, 'card' => $spcbd80a, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spfb5ae3->post('count_all', 1))); if ($sp62d3f6->count_all < 1 || $sp62d3f6->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp3af739, $sp62d3f6) { $sp62d3f6->saveOrFail(); $sp7eba0d = $sp3af739->lockForUpdate()->firstOrFail(); $sp7eba0d->count_all += $sp62d3f6->count_all; $sp7eba0d->saveOrFail(); return Response::success(); }); } else { $spcc54a5 = explode('
', $spcbd80a); $sp9bb0a0 = count($spcc54a5); $sp458c06 = 500; if ($sp9bb0a0 > $sp458c06) { return Response::fail('每次添加不能超过 ' . $sp458c06 . ' 张'); } $sp02b308 = array(); if ($sp0c80d2) { $sp089490 = \App\Card::where('user_id', $sp134e80)->where('product_id', $sp3edfae)->get(array('card'))->all(); foreach ($sp089490 as $sp7e5c42) { $sp02b308[] = $sp7e5c42['card']; } } $spc6f2c6 = array(); $sp22f1df = 0; for ($sp53b67d = 0; $sp53b67d < $sp9bb0a0; $sp53b67d++) { $sp120e45 = trim($spcc54a5[$sp53b67d]); if (strlen($sp120e45) < 1) { continue; } if (strlen($sp120e45) > 255) { return Response::fail('第 ' . $sp53b67d . ' 张卡密 ' . $sp120e45 . ' 长度错误<br>卡密最大长度为255'); } if ($sp0c80d2) { if (in_array($sp120e45, $sp02b308)) { continue; } $sp02b308[] = $sp120e45; } $spc6f2c6[] = array('user_id' => $sp134e80, 'product_id' => $sp3edfae, 'card' => $sp120e45, 'type' => \App\Card::TYPE_ONETIME); $sp22f1df++; } if ($sp22f1df === 0) { return Response::success(); } return DB::transaction(function () use($sp3af739, $spc6f2c6, $sp22f1df) { \App\Card::insert($spc6f2c6); $sp7eba0d = $sp3af739->lockForUpdate()->firstOrFail(); $sp7eba0d->count_all += $sp22f1df; $sp7eba0d->saveOrFail(); return Response::success(); }); } } function edit(Request $spfb5ae3) { $sp0cebcc = (int) $spfb5ae3->post('id'); $sp62d3f6 = $this->authQuery($spfb5ae3, \App\Card::class)->findOrFail($sp0cebcc); if ($sp62d3f6) { $spf266ce = $spfb5ae3->post('card'); $sp0e721b = (int) $spfb5ae3->post('type', \App\Card::TYPE_ONETIME); $sp8afa79 = (int) $spfb5ae3->post('count_all', 1); return DB::transaction(function () use($sp62d3f6, $spf266ce, $sp0e721b, $sp8afa79) { $sp62d3f6 = \App\Card::where('id', $sp62d3f6->id)->lockForUpdate()->firstOrFail(); $sp62d3f6->card = $spf266ce; $sp62d3f6->type = $sp0e721b; if ($sp62d3f6->type === \App\Card::TYPE_REPEAT) { if ($sp8afa79 < $sp62d3f6->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp8afa79 < 1 || $sp8afa79 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp62d3f6->count_all = $sp8afa79; } else { $sp62d3f6->count_all = 1; } $sp62d3f6->saveOrFail(); $sp7eba0d = $sp62d3f6->product()->lockForUpdate()->firstOrFail(); $sp7eba0d->count_all -= $sp62d3f6->count_all; $sp7eba0d->count_all += $sp8afa79; $sp7eba0d->saveOrFail(); return Response::success(); }); } return Response::success(); } }