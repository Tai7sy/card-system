<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp179c14, $sp1c0966 = false, $sp7274ec = false, $sp0ee195 = false) { $sp78fbd3 = $this->authQuery($sp179c14, \App\Card::class)->with(array('product' => function ($sp78fbd3) { $sp78fbd3->select(array('id', 'name')); })); $sp2ae16a = $sp179c14->input('search', false); $sp2fe7b9 = $sp179c14->input('val', false); if ($sp2ae16a && $sp2fe7b9) { if ($sp2ae16a == 'id') { $sp78fbd3->where('id', $sp2fe7b9); } else { $sp78fbd3->where($sp2ae16a, 'like', '%' . $sp2fe7b9 . '%'); } } $sp2521ab = (int) $sp179c14->input('category_id'); $spc00b16 = $sp179c14->input('product_id', -1); if ($sp2521ab > 0) { if ($spc00b16 > 0) { $sp78fbd3->where('product_id', $spc00b16); } else { $sp78fbd3->whereHas('product', function ($sp78fbd3) use($sp2521ab) { $sp78fbd3->where('category_id', $sp2521ab); }); } } $spf783c8 = $sp179c14->input('status'); if (strlen($spf783c8)) { $sp78fbd3->whereIn('status', explode(',', $spf783c8)); } $sp83e483 = (int) $sp179c14->input('onlyCanSell'); if ($sp83e483) { $sp78fbd3->whereRaw('`count_all`>`count_sold`'); } $sp42feb1 = $sp179c14->input('type'); if (strlen($sp42feb1)) { $sp78fbd3->whereIn('type', explode(',', $sp42feb1)); } $sp9c3b38 = $sp179c14->input('trashed') === 'true'; if ($sp9c3b38) { $sp78fbd3->onlyTrashed(); } if ($sp7274ec === true) { if ($sp9c3b38) { $sp78fbd3->forceDelete(); } else { \App\Card::_trash($sp78fbd3); } return Response::success(); } else { if ($sp9c3b38 && $sp0ee195 === true) { \App\Card::_restore($sp78fbd3); return Response::success(); } else { $sp78fbd3->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp1c0966 === true) { $spa2c374 = ''; $sp78fbd3->chunk(100, function ($spe48ece) use(&$spa2c374) { foreach ($spe48ece as $spe677ff) { $spa2c374 .= $spe677ff->card . '
'; } }); $sp8f1fad = 'export_cards_' . $this->getUserIdOrFail($sp179c14) . '_' . date('YmdHis') . '.txt'; $spa1a278 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp8f1fad), 'Content-Length' => strlen($spa2c374)); return response()->make($spa2c374, 200, $spa1a278); } $spababe9 = $sp179c14->input('current_page', 1); $sp4b1688 = $sp179c14->input('per_page', 20); $spe11c26 = $sp78fbd3->paginate($sp4b1688, array('*'), 'page', $spababe9); return Response::success($spe11c26); } } } function export(Request $sp179c14) { return self::get($sp179c14, true); } function trash(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string')); $sp786967 = $sp179c14->post('ids'); $sp78fbd3 = $this->authQuery($sp179c14, \App\Card::class)->whereIn('id', explode(',', $sp786967)); \App\Card::_trash($sp78fbd3); return Response::success(); } function restoreTrashed(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string')); $sp786967 = $sp179c14->post('ids'); $sp78fbd3 = $this->authQuery($sp179c14, \App\Card::class)->whereIn('id', explode(',', $sp786967)); \App\Card::_restore($sp78fbd3); return Response::success(); } function deleteTrashed(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string')); $sp786967 = $sp179c14->post('ids'); $this->authQuery($sp179c14, \App\Card::class)->whereIn('id', explode(',', $sp786967))->forceDelete(); return Response::success(); } function deleteAll(Request $sp179c14) { return $this->get($sp179c14, false, true); } function restoreAll(Request $sp179c14) { return $this->get($sp179c14, false, false, true); } function add(Request $sp179c14) { $spc00b16 = (int) $sp179c14->post('product_id'); $spe48ece = $sp179c14->post('card'); $sp42feb1 = (int) $sp179c14->post('type', \App\Card::TYPE_ONETIME); $spfbc663 = $sp179c14->post('is_check') === 'true'; if (str_contains($spe48ece, '<') || str_contains($spe48ece, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spf36aa8 = $this->getUserIdOrFail($sp179c14); $sp52e774 = $this->authQuery($sp179c14, \App\Product::class)->where('id', $spc00b16); $sp52e774->firstOrFail(array('id')); if ($sp42feb1 === \App\Card::TYPE_REPEAT) { if ($spfbc663) { if (\App\Card::where('product_id', $spc00b16)->where('card', $spe48ece)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spe677ff = new \App\Card(array('user_id' => $spf36aa8, 'product_id' => $spc00b16, 'card' => $spe48ece, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp179c14->post('count_all', 1))); if ($spe677ff->count_all < 1 || $spe677ff->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp52e774, $spe677ff) { $spe677ff->saveOrFail(); $sp434ec8 = $sp52e774->lockForUpdate()->firstOrFail(); $sp434ec8->count_all += $spe677ff->count_all; $sp434ec8->saveOrFail(); return Response::success(); }); } else { $sp43fd87 = explode('
', $spe48ece); $sp9c2e10 = count($sp43fd87); $spdd4bb3 = 500; if ($sp9c2e10 > $spdd4bb3) { return Response::fail('每次添加不能超过 ' . $spdd4bb3 . ' 张'); } $sp40d680 = array(); if ($spfbc663) { $spb114e8 = \App\Card::where('user_id', $spf36aa8)->where('product_id', $spc00b16)->get(array('card'))->all(); foreach ($spb114e8 as $sp2b193d) { $sp40d680[] = $sp2b193d['card']; } } $sp675cfe = array(); $sp11d1aa = 0; for ($sp133c87 = 0; $sp133c87 < $sp9c2e10; $sp133c87++) { $sp5461ae = trim($sp43fd87[$sp133c87]); if (strlen($sp5461ae) < 1) { continue; } if (strlen($sp5461ae) > 255) { return Response::fail('第 ' . $sp133c87 . ' 张卡密 ' . $sp5461ae . ' 长度错误<br>卡密最大长度为255'); } if ($spfbc663) { if (in_array($sp5461ae, $sp40d680)) { continue; } $sp40d680[] = $sp5461ae; } $sp675cfe[] = array('user_id' => $spf36aa8, 'product_id' => $spc00b16, 'card' => $sp5461ae, 'type' => \App\Card::TYPE_ONETIME); $sp11d1aa++; } if ($sp11d1aa === 0) { return Response::success(); } return DB::transaction(function () use($sp52e774, $sp675cfe, $sp11d1aa) { \App\Card::insert($sp675cfe); $sp434ec8 = $sp52e774->lockForUpdate()->firstOrFail(); $sp434ec8->count_all += $sp11d1aa; $sp434ec8->saveOrFail(); return Response::success(); }); } } function edit(Request $sp179c14) { $spadc22c = (int) $sp179c14->post('id'); $spe677ff = $this->authQuery($sp179c14, \App\Card::class)->findOrFail($spadc22c); if ($spe677ff) { $sp996e28 = $sp179c14->post('card'); $sp42feb1 = (int) $sp179c14->post('type', \App\Card::TYPE_ONETIME); $sp96e950 = (int) $sp179c14->post('count_all', 1); return DB::transaction(function () use($spe677ff, $sp996e28, $sp42feb1, $sp96e950) { $spe677ff = \App\Card::where('id', $spe677ff->id)->lockForUpdate()->firstOrFail(); $spe677ff->card = $sp996e28; $spe677ff->type = $sp42feb1; if ($spe677ff->type === \App\Card::TYPE_REPEAT) { if ($sp96e950 < $spe677ff->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp96e950 < 1 || $sp96e950 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spe677ff->count_all = $sp96e950; } else { $spe677ff->count_all = 1; } $spe677ff->saveOrFail(); $sp434ec8 = $spe677ff->product()->lockForUpdate()->firstOrFail(); $sp434ec8->count_all -= $spe677ff->count_all; $sp434ec8->count_all += $sp96e950; $sp434ec8->saveOrFail(); return Response::success(); }); } return Response::success(); } }