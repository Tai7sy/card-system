<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spf09a96, $spe757bc = false, $spd4c1c9 = false, $sp16af02 = false) { $sp40bc20 = $this->authQuery($spf09a96, \App\Card::class)->with(array('product' => function ($sp40bc20) { $sp40bc20->select(array('id', 'name')); })); $sp5974e9 = $spf09a96->input('search', false); $spc265e8 = $spf09a96->input('val', false); if ($sp5974e9 && $spc265e8) { if ($sp5974e9 == 'id') { $sp40bc20->where('id', $spc265e8); } else { $sp40bc20->where($sp5974e9, 'like', '%' . $spc265e8 . '%'); } } $sp8e3d37 = (int) $spf09a96->input('category_id'); $spb43b27 = $spf09a96->input('product_id', -1); if ($sp8e3d37 > 0) { if ($spb43b27 > 0) { $sp40bc20->where('product_id', $spb43b27); } else { $sp40bc20->whereHas('product', function ($sp40bc20) use($sp8e3d37) { $sp40bc20->where('category_id', $sp8e3d37); }); } } $spef96f9 = $spf09a96->input('status'); if (strlen($spef96f9)) { $sp40bc20->whereIn('status', explode(',', $spef96f9)); } $sp172b3e = (int) $spf09a96->input('onlyCanSell'); if ($sp172b3e) { $sp40bc20->whereRaw('`count_all`>`count_sold`'); } $sp2add78 = $spf09a96->input('type'); if (strlen($sp2add78)) { $sp40bc20->whereIn('type', explode(',', $sp2add78)); } $sp3ee7a5 = $spf09a96->input('trashed') === 'true'; if ($sp3ee7a5) { $sp40bc20->onlyTrashed(); } if ($spd4c1c9 === true) { if ($sp3ee7a5) { $sp40bc20->forceDelete(); } else { \App\Card::_trash($sp40bc20); } return Response::success(); } else { if ($sp3ee7a5 && $sp16af02 === true) { \App\Card::_restore($sp40bc20); return Response::success(); } else { $sp40bc20->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spe757bc === true) { $spbe5893 = ''; $sp40bc20->chunk(100, function ($sp79cae4) use(&$spbe5893) { foreach ($sp79cae4 as $sp6da819) { $spbe5893 .= $sp6da819->card . '
'; } }); $speae1df = 'export_cards_' . $this->getUserIdOrFail($spf09a96) . '_' . date('YmdHis') . '.txt'; $spb33460 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $speae1df), 'Content-Length' => strlen($spbe5893)); return response()->make($spbe5893, 200, $spb33460); } $sp5b4065 = (int) $spf09a96->input('current_page', 1); $spe24165 = (int) $spf09a96->input('per_page', 20); $sp3fe1fa = $sp40bc20->paginate($spe24165, array('*'), 'page', $sp5b4065); return Response::success($sp3fe1fa); } } } function export(Request $spf09a96) { return self::get($spf09a96, true); } function trash(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string')); $sp864000 = $spf09a96->post('ids'); $sp40bc20 = $this->authQuery($spf09a96, \App\Card::class)->whereIn('id', explode(',', $sp864000)); \App\Card::_trash($sp40bc20); return Response::success(); } function restoreTrashed(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string')); $sp864000 = $spf09a96->post('ids'); $sp40bc20 = $this->authQuery($spf09a96, \App\Card::class)->whereIn('id', explode(',', $sp864000)); \App\Card::_restore($sp40bc20); return Response::success(); } function deleteTrashed(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string')); $sp864000 = $spf09a96->post('ids'); $this->authQuery($spf09a96, \App\Card::class)->whereIn('id', explode(',', $sp864000))->forceDelete(); return Response::success(); } function deleteAll(Request $spf09a96) { return $this->get($spf09a96, false, true); } function restoreAll(Request $spf09a96) { return $this->get($spf09a96, false, false, true); } function add(Request $spf09a96) { $spb43b27 = (int) $spf09a96->post('product_id'); $sp79cae4 = $spf09a96->post('card'); $sp2add78 = (int) $spf09a96->post('type', \App\Card::TYPE_ONETIME); $sp644608 = $spf09a96->post('is_check') === 'true'; if (str_contains($sp79cae4, '<') || str_contains($sp79cae4, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $sp6738b1 = $this->getUserIdOrFail($spf09a96); $sp0d0d6c = $this->authQuery($spf09a96, \App\Product::class)->where('id', $spb43b27); $sp0d0d6c->firstOrFail(array('id')); if ($sp2add78 === \App\Card::TYPE_REPEAT) { if ($sp644608) { if (\App\Card::where('product_id', $spb43b27)->where('card', $sp79cae4)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp6da819 = new \App\Card(array('user_id' => $sp6738b1, 'product_id' => $spb43b27, 'card' => $sp79cae4, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spf09a96->post('count_all', 1))); if ($sp6da819->count_all < 1 || $sp6da819->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp0d0d6c, $sp6da819) { $sp6da819->saveOrFail(); $sp551a82 = $sp0d0d6c->lockForUpdate()->firstOrFail(); $sp551a82->count_all += $sp6da819->count_all; $sp551a82->saveOrFail(); return Response::success(); }); } else { $spe78ea6 = explode('
', $sp79cae4); $sp96907d = count($spe78ea6); $sp3b8567 = 50000; if ($sp96907d > $sp3b8567) { return Response::fail('每次添加不能超过 ' . $sp3b8567 . ' 张'); } $spfa3dc9 = array(); if ($sp644608) { $sp1676bf = \App\Card::where('user_id', $sp6738b1)->where('product_id', $spb43b27)->get(array('card'))->all(); foreach ($sp1676bf as $sp3f4a1c) { $spfa3dc9[] = $sp3f4a1c['card']; } } $spf3b6e1 = array(); $spcf5208 = 0; for ($sp02b863 = 0; $sp02b863 < $sp96907d; $sp02b863++) { $spc8ee67 = trim($spe78ea6[$sp02b863]); if (strlen($spc8ee67) < 1) { continue; } if (strlen($spc8ee67) > 1024) { return Response::fail('第 ' . $sp02b863 . ' 张卡密 ' . $spc8ee67 . ' 长度错误<br>卡密最大长度为1024'); } if ($sp644608) { if (in_array($spc8ee67, $spfa3dc9)) { continue; } $spfa3dc9[] = $spc8ee67; } $spf3b6e1[] = array('user_id' => $sp6738b1, 'product_id' => $spb43b27, 'card' => $spc8ee67, 'type' => \App\Card::TYPE_ONETIME); $spcf5208++; } if ($spcf5208 === 0) { return Response::success(); } return DB::transaction(function () use($sp0d0d6c, $spf3b6e1, $spcf5208) { \App\Card::insert($spf3b6e1); $sp551a82 = $sp0d0d6c->lockForUpdate()->firstOrFail(); $sp551a82->count_all += $spcf5208; $sp551a82->saveOrFail(); return Response::success(); }); } } function edit(Request $spf09a96) { $spe8e527 = (int) $spf09a96->post('id'); $sp6da819 = $this->authQuery($spf09a96, \App\Card::class)->findOrFail($spe8e527); if ($sp6da819) { $spa6ddce = $spf09a96->post('card'); $sp2add78 = (int) $spf09a96->post('type', \App\Card::TYPE_ONETIME); $spbd00b7 = (int) $spf09a96->post('count_all', 1); return DB::transaction(function () use($sp6da819, $spa6ddce, $sp2add78, $spbd00b7) { $sp6da819 = \App\Card::where('id', $sp6da819->id)->lockForUpdate()->firstOrFail(); $sp6da819->card = $spa6ddce; $sp6da819->type = $sp2add78; if ($sp6da819->type === \App\Card::TYPE_REPEAT) { if ($spbd00b7 < $sp6da819->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spbd00b7 < 1 || $spbd00b7 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp6da819->count_all = $spbd00b7; } else { $sp6da819->count_all = 1; } $sp6da819->saveOrFail(); $sp551a82 = $sp6da819->product()->lockForUpdate()->firstOrFail(); $sp551a82->count_all -= $sp6da819->count_all; $sp551a82->count_all += $spbd00b7; $sp551a82->saveOrFail(); return Response::success(); }); } return Response::success(); } }