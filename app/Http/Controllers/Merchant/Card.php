<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp62e4cd, $spb7f9df = false, $spfa2cdb = false, $spd86d1c = false) { $sp4210ad = $this->authQuery($sp62e4cd, \App\Card::class)->with(array('product' => function ($sp4210ad) { $sp4210ad->select(array('id', 'name')); })); $spe0aaed = $sp62e4cd->input('search', false); $sp75c4d8 = $sp62e4cd->input('val', false); if ($spe0aaed && $sp75c4d8) { if ($spe0aaed == 'id') { $sp4210ad->where('id', $sp75c4d8); } else { $sp4210ad->where($spe0aaed, 'like', '%' . $sp75c4d8 . '%'); } } $sp93712d = (int) $sp62e4cd->input('category_id'); $sp5eed44 = $sp62e4cd->input('product_id', -1); if ($sp93712d > 0) { if ($sp5eed44 > 0) { $sp4210ad->where('product_id', $sp5eed44); } else { $sp4210ad->whereHas('product', function ($sp4210ad) use($sp93712d) { $sp4210ad->where('category_id', $sp93712d); }); } } $sp7acd11 = $sp62e4cd->input('status'); if (strlen($sp7acd11)) { $sp4210ad->whereIn('status', explode(',', $sp7acd11)); } $sp317689 = (int) $sp62e4cd->input('onlyCanSell'); if ($sp317689) { $sp4210ad->whereRaw('`count_all`>`count_sold`'); } $spa8b0dd = $sp62e4cd->input('type'); if (strlen($spa8b0dd)) { $sp4210ad->whereIn('type', explode(',', $spa8b0dd)); } $sp9e5918 = $sp62e4cd->input('trashed') === 'true'; if ($sp9e5918) { $sp4210ad->onlyTrashed(); } if ($spfa2cdb === true) { if ($sp9e5918) { $sp4210ad->forceDelete(); } else { \App\Card::_trash($sp4210ad); } return Response::success(); } else { if ($sp9e5918 && $spd86d1c === true) { \App\Card::_restore($sp4210ad); return Response::success(); } else { $sp4210ad->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spb7f9df === true) { $sp343f74 = ''; $sp4210ad->chunk(100, function ($spb533ba) use(&$sp343f74) { foreach ($spb533ba as $spb6adc1) { $sp343f74 .= $spb6adc1->card . '
'; } }); $spd167c4 = 'export_cards_' . $this->getUserIdOrFail($sp62e4cd) . '_' . date('YmdHis') . '.txt'; $spcb575a = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spd167c4), 'Content-Length' => strlen($sp343f74)); return response()->make($sp343f74, 200, $spcb575a); } $sp295466 = (int) $sp62e4cd->input('current_page', 1); $spe5b040 = (int) $sp62e4cd->input('per_page', 20); $sp6492f8 = $sp4210ad->paginate($spe5b040, array('*'), 'page', $sp295466); return Response::success($sp6492f8); } } } function export(Request $sp62e4cd) { return self::get($sp62e4cd, true); } function trash(Request $sp62e4cd) { $this->validate($sp62e4cd, array('ids' => 'required|string')); $spb0cc9a = $sp62e4cd->post('ids'); $sp4210ad = $this->authQuery($sp62e4cd, \App\Card::class)->whereIn('id', explode(',', $spb0cc9a)); \App\Card::_trash($sp4210ad); return Response::success(); } function restoreTrashed(Request $sp62e4cd) { $this->validate($sp62e4cd, array('ids' => 'required|string')); $spb0cc9a = $sp62e4cd->post('ids'); $sp4210ad = $this->authQuery($sp62e4cd, \App\Card::class)->whereIn('id', explode(',', $spb0cc9a)); \App\Card::_restore($sp4210ad); return Response::success(); } function deleteTrashed(Request $sp62e4cd) { $this->validate($sp62e4cd, array('ids' => 'required|string')); $spb0cc9a = $sp62e4cd->post('ids'); $this->authQuery($sp62e4cd, \App\Card::class)->whereIn('id', explode(',', $spb0cc9a))->forceDelete(); return Response::success(); } function deleteAll(Request $sp62e4cd) { return $this->get($sp62e4cd, false, true); } function restoreAll(Request $sp62e4cd) { return $this->get($sp62e4cd, false, false, true); } function add(Request $sp62e4cd) { $sp5eed44 = (int) $sp62e4cd->post('product_id'); $spb533ba = $sp62e4cd->post('card'); $spa8b0dd = (int) $sp62e4cd->post('type', \App\Card::TYPE_ONETIME); $sp51bf52 = $sp62e4cd->post('is_check') === 'true'; if (str_contains($spb533ba, '<') || str_contains($spb533ba, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spe0b9a0 = $this->getUserIdOrFail($sp62e4cd); $sp0e0496 = $this->authQuery($sp62e4cd, \App\Product::class)->where('id', $sp5eed44); $sp0e0496->firstOrFail(array('id')); if ($spa8b0dd === \App\Card::TYPE_REPEAT) { if ($sp51bf52) { if (\App\Card::where('product_id', $sp5eed44)->where('card', $spb533ba)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spb6adc1 = new \App\Card(array('user_id' => $spe0b9a0, 'product_id' => $sp5eed44, 'card' => $spb533ba, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp62e4cd->post('count_all', 1))); if ($spb6adc1->count_all < 1 || $spb6adc1->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp0e0496, $spb6adc1) { $spb6adc1->saveOrFail(); $spfd49bd = $sp0e0496->lockForUpdate()->firstOrFail(); $spfd49bd->count_all += $spb6adc1->count_all; $spfd49bd->saveOrFail(); return Response::success(); }); } else { $spbd612e = explode('
', $spb533ba); $sp6e7313 = count($spbd612e); $spb59358 = 50000; if ($sp6e7313 > $spb59358) { return Response::fail('每次添加不能超过 ' . $spb59358 . ' 张'); } $sp5b9677 = array(); if ($sp51bf52) { $sp2ad5e2 = \App\Card::where('user_id', $spe0b9a0)->where('product_id', $sp5eed44)->get(array('card'))->all(); foreach ($sp2ad5e2 as $sp332ddd) { $sp5b9677[] = $sp332ddd['card']; } } $spdcf354 = array(); $sp8686f8 = 0; for ($sp558f52 = 0; $sp558f52 < $sp6e7313; $sp558f52++) { $sp2d40af = trim($spbd612e[$sp558f52]); if (strlen($sp2d40af) < 1) { continue; } if (strlen($sp2d40af) > 1024) { return Response::fail('第 ' . $sp558f52 . ' 张卡密 ' . $sp2d40af . ' 长度错误<br>卡密最大长度为1024'); } if ($sp51bf52) { if (in_array($sp2d40af, $sp5b9677)) { continue; } $sp5b9677[] = $sp2d40af; } $spdcf354[] = array('user_id' => $spe0b9a0, 'product_id' => $sp5eed44, 'card' => $sp2d40af, 'type' => \App\Card::TYPE_ONETIME); $sp8686f8++; } if ($sp8686f8 === 0) { return Response::success(); } return DB::transaction(function () use($sp0e0496, $spdcf354, $sp8686f8) { \App\Card::insert($spdcf354); $spfd49bd = $sp0e0496->lockForUpdate()->firstOrFail(); $spfd49bd->count_all += $sp8686f8; $spfd49bd->saveOrFail(); return Response::success(); }); } } function edit(Request $sp62e4cd) { $spdc31ea = (int) $sp62e4cd->post('id'); $spb6adc1 = $this->authQuery($sp62e4cd, \App\Card::class)->findOrFail($spdc31ea); if ($spb6adc1) { $sp78318d = $sp62e4cd->post('card'); $spa8b0dd = (int) $sp62e4cd->post('type', \App\Card::TYPE_ONETIME); $sp6ff137 = (int) $sp62e4cd->post('count_all', 1); return DB::transaction(function () use($spb6adc1, $sp78318d, $spa8b0dd, $sp6ff137) { $spb6adc1 = \App\Card::where('id', $spb6adc1->id)->lockForUpdate()->firstOrFail(); $spb6adc1->card = $sp78318d; $spb6adc1->type = $spa8b0dd; if ($spb6adc1->type === \App\Card::TYPE_REPEAT) { if ($sp6ff137 < $spb6adc1->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($sp6ff137 < 1 || $sp6ff137 > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spb6adc1->count_all = $sp6ff137; } else { $spb6adc1->count_all = 1; } $spb6adc1->saveOrFail(); $spfd49bd = $spb6adc1->product()->lockForUpdate()->firstOrFail(); $spfd49bd->count_all -= $spb6adc1->count_all; $spfd49bd->count_all += $sp6ff137; $spfd49bd->saveOrFail(); return Response::success(); }); } return Response::success(); } }