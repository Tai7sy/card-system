<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spdf16c9, $spf9b225 = false, $sp2e6547 = false, $sp2d4532 = false) { $spc64cdd = $this->authQuery($spdf16c9, \App\Card::class)->with(array('product' => function ($spc64cdd) { $spc64cdd->select(array('id', 'name')); })); $spdb3063 = $spdf16c9->input('search', false); $sp085db7 = $spdf16c9->input('val', false); if ($spdb3063 && $sp085db7) { if ($spdb3063 == 'id') { $spc64cdd->where('id', $sp085db7); } else { $spc64cdd->where($spdb3063, 'like', '%' . $sp085db7 . '%'); } } $spf26f7e = (int) $spdf16c9->input('category_id'); $spfb3e15 = $spdf16c9->input('product_id', -1); if ($spf26f7e > 0) { if ($spfb3e15 > 0) { $spc64cdd->where('product_id', $spfb3e15); } else { $spc64cdd->whereHas('product', function ($spc64cdd) use($spf26f7e) { $spc64cdd->where('category_id', $spf26f7e); }); } } $sp24b3a3 = $spdf16c9->input('status'); if (strlen($sp24b3a3)) { $spc64cdd->whereIn('status', explode(',', $sp24b3a3)); } $sp18428b = (int) $spdf16c9->input('onlyCanSell'); if ($sp18428b) { $spc64cdd->whereRaw('`count_all`>`count_sold`'); } $sp915043 = $spdf16c9->input('type'); if (strlen($sp915043)) { $spc64cdd->whereIn('type', explode(',', $sp915043)); } $sp7747d3 = $spdf16c9->input('trashed') === 'true'; if ($sp7747d3) { $spc64cdd->onlyTrashed(); } if ($sp2e6547 === true) { if ($sp7747d3) { $spc64cdd->forceDelete(); } else { \App\Card::_trash($spc64cdd); } return Response::success(); } else { if ($sp7747d3 && $sp2d4532 === true) { \App\Card::_restore($spc64cdd); return Response::success(); } else { $spc64cdd->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($spf9b225 === true) { $spf2bed8 = ''; $spc64cdd->chunk(100, function ($spab3b23) use(&$spf2bed8) { foreach ($spab3b23 as $spe82347) { $spf2bed8 .= $spe82347->card . '
'; } }); $sp37fee3 = 'export_cards_' . $this->getUserIdOrFail($spdf16c9) . '_' . date('YmdHis') . '.txt'; $sp119a5f = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp37fee3), 'Content-Length' => strlen($spf2bed8)); return response()->make($spf2bed8, 200, $sp119a5f); } $sp7ec90f = (int) $spdf16c9->input('current_page', 1); $spc4a487 = (int) $spdf16c9->input('per_page', 20); $sp61ff14 = $spc64cdd->paginate($spc4a487, array('*'), 'page', $sp7ec90f); return Response::success($sp61ff14); } } } function export(Request $spdf16c9) { return self::get($spdf16c9, true); } function trash(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string')); $spb19a2c = $spdf16c9->post('ids'); $spc64cdd = $this->authQuery($spdf16c9, \App\Card::class)->whereIn('id', explode(',', $spb19a2c)); \App\Card::_trash($spc64cdd); return Response::success(); } function restoreTrashed(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string')); $spb19a2c = $spdf16c9->post('ids'); $spc64cdd = $this->authQuery($spdf16c9, \App\Card::class)->whereIn('id', explode(',', $spb19a2c)); \App\Card::_restore($spc64cdd); return Response::success(); } function deleteTrashed(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string')); $spb19a2c = $spdf16c9->post('ids'); $this->authQuery($spdf16c9, \App\Card::class)->whereIn('id', explode(',', $spb19a2c))->forceDelete(); return Response::success(); } function deleteAll(Request $spdf16c9) { return $this->get($spdf16c9, false, true); } function restoreAll(Request $spdf16c9) { return $this->get($spdf16c9, false, false, true); } function add(Request $spdf16c9) { $spfb3e15 = (int) $spdf16c9->post('product_id'); $spab3b23 = $spdf16c9->post('card'); $sp915043 = (int) $spdf16c9->post('type', \App\Card::TYPE_ONETIME); $spd6240b = $spdf16c9->post('is_check') === 'true'; if (str_contains($spab3b23, '<') || str_contains($spab3b23, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } $spf93fb1 = $this->getUserIdOrFail($spdf16c9); $sp94a229 = $this->authQuery($spdf16c9, \App\Product::class)->where('id', $spfb3e15); $sp94a229->firstOrFail(array('id')); if ($sp915043 === \App\Card::TYPE_REPEAT) { if ($spd6240b) { if (\App\Card::where('product_id', $spfb3e15)->where('card', $spab3b23)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spe82347 = new \App\Card(array('user_id' => $spf93fb1, 'product_id' => $spfb3e15, 'card' => $spab3b23, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $spdf16c9->post('count_all', 1))); if ($spe82347->count_all < 1 || $spe82347->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($sp94a229, $spe82347) { $spe82347->saveOrFail(); $sp94204a = $sp94a229->lockForUpdate()->firstOrFail(); $sp94204a->count_all += $spe82347->count_all; $sp94204a->saveOrFail(); return Response::success(); }); } else { $spb26d17 = explode('
', $spab3b23); $spb5f02e = count($spb26d17); $sp56235f = 50000; if ($spb5f02e > $sp56235f) { return Response::fail('每次添加不能超过 ' . $sp56235f . ' 张'); } $sp8f9cee = array(); if ($spd6240b) { $spdc0625 = \App\Card::where('user_id', $spf93fb1)->where('product_id', $spfb3e15)->get(array('card'))->all(); foreach ($spdc0625 as $sp8c94bd) { $sp8f9cee[] = $sp8c94bd['card']; } } $sp816ef1 = array(); $sp3d114f = 0; for ($spc25c52 = 0; $spc25c52 < $spb5f02e; $spc25c52++) { $sp9eda50 = trim($spb26d17[$spc25c52]); if (strlen($sp9eda50) < 1) { continue; } if (strlen($sp9eda50) > 1024) { return Response::fail('第 ' . $spc25c52 . ' 张卡密 ' . $sp9eda50 . ' 长度错误<br>卡密最大长度为1024'); } if ($spd6240b) { if (in_array($sp9eda50, $sp8f9cee)) { continue; } $sp8f9cee[] = $sp9eda50; } $sp816ef1[] = array('user_id' => $spf93fb1, 'product_id' => $spfb3e15, 'card' => $sp9eda50, 'type' => \App\Card::TYPE_ONETIME); $sp3d114f++; } if ($sp3d114f === 0) { return Response::success(); } return DB::transaction(function () use($sp94a229, $sp816ef1, $sp3d114f) { \App\Card::insert($sp816ef1); $sp94204a = $sp94a229->lockForUpdate()->firstOrFail(); $sp94204a->count_all += $sp3d114f; $sp94204a->saveOrFail(); return Response::success(); }); } } function edit(Request $spdf16c9) { $spaacfde = (int) $spdf16c9->post('id'); $spe82347 = $this->authQuery($spdf16c9, \App\Card::class)->findOrFail($spaacfde); if ($spe82347) { $spc1f658 = $spdf16c9->post('card'); $sp915043 = (int) $spdf16c9->post('type', \App\Card::TYPE_ONETIME); $speeb09b = (int) $spdf16c9->post('count_all', 1); return DB::transaction(function () use($spe82347, $spc1f658, $sp915043, $speeb09b) { $spe82347 = \App\Card::where('id', $spe82347->id)->lockForUpdate()->firstOrFail(); $spe82347->card = $spc1f658; $spe82347->type = $sp915043; if ($spe82347->type === \App\Card::TYPE_REPEAT) { if ($speeb09b < $spe82347->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($speeb09b < 1 || $speeb09b > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spe82347->count_all = $speeb09b; } else { $spe82347->count_all = 1; } $spe82347->saveOrFail(); $sp94204a = $spe82347->product()->lockForUpdate()->firstOrFail(); $sp94204a->count_all -= $spe82347->count_all; $sp94204a->count_all += $speeb09b; $sp94204a->saveOrFail(); return Response::success(); }); } return Response::success(); } }