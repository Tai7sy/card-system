<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp13451b, $spdf44ce = false) { $sp8e2ceb = $this->authQuery($sp13451b, \App\Order::class); $sp3955fa = (int) $sp13451b->input('category_id'); $spcaeba2 = (int) $sp13451b->input('product_id'); $sp1670b6 = (int) $sp13451b->input('profit'); $sp3782ca = $sp3955fa === \App\Product::ID_API || $spcaeba2 === \App\Product::ID_API; $sp54e0e6 = $sp13451b->input('search', false); $sp59b33b = $sp13451b->input('val', false); if ($sp54e0e6 && $sp59b33b) { if ($sp54e0e6 == 'id' || $sp54e0e6 == 'order_no' || $sp54e0e6 === 'pay_trade_no' || $sp54e0e6 === 'api_out_no') { $sp8e2ceb->where($sp54e0e6, $sp59b33b); } else { $sp8e2ceb->where($sp54e0e6, 'like', '%' . $sp59b33b . '%'); } } if ($sp3955fa > 0) { if ($spcaeba2 > 0) { $sp8e2ceb->where('product_id', $spcaeba2); } else { $sp8e2ceb->whereHas('product', function ($sp8e2ceb) use($sp3955fa) { $sp8e2ceb->where('category_id', $sp3955fa); }); } } $spd34578 = (int) $sp13451b->input('recent', 0); if ($spd34578) { $speeaf8a = (new Carbon())->addDay(-$spd34578); $sp8e2ceb->where(function ($sp8e2ceb) use($speeaf8a) { $sp8e2ceb->where('paid_at', '>=', $speeaf8a)->orWhere(function ($sp8e2ceb) use($speeaf8a) { $sp8e2ceb->whereNull('paid_at')->where('created_at', '>=', $speeaf8a); }); }); } else { $speeaf8a = $sp13451b->input('start_at', false); if (strlen($speeaf8a)) { $sp8e2ceb->where(function ($sp8e2ceb) use($speeaf8a) { $sp8e2ceb->where('paid_at', '>=', $speeaf8a . ' 00:00:00')->orWhere(function ($sp8e2ceb) use($speeaf8a) { $sp8e2ceb->whereNull('paid_at')->where('created_at', '>=', $speeaf8a . ' 00:00:00'); }); }); } $sp5d2c79 = $sp13451b->input('end_at', false); if (strlen($sp5d2c79)) { $sp8e2ceb->where(function ($sp8e2ceb) use($sp5d2c79) { $sp8e2ceb->where('paid_at', '<=', $sp5d2c79 . ' 23:59:59')->orWhere(function ($sp8e2ceb) use($sp5d2c79) { $sp8e2ceb->whereNull('paid_at')->where('created_at', '<=', $sp5d2c79 . ' 23:59:59'); }); }); } } if ($sp1670b6) { $sp8e2ceb->where('status', \App\Order::STATUS_SUCCESS); $spc08277 = clone $sp8e2ceb; $sp8316c8 = $spc08277->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp6002b5 = $sp13451b->input('status'); if (strlen($sp6002b5)) { $sp8e2ceb->whereIn('status', explode(',', $sp6002b5)); } else { $sp8e2ceb->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp3782ca) { $sp8e2ceb->where('product_id', \App\Product::ID_API); } else { $sp8e2ceb->where('product_id', '>', 0); $sp8e2ceb->with(array('product' => function (Relation $sp8e2ceb) { $sp8e2ceb->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp8e2ceb) { $sp8e2ceb->select(array('id', 'card')); })); } $sp8e2ceb->with(array('pay' => function (Relation $sp8e2ceb) { $sp8e2ceb->select(array('id', 'name')); })); $sp8e2ceb->orderBy('id', 'DESC'); if ($spdf44ce === true) { $spa9cc40 = (int) $sp13451b->input('export_update_status'); $sp48f062 = $sp13451b->input('export_update_card'); $spd46807 = '﻿'; $spd46807 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp8e2ceb->chunk(100, function ($spbda254) use(&$spd46807, $spa9cc40, $sp48f062) { foreach ($spbda254 as $sp322370) { if ($sp322370->status === \App\Order::STATUS_PAID) { if ($spa9cc40 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp322370->send_status = $spa9cc40; $sp322370->saveOrFail(); } elseif ($spa9cc40 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp322370->send_status = $spa9cc40; $sp322370->saveOrFail(); $this->ship(new Request(array('id' => $sp322370->id, 'card' => $sp48f062))); } } $sp05a58e = $sp322370->contact_ext; if ($sp05a58e) { if ($sp05a58e[0] === '[') { $sp05a58e = substr($sp05a58e, 2); } if ($sp05a58e[strlen($sp05a58e) - 1] === ']') { $sp05a58e = substr($sp05a58e, 0, -2); } } $spd46807 .= '"' . $sp322370->order_no . '","' . $sp322370->product_name . '","' . $sp322370->created_at . '","' . sprintf('%.2f', $sp322370->price / 100) . '","' . sprintf('%.2f', $sp322370->discount / 100) . '","' . sprintf('%.2f', $sp322370->paid / 100) . '","' . sprintf('%.2f', $sp322370->fee / 100) . '","' . sprintf('%.2f', $sp322370->cost / 100) . '","' . sprintf('%.2f', ($sp322370->paid - $sp322370->fee - $sp322370->cost) / 100) . '","' . ($sp322370->pay ? $sp322370->pay->name : '未知#' . $sp322370->pay_id) . '","' . $sp322370->pay_trade_no . '","' . $sp322370->paid_at . '","' . \App\Order::STATUS[$sp322370->status] . '","' . $sp322370->contact . '","' . $sp05a58e . '"'; $spd46807 .= '
'; } }); $spb72e8c = 'export_orders_' . $this->getUserIdOrFail($sp13451b) . '_' . date('YmdHis') . '.csv'; $spdcbcbb = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spb72e8c), 'Content-Length' => strlen($spd46807)); return response()->make($spd46807, 200, $spdcbcbb); } $sp26dcb6 = (int) $sp13451b->input('current_page', 1); $sp769c3e = (int) $sp13451b->input('per_page', 20); $spa67529 = $sp8e2ceb->paginate($sp769c3e, array('*'), 'page', $sp26dcb6); if ($sp1670b6) { $spa67529 = $spa67529->toArray(); $spa67529['profit_sum'] = $sp8316c8; } return Response::success($spa67529); } function export(Request $sp13451b) { return self::get($sp13451b, true); } function stat(Request $sp13451b) { $this->validate($sp13451b, array('day' => 'required|integer|between:7,30')); $spe595a6 = (int) $sp13451b->input('day'); if ($spe595a6 === 30) { $speeaf8a = Carbon::now()->addMonths(-1)->toDateString() . ' 00:00:00'; } else { $speeaf8a = Carbon::now()->addDays(-$spe595a6)->toDateString() . ' 00:00:00'; } $spa67529 = $this->authQuery($sp13451b, \App\Order::class)->where(function ($sp8e2ceb) { $sp8e2ceb->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $speeaf8a)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp00ac62 = array(); foreach ($spa67529 as $sp3f5c2c) { $sp00ac62[$sp3f5c2c['date']] = array((int) $sp3f5c2c['count'], (int) $sp3f5c2c['paid'], (int) $sp3f5c2c['profit']); } return Response::success($sp00ac62); } function info(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer')); $sp7df839 = $sp13451b->input('id'); $sp322370 = $this->authQuery($sp13451b, \App\Order::class)->with(array('pay' => function (Relation $sp8e2ceb) { $sp8e2ceb->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp8e2ceb) { $sp8e2ceb->select(array('id', 'card')); }))->findOrFail($sp7df839); $sp322370->addHidden(array('system_fee')); return Response::success($sp322370); } function remark(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer', 'remark' => 'required|string')); $sp7df839 = $sp13451b->input('id'); $sp322370 = $this->authQuery($sp13451b, \App\Order::class)->findOrFail($sp7df839); $sp322370->remark = $sp13451b->input('remark'); $sp322370->save(); return Response::success(); } function set_send_status(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp7df839 = $sp13451b->input('id'); $sp322370 = $this->authQuery($sp13451b, \App\Order::class)->findOrFail($sp7df839); if ($sp322370->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp322370->send_status = $sp13451b->input('send_status'); $sp322370->saveOrFail(); return Response::success(); } function ship(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer')); $sp322370 = $this->authQuery($sp13451b, \App\Order::class)->with('product')->findOrFail($sp13451b->input('id')); if ($sp322370->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp322370->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spcc1446 = $sp322370->product->delivery; $sp2b996c = ''; if ($spcc1446 === \App\Product::DELIVERY_MANUAL) { $this->validate($sp13451b, array('card' => 'required|string')); $sp2b996c = $sp13451b->input('card'); } $spff165f = null; $sp5aa60c = array(); if (FundHelper::orderSuccess($sp322370->id, function () use(&$sp322370, &$spff165f, &$sp5aa60c, $spcc1446, $sp2b996c) { $sp322370 = \App\Order::where('id', $sp322370->id)->lockForUpdate()->firstOrFail(); if ($sp322370->cards && count($sp322370->cards)) { $spff165f = '该订单已经发货，无需再次发货'; return false; } $sp863814 = $sp322370->product()->lockForUpdate()->firstOrFail(); if ($spcc1446 === \App\Product::DELIVERY_MANUAL) { $sp322370->status = \App\Order::STATUS_SUCCESS; $sp322370->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp322370->saveOrFail(); $spbcc049 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp863814->id, 'card' => $sp2b996c, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp5aa60c[] = $spbcc049->card; $sp322370->cards()->attach($spbcc049->id); $sp863814->count_sold += $sp322370->count; $sp863814->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spa07a9b = \App\Card::where('product_id', $sp863814->id)->whereRaw('`count_sold`<`count_all`')->take($sp322370->count)->lockForUpdate()->get(); if (count($spa07a9b) !== $sp322370->count) { $spff165f = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp322370->status = \App\Order::STATUS_SUCCESS; $sp322370->saveOrFail(); $sp48b16e = array(); foreach ($spa07a9b as $spbcc049) { $sp48b16e[] = $spbcc049->id; $sp5aa60c[] = $spbcc049->card; } $sp322370->cards()->attach($sp48b16e); \App\Card::whereIn('id', $sp48b16e)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp863814->count_sold += $sp322370->count; $sp863814->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp7c700e = @json_decode($sp322370->contact_ext, true)['_mail']; if ($sp7c700e) { $sp322370->sendEmail($sp7c700e); } } if ($sp322370->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp7a4d87 = @json_decode($sp322370->contact_ext, true)['_mobile']; if ($sp7a4d87) { $sp322370->sendSms($sp7a4d87); } } $sp322370['card_orders'] = array_map(function ($sp3f5c2c) { return array('card' => array('card' => $sp3f5c2c)); }, $sp5aa60c); $sp322370->addHidden(array('system_fee')); return Response::success($sp322370); } else { return Response::fail($spff165f ?? '数据库繁忙, 请联系客服'); } } }