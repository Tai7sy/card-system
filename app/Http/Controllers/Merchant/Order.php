<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp3c91bd, $spbf8e79 = false) { $sp6cb35e = $this->authQuery($sp3c91bd, \App\Order::class); $sp8af541 = (int) $sp3c91bd->input('category_id'); $sp5d967e = (int) $sp3c91bd->input('product_id'); $speb6e00 = (int) $sp3c91bd->input('profit'); $sp3c2842 = $sp8af541 === \App\Product::ID_API || $sp5d967e === \App\Product::ID_API; $sp98fed8 = $sp3c91bd->input('search', false); $sp7f8b1d = $sp3c91bd->input('val', false); if ($sp98fed8 && $sp7f8b1d) { if ($sp98fed8 == 'id' || $sp98fed8 == 'order_no' || $sp98fed8 === 'pay_trade_no' || $sp98fed8 === 'api_out_no') { $sp6cb35e->where($sp98fed8, $sp7f8b1d); } else { $sp6cb35e->where($sp98fed8, 'like', '%' . $sp7f8b1d . '%'); } } if ($sp8af541 > 0) { if ($sp5d967e > 0) { $sp6cb35e->where('product_id', $sp5d967e); } else { $sp6cb35e->whereHas('product', function ($sp6cb35e) use($sp8af541) { $sp6cb35e->where('category_id', $sp8af541); }); } } $sp684603 = (int) $sp3c91bd->input('recent', 0); if ($sp684603) { $spabaafc = (new Carbon())->addDay(-$sp684603); $sp6cb35e->where(function ($sp6cb35e) use($spabaafc) { $sp6cb35e->where('paid_at', '>=', $spabaafc)->orWhere(function ($sp6cb35e) use($spabaafc) { $sp6cb35e->whereNull('paid_at')->where('created_at', '>=', $spabaafc); }); }); } else { $spabaafc = $sp3c91bd->input('start_at', false); if (strlen($spabaafc)) { $sp6cb35e->where(function ($sp6cb35e) use($spabaafc) { $sp6cb35e->where('paid_at', '>=', $spabaafc . ' 00:00:00')->orWhere(function ($sp6cb35e) use($spabaafc) { $sp6cb35e->whereNull('paid_at')->where('created_at', '>=', $spabaafc . ' 00:00:00'); }); }); } $sp250c03 = $sp3c91bd->input('end_at', false); if (strlen($sp250c03)) { $sp6cb35e->where(function ($sp6cb35e) use($sp250c03) { $sp6cb35e->where('paid_at', '<=', $sp250c03 . ' 23:59:59')->orWhere(function ($sp6cb35e) use($sp250c03) { $sp6cb35e->whereNull('paid_at')->where('created_at', '<=', $sp250c03 . ' 23:59:59'); }); }); } } if ($speb6e00) { $sp6cb35e->where('status', \App\Order::STATUS_SUCCESS); $spe70484 = clone $sp6cb35e; $sp2e5125 = $spe70484->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp31859f = $sp3c91bd->input('status'); if (strlen($sp31859f)) { $sp6cb35e->whereIn('status', explode(',', $sp31859f)); } else { $sp6cb35e->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp3c2842) { $sp6cb35e->where('product_id', \App\Product::ID_API); } else { $sp6cb35e->where('product_id', '>', 0); $sp6cb35e->with(array('product' => function (Relation $sp6cb35e) { $sp6cb35e->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp6cb35e) { $sp6cb35e->select(array('id', 'card')); })); } $sp6cb35e->with(array('pay' => function (Relation $sp6cb35e) { $sp6cb35e->select(array('id', 'name')); })); $sp6cb35e->orderBy('id', 'DESC'); if ($spbf8e79 === true) { $sp9fa9f0 = (int) $sp3c91bd->input('export_update_status'); $sp9a5d7c = $sp3c91bd->input('export_update_card'); $sp51da13 = '﻿'; $sp51da13 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp6cb35e->chunk(100, function ($sp58ab08) use(&$sp51da13, $sp9fa9f0, $sp9a5d7c) { foreach ($sp58ab08 as $sp600a89) { if ($sp600a89->status === \App\Order::STATUS_PAID) { if ($sp9fa9f0 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp600a89->send_status = $sp9fa9f0; $sp600a89->saveOrFail(); } elseif ($sp9fa9f0 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp600a89->send_status = $sp9fa9f0; $sp600a89->saveOrFail(); $this->ship(new Request(array('id' => $sp600a89->id, 'card' => $sp9a5d7c))); } } $spe00d1f = $sp600a89->contact_ext; if ($spe00d1f) { if ($spe00d1f[0] === '[') { $spe00d1f = substr($spe00d1f, 2); } if ($spe00d1f[strlen($spe00d1f) - 1] === ']') { $spe00d1f = substr($spe00d1f, 0, -2); } } $sp51da13 .= '"' . $sp600a89->order_no . '","' . $sp600a89->product_name . '","' . $sp600a89->created_at . '","' . sprintf('%.2f', $sp600a89->price / 100) . '","' . sprintf('%.2f', $sp600a89->discount / 100) . '","' . sprintf('%.2f', $sp600a89->paid / 100) . '","' . sprintf('%.2f', $sp600a89->fee / 100) . '","' . sprintf('%.2f', $sp600a89->cost / 100) . '","' . sprintf('%.2f', ($sp600a89->paid - $sp600a89->fee - $sp600a89->cost) / 100) . '","' . ($sp600a89->pay ? $sp600a89->pay->name : '未知#' . $sp600a89->pay_id) . '","' . $sp600a89->pay_trade_no . '","' . $sp600a89->paid_at . '","' . \App\Order::STATUS[$sp600a89->status] . '","' . $sp600a89->contact . '","' . $spe00d1f . '"'; $sp51da13 .= '
'; } }); $sp491909 = 'export_orders_' . $this->getUserIdOrFail($sp3c91bd) . '_' . date('YmdHis') . '.csv'; $spa565dd = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp491909), 'Content-Length' => strlen($sp51da13)); return response()->make($sp51da13, 200, $spa565dd); } $spf8ae2a = $sp3c91bd->input('current_page', 1); $spa4d3d7 = $sp3c91bd->input('per_page', 20); $spdecb4c = $sp6cb35e->paginate($spa4d3d7, array('*'), 'page', $spf8ae2a); if ($speb6e00) { $spdecb4c = $spdecb4c->toArray(); $spdecb4c['profit_sum'] = $sp2e5125; } return Response::success($spdecb4c); } function export(Request $sp3c91bd) { return self::get($sp3c91bd, true); } function stat(Request $sp3c91bd) { $this->validate($sp3c91bd, array('day' => 'required|integer|between:7,30')); $spcefb4d = (int) $sp3c91bd->input('day'); if ($spcefb4d === 30) { $spb62a88 = Carbon::now()->addMonths(-1); } else { $spb62a88 = Carbon::now()->addDays(-$spcefb4d); } $spdecb4c = $this->authQuery($sp3c91bd, \App\Order::class)->where(function ($sp6cb35e) { $sp6cb35e->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $spb62a88)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp6a22d6 = array(); foreach ($spdecb4c as $sp807bd0) { $sp6a22d6[$sp807bd0['date']] = array((int) $sp807bd0['count'], (int) $sp807bd0['paid'], (int) $sp807bd0['profit']); } return Response::success($sp6a22d6); } function info(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer')); $spbabe1d = $sp3c91bd->input('id'); $sp600a89 = $this->authQuery($sp3c91bd, \App\Order::class)->with(array('pay' => function (Relation $sp6cb35e) { $sp6cb35e->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp6cb35e) { $sp6cb35e->select(array('id', 'card')); }))->findOrFail($spbabe1d); $sp600a89->addHidden(array('system_fee')); return Response::success($sp600a89); } function remark(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer', 'remark' => 'required|string')); $spbabe1d = $sp3c91bd->input('id'); $sp600a89 = $this->authQuery($sp3c91bd, \App\Order::class)->findOrFail($spbabe1d); $sp600a89->remark = $sp3c91bd->input('remark'); $sp600a89->save(); return Response::success(); } function set_send_status(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spbabe1d = $sp3c91bd->input('id'); $sp600a89 = $this->authQuery($sp3c91bd, \App\Order::class)->findOrFail($spbabe1d); if ($sp600a89->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp600a89->send_status = $sp3c91bd->input('send_status'); $sp600a89->saveOrFail(); return Response::success(); } function ship(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer')); $sp600a89 = $this->authQuery($sp3c91bd, \App\Order::class)->with('product')->findOrFail($sp3c91bd->input('id')); if ($sp600a89->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp600a89->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp108fd4 = $sp600a89->product->delivery; $spf4196a = ''; if ($sp108fd4 === \App\Product::DELIVERY_MANUAL) { $this->validate($sp3c91bd, array('card' => 'required|string')); $spf4196a = $sp3c91bd->input('card'); } $sp35e17a = null; $sp3301fd = array(); if (FundHelper::orderSuccess($sp600a89->id, function () use(&$sp600a89, &$sp35e17a, &$sp3301fd, $sp108fd4, $spf4196a) { $sp600a89 = \App\Order::where('id', $sp600a89->id)->lockForUpdate()->firstOrFail(); if ($sp600a89->cards && count($sp600a89->cards)) { $sp35e17a = '该订单已经发货，无需再次发货'; return false; } $spe7d79d = $sp600a89->product()->lockForUpdate()->firstOrFail(); if ($sp108fd4 === \App\Product::DELIVERY_MANUAL) { $sp600a89->status = \App\Order::STATUS_SUCCESS; $sp600a89->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp600a89->saveOrFail(); $sp3fbb89 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $spe7d79d->id, 'card' => $spf4196a, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp3301fd[] = $sp3fbb89->card; $sp600a89->cards()->attach($sp3fbb89->id); $spe7d79d->count_sold += $sp600a89->count; $spe7d79d->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spf7b822 = \App\Card::where('product_id', $spe7d79d->id)->whereRaw('`count_sold`<`count_all`')->take($sp600a89->count)->lockForUpdate()->get(); if (count($spf7b822) !== $sp600a89->count) { $sp35e17a = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp600a89->status = \App\Order::STATUS_SUCCESS; $sp600a89->saveOrFail(); $spf36bfb = array(); foreach ($spf7b822 as $sp3fbb89) { $spf36bfb[] = $sp3fbb89->id; $sp3301fd[] = $sp3fbb89->card; } $sp600a89->cards()->attach($spf36bfb); \App\Card::whereIn('id', $spf36bfb)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spe7d79d->count_sold += $sp600a89->count; $spe7d79d->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp030dc3 = @json_decode($sp600a89->contact_ext, true)['_mail']; if ($sp030dc3) { $sp600a89->sendEmail($sp030dc3); } } if ($sp600a89->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spe34083 = @json_decode($sp600a89->contact_ext, true)['_mobile']; if ($spe34083) { $sp600a89->sendSms($spe34083); } } $sp600a89['card_orders'] = array_map(function ($sp807bd0) { return array('card' => array('card' => $sp807bd0)); }, $sp3301fd); $sp600a89->addHidden(array('system_fee')); return Response::success($sp600a89); } else { return Response::fail($sp35e17a ?? '数据库繁忙, 请联系客服'); } } }