<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spdf16c9, $spf9b225 = false) { $spc64cdd = $this->authQuery($spdf16c9, \App\Order::class); $spf26f7e = (int) $spdf16c9->input('category_id'); $spfb3e15 = (int) $spdf16c9->input('product_id'); $spb27325 = (int) $spdf16c9->input('profit'); $sp2b2beb = $spf26f7e === \App\Product::ID_API || $spfb3e15 === \App\Product::ID_API; $spdb3063 = $spdf16c9->input('search', false); $sp085db7 = $spdf16c9->input('val', false); if ($spdb3063 && $sp085db7) { if ($spdb3063 == 'id' || $spdb3063 == 'order_no' || $spdb3063 === 'pay_trade_no' || $spdb3063 === 'api_out_no') { $spc64cdd->where($spdb3063, $sp085db7); } else { $spc64cdd->where($spdb3063, 'like', '%' . $sp085db7 . '%'); } } if ($spf26f7e > 0) { if ($spfb3e15 > 0) { $spc64cdd->where('product_id', $spfb3e15); } else { $spc64cdd->whereHas('product', function ($spc64cdd) use($spf26f7e) { $spc64cdd->where('category_id', $spf26f7e); }); } } $sp774cca = (int) $spdf16c9->input('recent', 0); if ($sp774cca) { $sp69bdaa = (new Carbon())->addDay(-$sp774cca); $spc64cdd->where(function ($spc64cdd) use($sp69bdaa) { $spc64cdd->where('paid_at', '>=', $sp69bdaa)->orWhere(function ($spc64cdd) use($sp69bdaa) { $spc64cdd->whereNull('paid_at')->where('created_at', '>=', $sp69bdaa); }); }); } else { $sp69bdaa = $spdf16c9->input('start_at', false); if (strlen($sp69bdaa)) { $spc64cdd->where(function ($spc64cdd) use($sp69bdaa) { $spc64cdd->where('paid_at', '>=', $sp69bdaa . ' 00:00:00')->orWhere(function ($spc64cdd) use($sp69bdaa) { $spc64cdd->whereNull('paid_at')->where('created_at', '>=', $sp69bdaa . ' 00:00:00'); }); }); } $spac7caa = $spdf16c9->input('end_at', false); if (strlen($spac7caa)) { $spc64cdd->where(function ($spc64cdd) use($spac7caa) { $spc64cdd->where('paid_at', '<=', $spac7caa . ' 23:59:59')->orWhere(function ($spc64cdd) use($spac7caa) { $spc64cdd->whereNull('paid_at')->where('created_at', '<=', $spac7caa . ' 23:59:59'); }); }); } } if ($spb27325) { $spc64cdd->where('status', \App\Order::STATUS_SUCCESS); $sp6a95a0 = clone $spc64cdd; $sp65708c = $sp6a95a0->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp24b3a3 = $spdf16c9->input('status'); if (strlen($sp24b3a3)) { $spc64cdd->whereIn('status', explode(',', $sp24b3a3)); } else { $spc64cdd->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp2b2beb) { $spc64cdd->where('product_id', \App\Product::ID_API); } else { $spc64cdd->where('product_id', '>', 0); $spc64cdd->with(array('product' => function (Relation $spc64cdd) { $spc64cdd->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $spc64cdd) { $spc64cdd->select(array('id', 'card')); })); } $spc64cdd->with(array('pay' => function (Relation $spc64cdd) { $spc64cdd->select(array('id', 'name')); })); $spc64cdd->orderBy('id', 'DESC'); if ($spf9b225 === true) { $sp6bbbeb = (int) $spdf16c9->input('export_update_status'); $sp3ae8d6 = $spdf16c9->input('export_update_card'); $spa34f50 = '﻿'; $spa34f50 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $spc64cdd->chunk(100, function ($sp514e13) use(&$spa34f50, $sp6bbbeb, $sp3ae8d6) { foreach ($sp514e13 as $spaf5db5) { if ($spaf5db5->status === \App\Order::STATUS_PAID) { if ($sp6bbbeb === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spaf5db5->send_status = $sp6bbbeb; $spaf5db5->saveOrFail(); } elseif ($sp6bbbeb === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spaf5db5->send_status = $sp6bbbeb; $spaf5db5->saveOrFail(); $this->ship(new Request(array('id' => $spaf5db5->id, 'card' => $sp3ae8d6))); } } $spb57c6e = $spaf5db5->contact_ext; if ($spb57c6e) { if ($spb57c6e[0] === '[') { $spb57c6e = substr($spb57c6e, 2); } if ($spb57c6e[strlen($spb57c6e) - 1] === ']') { $spb57c6e = substr($spb57c6e, 0, -2); } } $spa34f50 .= '"' . $spaf5db5->order_no . '","' . $spaf5db5->product_name . '","' . $spaf5db5->created_at . '","' . sprintf('%.2f', $spaf5db5->price / 100) . '","' . sprintf('%.2f', $spaf5db5->discount / 100) . '","' . sprintf('%.2f', $spaf5db5->paid / 100) . '","' . sprintf('%.2f', $spaf5db5->fee / 100) . '","' . sprintf('%.2f', $spaf5db5->cost / 100) . '","' . sprintf('%.2f', ($spaf5db5->paid - $spaf5db5->fee - $spaf5db5->cost) / 100) . '","' . ($spaf5db5->pay ? $spaf5db5->pay->name : '未知#' . $spaf5db5->pay_id) . '","' . $spaf5db5->pay_trade_no . '","' . $spaf5db5->paid_at . '","' . \App\Order::STATUS[$spaf5db5->status] . '","' . $spaf5db5->contact . '","' . $spb57c6e . '"'; $spa34f50 .= '
'; } }); $sp37fee3 = 'export_orders_' . $this->getUserIdOrFail($spdf16c9) . '_' . date('YmdHis') . '.csv'; $sp119a5f = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp37fee3), 'Content-Length' => strlen($spa34f50)); return response()->make($spa34f50, 200, $sp119a5f); } $sp7ec90f = (int) $spdf16c9->input('current_page', 1); $spc4a487 = (int) $spdf16c9->input('per_page', 20); $sp61ff14 = $spc64cdd->paginate($spc4a487, array('*'), 'page', $sp7ec90f); if ($spb27325) { $sp61ff14 = $sp61ff14->toArray(); $sp61ff14['profit_sum'] = $sp65708c; } return Response::success($sp61ff14); } function export(Request $spdf16c9) { return self::get($spdf16c9, true); } function stat(Request $spdf16c9) { $this->validate($spdf16c9, array('day' => 'required|integer|between:7,30')); $sp4f640c = (int) $spdf16c9->input('day'); if ($sp4f640c === 30) { $sp69bdaa = Carbon::now()->addMonths(-1)->toDateString() . ' 00:00:00'; } else { $sp69bdaa = Carbon::now()->addDays(-$sp4f640c)->toDateString() . ' 00:00:00'; } $sp61ff14 = $this->authQuery($spdf16c9, \App\Order::class)->where(function ($spc64cdd) { $spc64cdd->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp69bdaa)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp8ee8d3 = array(); foreach ($sp61ff14 as $sp442f8b) { $sp8ee8d3[$sp442f8b['date']] = array((int) $sp442f8b['count'], (int) $sp442f8b['paid'], (int) $sp442f8b['profit']); } return Response::success($sp8ee8d3); } function info(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer')); $spaacfde = $spdf16c9->input('id'); $spaf5db5 = $this->authQuery($spdf16c9, \App\Order::class)->with(array('pay' => function (Relation $spc64cdd) { $spc64cdd->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spc64cdd) { $spc64cdd->select(array('id', 'card')); }))->findOrFail($spaacfde); $spaf5db5->addHidden(array('system_fee')); return Response::success($spaf5db5); } function remark(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer', 'remark' => 'required|string')); $spaacfde = $spdf16c9->input('id'); $spaf5db5 = $this->authQuery($spdf16c9, \App\Order::class)->findOrFail($spaacfde); $spaf5db5->remark = $spdf16c9->input('remark'); $spaf5db5->save(); return Response::success(); } function set_send_status(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spaacfde = $spdf16c9->input('id'); $spaf5db5 = $this->authQuery($spdf16c9, \App\Order::class)->findOrFail($spaacfde); if ($spaf5db5->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spaf5db5->send_status = $spdf16c9->input('send_status'); $spaf5db5->saveOrFail(); return Response::success(); } function ship(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer')); $spaf5db5 = $this->authQuery($spdf16c9, \App\Order::class)->with('product')->findOrFail($spdf16c9->input('id')); if ($spaf5db5->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spaf5db5->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spa4a658 = $spaf5db5->product->delivery; $sp4ae3b9 = ''; if ($spa4a658 === \App\Product::DELIVERY_MANUAL) { $this->validate($spdf16c9, array('card' => 'required|string')); $sp4ae3b9 = $spdf16c9->input('card'); } $spf9ac7d = null; $spb26d17 = array(); if (FundHelper::orderSuccess($spaf5db5->id, function () use(&$spaf5db5, &$spf9ac7d, &$spb26d17, $spa4a658, $sp4ae3b9) { $spaf5db5 = \App\Order::where('id', $spaf5db5->id)->lockForUpdate()->firstOrFail(); if ($spaf5db5->cards && count($spaf5db5->cards)) { $spf9ac7d = '该订单已经发货，无需再次发货'; return false; } $sp94204a = $spaf5db5->product()->lockForUpdate()->firstOrFail(); if ($spa4a658 === \App\Product::DELIVERY_MANUAL) { $spaf5db5->status = \App\Order::STATUS_SUCCESS; $spaf5db5->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spaf5db5->saveOrFail(); $spe82347 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp94204a->id, 'card' => $sp4ae3b9, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $spb26d17[] = $spe82347->card; $spaf5db5->cards()->attach($spe82347->id); $sp94204a->count_sold += $spaf5db5->count; $sp94204a->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spab3b23 = \App\Card::where('product_id', $sp94204a->id)->whereRaw('`count_sold`<`count_all`')->take($spaf5db5->count)->lockForUpdate()->get(); if (count($spab3b23) !== $spaf5db5->count) { $spf9ac7d = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spaf5db5->status = \App\Order::STATUS_SUCCESS; $spaf5db5->saveOrFail(); $spc185a3 = array(); foreach ($spab3b23 as $spe82347) { $spc185a3[] = $spe82347->id; $spb26d17[] = $spe82347->card; } $spaf5db5->cards()->attach($spc185a3); \App\Card::whereIn('id', $spc185a3)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp94204a->count_sold += $spaf5db5->count; $sp94204a->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp94195a = @json_decode($spaf5db5->contact_ext, true)['_mail']; if ($sp94195a) { $spaf5db5->sendEmail($sp94195a); } } if ($spaf5db5->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp23d898 = @json_decode($spaf5db5->contact_ext, true)['_mobile']; if ($sp23d898) { $spaf5db5->sendSms($sp23d898); } } $spaf5db5['card_orders'] = array_map(function ($sp442f8b) { return array('card' => array('card' => $sp442f8b)); }, $spb26d17); $spaf5db5->addHidden(array('system_fee')); return Response::success($spaf5db5); } else { return Response::fail($spf9ac7d ?? '数据库繁忙, 请联系客服'); } } }