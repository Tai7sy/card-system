<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp054aa0, $sp28a33a = false) { $sp0964e2 = $this->authQuery($sp054aa0, \App\Order::class); $spc3ee02 = (int) $sp054aa0->input('category_id'); $sp107f34 = (int) $sp054aa0->input('product_id'); $sp069fd2 = (int) $sp054aa0->input('profit'); $sp87f2b7 = $spc3ee02 === \App\Product::ID_API || $sp107f34 === \App\Product::ID_API; $spcb6e4b = $sp054aa0->input('search', false); $spe07b43 = $sp054aa0->input('val', false); if ($spcb6e4b && $spe07b43) { if ($spcb6e4b == 'id' || $spcb6e4b == 'order_no' || $spcb6e4b === 'pay_trade_no' || $spcb6e4b === 'api_out_no') { $sp0964e2->where($spcb6e4b, $spe07b43); } else { $sp0964e2->where($spcb6e4b, 'like', '%' . $spe07b43 . '%'); } } if ($spc3ee02 > 0) { if ($sp107f34 > 0) { $sp0964e2->where('product_id', $sp107f34); } else { $sp0964e2->whereHas('product', function ($sp0964e2) use($spc3ee02) { $sp0964e2->where('category_id', $spc3ee02); }); } } $sp431b6e = (int) $sp054aa0->input('recent', 0); if ($sp431b6e) { $sp83f694 = (new Carbon())->addDay(-$sp431b6e); $sp0964e2->where(function ($sp0964e2) use($sp83f694) { $sp0964e2->where('paid_at', '>=', $sp83f694)->orWhere(function ($sp0964e2) use($sp83f694) { $sp0964e2->whereNull('paid_at')->where('created_at', '>=', $sp83f694); }); }); } else { $sp83f694 = $sp054aa0->input('start_at', false); if (strlen($sp83f694)) { $sp0964e2->where(function ($sp0964e2) use($sp83f694) { $sp0964e2->where('paid_at', '>=', $sp83f694 . ' 00:00:00')->orWhere(function ($sp0964e2) use($sp83f694) { $sp0964e2->whereNull('paid_at')->where('created_at', '>=', $sp83f694 . ' 00:00:00'); }); }); } $sp58b3dd = $sp054aa0->input('end_at', false); if (strlen($sp58b3dd)) { $sp0964e2->where(function ($sp0964e2) use($sp58b3dd) { $sp0964e2->where('paid_at', '<=', $sp58b3dd . ' 23:59:59')->orWhere(function ($sp0964e2) use($sp58b3dd) { $sp0964e2->whereNull('paid_at')->where('created_at', '<=', $sp58b3dd . ' 23:59:59'); }); }); } } if ($sp069fd2) { $sp0964e2->where('status', \App\Order::STATUS_SUCCESS); $spa42a4a = clone $sp0964e2; $spe64251 = $spa42a4a->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp4e5656 = $sp054aa0->input('status'); if (strlen($sp4e5656)) { $sp0964e2->whereIn('status', explode(',', $sp4e5656)); } else { $sp0964e2->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp87f2b7) { $sp0964e2->where('product_id', \App\Product::ID_API); } else { $sp0964e2->where('product_id', '>', 0); $sp0964e2->with(array('product' => function (Relation $sp0964e2) { $sp0964e2->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp0964e2) { $sp0964e2->select(array('id', 'card')); })); } $sp0964e2->with(array('pay' => function (Relation $sp0964e2) { $sp0964e2->select(array('id', 'name')); })); $sp0964e2->orderBy('id', 'DESC'); if ($sp28a33a === true) { $sp139d98 = (int) $sp054aa0->input('export_update_status'); $sp16c3c4 = $sp054aa0->input('export_update_card'); $spc321a8 = '﻿'; $spc321a8 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp0964e2->chunk(100, function ($spc05400) use(&$spc321a8, $sp139d98, $sp16c3c4) { foreach ($spc05400 as $sp8fbe20) { if ($sp8fbe20->status === \App\Order::STATUS_PAID) { if ($sp139d98 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp8fbe20->send_status = $sp139d98; $sp8fbe20->saveOrFail(); } elseif ($sp139d98 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp8fbe20->send_status = $sp139d98; $sp8fbe20->saveOrFail(); $this->ship(new Request(array('id' => $sp8fbe20->id, 'card' => $sp16c3c4))); } } $spd0e834 = $sp8fbe20->contact_ext; if ($spd0e834) { if ($spd0e834[0] === '[') { $spd0e834 = substr($spd0e834, 2); } if ($spd0e834[strlen($spd0e834) - 1] === ']') { $spd0e834 = substr($spd0e834, 0, -2); } } $spc321a8 .= '"' . $sp8fbe20->order_no . '","' . $sp8fbe20->product_name . '","' . $sp8fbe20->created_at . '","' . sprintf('%.2f', $sp8fbe20->price / 100) . '","' . sprintf('%.2f', $sp8fbe20->discount / 100) . '","' . sprintf('%.2f', $sp8fbe20->paid / 100) . '","' . sprintf('%.2f', $sp8fbe20->fee / 100) . '","' . sprintf('%.2f', $sp8fbe20->cost / 100) . '","' . sprintf('%.2f', ($sp8fbe20->paid - $sp8fbe20->fee - $sp8fbe20->cost) / 100) . '","' . ($sp8fbe20->pay ? $sp8fbe20->pay->name : '未知#' . $sp8fbe20->pay_id) . '","' . $sp8fbe20->pay_trade_no . '","' . $sp8fbe20->paid_at . '","' . \App\Order::STATUS[$sp8fbe20->status] . '","' . $sp8fbe20->contact . '","' . $spd0e834 . '"'; $spc321a8 .= '
'; } }); $sp3703ac = 'export_orders_' . $this->getUserIdOrFail($sp054aa0) . '_' . date('YmdHis') . '.csv'; $sp4977e0 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp3703ac), 'Content-Length' => strlen($spc321a8)); return response()->make($spc321a8, 200, $sp4977e0); } $sp1d90fd = $sp054aa0->input('current_page', 1); $sp21d879 = $sp054aa0->input('per_page', 20); $sp03b529 = $sp0964e2->paginate($sp21d879, array('*'), 'page', $sp1d90fd); if ($sp069fd2) { $sp03b529 = $sp03b529->toArray(); $sp03b529['profit_sum'] = $spe64251; } return Response::success($sp03b529); } function export(Request $sp054aa0) { return self::get($sp054aa0, true); } function stat(Request $sp054aa0) { $this->validate($sp054aa0, array('day' => 'required|integer|between:7,30')); $sp2b46ec = (int) $sp054aa0->input('day'); if ($sp2b46ec === 30) { $sp4e000d = Carbon::now()->addMonths(-1); } else { $sp4e000d = Carbon::now()->addDays(-$sp2b46ec); } $sp03b529 = $this->authQuery($sp054aa0, \App\Order::class)->where(function ($sp0964e2) { $sp0964e2->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp4e000d)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp93ae8e = array(); foreach ($sp03b529 as $sp13bc98) { $sp93ae8e[$sp13bc98['date']] = array((int) $sp13bc98['count'], (int) $sp13bc98['paid'], (int) $sp13bc98['profit']); } return Response::success($sp93ae8e); } function info(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'required|integer')); $spde29a5 = $sp054aa0->input('id'); $sp8fbe20 = $this->authQuery($sp054aa0, \App\Order::class)->with(array('pay' => function (Relation $sp0964e2) { $sp0964e2->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp0964e2) { $sp0964e2->select(array('id', 'card')); }))->findOrFail($spde29a5); $sp8fbe20->addHidden(array('system_fee')); return Response::success($sp8fbe20); } function remark(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'required|integer', 'remark' => 'required|string')); $spde29a5 = $sp054aa0->input('id'); $sp8fbe20 = $this->authQuery($sp054aa0, \App\Order::class)->findOrFail($spde29a5); $sp8fbe20->remark = $sp054aa0->input('remark'); $sp8fbe20->save(); return Response::success(); } function set_send_status(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spde29a5 = $sp054aa0->input('id'); $sp8fbe20 = $this->authQuery($sp054aa0, \App\Order::class)->findOrFail($spde29a5); if ($sp8fbe20->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp8fbe20->send_status = $sp054aa0->input('send_status'); $sp8fbe20->saveOrFail(); return Response::success(); } function ship(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'required|integer')); $sp8fbe20 = $this->authQuery($sp054aa0, \App\Order::class)->with('product')->findOrFail($sp054aa0->input('id')); if ($sp8fbe20->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp8fbe20->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp15e072 = $sp8fbe20->product->delivery; $spf8d7b6 = ''; if ($sp15e072 === \App\Product::DELIVERY_MANUAL) { $this->validate($sp054aa0, array('card' => 'required|string')); $spf8d7b6 = $sp054aa0->input('card'); } $sp79349e = null; $sp61a326 = array(); if (FundHelper::orderSuccess($sp8fbe20->id, function () use(&$sp8fbe20, &$sp79349e, &$sp61a326, $sp15e072, $spf8d7b6) { $sp8fbe20 = \App\Order::where('id', $sp8fbe20->id)->lockForUpdate()->firstOrFail(); if ($sp8fbe20->cards && count($sp8fbe20->cards)) { $sp79349e = '该订单已经发货，无需再次发货'; return false; } $sp648779 = $sp8fbe20->product()->lockForUpdate()->firstOrFail(); if ($sp15e072 === \App\Product::DELIVERY_MANUAL) { $sp8fbe20->status = \App\Order::STATUS_SUCCESS; $sp8fbe20->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp8fbe20->saveOrFail(); $sp33a701 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp648779->id, 'card' => $spf8d7b6, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp61a326[] = $sp33a701->card; $sp8fbe20->cards()->attach($sp33a701->id); $sp648779->count_sold += $sp8fbe20->count; $sp648779->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spe6d16e = \App\Card::where('product_id', $sp648779->id)->whereRaw('`count_sold`<`count_all`')->take($sp8fbe20->count)->lockForUpdate()->get(); if (count($spe6d16e) !== $sp8fbe20->count) { $sp79349e = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp8fbe20->status = \App\Order::STATUS_SUCCESS; $sp8fbe20->saveOrFail(); $spfafdbb = array(); foreach ($spe6d16e as $sp33a701) { $spfafdbb[] = $sp33a701->id; $sp61a326[] = $sp33a701->card; } $sp8fbe20->cards()->attach($spfafdbb); \App\Card::whereIn('id', $spfafdbb)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp648779->count_sold += $sp8fbe20->count; $sp648779->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spaac16b = @json_decode($sp8fbe20->contact_ext, true)['_mail']; if ($spaac16b) { $sp8fbe20->sendEmail($spaac16b); } } if ($sp8fbe20->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp848a51 = @json_decode($sp8fbe20->contact_ext, true)['_mobile']; if ($sp848a51) { $sp8fbe20->sendSms($sp848a51); } } $sp8fbe20['card_orders'] = array_map(function ($sp13bc98) { return array('card' => array('card' => $sp13bc98)); }, $sp61a326); $sp8fbe20->addHidden(array('system_fee')); return Response::success($sp8fbe20); } else { return Response::fail($sp79349e ?? '数据库繁忙, 请联系客服'); } } }