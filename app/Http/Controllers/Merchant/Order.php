<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spa27895, $sp4de76b = false) { $sp7e6fa3 = $this->authQuery($spa27895, \App\Order::class); $sp980f44 = (int) $spa27895->input('category_id'); $sp112a12 = (int) $spa27895->input('product_id'); $sp279498 = (int) $spa27895->input('profit'); $sp7c02b6 = $sp980f44 === \App\Product::ID_API || $sp112a12 === \App\Product::ID_API; $spfe451d = $spa27895->input('search', false); $sp0edb8f = $spa27895->input('val', false); if ($spfe451d && $sp0edb8f) { if ($spfe451d == 'id' || $spfe451d == 'order_no' || $spfe451d === 'pay_trade_no' || $spfe451d === 'api_out_no') { $sp7e6fa3->where($spfe451d, $sp0edb8f); } else { $sp7e6fa3->where($spfe451d, 'like', '%' . $sp0edb8f . '%'); } } if ($sp980f44 > 0) { if ($sp112a12 > 0) { $sp7e6fa3->where('product_id', $sp112a12); } else { $sp7e6fa3->whereHas('product', function ($sp7e6fa3) use($sp980f44) { $sp7e6fa3->where('category_id', $sp980f44); }); } } $specd399 = (int) $spa27895->input('recent', 0); if ($specd399) { $sp4faace = (new Carbon())->addDay(-$specd399); $sp7e6fa3->where(function ($sp7e6fa3) use($sp4faace) { $sp7e6fa3->where('paid_at', '>=', $sp4faace)->orWhere(function ($sp7e6fa3) use($sp4faace) { $sp7e6fa3->whereNull('paid_at')->where('created_at', '>=', $sp4faace); }); }); } else { $sp4faace = $spa27895->input('start_at', false); if (strlen($sp4faace)) { $sp7e6fa3->where(function ($sp7e6fa3) use($sp4faace) { $sp7e6fa3->where('paid_at', '>=', $sp4faace . ' 00:00:00')->orWhere(function ($sp7e6fa3) use($sp4faace) { $sp7e6fa3->whereNull('paid_at')->where('created_at', '>=', $sp4faace . ' 00:00:00'); }); }); } $sp66bad0 = $spa27895->input('end_at', false); if (strlen($sp66bad0)) { $sp7e6fa3->where(function ($sp7e6fa3) use($sp66bad0) { $sp7e6fa3->where('paid_at', '<=', $sp66bad0 . ' 23:59:59')->orWhere(function ($sp7e6fa3) use($sp66bad0) { $sp7e6fa3->whereNull('paid_at')->where('created_at', '<=', $sp66bad0 . ' 23:59:59'); }); }); } } if ($sp279498) { $sp7e6fa3->where('status', \App\Order::STATUS_SUCCESS); $sp8f49dc = clone $sp7e6fa3; $spb21619 = $sp8f49dc->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spf66c3d = $spa27895->input('status'); if (strlen($spf66c3d)) { $sp7e6fa3->whereIn('status', explode(',', $spf66c3d)); } else { $sp7e6fa3->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp7c02b6) { $sp7e6fa3->where('product_id', \App\Product::ID_API); } else { $sp7e6fa3->where('product_id', '>', 0); $sp7e6fa3->with(array('product' => function (Relation $sp7e6fa3) { $sp7e6fa3->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp7e6fa3) { $sp7e6fa3->select(array('id', 'card')); })); } $sp7e6fa3->with(array('pay' => function (Relation $sp7e6fa3) { $sp7e6fa3->select(array('id', 'name')); })); $sp7e6fa3->orderBy('id', 'DESC'); if ($sp4de76b === true) { $sp9ff49b = (int) $spa27895->input('export_update_status'); $spb7d1f5 = $spa27895->input('export_update_card'); $sp89027b = '﻿'; $sp89027b .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp7e6fa3->chunk(100, function ($spcc3b3e) use(&$sp89027b, $sp9ff49b, $spb7d1f5) { foreach ($spcc3b3e as $sp7b2cfc) { if ($sp7b2cfc->status === \App\Order::STATUS_PAID) { if ($sp9ff49b === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp7b2cfc->send_status = $sp9ff49b; $sp7b2cfc->saveOrFail(); } elseif ($sp9ff49b === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp7b2cfc->send_status = $sp9ff49b; $sp7b2cfc->saveOrFail(); $this->ship(new Request(array('id' => $sp7b2cfc->id, 'card' => $spb7d1f5))); } } $spa3a8ba = $sp7b2cfc->contact_ext; if ($spa3a8ba) { if ($spa3a8ba[0] === '[') { $spa3a8ba = substr($spa3a8ba, 2); } if ($spa3a8ba[strlen($spa3a8ba) - 1] === ']') { $spa3a8ba = substr($spa3a8ba, 0, -2); } } $sp89027b .= '"' . $sp7b2cfc->order_no . '","' . $sp7b2cfc->product_name . '","' . $sp7b2cfc->created_at . '","' . sprintf('%.2f', $sp7b2cfc->price / 100) . '","' . sprintf('%.2f', $sp7b2cfc->discount / 100) . '","' . sprintf('%.2f', $sp7b2cfc->paid / 100) . '","' . sprintf('%.2f', $sp7b2cfc->fee / 100) . '","' . sprintf('%.2f', $sp7b2cfc->cost / 100) . '","' . sprintf('%.2f', ($sp7b2cfc->paid - $sp7b2cfc->fee - $sp7b2cfc->cost) / 100) . '","' . ($sp7b2cfc->pay ? $sp7b2cfc->pay->name : '未知#' . $sp7b2cfc->pay_id) . '","' . $sp7b2cfc->pay_trade_no . '","' . $sp7b2cfc->paid_at . '","' . \App\Order::STATUS[$sp7b2cfc->status] . '","' . $sp7b2cfc->contact . '","' . $spa3a8ba . '"'; $sp89027b .= '
'; } }); $sp69a6c1 = 'export_orders_' . $this->getUserIdOrFail($spa27895) . '_' . date('YmdHis') . '.csv'; $sp697dbb = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp69a6c1), 'Content-Length' => strlen($sp89027b)); return response()->make($sp89027b, 200, $sp697dbb); } $spf69625 = $spa27895->input('current_page', 1); $spe8f5a8 = $spa27895->input('per_page', 20); $sp966ae1 = $sp7e6fa3->paginate($spe8f5a8, array('*'), 'page', $spf69625); if ($sp279498) { $sp966ae1 = $sp966ae1->toArray(); $sp966ae1['profit_sum'] = $spb21619; } return Response::success($sp966ae1); } function export(Request $spa27895) { return self::get($spa27895, true); } function stat(Request $spa27895) { $this->validate($spa27895, array('day' => 'required|integer|between:7,30')); $spcb4d2f = (int) $spa27895->input('day'); if ($spcb4d2f === 30) { $sp118ccb = Carbon::now()->addMonths(-1); } else { $sp118ccb = Carbon::now()->addDays(-$spcb4d2f); } $sp966ae1 = $this->authQuery($spa27895, \App\Order::class)->where(function ($sp7e6fa3) { $sp7e6fa3->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp118ccb)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp786169 = array(); foreach ($sp966ae1 as $spc6f905) { $sp786169[$spc6f905['date']] = array((int) $spc6f905['count'], (int) $spc6f905['paid'], (int) $spc6f905['profit']); } return Response::success($sp786169); } function info(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer')); $sp746ee1 = $spa27895->input('id'); $sp7b2cfc = $this->authQuery($spa27895, \App\Order::class)->with(array('pay' => function (Relation $sp7e6fa3) { $sp7e6fa3->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp7e6fa3) { $sp7e6fa3->select(array('id', 'card')); }))->findOrFail($sp746ee1); $sp7b2cfc->addHidden(array('system_fee')); return Response::success($sp7b2cfc); } function remark(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer', 'remark' => 'required|string')); $sp746ee1 = $spa27895->input('id'); $sp7b2cfc = $this->authQuery($spa27895, \App\Order::class)->findOrFail($sp746ee1); $sp7b2cfc->remark = $spa27895->input('remark'); $sp7b2cfc->save(); return Response::success(); } function set_send_status(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp746ee1 = $spa27895->input('id'); $sp7b2cfc = $this->authQuery($spa27895, \App\Order::class)->findOrFail($sp746ee1); if ($sp7b2cfc->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp7b2cfc->send_status = $spa27895->input('send_status'); $sp7b2cfc->saveOrFail(); return Response::success(); } function ship(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer')); $sp7b2cfc = $this->authQuery($spa27895, \App\Order::class)->with('product')->findOrFail($spa27895->input('id')); if ($sp7b2cfc->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp7b2cfc->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spee4e15 = $sp7b2cfc->product->delivery; $spc9eeab = ''; if ($spee4e15 === \App\Product::DELIVERY_MANUAL) { $this->validate($spa27895, array('card' => 'required|string')); $spc9eeab = $spa27895->input('card'); } $spd39d17 = null; $sp7c8ced = array(); if (FundHelper::orderSuccess($sp7b2cfc->id, function () use(&$sp7b2cfc, &$spd39d17, &$sp7c8ced, $spee4e15, $spc9eeab) { $sp7b2cfc = \App\Order::where('id', $sp7b2cfc->id)->lockForUpdate()->firstOrFail(); if ($sp7b2cfc->cards && count($sp7b2cfc->cards)) { $spd39d17 = '该订单已经发货，无需再次发货'; return false; } $sp1a3ec5 = $sp7b2cfc->product()->lockForUpdate()->firstOrFail(); if ($spee4e15 === \App\Product::DELIVERY_MANUAL) { $sp7b2cfc->status = \App\Order::STATUS_SUCCESS; $sp7b2cfc->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp7b2cfc->saveOrFail(); $sp089eb8 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp1a3ec5->id, 'card' => $spc9eeab, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp7c8ced[] = $sp089eb8->card; $sp7b2cfc->cards()->attach($sp089eb8->id); $sp1a3ec5->count_sold += $sp7b2cfc->count; $sp1a3ec5->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp16ec83 = \App\Card::where('product_id', $sp1a3ec5->id)->whereRaw('`count_sold`<`count_all`')->take($sp7b2cfc->count)->lockForUpdate()->get(); if (count($sp16ec83) !== $sp7b2cfc->count) { $spd39d17 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp7b2cfc->status = \App\Order::STATUS_SUCCESS; $sp7b2cfc->saveOrFail(); $sp5be395 = array(); foreach ($sp16ec83 as $sp089eb8) { $sp5be395[] = $sp089eb8->id; $sp7c8ced[] = $sp089eb8->card; } $sp7b2cfc->cards()->attach($sp5be395); \App\Card::whereIn('id', $sp5be395)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp1a3ec5->count_sold += $sp7b2cfc->count; $sp1a3ec5->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp98ce8d = @json_decode($sp7b2cfc->contact_ext, true)['_mail']; if ($sp98ce8d) { $sp7b2cfc->sendEmail($sp98ce8d); } } if ($sp7b2cfc->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spd9b726 = @json_decode($sp7b2cfc->contact_ext, true)['_mobile']; if ($spd9b726) { $sp7b2cfc->sendSms($spd9b726); } } $sp7b2cfc['card_orders'] = array_map(function ($spc6f905) { return array('card' => array('card' => $spc6f905)); }, $sp7c8ced); $sp7b2cfc->addHidden(array('system_fee')); return Response::success($sp7b2cfc); } else { return Response::fail($spd39d17 ?? '数据库繁忙, 请联系客服'); } } }