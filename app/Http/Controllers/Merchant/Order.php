<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spbaac90, $spab49e7 = false) { $sp50919b = $this->authQuery($spbaac90, \App\Order::class); $sp35f37e = (int) $spbaac90->input('category_id'); $sp1849cc = (int) $spbaac90->input('product_id'); $sp066d92 = (int) $spbaac90->input('profit'); $spfbb46b = $sp35f37e === \App\Product::ID_API || $sp1849cc === \App\Product::ID_API; $sp4d9eeb = $spbaac90->input('search', false); $spbd7375 = $spbaac90->input('val', false); if ($sp4d9eeb && $spbd7375) { if ($sp4d9eeb == 'id' || $sp4d9eeb == 'order_no' || $sp4d9eeb === 'pay_trade_no' || $sp4d9eeb === 'api_out_no') { $sp50919b->where($sp4d9eeb, $spbd7375); } else { $sp50919b->where($sp4d9eeb, 'like', '%' . $spbd7375 . '%'); } } if ($sp35f37e > 0) { if ($sp1849cc > 0) { $sp50919b->where('product_id', $sp1849cc); } else { $sp50919b->whereHas('product', function ($sp50919b) use($sp35f37e) { $sp50919b->where('category_id', $sp35f37e); }); } } $sp9c5424 = (int) $spbaac90->input('recent', 0); if ($sp9c5424) { $sp4bb16c = (new Carbon())->addDay(-$sp9c5424); $sp50919b->where(function ($sp50919b) use($sp4bb16c) { $sp50919b->where('paid_at', '>=', $sp4bb16c)->orWhere(function ($sp50919b) use($sp4bb16c) { $sp50919b->whereNull('paid_at')->where('created_at', '>=', $sp4bb16c); }); }); } else { $sp4bb16c = $spbaac90->input('start_at', false); if (strlen($sp4bb16c)) { $sp50919b->where(function ($sp50919b) use($sp4bb16c) { $sp50919b->where('paid_at', '>=', $sp4bb16c . ' 00:00:00')->orWhere(function ($sp50919b) use($sp4bb16c) { $sp50919b->whereNull('paid_at')->where('created_at', '>=', $sp4bb16c . ' 00:00:00'); }); }); } $sp574dc3 = $spbaac90->input('end_at', false); if (strlen($sp574dc3)) { $sp50919b->where(function ($sp50919b) use($sp574dc3) { $sp50919b->where('paid_at', '<=', $sp574dc3 . ' 23:59:59')->orWhere(function ($sp50919b) use($sp574dc3) { $sp50919b->whereNull('paid_at')->where('created_at', '<=', $sp574dc3 . ' 23:59:59'); }); }); } } if ($sp066d92) { $sp50919b->where('status', \App\Order::STATUS_SUCCESS); $sp4baf52 = clone $sp50919b; $spa52daa = $sp4baf52->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp646c5e = $spbaac90->input('status'); if (strlen($sp646c5e)) { $sp50919b->whereIn('status', explode(',', $sp646c5e)); } else { $sp50919b->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spfbb46b) { $sp50919b->where('product_id', \App\Product::ID_API); } else { $sp50919b->where('product_id', '>', 0); $sp50919b->with(array('product' => function (Relation $sp50919b) { $sp50919b->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp50919b) { $sp50919b->select(array('id', 'card')); })); } $sp50919b->with(array('pay' => function (Relation $sp50919b) { $sp50919b->select(array('id', 'name')); })); $sp50919b->orderBy('id', 'DESC'); if ($spab49e7 === true) { $sp47ecb2 = (int) $spbaac90->input('export_update_status'); $sp36a1f5 = $spbaac90->input('export_update_card'); $sp56c9b1 = '﻿'; $sp56c9b1 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp50919b->chunk(100, function ($spb8946a) use(&$sp56c9b1, $sp47ecb2, $sp36a1f5) { foreach ($spb8946a as $spb656d1) { if ($spb656d1->status === \App\Order::STATUS_PAID) { if ($sp47ecb2 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spb656d1->send_status = $sp47ecb2; $spb656d1->saveOrFail(); } elseif ($sp47ecb2 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spb656d1->send_status = $sp47ecb2; $spb656d1->saveOrFail(); $this->ship(new Request(array('id' => $spb656d1->id, 'card' => $sp36a1f5))); } } $sp8ed4c0 = $spb656d1->contact_ext; if ($sp8ed4c0) { if ($sp8ed4c0[0] === '[') { $sp8ed4c0 = substr($sp8ed4c0, 2); } if ($sp8ed4c0[strlen($sp8ed4c0) - 1] === ']') { $sp8ed4c0 = substr($sp8ed4c0, 0, -2); } } $sp56c9b1 .= '"' . $spb656d1->order_no . '","' . $spb656d1->product_name . '","' . $spb656d1->created_at . '","' . sprintf('%.2f', $spb656d1->price / 100) . '","' . sprintf('%.2f', $spb656d1->discount / 100) . '","' . sprintf('%.2f', $spb656d1->paid / 100) . '","' . sprintf('%.2f', $spb656d1->fee / 100) . '","' . sprintf('%.2f', $spb656d1->cost / 100) . '","' . sprintf('%.2f', ($spb656d1->paid - $spb656d1->fee - $spb656d1->cost) / 100) . '","' . ($spb656d1->pay ? $spb656d1->pay->name : '未知#' . $spb656d1->pay_id) . '","' . $spb656d1->pay_trade_no . '","' . $spb656d1->paid_at . '","' . \App\Order::STATUS[$spb656d1->status] . '","' . $spb656d1->contact . '","' . $sp8ed4c0 . '"'; $sp56c9b1 .= '
'; } }); $sp4b0528 = 'export_orders_' . $this->getUserIdOrFail($spbaac90) . '_' . date('YmdHis') . '.csv'; $sp9e3fb1 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp4b0528), 'Content-Length' => strlen($sp56c9b1)); return response()->make($sp56c9b1, 200, $sp9e3fb1); } $spb32f8f = $spbaac90->input('current_page', 1); $sp731c42 = $spbaac90->input('per_page', 20); $spd5d914 = $sp50919b->paginate($sp731c42, array('*'), 'page', $spb32f8f); if ($sp066d92) { $spd5d914 = $spd5d914->toArray(); $spd5d914['profit_sum'] = $spa52daa; } return Response::success($spd5d914); } function export(Request $spbaac90) { return self::get($spbaac90, true); } function stat(Request $spbaac90) { $this->validate($spbaac90, array('day' => 'required|integer|between:7,30')); $spc79160 = (int) $spbaac90->input('day'); if ($spc79160 === 30) { $sp8d5de0 = Carbon::now()->addMonths(-1); } else { $sp8d5de0 = Carbon::now()->addDays(-$spc79160); } $spd5d914 = $this->authQuery($spbaac90, \App\Order::class)->where(function ($sp50919b) { $sp50919b->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp8d5de0)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp599084 = array(); foreach ($spd5d914 as $spdb8903) { $sp599084[$spdb8903['date']] = array((int) $spdb8903['count'], (int) $spdb8903['paid'], (int) $spdb8903['profit']); } return Response::success($sp599084); } function info(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer')); $sp1ffc0e = $spbaac90->input('id'); $spb656d1 = $this->authQuery($spbaac90, \App\Order::class)->with(array('pay' => function (Relation $sp50919b) { $sp50919b->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp50919b) { $sp50919b->select(array('id', 'card')); }))->findOrFail($sp1ffc0e); $spb656d1->addHidden(array('system_fee')); return Response::success($spb656d1); } function remark(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer', 'remark' => 'required|string')); $sp1ffc0e = $spbaac90->input('id'); $spb656d1 = $this->authQuery($spbaac90, \App\Order::class)->findOrFail($sp1ffc0e); $spb656d1->remark = $spbaac90->input('remark'); $spb656d1->save(); return Response::success(); } function set_send_status(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp1ffc0e = $spbaac90->input('id'); $spb656d1 = $this->authQuery($spbaac90, \App\Order::class)->findOrFail($sp1ffc0e); if ($spb656d1->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spb656d1->send_status = $spbaac90->input('send_status'); $spb656d1->saveOrFail(); return Response::success(); } function ship(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer')); $spb656d1 = $this->authQuery($spbaac90, \App\Order::class)->with('product')->findOrFail($spbaac90->input('id')); if ($spb656d1->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spb656d1->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp3bc280 = $spb656d1->product->delivery; $sp54beea = ''; if ($sp3bc280 === \App\Product::DELIVERY_MANUAL) { $this->validate($spbaac90, array('card' => 'required|string')); $sp54beea = $spbaac90->input('card'); } $spec403b = null; $sp221ed7 = array(); if (FundHelper::orderSuccess($spb656d1->id, function () use(&$spb656d1, &$spec403b, &$sp221ed7, $sp3bc280, $sp54beea) { $spb656d1 = \App\Order::where('id', $spb656d1->id)->lockForUpdate()->firstOrFail(); if ($spb656d1->cards && count($spb656d1->cards)) { $spec403b = '该订单已经发货，无需再次发货'; return false; } $sp73d110 = $spb656d1->product()->lockForUpdate()->firstOrFail(); if ($sp3bc280 === \App\Product::DELIVERY_MANUAL) { $spb656d1->status = \App\Order::STATUS_SUCCESS; $spb656d1->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spb656d1->saveOrFail(); $sp836f4b = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp73d110->id, 'card' => $sp54beea, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp221ed7[] = $sp836f4b->card; $spb656d1->cards()->attach($sp836f4b->id); $sp73d110->count_sold += $spb656d1->count; $sp73d110->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp93fc77 = \App\Card::where('product_id', $sp73d110->id)->whereRaw('`count_sold`<`count_all`')->take($spb656d1->count)->lockForUpdate()->get(); if (count($sp93fc77) !== $spb656d1->count) { $spec403b = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spb656d1->status = \App\Order::STATUS_SUCCESS; $spb656d1->saveOrFail(); $spb1562b = array(); foreach ($sp93fc77 as $sp836f4b) { $spb1562b[] = $sp836f4b->id; $sp221ed7[] = $sp836f4b->card; } $spb656d1->cards()->attach($spb1562b); \App\Card::whereIn('id', $spb1562b)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp73d110->count_sold += $spb656d1->count; $sp73d110->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp7d1f72 = @json_decode($spb656d1->contact_ext, true)['_mail']; if ($sp7d1f72) { $spb656d1->sendEmail($sp7d1f72); } } if ($spb656d1->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp4ecb5c = @json_decode($spb656d1->contact_ext, true)['_mobile']; if ($sp4ecb5c) { $spb656d1->sendSms($sp4ecb5c); } } $spb656d1['card_orders'] = array_map(function ($spdb8903) { return array('card' => array('card' => $spdb8903)); }, $sp221ed7); $spb656d1->addHidden(array('system_fee')); return Response::success($spb656d1); } else { return Response::fail($spec403b ?? '数据库繁忙, 请联系客服'); } } }