<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp375069, $spa7914e = false) { $sped9569 = $this->authQuery($sp375069, \App\Order::class); $spca39ca = (int) $sp375069->input('category_id'); $sp138ddb = (int) $sp375069->input('product_id'); $sp328e97 = (int) $sp375069->input('profit'); $sp18e2f4 = $spca39ca === \App\Product::ID_API || $sp138ddb === \App\Product::ID_API; $spca3671 = $sp375069->input('search', false); $spb689af = $sp375069->input('val', false); if ($spca3671 && $spb689af) { if ($spca3671 == 'id' || $spca3671 == 'order_no' || $spca3671 === 'pay_trade_no' || $spca3671 === 'api_out_no') { $sped9569->where($spca3671, $spb689af); } else { $sped9569->where($spca3671, 'like', '%' . $spb689af . '%'); } } if ($spca39ca > 0) { if ($sp138ddb > 0) { $sped9569->where('product_id', $sp138ddb); } else { $sped9569->whereHas('product', function ($sped9569) use($spca39ca) { $sped9569->where('category_id', $spca39ca); }); } } $spcdc0e0 = (int) $sp375069->input('recent', 0); if ($spcdc0e0) { $sp1dc097 = (new Carbon())->addDay(-$spcdc0e0); $sped9569->where(function ($sped9569) use($sp1dc097) { $sped9569->where('paid_at', '>=', $sp1dc097)->orWhere(function ($sped9569) use($sp1dc097) { $sped9569->whereNull('paid_at')->where('created_at', '>=', $sp1dc097); }); }); } else { $sp1dc097 = $sp375069->input('start_at', false); if (strlen($sp1dc097)) { $sped9569->where(function ($sped9569) use($sp1dc097) { $sped9569->where('paid_at', '>=', $sp1dc097 . ' 00:00:00')->orWhere(function ($sped9569) use($sp1dc097) { $sped9569->whereNull('paid_at')->where('created_at', '>=', $sp1dc097 . ' 00:00:00'); }); }); } $spa94d7a = $sp375069->input('end_at', false); if (strlen($spa94d7a)) { $sped9569->where(function ($sped9569) use($spa94d7a) { $sped9569->where('paid_at', '<=', $spa94d7a . ' 23:59:59')->orWhere(function ($sped9569) use($spa94d7a) { $sped9569->whereNull('paid_at')->where('created_at', '<=', $spa94d7a . ' 23:59:59'); }); }); } } if ($sp328e97) { $sped9569->where('status', \App\Order::STATUS_SUCCESS); $spd70854 = clone $sped9569; $sp17f035 = $spd70854->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spfc8a83 = $sp375069->input('status'); if (strlen($spfc8a83)) { $sped9569->whereIn('status', explode(',', $spfc8a83)); } else { $sped9569->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp18e2f4) { $sped9569->where('product_id', \App\Product::ID_API); } else { $sped9569->where('product_id', '>', 0); $sped9569->with(array('product' => function (Relation $sped9569) { $sped9569->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sped9569) { $sped9569->select(array('id', 'card')); })); } $sped9569->with(array('pay' => function (Relation $sped9569) { $sped9569->select(array('id', 'name')); })); $sped9569->orderBy('id', 'DESC'); if ($spa7914e === true) { $spd7f373 = (int) $sp375069->input('export_update_status'); $spe15521 = $sp375069->input('export_update_card'); $sp2a807c = '﻿'; $sp2a807c .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sped9569->chunk(100, function ($sp46f34e) use(&$sp2a807c, $spd7f373, $spe15521) { foreach ($sp46f34e as $spf6b161) { if ($spf6b161->status === \App\Order::STATUS_PAID) { if ($spd7f373 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spf6b161->send_status = $spd7f373; $spf6b161->saveOrFail(); } elseif ($spd7f373 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spf6b161->send_status = $spd7f373; $spf6b161->saveOrFail(); $this->ship(new Request(array('id' => $spf6b161->id, 'card' => $spe15521))); } } $sp0e54ce = $spf6b161->contact_ext; if ($sp0e54ce) { if ($sp0e54ce[0] === '[') { $sp0e54ce = substr($sp0e54ce, 2); } if ($sp0e54ce[strlen($sp0e54ce) - 1] === ']') { $sp0e54ce = substr($sp0e54ce, 0, -2); } } $sp2a807c .= '"' . $spf6b161->order_no . '","' . $spf6b161->product_name . '","' . $spf6b161->created_at . '","' . sprintf('%.2f', $spf6b161->price / 100) . '","' . sprintf('%.2f', $spf6b161->discount / 100) . '","' . sprintf('%.2f', $spf6b161->paid / 100) . '","' . sprintf('%.2f', $spf6b161->fee / 100) . '","' . sprintf('%.2f', $spf6b161->cost / 100) . '","' . sprintf('%.2f', ($spf6b161->paid - $spf6b161->fee - $spf6b161->cost) / 100) . '","' . ($spf6b161->pay ? $spf6b161->pay->name : '未知#' . $spf6b161->pay_id) . '","' . $spf6b161->pay_trade_no . '","' . $spf6b161->paid_at . '","' . \App\Order::STATUS[$spf6b161->status] . '","' . $spf6b161->contact . '","' . $sp0e54ce . '"'; $sp2a807c .= '
'; } }); $spab814e = 'export_orders_' . $this->getUserIdOrFail($sp375069) . '_' . date('YmdHis') . '.csv'; $sp472234 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spab814e), 'Content-Length' => strlen($sp2a807c)); return response()->make($sp2a807c, 200, $sp472234); } $sp19fe4a = (int) $sp375069->input('current_page', 1); $sp90d207 = (int) $sp375069->input('per_page', 20); $sp3aa6bd = $sped9569->paginate($sp90d207, array('*'), 'page', $sp19fe4a); if ($sp328e97) { $sp3aa6bd = $sp3aa6bd->toArray(); $sp3aa6bd['profit_sum'] = $sp17f035; } return Response::success($sp3aa6bd); } function export(Request $sp375069) { return self::get($sp375069, true); } function stat(Request $sp375069) { $this->validate($sp375069, array('day' => 'required|integer|between:7,30')); $spe5b6ad = (int) $sp375069->input('day'); if ($spe5b6ad === 30) { $sp16bc94 = Carbon::now()->addMonths(-1); } else { $sp16bc94 = Carbon::now()->addDays(-$spe5b6ad); } $sp3aa6bd = $this->authQuery($sp375069, \App\Order::class)->where(function ($sped9569) { $sped9569->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp16bc94)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp6706d8 = array(); foreach ($sp3aa6bd as $spb8bcdd) { $sp6706d8[$spb8bcdd['date']] = array((int) $spb8bcdd['count'], (int) $spb8bcdd['paid'], (int) $spb8bcdd['profit']); } return Response::success($sp6706d8); } function info(Request $sp375069) { $this->validate($sp375069, array('id' => 'required|integer')); $sp39113c = $sp375069->input('id'); $spf6b161 = $this->authQuery($sp375069, \App\Order::class)->with(array('pay' => function (Relation $sped9569) { $sped9569->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sped9569) { $sped9569->select(array('id', 'card')); }))->findOrFail($sp39113c); $spf6b161->addHidden(array('system_fee')); return Response::success($spf6b161); } function remark(Request $sp375069) { $this->validate($sp375069, array('id' => 'required|integer', 'remark' => 'required|string')); $sp39113c = $sp375069->input('id'); $spf6b161 = $this->authQuery($sp375069, \App\Order::class)->findOrFail($sp39113c); $spf6b161->remark = $sp375069->input('remark'); $spf6b161->save(); return Response::success(); } function set_send_status(Request $sp375069) { $this->validate($sp375069, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp39113c = $sp375069->input('id'); $spf6b161 = $this->authQuery($sp375069, \App\Order::class)->findOrFail($sp39113c); if ($spf6b161->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spf6b161->send_status = $sp375069->input('send_status'); $spf6b161->saveOrFail(); return Response::success(); } function ship(Request $sp375069) { $this->validate($sp375069, array('id' => 'required|integer')); $spf6b161 = $this->authQuery($sp375069, \App\Order::class)->with('product')->findOrFail($sp375069->input('id')); if ($spf6b161->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spf6b161->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spe9f983 = $spf6b161->product->delivery; $sp2a14fa = ''; if ($spe9f983 === \App\Product::DELIVERY_MANUAL) { $this->validate($sp375069, array('card' => 'required|string')); $sp2a14fa = $sp375069->input('card'); } $spd82515 = null; $sp1318bc = array(); if (FundHelper::orderSuccess($spf6b161->id, function () use(&$spf6b161, &$spd82515, &$sp1318bc, $spe9f983, $sp2a14fa) { $spf6b161 = \App\Order::where('id', $spf6b161->id)->lockForUpdate()->firstOrFail(); if ($spf6b161->cards && count($spf6b161->cards)) { $spd82515 = '该订单已经发货，无需再次发货'; return false; } $sp6018c8 = $spf6b161->product()->lockForUpdate()->firstOrFail(); if ($spe9f983 === \App\Product::DELIVERY_MANUAL) { $spf6b161->status = \App\Order::STATUS_SUCCESS; $spf6b161->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spf6b161->saveOrFail(); $spd915af = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp6018c8->id, 'card' => $sp2a14fa, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp1318bc[] = $spd915af->card; $spf6b161->cards()->attach($spd915af->id); $sp6018c8->count_sold += $spf6b161->count; $sp6018c8->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp10f8f9 = \App\Card::where('product_id', $sp6018c8->id)->whereRaw('`count_sold`<`count_all`')->take($spf6b161->count)->lockForUpdate()->get(); if (count($sp10f8f9) !== $spf6b161->count) { $spd82515 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spf6b161->status = \App\Order::STATUS_SUCCESS; $spf6b161->saveOrFail(); $spf5f0d8 = array(); foreach ($sp10f8f9 as $spd915af) { $spf5f0d8[] = $spd915af->id; $sp1318bc[] = $spd915af->card; } $spf6b161->cards()->attach($spf5f0d8); \App\Card::whereIn('id', $spf5f0d8)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp6018c8->count_sold += $spf6b161->count; $sp6018c8->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp8b9515 = @json_decode($spf6b161->contact_ext, true)['_mail']; if ($sp8b9515) { $spf6b161->sendEmail($sp8b9515); } } if ($spf6b161->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spcb4cb7 = @json_decode($spf6b161->contact_ext, true)['_mobile']; if ($spcb4cb7) { $spf6b161->sendSms($spcb4cb7); } } $spf6b161['card_orders'] = array_map(function ($spb8bcdd) { return array('card' => array('card' => $spb8bcdd)); }, $sp1318bc); $spf6b161->addHidden(array('system_fee')); return Response::success($spf6b161); } else { return Response::fail($spd82515 ?? '数据库繁忙, 请联系客服'); } } }