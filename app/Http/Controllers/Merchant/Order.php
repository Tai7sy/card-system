<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spccbfb6, $sp62ca4e = false) { $sp479bde = $this->authQuery($spccbfb6, \App\Order::class); $sp76eadf = (int) $spccbfb6->input('category_id'); $spa981f6 = (int) $spccbfb6->input('product_id'); $sp75f50c = (int) $spccbfb6->input('profit'); $sp236ebb = $sp76eadf === \App\Product::ID_API || $spa981f6 === \App\Product::ID_API; $sp6f5fd7 = $spccbfb6->input('search', false); $spc4b2f5 = $spccbfb6->input('val', false); if ($sp6f5fd7 && $spc4b2f5) { if ($sp6f5fd7 == 'id' || $sp6f5fd7 == 'order_no' || $sp6f5fd7 === 'pay_trade_no' || $sp6f5fd7 === 'api_out_no') { $sp479bde->where($sp6f5fd7, $spc4b2f5); } else { $sp479bde->where($sp6f5fd7, 'like', '%' . $spc4b2f5 . '%'); } } if ($sp76eadf > 0) { if ($spa981f6 > 0) { $sp479bde->where('product_id', $spa981f6); } else { $sp479bde->whereHas('product', function ($sp479bde) use($sp76eadf) { $sp479bde->where('category_id', $sp76eadf); }); } } $sp1b9b56 = (int) $spccbfb6->input('recent', 0); if ($sp1b9b56) { $spc92f5a = (new Carbon())->addDay(-$sp1b9b56); $sp479bde->where(function ($sp479bde) use($spc92f5a) { $sp479bde->where('paid_at', '>=', $spc92f5a)->orWhere(function ($sp479bde) use($spc92f5a) { $sp479bde->whereNull('paid_at')->where('created_at', '>=', $spc92f5a); }); }); } else { $spc92f5a = $spccbfb6->input('start_at', false); if (strlen($spc92f5a)) { $sp479bde->where(function ($sp479bde) use($spc92f5a) { $sp479bde->where('paid_at', '>=', $spc92f5a . ' 00:00:00')->orWhere(function ($sp479bde) use($spc92f5a) { $sp479bde->whereNull('paid_at')->where('created_at', '>=', $spc92f5a . ' 00:00:00'); }); }); } $sp3bcd4b = $spccbfb6->input('end_at', false); if (strlen($sp3bcd4b)) { $sp479bde->where(function ($sp479bde) use($sp3bcd4b) { $sp479bde->where('paid_at', '<=', $sp3bcd4b . ' 23:59:59')->orWhere(function ($sp479bde) use($sp3bcd4b) { $sp479bde->whereNull('paid_at')->where('created_at', '<=', $sp3bcd4b . ' 23:59:59'); }); }); } } if ($sp75f50c) { $sp479bde->where('status', \App\Order::STATUS_SUCCESS); $spa148e8 = clone $sp479bde; $sp0e3f8f = $spa148e8->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spfe6f53 = $spccbfb6->input('status'); if (strlen($spfe6f53)) { $sp479bde->whereIn('status', explode(',', $spfe6f53)); } else { $sp479bde->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp236ebb) { $sp479bde->where('product_id', \App\Product::ID_API); } else { $sp479bde->where('product_id', '>', 0); $sp479bde->with(array('product' => function (Relation $sp479bde) { $sp479bde->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp479bde) { $sp479bde->select(array('id', 'card')); })); } $sp479bde->with(array('pay' => function (Relation $sp479bde) { $sp479bde->select(array('id', 'name')); })); $sp479bde->orderBy('id', 'DESC'); if ($sp62ca4e === true) { $sp34551a = (int) $spccbfb6->input('export_update_status'); $sp96d46a = $spccbfb6->input('export_update_card'); $spbedaeb = '﻿'; $spbedaeb .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp479bde->chunk(100, function ($sp25f244) use(&$spbedaeb, $sp34551a, $sp96d46a) { foreach ($sp25f244 as $spcd0b15) { if ($spcd0b15->status === \App\Order::STATUS_PAID) { if ($sp34551a === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spcd0b15->send_status = $sp34551a; $spcd0b15->saveOrFail(); } elseif ($sp34551a === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spcd0b15->send_status = $sp34551a; $spcd0b15->saveOrFail(); $this->ship(new Request(array('id' => $spcd0b15->id, 'card' => $sp96d46a))); } } $sp353605 = $spcd0b15->contact_ext; if ($sp353605) { if ($sp353605[0] === '[') { $sp353605 = substr($sp353605, 2); } if ($sp353605[strlen($sp353605) - 1] === ']') { $sp353605 = substr($sp353605, 0, -2); } } $spbedaeb .= '"' . $spcd0b15->order_no . '","' . $spcd0b15->product_name . '","' . $spcd0b15->created_at . '","' . sprintf('%.2f', $spcd0b15->price / 100) . '","' . sprintf('%.2f', $spcd0b15->discount / 100) . '","' . sprintf('%.2f', $spcd0b15->paid / 100) . '","' . sprintf('%.2f', $spcd0b15->fee / 100) . '","' . sprintf('%.2f', $spcd0b15->cost / 100) . '","' . sprintf('%.2f', ($spcd0b15->paid - $spcd0b15->fee - $spcd0b15->cost) / 100) . '","' . ($spcd0b15->pay ? $spcd0b15->pay->name : '未知#' . $spcd0b15->pay_id) . '","' . $spcd0b15->pay_trade_no . '","' . $spcd0b15->paid_at . '","' . \App\Order::STATUS[$spcd0b15->status] . '","' . $spcd0b15->contact . '","' . $sp353605 . '"'; $spbedaeb .= '
'; } }); $sp76b960 = 'export_orders_' . $this->getUserIdOrFail($spccbfb6) . '_' . date('YmdHis') . '.csv'; $sp95ef3b = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp76b960), 'Content-Length' => strlen($spbedaeb)); return response()->make($spbedaeb, 200, $sp95ef3b); } $sp1e473f = (int) $spccbfb6->input('current_page', 1); $sped1e1d = (int) $spccbfb6->input('per_page', 20); $sp7d3bbd = $sp479bde->paginate($sped1e1d, array('*'), 'page', $sp1e473f); if ($sp75f50c) { $sp7d3bbd = $sp7d3bbd->toArray(); $sp7d3bbd['profit_sum'] = $sp0e3f8f; } return Response::success($sp7d3bbd); } function export(Request $spccbfb6) { return self::get($spccbfb6, true); } function stat(Request $spccbfb6) { $this->validate($spccbfb6, array('day' => 'required|integer|between:7,30')); $sp90b7ff = (int) $spccbfb6->input('day'); if ($sp90b7ff === 30) { $sp7e43bd = Carbon::now()->addMonths(-1); } else { $sp7e43bd = Carbon::now()->addDays(-$sp90b7ff); } $sp7d3bbd = $this->authQuery($spccbfb6, \App\Order::class)->where(function ($sp479bde) { $sp479bde->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp7e43bd)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spa51230 = array(); foreach ($sp7d3bbd as $sp222058) { $spa51230[$sp222058['date']] = array((int) $sp222058['count'], (int) $sp222058['paid'], (int) $sp222058['profit']); } return Response::success($spa51230); } function info(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer')); $spbf68a1 = $spccbfb6->input('id'); $spcd0b15 = $this->authQuery($spccbfb6, \App\Order::class)->with(array('pay' => function (Relation $sp479bde) { $sp479bde->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp479bde) { $sp479bde->select(array('id', 'card')); }))->findOrFail($spbf68a1); $spcd0b15->addHidden(array('system_fee')); return Response::success($spcd0b15); } function remark(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer', 'remark' => 'required|string')); $spbf68a1 = $spccbfb6->input('id'); $spcd0b15 = $this->authQuery($spccbfb6, \App\Order::class)->findOrFail($spbf68a1); $spcd0b15->remark = $spccbfb6->input('remark'); $spcd0b15->save(); return Response::success(); } function set_send_status(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spbf68a1 = $spccbfb6->input('id'); $spcd0b15 = $this->authQuery($spccbfb6, \App\Order::class)->findOrFail($spbf68a1); if ($spcd0b15->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spcd0b15->send_status = $spccbfb6->input('send_status'); $spcd0b15->saveOrFail(); return Response::success(); } function ship(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer')); $spcd0b15 = $this->authQuery($spccbfb6, \App\Order::class)->with('product')->findOrFail($spccbfb6->input('id')); if ($spcd0b15->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spcd0b15->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp78f69e = $spcd0b15->product->delivery; $sp324585 = ''; if ($sp78f69e === \App\Product::DELIVERY_MANUAL) { $this->validate($spccbfb6, array('card' => 'required|string')); $sp324585 = $spccbfb6->input('card'); } $sp2a1355 = null; $spdbb01a = array(); if (FundHelper::orderSuccess($spcd0b15->id, function () use(&$spcd0b15, &$sp2a1355, &$spdbb01a, $sp78f69e, $sp324585) { $spcd0b15 = \App\Order::where('id', $spcd0b15->id)->lockForUpdate()->firstOrFail(); if ($spcd0b15->cards && count($spcd0b15->cards)) { $sp2a1355 = '该订单已经发货，无需再次发货'; return false; } $sp886a9b = $spcd0b15->product()->lockForUpdate()->firstOrFail(); if ($sp78f69e === \App\Product::DELIVERY_MANUAL) { $spcd0b15->status = \App\Order::STATUS_SUCCESS; $spcd0b15->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spcd0b15->saveOrFail(); $sp8bda65 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp886a9b->id, 'card' => $sp324585, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $spdbb01a[] = $sp8bda65->card; $spcd0b15->cards()->attach($sp8bda65->id); $sp886a9b->count_sold += $spcd0b15->count; $sp886a9b->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spb6331b = \App\Card::where('product_id', $sp886a9b->id)->whereRaw('`count_sold`<`count_all`')->take($spcd0b15->count)->lockForUpdate()->get(); if (count($spb6331b) !== $spcd0b15->count) { $sp2a1355 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spcd0b15->status = \App\Order::STATUS_SUCCESS; $spcd0b15->saveOrFail(); $sp19f407 = array(); foreach ($spb6331b as $sp8bda65) { $sp19f407[] = $sp8bda65->id; $spdbb01a[] = $sp8bda65->card; } $spcd0b15->cards()->attach($sp19f407); \App\Card::whereIn('id', $sp19f407)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp886a9b->count_sold += $spcd0b15->count; $sp886a9b->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp44298b = @json_decode($spcd0b15->contact_ext, true)['_mail']; if ($sp44298b) { $spcd0b15->sendEmail($sp44298b); } } if ($spcd0b15->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp40cdb8 = @json_decode($spcd0b15->contact_ext, true)['_mobile']; if ($sp40cdb8) { $spcd0b15->sendSms($sp40cdb8); } } $spcd0b15['card_orders'] = array_map(function ($sp222058) { return array('card' => array('card' => $sp222058)); }, $spdbb01a); $spcd0b15->addHidden(array('system_fee')); return Response::success($spcd0b15); } else { return Response::fail($sp2a1355 ?? '数据库繁忙, 请联系客服'); } } }