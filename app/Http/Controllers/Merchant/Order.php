<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spf09a96, $spe757bc = false) { $sp40bc20 = $this->authQuery($spf09a96, \App\Order::class); $sp8e3d37 = (int) $spf09a96->input('category_id'); $spb43b27 = (int) $spf09a96->input('product_id'); $spf51116 = (int) $spf09a96->input('profit'); $spd12dbb = $sp8e3d37 === \App\Product::ID_API || $spb43b27 === \App\Product::ID_API; $sp5974e9 = $spf09a96->input('search', false); $spc265e8 = $spf09a96->input('val', false); if ($sp5974e9 && $spc265e8) { if ($sp5974e9 == 'id' || $sp5974e9 == 'order_no' || $sp5974e9 === 'pay_trade_no' || $sp5974e9 === 'api_out_no') { $sp40bc20->where($sp5974e9, $spc265e8); } else { $sp40bc20->where($sp5974e9, 'like', '%' . $spc265e8 . '%'); } } if ($sp8e3d37 > 0) { if ($spb43b27 > 0) { $sp40bc20->where('product_id', $spb43b27); } else { $sp40bc20->whereHas('product', function ($sp40bc20) use($sp8e3d37) { $sp40bc20->where('category_id', $sp8e3d37); }); } } $spf14747 = (int) $spf09a96->input('recent', 0); if ($spf14747) { $sp791c3e = (new Carbon())->addDay(-$spf14747); $sp40bc20->where(function ($sp40bc20) use($sp791c3e) { $sp40bc20->where('paid_at', '>=', $sp791c3e)->orWhere(function ($sp40bc20) use($sp791c3e) { $sp40bc20->whereNull('paid_at')->where('created_at', '>=', $sp791c3e); }); }); } else { $sp791c3e = $spf09a96->input('start_at', false); if (strlen($sp791c3e)) { $sp40bc20->where(function ($sp40bc20) use($sp791c3e) { $sp40bc20->where('paid_at', '>=', $sp791c3e . ' 00:00:00')->orWhere(function ($sp40bc20) use($sp791c3e) { $sp40bc20->whereNull('paid_at')->where('created_at', '>=', $sp791c3e . ' 00:00:00'); }); }); } $spdb32b3 = $spf09a96->input('end_at', false); if (strlen($spdb32b3)) { $sp40bc20->where(function ($sp40bc20) use($spdb32b3) { $sp40bc20->where('paid_at', '<=', $spdb32b3 . ' 23:59:59')->orWhere(function ($sp40bc20) use($spdb32b3) { $sp40bc20->whereNull('paid_at')->where('created_at', '<=', $spdb32b3 . ' 23:59:59'); }); }); } } if ($spf51116) { $sp40bc20->where('status', \App\Order::STATUS_SUCCESS); $sp470899 = clone $sp40bc20; $spbda6b4 = $sp470899->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spef96f9 = $spf09a96->input('status'); if (strlen($spef96f9)) { $sp40bc20->whereIn('status', explode(',', $spef96f9)); } else { $sp40bc20->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spd12dbb) { $sp40bc20->where('product_id', \App\Product::ID_API); } else { $sp40bc20->where('product_id', '>', 0); $sp40bc20->with(array('product' => function (Relation $sp40bc20) { $sp40bc20->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp40bc20) { $sp40bc20->select(array('id', 'card')); })); } $sp40bc20->with(array('pay' => function (Relation $sp40bc20) { $sp40bc20->select(array('id', 'name')); })); $sp40bc20->orderBy('id', 'DESC'); if ($spe757bc === true) { $spa75396 = (int) $spf09a96->input('export_update_status'); $spe8c4b8 = $spf09a96->input('export_update_card'); $spa565f2 = '﻿'; $spa565f2 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp40bc20->chunk(100, function ($sp7398bb) use(&$spa565f2, $spa75396, $spe8c4b8) { foreach ($sp7398bb as $sp7cc18f) { if ($sp7cc18f->status === \App\Order::STATUS_PAID) { if ($spa75396 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp7cc18f->send_status = $spa75396; $sp7cc18f->saveOrFail(); } elseif ($spa75396 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp7cc18f->send_status = $spa75396; $sp7cc18f->saveOrFail(); $this->ship(new Request(array('id' => $sp7cc18f->id, 'card' => $spe8c4b8))); } } $sp754358 = $sp7cc18f->contact_ext; if ($sp754358) { if ($sp754358[0] === '[') { $sp754358 = substr($sp754358, 2); } if ($sp754358[strlen($sp754358) - 1] === ']') { $sp754358 = substr($sp754358, 0, -2); } } $spa565f2 .= '"' . $sp7cc18f->order_no . '","' . $sp7cc18f->product_name . '","' . $sp7cc18f->created_at . '","' . sprintf('%.2f', $sp7cc18f->price / 100) . '","' . sprintf('%.2f', $sp7cc18f->discount / 100) . '","' . sprintf('%.2f', $sp7cc18f->paid / 100) . '","' . sprintf('%.2f', $sp7cc18f->fee / 100) . '","' . sprintf('%.2f', $sp7cc18f->cost / 100) . '","' . sprintf('%.2f', ($sp7cc18f->paid - $sp7cc18f->fee - $sp7cc18f->cost) / 100) . '","' . ($sp7cc18f->pay ? $sp7cc18f->pay->name : '未知#' . $sp7cc18f->pay_id) . '","' . $sp7cc18f->pay_trade_no . '","' . $sp7cc18f->paid_at . '","' . \App\Order::STATUS[$sp7cc18f->status] . '","' . $sp7cc18f->contact . '","' . $sp754358 . '"'; $spa565f2 .= '
'; } }); $speae1df = 'export_orders_' . $this->getUserIdOrFail($spf09a96) . '_' . date('YmdHis') . '.csv'; $spb33460 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $speae1df), 'Content-Length' => strlen($spa565f2)); return response()->make($spa565f2, 200, $spb33460); } $sp5b4065 = (int) $spf09a96->input('current_page', 1); $spe24165 = (int) $spf09a96->input('per_page', 20); $sp3fe1fa = $sp40bc20->paginate($spe24165, array('*'), 'page', $sp5b4065); if ($spf51116) { $sp3fe1fa = $sp3fe1fa->toArray(); $sp3fe1fa['profit_sum'] = $spbda6b4; } return Response::success($sp3fe1fa); } function export(Request $spf09a96) { return self::get($spf09a96, true); } function stat(Request $spf09a96) { $this->validate($spf09a96, array('day' => 'required|integer|between:7,30')); $sp9c9b8d = (int) $spf09a96->input('day'); if ($sp9c9b8d === 30) { $sp791c3e = Carbon::now()->addMonths(-1)->toDateString() . ' 00:00:00'; } else { $sp791c3e = Carbon::now()->addDays(-$sp9c9b8d)->toDateString() . ' 00:00:00'; } $sp3fe1fa = $this->authQuery($spf09a96, \App\Order::class)->where(function ($sp40bc20) { $sp40bc20->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp791c3e)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp571ce3 = array(); foreach ($sp3fe1fa as $sp5f5b2b) { $sp571ce3[$sp5f5b2b['date']] = array((int) $sp5f5b2b['count'], (int) $sp5f5b2b['paid'], (int) $sp5f5b2b['profit']); } return Response::success($sp571ce3); } function info(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer')); $spe8e527 = $spf09a96->input('id'); $sp7cc18f = $this->authQuery($spf09a96, \App\Order::class)->with(array('pay' => function (Relation $sp40bc20) { $sp40bc20->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp40bc20) { $sp40bc20->select(array('id', 'card')); }))->findOrFail($spe8e527); $sp7cc18f->addHidden(array('system_fee')); return Response::success($sp7cc18f); } function remark(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer', 'remark' => 'required|string')); $spe8e527 = $spf09a96->input('id'); $sp7cc18f = $this->authQuery($spf09a96, \App\Order::class)->findOrFail($spe8e527); $sp7cc18f->remark = $spf09a96->input('remark'); $sp7cc18f->save(); return Response::success(); } function set_send_status(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spe8e527 = $spf09a96->input('id'); $sp7cc18f = $this->authQuery($spf09a96, \App\Order::class)->findOrFail($spe8e527); if ($sp7cc18f->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp7cc18f->send_status = $spf09a96->input('send_status'); $sp7cc18f->saveOrFail(); return Response::success(); } function ship(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer')); $sp7cc18f = $this->authQuery($spf09a96, \App\Order::class)->with('product')->findOrFail($spf09a96->input('id')); if ($sp7cc18f->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp7cc18f->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spdcf88d = $sp7cc18f->product->delivery; $sp942245 = ''; if ($spdcf88d === \App\Product::DELIVERY_MANUAL) { $this->validate($spf09a96, array('card' => 'required|string')); $sp942245 = $spf09a96->input('card'); } $spe4895d = null; $spe78ea6 = array(); if (FundHelper::orderSuccess($sp7cc18f->id, function () use(&$sp7cc18f, &$spe4895d, &$spe78ea6, $spdcf88d, $sp942245) { $sp7cc18f = \App\Order::where('id', $sp7cc18f->id)->lockForUpdate()->firstOrFail(); if ($sp7cc18f->cards && count($sp7cc18f->cards)) { $spe4895d = '该订单已经发货，无需再次发货'; return false; } $sp551a82 = $sp7cc18f->product()->lockForUpdate()->firstOrFail(); if ($spdcf88d === \App\Product::DELIVERY_MANUAL) { $sp7cc18f->status = \App\Order::STATUS_SUCCESS; $sp7cc18f->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp7cc18f->saveOrFail(); $sp6da819 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp551a82->id, 'card' => $sp942245, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $spe78ea6[] = $sp6da819->card; $sp7cc18f->cards()->attach($sp6da819->id); $sp551a82->count_sold += $sp7cc18f->count; $sp551a82->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp79cae4 = \App\Card::where('product_id', $sp551a82->id)->whereRaw('`count_sold`<`count_all`')->take($sp7cc18f->count)->lockForUpdate()->get(); if (count($sp79cae4) !== $sp7cc18f->count) { $spe4895d = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp7cc18f->status = \App\Order::STATUS_SUCCESS; $sp7cc18f->saveOrFail(); $sp78d907 = array(); foreach ($sp79cae4 as $sp6da819) { $sp78d907[] = $sp6da819->id; $spe78ea6[] = $sp6da819->card; } $sp7cc18f->cards()->attach($sp78d907); \App\Card::whereIn('id', $sp78d907)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp551a82->count_sold += $sp7cc18f->count; $sp551a82->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp4285d2 = @json_decode($sp7cc18f->contact_ext, true)['_mail']; if ($sp4285d2) { $sp7cc18f->sendEmail($sp4285d2); } } if ($sp7cc18f->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spb66e78 = @json_decode($sp7cc18f->contact_ext, true)['_mobile']; if ($spb66e78) { $sp7cc18f->sendSms($spb66e78); } } $sp7cc18f['card_orders'] = array_map(function ($sp5f5b2b) { return array('card' => array('card' => $sp5f5b2b)); }, $spe78ea6); $sp7cc18f->addHidden(array('system_fee')); return Response::success($sp7cc18f); } else { return Response::fail($spe4895d ?? '数据库繁忙, 请联系客服'); } } }