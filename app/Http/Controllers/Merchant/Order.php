<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spfb5ae3, $spe873f3 = false) { $sp32b0d3 = $this->authQuery($spfb5ae3, \App\Order::class); $sp66458a = (int) $spfb5ae3->input('category_id'); $sp3edfae = (int) $spfb5ae3->input('product_id'); $spae9eda = (int) $spfb5ae3->input('profit'); $sp37ce24 = $sp66458a === \App\Product::ID_API || $sp3edfae === \App\Product::ID_API; $spb59184 = $spfb5ae3->input('search', false); $sp809177 = $spfb5ae3->input('val', false); if ($spb59184 && $sp809177) { if ($spb59184 == 'id' || $spb59184 == 'order_no' || $spb59184 === 'pay_trade_no' || $spb59184 === 'api_out_no') { $sp32b0d3->where($spb59184, $sp809177); } else { $sp32b0d3->where($spb59184, 'like', '%' . $sp809177 . '%'); } } if ($sp66458a > 0) { if ($sp3edfae > 0) { $sp32b0d3->where('product_id', $sp3edfae); } else { $sp32b0d3->whereHas('product', function ($sp32b0d3) use($sp66458a) { $sp32b0d3->where('category_id', $sp66458a); }); } } $spe13677 = (int) $spfb5ae3->input('recent', 0); if ($spe13677) { $sp3c0af4 = (new Carbon())->addDay(-$spe13677); $sp32b0d3->where(function ($sp32b0d3) use($sp3c0af4) { $sp32b0d3->where('paid_at', '>=', $sp3c0af4)->orWhere(function ($sp32b0d3) use($sp3c0af4) { $sp32b0d3->whereNull('paid_at')->where('created_at', '>=', $sp3c0af4); }); }); } else { $sp3c0af4 = $spfb5ae3->input('start_at', false); if (strlen($sp3c0af4)) { $sp32b0d3->where(function ($sp32b0d3) use($sp3c0af4) { $sp32b0d3->where('paid_at', '>=', $sp3c0af4 . ' 00:00:00')->orWhere(function ($sp32b0d3) use($sp3c0af4) { $sp32b0d3->whereNull('paid_at')->where('created_at', '>=', $sp3c0af4 . ' 00:00:00'); }); }); } $spb75c0a = $spfb5ae3->input('end_at', false); if (strlen($spb75c0a)) { $sp32b0d3->where(function ($sp32b0d3) use($spb75c0a) { $sp32b0d3->where('paid_at', '<=', $spb75c0a . ' 23:59:59')->orWhere(function ($sp32b0d3) use($spb75c0a) { $sp32b0d3->whereNull('paid_at')->where('created_at', '<=', $spb75c0a . ' 23:59:59'); }); }); } } if ($spae9eda) { $sp32b0d3->where('status', \App\Order::STATUS_SUCCESS); $spf3cacb = clone $sp32b0d3; $spf01c2a = $spf3cacb->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spb35169 = $spfb5ae3->input('status'); if (strlen($spb35169)) { $sp32b0d3->whereIn('status', explode(',', $spb35169)); } else { $sp32b0d3->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp37ce24) { $sp32b0d3->where('product_id', \App\Product::ID_API); } else { $sp32b0d3->where('product_id', '>', 0); $sp32b0d3->with(array('product' => function (Relation $sp32b0d3) { $sp32b0d3->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp32b0d3) { $sp32b0d3->select(array('id', 'card')); })); } $sp32b0d3->with(array('pay' => function (Relation $sp32b0d3) { $sp32b0d3->select(array('id', 'name')); })); $sp32b0d3->orderBy('id', 'DESC'); if ($spe873f3 === true) { $sp90e9c3 = (int) $spfb5ae3->input('export_update_status'); $spa65017 = $spfb5ae3->input('export_update_card'); $spfc845a = '﻿'; $spfc845a .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp32b0d3->chunk(100, function ($sp3d25ee) use(&$spfc845a, $sp90e9c3, $spa65017) { foreach ($sp3d25ee as $sp1abdd8) { if ($sp1abdd8->status === \App\Order::STATUS_PAID) { if ($sp90e9c3 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp1abdd8->send_status = $sp90e9c3; $sp1abdd8->saveOrFail(); } elseif ($sp90e9c3 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp1abdd8->send_status = $sp90e9c3; $sp1abdd8->saveOrFail(); $this->ship(new Request(array('id' => $sp1abdd8->id, 'card' => $spa65017))); } } $sp771333 = $sp1abdd8->contact_ext; if ($sp771333) { if ($sp771333[0] === '[') { $sp771333 = substr($sp771333, 2); } if ($sp771333[strlen($sp771333) - 1] === ']') { $sp771333 = substr($sp771333, 0, -2); } } $spfc845a .= '"' . $sp1abdd8->order_no . '","' . $sp1abdd8->product_name . '","' . $sp1abdd8->created_at . '","' . sprintf('%.2f', $sp1abdd8->price / 100) . '","' . sprintf('%.2f', $sp1abdd8->discount / 100) . '","' . sprintf('%.2f', $sp1abdd8->paid / 100) . '","' . sprintf('%.2f', $sp1abdd8->fee / 100) . '","' . sprintf('%.2f', $sp1abdd8->cost / 100) . '","' . sprintf('%.2f', ($sp1abdd8->paid - $sp1abdd8->fee - $sp1abdd8->cost) / 100) . '","' . ($sp1abdd8->pay ? $sp1abdd8->pay->name : '未知#' . $sp1abdd8->pay_id) . '","' . $sp1abdd8->pay_trade_no . '","' . $sp1abdd8->paid_at . '","' . \App\Order::STATUS[$sp1abdd8->status] . '","' . $sp1abdd8->contact . '","' . $sp771333 . '"'; $spfc845a .= '
'; } }); $spfd8e44 = 'export_orders_' . $this->getUserIdOrFail($spfb5ae3) . '_' . date('YmdHis') . '.csv'; $sp5ab84b = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spfd8e44), 'Content-Length' => strlen($spfc845a)); return response()->make($spfc845a, 200, $sp5ab84b); } $spd43f26 = $spfb5ae3->input('current_page', 1); $spce7281 = $spfb5ae3->input('per_page', 20); $spfa99a5 = $sp32b0d3->paginate($spce7281, array('*'), 'page', $spd43f26); if ($spae9eda) { $spfa99a5 = $spfa99a5->toArray(); $spfa99a5['profit_sum'] = $spf01c2a; } return Response::success($spfa99a5); } function export(Request $spfb5ae3) { return self::get($spfb5ae3, true); } function stat(Request $spfb5ae3) { $this->validate($spfb5ae3, array('day' => 'required|integer|between:7,30')); $spf12ece = (int) $spfb5ae3->input('day'); if ($spf12ece === 30) { $sp929a18 = Carbon::now()->addMonths(-1); } else { $sp929a18 = Carbon::now()->addDays(-$spf12ece); } $spfa99a5 = $this->authQuery($spfb5ae3, \App\Order::class)->where(function ($sp32b0d3) { $sp32b0d3->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp929a18)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp5f5153 = array(); foreach ($spfa99a5 as $sp77dd56) { $sp5f5153[$sp77dd56['date']] = array((int) $sp77dd56['count'], (int) $sp77dd56['paid'], (int) $sp77dd56['profit']); } return Response::success($sp5f5153); } function info(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer')); $sp0cebcc = $spfb5ae3->input('id'); $sp1abdd8 = $this->authQuery($spfb5ae3, \App\Order::class)->with(array('pay' => function (Relation $sp32b0d3) { $sp32b0d3->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp32b0d3) { $sp32b0d3->select(array('id', 'card')); }))->findOrFail($sp0cebcc); $sp1abdd8->addHidden(array('system_fee')); return Response::success($sp1abdd8); } function remark(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer', 'remark' => 'required|string')); $sp0cebcc = $spfb5ae3->input('id'); $sp1abdd8 = $this->authQuery($spfb5ae3, \App\Order::class)->findOrFail($sp0cebcc); $sp1abdd8->remark = $spfb5ae3->input('remark'); $sp1abdd8->save(); return Response::success(); } function set_send_status(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp0cebcc = $spfb5ae3->input('id'); $sp1abdd8 = $this->authQuery($spfb5ae3, \App\Order::class)->findOrFail($sp0cebcc); if ($sp1abdd8->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp1abdd8->send_status = $spfb5ae3->input('send_status'); $sp1abdd8->saveOrFail(); return Response::success(); } function ship(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer')); $sp1abdd8 = $this->authQuery($spfb5ae3, \App\Order::class)->with('product')->findOrFail($spfb5ae3->input('id')); if ($sp1abdd8->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp1abdd8->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spddf717 = $sp1abdd8->product->delivery; $spc37c53 = ''; if ($spddf717 === \App\Product::DELIVERY_MANUAL) { $this->validate($spfb5ae3, array('card' => 'required|string')); $spc37c53 = $spfb5ae3->input('card'); } $sp8ecc62 = null; $spcc54a5 = array(); if (FundHelper::orderSuccess($sp1abdd8->id, function () use(&$sp1abdd8, &$sp8ecc62, &$spcc54a5, $spddf717, $spc37c53) { $sp1abdd8 = \App\Order::where('id', $sp1abdd8->id)->lockForUpdate()->firstOrFail(); if ($sp1abdd8->cards && count($sp1abdd8->cards)) { $sp8ecc62 = '该订单已经发货，无需再次发货'; return false; } $sp7eba0d = $sp1abdd8->product()->lockForUpdate()->firstOrFail(); if ($spddf717 === \App\Product::DELIVERY_MANUAL) { $sp1abdd8->status = \App\Order::STATUS_SUCCESS; $sp1abdd8->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp1abdd8->saveOrFail(); $sp62d3f6 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp7eba0d->id, 'card' => $spc37c53, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $spcc54a5[] = $sp62d3f6->card; $sp1abdd8->cards()->attach($sp62d3f6->id); $sp7eba0d->count_sold += $sp1abdd8->count; $sp7eba0d->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spcbd80a = \App\Card::where('product_id', $sp7eba0d->id)->whereRaw('`count_sold`<`count_all`')->take($sp1abdd8->count)->lockForUpdate()->get(); if (count($spcbd80a) !== $sp1abdd8->count) { $sp8ecc62 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp1abdd8->status = \App\Order::STATUS_SUCCESS; $sp1abdd8->saveOrFail(); $spcd0d98 = array(); foreach ($spcbd80a as $sp62d3f6) { $spcd0d98[] = $sp62d3f6->id; $spcc54a5[] = $sp62d3f6->card; } $sp1abdd8->cards()->attach($spcd0d98); \App\Card::whereIn('id', $spcd0d98)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp7eba0d->count_sold += $sp1abdd8->count; $sp7eba0d->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spc043b0 = @json_decode($sp1abdd8->contact_ext, true)['_mail']; if ($spc043b0) { $sp1abdd8->sendEmail($spc043b0); } } if ($sp1abdd8->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp234667 = @json_decode($sp1abdd8->contact_ext, true)['_mobile']; if ($sp234667) { $sp1abdd8->sendSms($sp234667); } } $sp1abdd8['card_orders'] = array_map(function ($sp77dd56) { return array('card' => array('card' => $sp77dd56)); }, $spcc54a5); $sp1abdd8->addHidden(array('system_fee')); return Response::success($sp1abdd8); } else { return Response::fail($sp8ecc62 ?? '数据库繁忙, 请联系客服'); } } }