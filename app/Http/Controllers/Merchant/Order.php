<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp517903, $sp89e1b7 = false) { $sp30241a = $this->authQuery($sp517903, \App\Order::class); $spc4a21e = (int) $sp517903->input('category_id'); $spb429e3 = (int) $sp517903->input('product_id'); $spbae280 = (int) $sp517903->input('profit'); $sp348b5c = $spc4a21e === \App\Product::ID_API || $spb429e3 === \App\Product::ID_API; $spee2f3d = $sp517903->input('search', false); $sp5d286a = $sp517903->input('val', false); if ($spee2f3d && $sp5d286a) { if ($spee2f3d == 'id' || $spee2f3d == 'order_no' || $spee2f3d === 'pay_trade_no' || $spee2f3d === 'api_out_no') { $sp30241a->where($spee2f3d, $sp5d286a); } else { $sp30241a->where($spee2f3d, 'like', '%' . $sp5d286a . '%'); } } if ($spc4a21e > 0) { if ($spb429e3 > 0) { $sp30241a->where('product_id', $spb429e3); } else { $sp30241a->whereHas('product', function ($sp30241a) use($spc4a21e) { $sp30241a->where('category_id', $spc4a21e); }); } } $sp8ecd08 = (int) $sp517903->input('recent', 0); if ($sp8ecd08) { $sp30ea99 = (new Carbon())->addDay(-$sp8ecd08); $sp30241a->where(function ($sp30241a) use($sp30ea99) { $sp30241a->where('paid_at', '>=', $sp30ea99)->orWhere(function ($sp30241a) use($sp30ea99) { $sp30241a->whereNull('paid_at')->where('created_at', '>=', $sp30ea99); }); }); } else { $sp30ea99 = $sp517903->input('start_at', false); if (strlen($sp30ea99)) { $sp30241a->where(function ($sp30241a) use($sp30ea99) { $sp30241a->where('paid_at', '>=', $sp30ea99 . ' 00:00:00')->orWhere(function ($sp30241a) use($sp30ea99) { $sp30241a->whereNull('paid_at')->where('created_at', '>=', $sp30ea99 . ' 00:00:00'); }); }); } $sp8093ee = $sp517903->input('end_at', false); if (strlen($sp8093ee)) { $sp30241a->where(function ($sp30241a) use($sp8093ee) { $sp30241a->where('paid_at', '<=', $sp8093ee . ' 23:59:59')->orWhere(function ($sp30241a) use($sp8093ee) { $sp30241a->whereNull('paid_at')->where('created_at', '<=', $sp8093ee . ' 23:59:59'); }); }); } } if ($spbae280) { $sp30241a->where('status', \App\Order::STATUS_SUCCESS); $spe0e065 = clone $sp30241a; $sp9add5b = $spe0e065->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp0194a7 = $sp517903->input('status'); if (strlen($sp0194a7)) { $sp30241a->whereIn('status', explode(',', $sp0194a7)); } else { $sp30241a->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp348b5c) { $sp30241a->where('product_id', \App\Product::ID_API); } else { $sp30241a->where('product_id', '>', 0); $sp30241a->with(array('product' => function (Relation $sp30241a) { $sp30241a->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp30241a) { $sp30241a->select(array('id', 'card')); })); } $sp30241a->with(array('pay' => function (Relation $sp30241a) { $sp30241a->select(array('id', 'name')); })); $sp30241a->orderBy('id', 'DESC'); if ($sp89e1b7 === true) { $sp8ec444 = (int) $sp517903->input('export_update_status'); $sp15320c = $sp517903->input('export_update_card'); $spf1c0f1 = '﻿'; $spf1c0f1 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp30241a->chunk(100, function ($sp4fb1a4) use(&$spf1c0f1, $sp8ec444, $sp15320c) { foreach ($sp4fb1a4 as $sp990b3b) { if ($sp990b3b->status === \App\Order::STATUS_PAID) { if ($sp8ec444 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp990b3b->send_status = $sp8ec444; $sp990b3b->saveOrFail(); } elseif ($sp8ec444 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp990b3b->send_status = $sp8ec444; $sp990b3b->saveOrFail(); $this->ship(new Request(array('id' => $sp990b3b->id, 'card' => $sp15320c))); } } $sp7726a9 = $sp990b3b->contact_ext; if ($sp7726a9) { if ($sp7726a9[0] === '[') { $sp7726a9 = substr($sp7726a9, 2); } if ($sp7726a9[strlen($sp7726a9) - 1] === ']') { $sp7726a9 = substr($sp7726a9, 0, -2); } } $spf1c0f1 .= '"' . $sp990b3b->order_no . '","' . $sp990b3b->product_name . '","' . $sp990b3b->created_at . '","' . sprintf('%.2f', $sp990b3b->price / 100) . '","' . sprintf('%.2f', $sp990b3b->discount / 100) . '","' . sprintf('%.2f', $sp990b3b->paid / 100) . '","' . sprintf('%.2f', $sp990b3b->fee / 100) . '","' . sprintf('%.2f', $sp990b3b->cost / 100) . '","' . sprintf('%.2f', ($sp990b3b->paid - $sp990b3b->fee - $sp990b3b->cost) / 100) . '","' . ($sp990b3b->pay ? $sp990b3b->pay->name : '未知#' . $sp990b3b->pay_id) . '","' . $sp990b3b->pay_trade_no . '","' . $sp990b3b->paid_at . '","' . \App\Order::STATUS[$sp990b3b->status] . '","' . $sp990b3b->contact . '","' . $sp7726a9 . '"'; $spf1c0f1 .= '
'; } }); $sp86de39 = 'export_orders_' . $this->getUserIdOrFail($sp517903) . '_' . date('YmdHis') . '.csv'; $sp5d00a4 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp86de39), 'Content-Length' => strlen($spf1c0f1)); return response()->make($spf1c0f1, 200, $sp5d00a4); } $sp542adc = (int) $sp517903->input('current_page', 1); $spf40cb2 = (int) $sp517903->input('per_page', 20); $sp38cdfb = $sp30241a->paginate($spf40cb2, array('*'), 'page', $sp542adc); if ($spbae280) { $sp38cdfb = $sp38cdfb->toArray(); $sp38cdfb['profit_sum'] = $sp9add5b; } return Response::success($sp38cdfb); } function export(Request $sp517903) { return self::get($sp517903, true); } function stat(Request $sp517903) { $this->validate($sp517903, array('day' => 'required|integer|between:7,30')); $sp3ac394 = (int) $sp517903->input('day'); if ($sp3ac394 === 30) { $sp30ea99 = Carbon::now()->addMonths(-1)->toDateString() . ' 00:00:00'; } else { $sp30ea99 = Carbon::now()->addDays(-$sp3ac394)->toDateString() . ' 00:00:00'; } $sp38cdfb = $this->authQuery($sp517903, \App\Order::class)->where(function ($sp30241a) { $sp30241a->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp30ea99)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spd9807c = array(); foreach ($sp38cdfb as $sp4ae387) { $spd9807c[$sp4ae387['date']] = array((int) $sp4ae387['count'], (int) $sp4ae387['paid'], (int) $sp4ae387['profit']); } return Response::success($spd9807c); } function info(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer')); $spd5afc6 = $sp517903->input('id'); $sp990b3b = $this->authQuery($sp517903, \App\Order::class)->with(array('pay' => function (Relation $sp30241a) { $sp30241a->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp30241a) { $sp30241a->select(array('id', 'card')); }))->findOrFail($spd5afc6); $sp990b3b->addHidden(array('system_fee')); return Response::success($sp990b3b); } function remark(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer', 'remark' => 'required|string')); $spd5afc6 = $sp517903->input('id'); $sp990b3b = $this->authQuery($sp517903, \App\Order::class)->findOrFail($spd5afc6); $sp990b3b->remark = $sp517903->input('remark'); $sp990b3b->save(); return Response::success(); } function set_send_status(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spd5afc6 = $sp517903->input('id'); $sp990b3b = $this->authQuery($sp517903, \App\Order::class)->findOrFail($spd5afc6); if ($sp990b3b->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp990b3b->send_status = $sp517903->input('send_status'); $sp990b3b->saveOrFail(); return Response::success(); } function ship(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer')); $sp990b3b = $this->authQuery($sp517903, \App\Order::class)->with('product')->findOrFail($sp517903->input('id')); if ($sp990b3b->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp990b3b->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp441a6e = $sp990b3b->product->delivery; $spcbb71f = ''; if ($sp441a6e === \App\Product::DELIVERY_MANUAL) { $this->validate($sp517903, array('card' => 'required|string')); $spcbb71f = $sp517903->input('card'); } $sp90ffb4 = null; $sp84f9ba = array(); if (FundHelper::orderSuccess($sp990b3b->id, function () use(&$sp990b3b, &$sp90ffb4, &$sp84f9ba, $sp441a6e, $spcbb71f) { $sp990b3b = \App\Order::where('id', $sp990b3b->id)->lockForUpdate()->firstOrFail(); if ($sp990b3b->cards && count($sp990b3b->cards)) { $sp90ffb4 = '该订单已经发货，无需再次发货'; return false; } $sp427eba = $sp990b3b->product()->lockForUpdate()->firstOrFail(); if ($sp441a6e === \App\Product::DELIVERY_MANUAL) { $sp990b3b->status = \App\Order::STATUS_SUCCESS; $sp990b3b->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp990b3b->saveOrFail(); $sp431b94 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp427eba->id, 'card' => $spcbb71f, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp84f9ba[] = $sp431b94->card; $sp990b3b->cards()->attach($sp431b94->id); $sp427eba->count_sold += $sp990b3b->count; $sp427eba->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp3d31e0 = \App\Card::where('product_id', $sp427eba->id)->whereRaw('`count_sold`<`count_all`')->take($sp990b3b->count)->lockForUpdate()->get(); if (count($sp3d31e0) !== $sp990b3b->count) { $sp90ffb4 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp990b3b->status = \App\Order::STATUS_SUCCESS; $sp990b3b->saveOrFail(); $sp769673 = array(); foreach ($sp3d31e0 as $sp431b94) { $sp769673[] = $sp431b94->id; $sp84f9ba[] = $sp431b94->card; } $sp990b3b->cards()->attach($sp769673); \App\Card::whereIn('id', $sp769673)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp427eba->count_sold += $sp990b3b->count; $sp427eba->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp376fbd = @json_decode($sp990b3b->contact_ext, true)['_mail']; if ($sp376fbd) { $sp990b3b->sendEmail($sp376fbd); } } if ($sp990b3b->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp85b5f0 = @json_decode($sp990b3b->contact_ext, true)['_mobile']; if ($sp85b5f0) { $sp990b3b->sendSms($sp85b5f0); } } $sp990b3b['card_orders'] = array_map(function ($sp4ae387) { return array('card' => array('card' => $sp4ae387)); }, $sp84f9ba); $sp990b3b->addHidden(array('system_fee')); return Response::success($sp990b3b); } else { return Response::fail($sp90ffb4 ?? '数据库繁忙, 请联系客服'); } } }