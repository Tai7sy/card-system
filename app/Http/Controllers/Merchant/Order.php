<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp7f7104, $spbc467f = false) { $spbec213 = $this->authQuery($sp7f7104, \App\Order::class); $sp92ffbb = (int) $sp7f7104->input('category_id'); $sp727288 = (int) $sp7f7104->input('product_id'); $sp0a85be = (int) $sp7f7104->input('profit'); $spd79ece = $sp92ffbb === \App\Product::ID_API || $sp727288 === \App\Product::ID_API; $spad233c = $sp7f7104->input('search', false); $spaefd46 = $sp7f7104->input('val', false); if ($spad233c && $spaefd46) { if ($spad233c == 'id' || $spad233c == 'order_no' || $spad233c === 'pay_trade_no' || $spad233c === 'api_out_no') { $spbec213->where($spad233c, $spaefd46); } else { $spbec213->where($spad233c, 'like', '%' . $spaefd46 . '%'); } } if ($sp92ffbb > 0) { if ($sp727288 > 0) { $spbec213->where('product_id', $sp727288); } else { $spbec213->whereHas('product', function ($spbec213) use($sp92ffbb) { $spbec213->where('category_id', $sp92ffbb); }); } } $sp4dd565 = (int) $sp7f7104->input('recent', 0); if ($sp4dd565) { $spdf4097 = (new Carbon())->addDay(-$sp4dd565); $spbec213->where(function ($spbec213) use($spdf4097) { $spbec213->where('paid_at', '>=', $spdf4097)->orWhere(function ($spbec213) use($spdf4097) { $spbec213->whereNull('paid_at')->where('created_at', '>=', $spdf4097); }); }); } else { $spdf4097 = $sp7f7104->input('start_at', false); if (strlen($spdf4097)) { $spbec213->where(function ($spbec213) use($spdf4097) { $spbec213->where('paid_at', '>=', $spdf4097 . ' 00:00:00')->orWhere(function ($spbec213) use($spdf4097) { $spbec213->whereNull('paid_at')->where('created_at', '>=', $spdf4097 . ' 00:00:00'); }); }); } $spc34463 = $sp7f7104->input('end_at', false); if (strlen($spc34463)) { $spbec213->where(function ($spbec213) use($spc34463) { $spbec213->where('paid_at', '<=', $spc34463 . ' 23:59:59')->orWhere(function ($spbec213) use($spc34463) { $spbec213->whereNull('paid_at')->where('created_at', '<=', $spc34463 . ' 23:59:59'); }); }); } } if ($sp0a85be) { $spbec213->where('status', \App\Order::STATUS_SUCCESS); $sp9a16dc = clone $spbec213; $spf94136 = $sp9a16dc->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spe7fff0 = $sp7f7104->input('status'); if (strlen($spe7fff0)) { $spbec213->whereIn('status', explode(',', $spe7fff0)); } else { $spbec213->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spd79ece) { $spbec213->where('product_id', \App\Product::ID_API); } else { $spbec213->where('product_id', '>', 0); $spbec213->with(array('product' => function (Relation $spbec213) { $spbec213->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $spbec213) { $spbec213->select(array('id', 'card')); })); } $spbec213->with(array('pay' => function (Relation $spbec213) { $spbec213->select(array('id', 'name')); })); $spbec213->orderBy('id', 'DESC'); if ($spbc467f === true) { $spfd79fa = (int) $sp7f7104->input('export_update_status'); $sp774ff6 = $sp7f7104->input('export_update_card'); $spbfaff6 = '﻿'; $spbfaff6 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $spbec213->chunk(100, function ($sp27254a) use(&$spbfaff6, $spfd79fa, $sp774ff6) { foreach ($sp27254a as $sp79a792) { if ($sp79a792->status === \App\Order::STATUS_PAID) { if ($spfd79fa === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp79a792->send_status = $spfd79fa; $sp79a792->saveOrFail(); } elseif ($spfd79fa === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp79a792->send_status = $spfd79fa; $sp79a792->saveOrFail(); $this->ship(new Request(array('id' => $sp79a792->id, 'card' => $sp774ff6))); } } $sp6d2065 = $sp79a792->contact_ext; if ($sp6d2065) { if ($sp6d2065[0] === '[') { $sp6d2065 = substr($sp6d2065, 2); } if ($sp6d2065[strlen($sp6d2065) - 1] === ']') { $sp6d2065 = substr($sp6d2065, 0, -2); } } $spbfaff6 .= '"' . $sp79a792->order_no . '","' . $sp79a792->product_name . '","' . $sp79a792->created_at . '","' . sprintf('%.2f', $sp79a792->price / 100) . '","' . sprintf('%.2f', $sp79a792->discount / 100) . '","' . sprintf('%.2f', $sp79a792->paid / 100) . '","' . sprintf('%.2f', $sp79a792->fee / 100) . '","' . sprintf('%.2f', $sp79a792->cost / 100) . '","' . sprintf('%.2f', ($sp79a792->paid - $sp79a792->fee - $sp79a792->cost) / 100) . '","' . ($sp79a792->pay ? $sp79a792->pay->name : '未知#' . $sp79a792->pay_id) . '","' . $sp79a792->pay_trade_no . '","' . $sp79a792->paid_at . '","' . \App\Order::STATUS[$sp79a792->status] . '","' . $sp79a792->contact . '","' . $sp6d2065 . '"'; $spbfaff6 .= '
'; } }); $sp7df801 = 'export_orders_' . $this->getUserIdOrFail($sp7f7104) . '_' . date('YmdHis') . '.csv'; $sp0a5e42 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp7df801), 'Content-Length' => strlen($spbfaff6)); return response()->make($spbfaff6, 200, $sp0a5e42); } $spfe8869 = (int) $sp7f7104->input('current_page', 1); $spec5082 = (int) $sp7f7104->input('per_page', 20); $spa229b5 = $spbec213->paginate($spec5082, array('*'), 'page', $spfe8869); if ($sp0a85be) { $spa229b5 = $spa229b5->toArray(); $spa229b5['profit_sum'] = $spf94136; } return Response::success($spa229b5); } function export(Request $sp7f7104) { return self::get($sp7f7104, true); } function stat(Request $sp7f7104) { $this->validate($sp7f7104, array('day' => 'required|integer|between:7,30')); $sp2c608d = (int) $sp7f7104->input('day'); if ($sp2c608d === 30) { $sp5976d4 = Carbon::now()->addMonths(-1); } else { $sp5976d4 = Carbon::now()->addDays(-$sp2c608d); } $spa229b5 = $this->authQuery($sp7f7104, \App\Order::class)->where(function ($spbec213) { $spbec213->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp5976d4)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp6e55ba = array(); foreach ($spa229b5 as $spe4455f) { $sp6e55ba[$spe4455f['date']] = array((int) $spe4455f['count'], (int) $spe4455f['paid'], (int) $spe4455f['profit']); } return Response::success($sp6e55ba); } function info(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer')); $sp1beabb = $sp7f7104->input('id'); $sp79a792 = $this->authQuery($sp7f7104, \App\Order::class)->with(array('pay' => function (Relation $spbec213) { $spbec213->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spbec213) { $spbec213->select(array('id', 'card')); }))->findOrFail($sp1beabb); $sp79a792->addHidden(array('system_fee')); return Response::success($sp79a792); } function remark(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer', 'remark' => 'required|string')); $sp1beabb = $sp7f7104->input('id'); $sp79a792 = $this->authQuery($sp7f7104, \App\Order::class)->findOrFail($sp1beabb); $sp79a792->remark = $sp7f7104->input('remark'); $sp79a792->save(); return Response::success(); } function set_send_status(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp1beabb = $sp7f7104->input('id'); $sp79a792 = $this->authQuery($sp7f7104, \App\Order::class)->findOrFail($sp1beabb); if ($sp79a792->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp79a792->send_status = $sp7f7104->input('send_status'); $sp79a792->saveOrFail(); return Response::success(); } function ship(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer')); $sp79a792 = $this->authQuery($sp7f7104, \App\Order::class)->with('product')->findOrFail($sp7f7104->input('id')); if ($sp79a792->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp79a792->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp2c1e0d = $sp79a792->product->delivery; $sp772b95 = ''; if ($sp2c1e0d === \App\Product::DELIVERY_MANUAL) { $this->validate($sp7f7104, array('card' => 'required|string')); $sp772b95 = $sp7f7104->input('card'); } $sp8c0969 = null; $sp2e76fb = array(); if (FundHelper::orderSuccess($sp79a792->id, function () use(&$sp79a792, &$sp8c0969, &$sp2e76fb, $sp2c1e0d, $sp772b95) { $sp79a792 = \App\Order::where('id', $sp79a792->id)->lockForUpdate()->firstOrFail(); if ($sp79a792->cards && count($sp79a792->cards)) { $sp8c0969 = '该订单已经发货，无需再次发货'; return false; } $spfa410d = $sp79a792->product()->lockForUpdate()->firstOrFail(); if ($sp2c1e0d === \App\Product::DELIVERY_MANUAL) { $sp79a792->status = \App\Order::STATUS_SUCCESS; $sp79a792->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp79a792->saveOrFail(); $sp5eba29 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $spfa410d->id, 'card' => $sp772b95, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp2e76fb[] = $sp5eba29->card; $sp79a792->cards()->attach($sp5eba29->id); $spfa410d->count_sold += $sp79a792->count; $spfa410d->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spefb732 = \App\Card::where('product_id', $spfa410d->id)->whereRaw('`count_sold`<`count_all`')->take($sp79a792->count)->lockForUpdate()->get(); if (count($spefb732) !== $sp79a792->count) { $sp8c0969 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp79a792->status = \App\Order::STATUS_SUCCESS; $sp79a792->saveOrFail(); $sp435e7d = array(); foreach ($spefb732 as $sp5eba29) { $sp435e7d[] = $sp5eba29->id; $sp2e76fb[] = $sp5eba29->card; } $sp79a792->cards()->attach($sp435e7d); \App\Card::whereIn('id', $sp435e7d)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spfa410d->count_sold += $sp79a792->count; $spfa410d->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spd559a9 = @json_decode($sp79a792->contact_ext, true)['_mail']; if ($spd559a9) { $sp79a792->sendEmail($spd559a9); } } if ($sp79a792->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp4171e7 = @json_decode($sp79a792->contact_ext, true)['_mobile']; if ($sp4171e7) { $sp79a792->sendSms($sp4171e7); } } $sp79a792['card_orders'] = array_map(function ($spe4455f) { return array('card' => array('card' => $spe4455f)); }, $sp2e76fb); $sp79a792->addHidden(array('system_fee')); return Response::success($sp79a792); } else { return Response::fail($sp8c0969 ?? '数据库繁忙, 请联系客服'); } } }