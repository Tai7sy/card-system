<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spfb41ce, $sp378022 = false) { $sp61dd0f = $this->authQuery($spfb41ce, \App\Order::class); $spf9ba01 = (int) $spfb41ce->input('category_id'); $sp2fece4 = (int) $spfb41ce->input('product_id'); $sp3249f8 = (int) $spfb41ce->input('profit'); $sp3d2097 = $spf9ba01 === \App\Product::ID_API || $sp2fece4 === \App\Product::ID_API; $sp2e420a = $spfb41ce->input('search', false); $sp286c56 = $spfb41ce->input('val', false); if ($sp2e420a && $sp286c56) { if ($sp2e420a == 'id' || $sp2e420a == 'order_no' || $sp2e420a === 'pay_trade_no' || $sp2e420a === 'api_out_no') { $sp61dd0f->where($sp2e420a, $sp286c56); } else { $sp61dd0f->where($sp2e420a, 'like', '%' . $sp286c56 . '%'); } } if ($spf9ba01 > 0) { if ($sp2fece4 > 0) { $sp61dd0f->where('product_id', $sp2fece4); } else { $sp61dd0f->whereHas('product', function ($sp61dd0f) use($spf9ba01) { $sp61dd0f->where('category_id', $spf9ba01); }); } } $spc72b36 = (int) $spfb41ce->input('recent', 0); if ($spc72b36) { $spd926d3 = (new Carbon())->addDay(-$spc72b36); $sp61dd0f->where(function ($sp61dd0f) use($spd926d3) { $sp61dd0f->where('paid_at', '>=', $spd926d3)->orWhere(function ($sp61dd0f) use($spd926d3) { $sp61dd0f->whereNull('paid_at')->where('created_at', '>=', $spd926d3); }); }); } else { $spd926d3 = $spfb41ce->input('start_at', false); if (strlen($spd926d3)) { $sp61dd0f->where(function ($sp61dd0f) use($spd926d3) { $sp61dd0f->where('paid_at', '>=', $spd926d3 . ' 00:00:00')->orWhere(function ($sp61dd0f) use($spd926d3) { $sp61dd0f->whereNull('paid_at')->where('created_at', '>=', $spd926d3 . ' 00:00:00'); }); }); } $sp8a56b7 = $spfb41ce->input('end_at', false); if (strlen($sp8a56b7)) { $sp61dd0f->where(function ($sp61dd0f) use($sp8a56b7) { $sp61dd0f->where('paid_at', '<=', $sp8a56b7 . ' 23:59:59')->orWhere(function ($sp61dd0f) use($sp8a56b7) { $sp61dd0f->whereNull('paid_at')->where('created_at', '<=', $sp8a56b7 . ' 23:59:59'); }); }); } } if ($sp3249f8) { $sp61dd0f->where('status', \App\Order::STATUS_SUCCESS); $spfcbaf2 = clone $sp61dd0f; $sp39e6f2 = $spfcbaf2->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spd2b17f = $spfb41ce->input('status'); if (strlen($spd2b17f)) { $sp61dd0f->whereIn('status', explode(',', $spd2b17f)); } else { $sp61dd0f->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp3d2097) { $sp61dd0f->where('product_id', \App\Product::ID_API); } else { $sp61dd0f->where('product_id', '>', 0); $sp61dd0f->with(array('product' => function (Relation $sp61dd0f) { $sp61dd0f->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp61dd0f) { $sp61dd0f->select(array('id', 'card')); })); } $sp61dd0f->with(array('pay' => function (Relation $sp61dd0f) { $sp61dd0f->select(array('id', 'name')); })); $sp61dd0f->orderBy('id', 'DESC'); if ($sp378022 === true) { $sp1d8b60 = (int) $spfb41ce->input('export_update_status'); $sp92f254 = $spfb41ce->input('export_update_card'); $spdc19c3 = '﻿'; $spdc19c3 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp61dd0f->chunk(100, function ($sp1c64e3) use(&$spdc19c3, $sp1d8b60, $sp92f254) { foreach ($sp1c64e3 as $spbaa1fa) { if ($spbaa1fa->status === \App\Order::STATUS_PAID) { if ($sp1d8b60 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spbaa1fa->send_status = $sp1d8b60; $spbaa1fa->saveOrFail(); } elseif ($sp1d8b60 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spbaa1fa->send_status = $sp1d8b60; $spbaa1fa->saveOrFail(); $this->ship(new Request(array('id' => $spbaa1fa->id, 'card' => $sp92f254))); } } $spa39708 = $spbaa1fa->contact_ext; if ($spa39708) { if ($spa39708[0] === '[') { $spa39708 = substr($spa39708, 2); } if ($spa39708[strlen($spa39708) - 1] === ']') { $spa39708 = substr($spa39708, 0, -2); } } $spdc19c3 .= '"' . $spbaa1fa->order_no . '","' . $spbaa1fa->product_name . '","' . $spbaa1fa->created_at . '","' . sprintf('%.2f', $spbaa1fa->price / 100) . '","' . sprintf('%.2f', $spbaa1fa->discount / 100) . '","' . sprintf('%.2f', $spbaa1fa->paid / 100) . '","' . sprintf('%.2f', $spbaa1fa->fee / 100) . '","' . sprintf('%.2f', $spbaa1fa->cost / 100) . '","' . sprintf('%.2f', ($spbaa1fa->paid - $spbaa1fa->fee - $spbaa1fa->cost) / 100) . '","' . ($spbaa1fa->pay ? $spbaa1fa->pay->name : '未知#' . $spbaa1fa->pay_id) . '","' . $spbaa1fa->pay_trade_no . '","' . $spbaa1fa->paid_at . '","' . \App\Order::STATUS[$spbaa1fa->status] . '","' . $spbaa1fa->contact . '","' . $spa39708 . '"'; $spdc19c3 .= '
'; } }); $sp340d35 = 'export_orders_' . $this->getUserIdOrFail($spfb41ce) . '_' . date('YmdHis') . '.csv'; $sp5f2049 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp340d35), 'Content-Length' => strlen($spdc19c3)); return response()->make($spdc19c3, 200, $sp5f2049); } $sp91e8e3 = $spfb41ce->input('current_page', 1); $sp3cad87 = $spfb41ce->input('per_page', 20); $sp32d442 = $sp61dd0f->paginate($sp3cad87, array('*'), 'page', $sp91e8e3); if ($sp3249f8) { $sp32d442 = $sp32d442->toArray(); $sp32d442['profit_sum'] = $sp39e6f2; } return Response::success($sp32d442); } function export(Request $spfb41ce) { return self::get($spfb41ce, true); } function stat(Request $spfb41ce) { $this->validate($spfb41ce, array('day' => 'required|integer|between:7,30')); $sp0bb0c0 = (int) $spfb41ce->input('day'); if ($sp0bb0c0 === 30) { $sp174182 = Carbon::now()->addMonths(-1); } else { $sp174182 = Carbon::now()->addDays(-$sp0bb0c0); } $sp32d442 = $this->authQuery($spfb41ce, \App\Order::class)->where(function ($sp61dd0f) { $sp61dd0f->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp174182)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spd7b285 = array(); foreach ($sp32d442 as $sp64913d) { $spd7b285[$sp64913d['date']] = array((int) $sp64913d['count'], (int) $sp64913d['paid'], (int) $sp64913d['profit']); } return Response::success($spd7b285); } function info(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'required|integer')); $sp1e9761 = $spfb41ce->input('id'); $spbaa1fa = $this->authQuery($spfb41ce, \App\Order::class)->with(array('pay' => function (Relation $sp61dd0f) { $sp61dd0f->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp61dd0f) { $sp61dd0f->select(array('id', 'card')); }))->findOrFail($sp1e9761); $spbaa1fa->addHidden(array('system_fee')); return Response::success($spbaa1fa); } function remark(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'required|integer', 'remark' => 'required|string')); $sp1e9761 = $spfb41ce->input('id'); $spbaa1fa = $this->authQuery($spfb41ce, \App\Order::class)->findOrFail($sp1e9761); $spbaa1fa->remark = $spfb41ce->input('remark'); $spbaa1fa->save(); return Response::success(); } function set_send_status(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp1e9761 = $spfb41ce->input('id'); $spbaa1fa = $this->authQuery($spfb41ce, \App\Order::class)->findOrFail($sp1e9761); if ($spbaa1fa->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spbaa1fa->send_status = $spfb41ce->input('send_status'); $spbaa1fa->saveOrFail(); return Response::success(); } function ship(Request $spfb41ce) { $this->validate($spfb41ce, array('id' => 'required|integer')); $spbaa1fa = $this->authQuery($spfb41ce, \App\Order::class)->with('product')->findOrFail($spfb41ce->input('id')); if ($spbaa1fa->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spbaa1fa->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp0a87ae = $spbaa1fa->product->delivery; $sp4adb6d = ''; if ($sp0a87ae === \App\Product::DELIVERY_MANUAL) { $this->validate($spfb41ce, array('card' => 'required|string')); $sp4adb6d = $spfb41ce->input('card'); } $sp5d8804 = null; $sp3042f3 = array(); if (FundHelper::orderSuccess($spbaa1fa->id, function () use(&$spbaa1fa, &$sp5d8804, &$sp3042f3, $sp0a87ae, $sp4adb6d) { $spbaa1fa = \App\Order::where('id', $spbaa1fa->id)->lockForUpdate()->firstOrFail(); if ($spbaa1fa->cards && count($spbaa1fa->cards)) { $sp5d8804 = '该订单已经发货，无需再次发货'; return false; } $spae5d03 = $spbaa1fa->product()->lockForUpdate()->firstOrFail(); if ($sp0a87ae === \App\Product::DELIVERY_MANUAL) { $spbaa1fa->status = \App\Order::STATUS_SUCCESS; $spbaa1fa->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spbaa1fa->saveOrFail(); $sp38ab38 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $spae5d03->id, 'card' => $sp4adb6d, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp3042f3[] = $sp38ab38->card; $spbaa1fa->cards()->attach($sp38ab38->id); $spae5d03->count_sold += $spbaa1fa->count; $spae5d03->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spc5023f = \App\Card::where('product_id', $spae5d03->id)->whereRaw('`count_sold`<`count_all`')->take($spbaa1fa->count)->lockForUpdate()->get(); if (count($spc5023f) !== $spbaa1fa->count) { $sp5d8804 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spbaa1fa->status = \App\Order::STATUS_SUCCESS; $spbaa1fa->saveOrFail(); $sp889640 = array(); foreach ($spc5023f as $sp38ab38) { $sp889640[] = $sp38ab38->id; $sp3042f3[] = $sp38ab38->card; } $spbaa1fa->cards()->attach($sp889640); \App\Card::whereIn('id', $sp889640)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spae5d03->count_sold += $spbaa1fa->count; $spae5d03->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spd18bc3 = @json_decode($spbaa1fa->contact_ext, true)['_mail']; if ($spd18bc3) { $spbaa1fa->sendEmail($spd18bc3); } } if ($spbaa1fa->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spe2fed0 = @json_decode($spbaa1fa->contact_ext, true)['_mobile']; if ($spe2fed0) { $spbaa1fa->sendSms($spe2fed0); } } $spbaa1fa['card_orders'] = array_map(function ($sp64913d) { return array('card' => array('card' => $sp64913d)); }, $sp3042f3); $spbaa1fa->addHidden(array('system_fee')); return Response::success($spbaa1fa); } else { return Response::fail($sp5d8804 ?? '数据库繁忙, 请联系客服'); } } }