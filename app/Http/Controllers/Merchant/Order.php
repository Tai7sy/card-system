<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spa20801, $sp604d2f = false) { $sp6c3275 = $this->authQuery($spa20801, \App\Order::class); $sp664160 = (int) $spa20801->input('category_id'); $sp17d280 = (int) $spa20801->input('product_id'); $spdd169d = (int) $spa20801->input('profit'); $sp34cefb = $sp664160 === \App\Product::ID_API || $sp17d280 === \App\Product::ID_API; $sp50974d = $spa20801->input('search', false); $sp7a8e14 = $spa20801->input('val', false); if ($sp50974d && $sp7a8e14) { if ($sp50974d == 'id' || $sp50974d == 'order_no' || $sp50974d === 'pay_trade_no' || $sp50974d === 'api_out_no') { $sp6c3275->where($sp50974d, $sp7a8e14); } else { $sp6c3275->where($sp50974d, 'like', '%' . $sp7a8e14 . '%'); } } if ($sp664160 > 0) { if ($sp17d280 > 0) { $sp6c3275->where('product_id', $sp17d280); } else { $sp6c3275->whereHas('product', function ($sp6c3275) use($sp664160) { $sp6c3275->where('category_id', $sp664160); }); } } $spa7ef96 = (int) $spa20801->input('recent', 0); if ($spa7ef96) { $spdb63a7 = (new Carbon())->addDay(-$spa7ef96); $sp6c3275->where(function ($sp6c3275) use($spdb63a7) { $sp6c3275->where('paid_at', '>=', $spdb63a7)->orWhere(function ($sp6c3275) use($spdb63a7) { $sp6c3275->whereNull('paid_at')->where('created_at', '>=', $spdb63a7); }); }); } else { $spdb63a7 = $spa20801->input('start_at', false); if (strlen($spdb63a7)) { $sp6c3275->where(function ($sp6c3275) use($spdb63a7) { $sp6c3275->where('paid_at', '>=', $spdb63a7 . ' 00:00:00')->orWhere(function ($sp6c3275) use($spdb63a7) { $sp6c3275->whereNull('paid_at')->where('created_at', '>=', $spdb63a7 . ' 00:00:00'); }); }); } $sp45fd5a = $spa20801->input('end_at', false); if (strlen($sp45fd5a)) { $sp6c3275->where(function ($sp6c3275) use($sp45fd5a) { $sp6c3275->where('paid_at', '<=', $sp45fd5a . ' 23:59:59')->orWhere(function ($sp6c3275) use($sp45fd5a) { $sp6c3275->whereNull('paid_at')->where('created_at', '<=', $sp45fd5a . ' 23:59:59'); }); }); } } if ($spdd169d) { $sp6c3275->where('status', \App\Order::STATUS_SUCCESS); $sp0647b9 = clone $sp6c3275; $spd62b74 = $sp0647b9->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp59ae99 = $spa20801->input('status'); if (strlen($sp59ae99)) { $sp6c3275->whereIn('status', explode(',', $sp59ae99)); } else { $sp6c3275->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp34cefb) { $sp6c3275->where('product_id', \App\Product::ID_API); } else { $sp6c3275->where('product_id', '>', 0); $sp6c3275->with(array('product' => function (Relation $sp6c3275) { $sp6c3275->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp6c3275) { $sp6c3275->select(array('id', 'card')); })); } $sp6c3275->with(array('pay' => function (Relation $sp6c3275) { $sp6c3275->select(array('id', 'name')); })); $sp6c3275->orderBy('id', 'DESC'); if ($sp604d2f === true) { $sp68f219 = (int) $spa20801->input('export_update_status'); $sp83aa0f = $spa20801->input('export_update_card'); $sp80ab67 = '﻿'; $sp80ab67 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp6c3275->chunk(100, function ($spe1d17e) use(&$sp80ab67, $sp68f219, $sp83aa0f) { foreach ($spe1d17e as $sp106d4b) { if ($sp106d4b->status === \App\Order::STATUS_PAID) { if ($sp68f219 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp106d4b->send_status = $sp68f219; $sp106d4b->saveOrFail(); } elseif ($sp68f219 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp106d4b->send_status = $sp68f219; $sp106d4b->saveOrFail(); $this->ship(new Request(array('id' => $sp106d4b->id, 'card' => $sp83aa0f))); } } $sp8d0122 = $sp106d4b->contact_ext; if ($sp8d0122) { if ($sp8d0122[0] === '[') { $sp8d0122 = substr($sp8d0122, 2); } if ($sp8d0122[strlen($sp8d0122) - 1] === ']') { $sp8d0122 = substr($sp8d0122, 0, -2); } } $sp80ab67 .= '"' . $sp106d4b->order_no . '","' . $sp106d4b->product_name . '","' . $sp106d4b->created_at . '","' . sprintf('%.2f', $sp106d4b->price / 100) . '","' . sprintf('%.2f', $sp106d4b->discount / 100) . '","' . sprintf('%.2f', $sp106d4b->paid / 100) . '","' . sprintf('%.2f', $sp106d4b->fee / 100) . '","' . sprintf('%.2f', $sp106d4b->cost / 100) . '","' . sprintf('%.2f', ($sp106d4b->paid - $sp106d4b->fee - $sp106d4b->cost) / 100) . '","' . ($sp106d4b->pay ? $sp106d4b->pay->name : '未知#' . $sp106d4b->pay_id) . '","' . $sp106d4b->pay_trade_no . '","' . $sp106d4b->paid_at . '","' . \App\Order::STATUS[$sp106d4b->status] . '","' . $sp106d4b->contact . '","' . $sp8d0122 . '"'; $sp80ab67 .= '
'; } }); $sp00cfe1 = 'export_orders_' . $this->getUserIdOrFail($spa20801) . '_' . date('YmdHis') . '.csv'; $spa9286c = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp00cfe1), 'Content-Length' => strlen($sp80ab67)); return response()->make($sp80ab67, 200, $spa9286c); } $sp2c377e = (int) $spa20801->input('current_page', 1); $sp896436 = (int) $spa20801->input('per_page', 20); $spa79e9a = $sp6c3275->paginate($sp896436, array('*'), 'page', $sp2c377e); if ($spdd169d) { $spa79e9a = $spa79e9a->toArray(); $spa79e9a['profit_sum'] = $spd62b74; } return Response::success($spa79e9a); } function export(Request $spa20801) { return self::get($spa20801, true); } function stat(Request $spa20801) { $this->validate($spa20801, array('day' => 'required|integer|between:7,30')); $sp769c7e = (int) $spa20801->input('day'); if ($sp769c7e === 30) { $sp670e6a = Carbon::now()->addMonths(-1); } else { $sp670e6a = Carbon::now()->addDays(-$sp769c7e); } $spa79e9a = $this->authQuery($spa20801, \App\Order::class)->where(function ($sp6c3275) { $sp6c3275->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp670e6a)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp179a17 = array(); foreach ($spa79e9a as $spc90bf2) { $sp179a17[$spc90bf2['date']] = array((int) $spc90bf2['count'], (int) $spc90bf2['paid'], (int) $spc90bf2['profit']); } return Response::success($sp179a17); } function info(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer')); $spbc2f9d = $spa20801->input('id'); $sp106d4b = $this->authQuery($spa20801, \App\Order::class)->with(array('pay' => function (Relation $sp6c3275) { $sp6c3275->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp6c3275) { $sp6c3275->select(array('id', 'card')); }))->findOrFail($spbc2f9d); $sp106d4b->addHidden(array('system_fee')); return Response::success($sp106d4b); } function remark(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer', 'remark' => 'required|string')); $spbc2f9d = $spa20801->input('id'); $sp106d4b = $this->authQuery($spa20801, \App\Order::class)->findOrFail($spbc2f9d); $sp106d4b->remark = $spa20801->input('remark'); $sp106d4b->save(); return Response::success(); } function set_send_status(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spbc2f9d = $spa20801->input('id'); $sp106d4b = $this->authQuery($spa20801, \App\Order::class)->findOrFail($spbc2f9d); if ($sp106d4b->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp106d4b->send_status = $spa20801->input('send_status'); $sp106d4b->saveOrFail(); return Response::success(); } function ship(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer')); $sp106d4b = $this->authQuery($spa20801, \App\Order::class)->with('product')->findOrFail($spa20801->input('id')); if ($sp106d4b->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp106d4b->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spea6e93 = $sp106d4b->product->delivery; $sp7d7d58 = ''; if ($spea6e93 === \App\Product::DELIVERY_MANUAL) { $this->validate($spa20801, array('card' => 'required|string')); $sp7d7d58 = $spa20801->input('card'); } $spc9bc1c = null; $spad1f18 = array(); if (FundHelper::orderSuccess($sp106d4b->id, function () use(&$sp106d4b, &$spc9bc1c, &$spad1f18, $spea6e93, $sp7d7d58) { $sp106d4b = \App\Order::where('id', $sp106d4b->id)->lockForUpdate()->firstOrFail(); if ($sp106d4b->cards && count($sp106d4b->cards)) { $spc9bc1c = '该订单已经发货，无需再次发货'; return false; } $sp0a72f9 = $sp106d4b->product()->lockForUpdate()->firstOrFail(); if ($spea6e93 === \App\Product::DELIVERY_MANUAL) { $sp106d4b->status = \App\Order::STATUS_SUCCESS; $sp106d4b->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp106d4b->saveOrFail(); $spe34968 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp0a72f9->id, 'card' => $sp7d7d58, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $spad1f18[] = $spe34968->card; $sp106d4b->cards()->attach($spe34968->id); $sp0a72f9->count_sold += $sp106d4b->count; $sp0a72f9->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spbccba7 = \App\Card::where('product_id', $sp0a72f9->id)->whereRaw('`count_sold`<`count_all`')->take($sp106d4b->count)->lockForUpdate()->get(); if (count($spbccba7) !== $sp106d4b->count) { $spc9bc1c = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp106d4b->status = \App\Order::STATUS_SUCCESS; $sp106d4b->saveOrFail(); $sp09aea7 = array(); foreach ($spbccba7 as $spe34968) { $sp09aea7[] = $spe34968->id; $spad1f18[] = $spe34968->card; } $sp106d4b->cards()->attach($sp09aea7); \App\Card::whereIn('id', $sp09aea7)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp0a72f9->count_sold += $sp106d4b->count; $sp0a72f9->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spe4a432 = @json_decode($sp106d4b->contact_ext, true)['_mail']; if ($spe4a432) { $sp106d4b->sendEmail($spe4a432); } } if ($sp106d4b->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp2c0e96 = @json_decode($sp106d4b->contact_ext, true)['_mobile']; if ($sp2c0e96) { $sp106d4b->sendSms($sp2c0e96); } } $sp106d4b['card_orders'] = array_map(function ($spc90bf2) { return array('card' => array('card' => $spc90bf2)); }, $spad1f18); $sp106d4b->addHidden(array('system_fee')); return Response::success($sp106d4b); } else { return Response::fail($spc9bc1c ?? '数据库繁忙, 请联系客服'); } } }