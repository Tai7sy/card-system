<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spd5cc4d, $sp42dd26 = false) { $spe440a8 = $this->authQuery($spd5cc4d, \App\Order::class); $sp7b7cc9 = (int) $spd5cc4d->input('category_id'); $spad8100 = (int) $spd5cc4d->input('product_id'); $sp0a5f70 = (int) $spd5cc4d->input('profit'); $spce0a8f = $sp7b7cc9 === \App\Product::ID_API || $spad8100 === \App\Product::ID_API; $spc9965c = $spd5cc4d->input('search', false); $spee86b9 = $spd5cc4d->input('val', false); if ($spc9965c && $spee86b9) { if ($spc9965c == 'id' || $spc9965c == 'order_no' || $spc9965c === 'pay_trade_no' || $spc9965c === 'api_out_no') { $spe440a8->where($spc9965c, $spee86b9); } else { $spe440a8->where($spc9965c, 'like', '%' . $spee86b9 . '%'); } } if ($sp7b7cc9 > 0) { if ($spad8100 > 0) { $spe440a8->where('product_id', $spad8100); } else { $spe440a8->whereHas('product', function ($spe440a8) use($sp7b7cc9) { $spe440a8->where('category_id', $sp7b7cc9); }); } } $sp174056 = (int) $spd5cc4d->input('recent', 0); if ($sp174056) { $sp70e85e = (new Carbon())->addDay(-$sp174056); $spe440a8->where(function ($spe440a8) use($sp70e85e) { $spe440a8->where('paid_at', '>=', $sp70e85e)->orWhere(function ($spe440a8) use($sp70e85e) { $spe440a8->whereNull('paid_at')->where('created_at', '>=', $sp70e85e); }); }); } else { $sp70e85e = $spd5cc4d->input('start_at', false); if (strlen($sp70e85e)) { $spe440a8->where(function ($spe440a8) use($sp70e85e) { $spe440a8->where('paid_at', '>=', $sp70e85e . ' 00:00:00')->orWhere(function ($spe440a8) use($sp70e85e) { $spe440a8->whereNull('paid_at')->where('created_at', '>=', $sp70e85e . ' 00:00:00'); }); }); } $spd3c891 = $spd5cc4d->input('end_at', false); if (strlen($spd3c891)) { $spe440a8->where(function ($spe440a8) use($spd3c891) { $spe440a8->where('paid_at', '<=', $spd3c891 . ' 23:59:59')->orWhere(function ($spe440a8) use($spd3c891) { $spe440a8->whereNull('paid_at')->where('created_at', '<=', $spd3c891 . ' 23:59:59'); }); }); } } if ($sp0a5f70) { $spe440a8->where('status', \App\Order::STATUS_SUCCESS); $sp6fb90b = clone $spe440a8; $sp5e7f25 = $sp6fb90b->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spc3ee59 = $spd5cc4d->input('status'); if (strlen($spc3ee59)) { $spe440a8->whereIn('status', explode(',', $spc3ee59)); } else { $spe440a8->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spce0a8f) { $spe440a8->where('product_id', \App\Product::ID_API); } else { $spe440a8->where('product_id', '>', 0); $spe440a8->with(array('product' => function (Relation $spe440a8) { $spe440a8->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $spe440a8) { $spe440a8->select(array('id', 'card')); })); } $spe440a8->with(array('pay' => function (Relation $spe440a8) { $spe440a8->select(array('id', 'name')); })); $spe440a8->orderBy('id', 'DESC'); if ($sp42dd26 === true) { $sp161f8e = (int) $spd5cc4d->input('export_update_status'); $sp1b27dc = $spd5cc4d->input('export_update_card'); $spd97963 = '﻿'; $spd97963 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $spe440a8->chunk(100, function ($sp9d6f53) use(&$spd97963, $sp161f8e, $sp1b27dc) { foreach ($sp9d6f53 as $sp7dcca7) { if ($sp7dcca7->status === \App\Order::STATUS_PAID) { if ($sp161f8e === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp7dcca7->send_status = $sp161f8e; $sp7dcca7->saveOrFail(); } elseif ($sp161f8e === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp7dcca7->send_status = $sp161f8e; $sp7dcca7->saveOrFail(); $this->ship(new Request(array('id' => $sp7dcca7->id, 'card' => $sp1b27dc))); } } $sp7cc5a1 = $sp7dcca7->contact_ext; if ($sp7cc5a1) { if ($sp7cc5a1[0] === '[') { $sp7cc5a1 = substr($sp7cc5a1, 2); } if ($sp7cc5a1[strlen($sp7cc5a1) - 1] === ']') { $sp7cc5a1 = substr($sp7cc5a1, 0, -2); } } $spd97963 .= '"' . $sp7dcca7->order_no . '","' . $sp7dcca7->product_name . '","' . $sp7dcca7->created_at . '","' . sprintf('%.2f', $sp7dcca7->price / 100) . '","' . sprintf('%.2f', $sp7dcca7->discount / 100) . '","' . sprintf('%.2f', $sp7dcca7->paid / 100) . '","' . sprintf('%.2f', $sp7dcca7->fee / 100) . '","' . sprintf('%.2f', $sp7dcca7->cost / 100) . '","' . sprintf('%.2f', ($sp7dcca7->paid - $sp7dcca7->fee - $sp7dcca7->cost) / 100) . '","' . ($sp7dcca7->pay ? $sp7dcca7->pay->name : '未知#' . $sp7dcca7->pay_id) . '","' . $sp7dcca7->pay_trade_no . '","' . $sp7dcca7->paid_at . '","' . \App\Order::STATUS[$sp7dcca7->status] . '","' . $sp7dcca7->contact . '","' . $sp7cc5a1 . '"'; $spd97963 .= '
'; } }); $sp6113bd = 'export_orders_' . $this->getUserIdOrFail($spd5cc4d) . '_' . date('YmdHis') . '.csv'; $spdf7b97 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp6113bd), 'Content-Length' => strlen($spd97963)); return response()->make($spd97963, 200, $spdf7b97); } $sp707577 = $spd5cc4d->input('current_page', 1); $sp82c87f = $spd5cc4d->input('per_page', 20); $sp78c70b = $spe440a8->paginate($sp82c87f, array('*'), 'page', $sp707577); if ($sp0a5f70) { $sp78c70b = $sp78c70b->toArray(); $sp78c70b['profit_sum'] = $sp5e7f25; } return Response::success($sp78c70b); } function export(Request $spd5cc4d) { return self::get($spd5cc4d, true); } function stat(Request $spd5cc4d) { $this->validate($spd5cc4d, array('day' => 'required|integer|between:7,30')); $sp135b94 = (int) $spd5cc4d->input('day'); if ($sp135b94 === 30) { $sp584b3e = Carbon::now()->addMonths(-1); } else { $sp584b3e = Carbon::now()->addDays(-$sp135b94); } $sp78c70b = $this->authQuery($spd5cc4d, \App\Order::class)->where(function ($spe440a8) { $spe440a8->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp584b3e)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp29a775 = array(); foreach ($sp78c70b as $sp338f71) { $sp29a775[$sp338f71['date']] = array((int) $sp338f71['count'], (int) $sp338f71['paid'], (int) $sp338f71['profit']); } return Response::success($sp29a775); } function info(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer')); $spe00284 = $spd5cc4d->input('id'); $sp7dcca7 = $this->authQuery($spd5cc4d, \App\Order::class)->with(array('pay' => function (Relation $spe440a8) { $spe440a8->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spe440a8) { $spe440a8->select(array('id', 'card')); }))->findOrFail($spe00284); $sp7dcca7->addHidden(array('system_fee')); return Response::success($sp7dcca7); } function remark(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer', 'remark' => 'required|string')); $spe00284 = $spd5cc4d->input('id'); $sp7dcca7 = $this->authQuery($spd5cc4d, \App\Order::class)->findOrFail($spe00284); $sp7dcca7->remark = $spd5cc4d->input('remark'); $sp7dcca7->save(); return Response::success(); } function set_send_status(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spe00284 = $spd5cc4d->input('id'); $sp7dcca7 = $this->authQuery($spd5cc4d, \App\Order::class)->findOrFail($spe00284); if ($sp7dcca7->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp7dcca7->send_status = $spd5cc4d->input('send_status'); $sp7dcca7->saveOrFail(); return Response::success(); } function ship(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer')); $sp7dcca7 = $this->authQuery($spd5cc4d, \App\Order::class)->with('product')->findOrFail($spd5cc4d->input('id')); if ($sp7dcca7->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp7dcca7->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spf03366 = $sp7dcca7->product->delivery; $spbf2ed4 = ''; if ($spf03366 === \App\Product::DELIVERY_MANUAL) { $this->validate($spd5cc4d, array('card' => 'required|string')); $spbf2ed4 = $spd5cc4d->input('card'); } $spa4a66c = null; $sp28982f = array(); if (FundHelper::orderSuccess($sp7dcca7->id, function () use(&$sp7dcca7, &$spa4a66c, &$sp28982f, $spf03366, $spbf2ed4) { $sp7dcca7 = \App\Order::where('id', $sp7dcca7->id)->lockForUpdate()->firstOrFail(); if ($sp7dcca7->cards && count($sp7dcca7->cards)) { $spa4a66c = '该订单已经发货，无需再次发货'; return false; } $spaeec37 = $sp7dcca7->product()->lockForUpdate()->firstOrFail(); if ($spf03366 === \App\Product::DELIVERY_MANUAL) { $sp7dcca7->status = \App\Order::STATUS_SUCCESS; $sp7dcca7->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp7dcca7->saveOrFail(); $sp21b3f0 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $spaeec37->id, 'card' => $spbf2ed4, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp28982f[] = $sp21b3f0->card; $sp7dcca7->cards()->attach($sp21b3f0->id); $spaeec37->count_sold += $sp7dcca7->count; $spaeec37->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spac6360 = \App\Card::where('product_id', $spaeec37->id)->whereRaw('`count_sold`<`count_all`')->take($sp7dcca7->count)->lockForUpdate()->get(); if (count($spac6360) !== $sp7dcca7->count) { $spa4a66c = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp7dcca7->status = \App\Order::STATUS_SUCCESS; $sp7dcca7->saveOrFail(); $sp227200 = array(); foreach ($spac6360 as $sp21b3f0) { $sp227200[] = $sp21b3f0->id; $sp28982f[] = $sp21b3f0->card; } $sp7dcca7->cards()->attach($sp227200); \App\Card::whereIn('id', $sp227200)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spaeec37->count_sold += $sp7dcca7->count; $spaeec37->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp7d9677 = @json_decode($sp7dcca7->contact_ext, true)['_mail']; if ($sp7d9677) { $sp7dcca7->sendEmail($sp7d9677); } } if ($sp7dcca7->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp052029 = @json_decode($sp7dcca7->contact_ext, true)['_mobile']; if ($sp052029) { $sp7dcca7->sendSms($sp052029); } } $sp7dcca7['card_orders'] = array_map(function ($sp338f71) { return array('card' => array('card' => $sp338f71)); }, $sp28982f); $sp7dcca7->addHidden(array('system_fee')); return Response::success($sp7dcca7); } else { return Response::fail($spa4a66c ?? '数据库繁忙, 请联系客服'); } } }