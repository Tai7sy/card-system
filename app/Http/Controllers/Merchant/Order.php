<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spba756f, $spe71412 = false) { $spca8acc = $this->authQuery($spba756f, \App\Order::class); $sp55f32c = (int) $spba756f->input('category_id'); $sp1b83a8 = (int) $spba756f->input('product_id'); $sp67ac4f = (int) $spba756f->input('profit'); $sp8dd439 = $sp55f32c === \App\Product::ID_API || $sp1b83a8 === \App\Product::ID_API; $speeddd9 = $spba756f->input('search', false); $spe1fc85 = $spba756f->input('val', false); if ($speeddd9 && $spe1fc85) { if ($speeddd9 == 'id' || $speeddd9 == 'order_no' || $speeddd9 === 'pay_trade_no' || $speeddd9 === 'api_out_no') { $spca8acc->where($speeddd9, $spe1fc85); } else { $spca8acc->where($speeddd9, 'like', '%' . $spe1fc85 . '%'); } } if ($sp55f32c > 0) { if ($sp1b83a8 > 0) { $spca8acc->where('product_id', $sp1b83a8); } else { $spca8acc->whereHas('product', function ($spca8acc) use($sp55f32c) { $spca8acc->where('category_id', $sp55f32c); }); } } $sp79f3fc = (int) $spba756f->input('recent', 0); if ($sp79f3fc) { $sp5a57fe = (new Carbon())->addDay(-$sp79f3fc); $spca8acc->where(function ($spca8acc) use($sp5a57fe) { $spca8acc->where('paid_at', '>=', $sp5a57fe)->orWhere(function ($spca8acc) use($sp5a57fe) { $spca8acc->whereNull('paid_at')->where('created_at', '>=', $sp5a57fe); }); }); } else { $sp5a57fe = $spba756f->input('start_at', false); if (strlen($sp5a57fe)) { $spca8acc->where(function ($spca8acc) use($sp5a57fe) { $spca8acc->where('paid_at', '>=', $sp5a57fe . ' 00:00:00')->orWhere(function ($spca8acc) use($sp5a57fe) { $spca8acc->whereNull('paid_at')->where('created_at', '>=', $sp5a57fe . ' 00:00:00'); }); }); } $sp4e495c = $spba756f->input('end_at', false); if (strlen($sp4e495c)) { $spca8acc->where(function ($spca8acc) use($sp4e495c) { $spca8acc->where('paid_at', '<=', $sp4e495c . ' 23:59:59')->orWhere(function ($spca8acc) use($sp4e495c) { $spca8acc->whereNull('paid_at')->where('created_at', '<=', $sp4e495c . ' 23:59:59'); }); }); } } if ($sp67ac4f) { $spca8acc->where('status', \App\Order::STATUS_SUCCESS); $sp0b8d05 = clone $spca8acc; $sp927bae = $sp0b8d05->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp732cf7 = $spba756f->input('status'); if (strlen($sp732cf7)) { $spca8acc->whereIn('status', explode(',', $sp732cf7)); } else { $spca8acc->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp8dd439) { $spca8acc->where('product_id', \App\Product::ID_API); } else { $spca8acc->where('product_id', '>', 0); $spca8acc->with(array('product' => function (Relation $spca8acc) { $spca8acc->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $spca8acc) { $spca8acc->select(array('id', 'card')); })); } $spca8acc->with(array('pay' => function (Relation $spca8acc) { $spca8acc->select(array('id', 'name')); })); $spca8acc->orderBy('id', 'DESC'); if ($spe71412 === true) { $sp208d8a = (int) $spba756f->input('export_update_status'); $sp955d21 = $spba756f->input('export_update_card'); $sp00db53 = '﻿'; $sp00db53 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $spca8acc->chunk(100, function ($sp29dcf4) use(&$sp00db53, $sp208d8a, $sp955d21) { foreach ($sp29dcf4 as $spedec71) { if ($spedec71->status === \App\Order::STATUS_PAID) { if ($sp208d8a === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spedec71->send_status = $sp208d8a; $spedec71->saveOrFail(); } elseif ($sp208d8a === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spedec71->send_status = $sp208d8a; $spedec71->saveOrFail(); $this->ship(new Request(array('id' => $spedec71->id, 'card' => $sp955d21))); } } $sp682364 = $spedec71->contact_ext; if ($sp682364) { if ($sp682364[0] === '[') { $sp682364 = substr($sp682364, 2); } if ($sp682364[strlen($sp682364) - 1] === ']') { $sp682364 = substr($sp682364, 0, -2); } } $sp00db53 .= '"' . $spedec71->order_no . '","' . $spedec71->product_name . '","' . $spedec71->created_at . '","' . sprintf('%.2f', $spedec71->price / 100) . '","' . sprintf('%.2f', $spedec71->discount / 100) . '","' . sprintf('%.2f', $spedec71->paid / 100) . '","' . sprintf('%.2f', $spedec71->fee / 100) . '","' . sprintf('%.2f', $spedec71->cost / 100) . '","' . sprintf('%.2f', ($spedec71->paid - $spedec71->fee - $spedec71->cost) / 100) . '","' . ($spedec71->pay ? $spedec71->pay->name : '未知#' . $spedec71->pay_id) . '","' . $spedec71->pay_trade_no . '","' . $spedec71->paid_at . '","' . \App\Order::STATUS[$spedec71->status] . '","' . $spedec71->contact . '","' . $sp682364 . '"'; $sp00db53 .= '
'; } }); $spe6c5dc = 'export_orders_' . $this->getUserIdOrFail($spba756f) . '_' . date('YmdHis') . '.csv'; $sp3e89cf = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spe6c5dc), 'Content-Length' => strlen($sp00db53)); return response()->make($sp00db53, 200, $sp3e89cf); } $sp881a75 = $spba756f->input('current_page', 1); $sp2a01a9 = $spba756f->input('per_page', 20); $spfea7ce = $spca8acc->paginate($sp2a01a9, array('*'), 'page', $sp881a75); if ($sp67ac4f) { $spfea7ce = $spfea7ce->toArray(); $spfea7ce['profit_sum'] = $sp927bae; } return Response::success($spfea7ce); } function export(Request $spba756f) { return self::get($spba756f, true); } function stat(Request $spba756f) { $this->validate($spba756f, array('day' => 'required|integer|between:7,30')); $sp8d35f0 = (int) $spba756f->input('day'); if ($sp8d35f0 === 30) { $sp20fe30 = Carbon::now()->addMonths(-1); } else { $sp20fe30 = Carbon::now()->addDays(-$sp8d35f0); } $spfea7ce = $this->authQuery($spba756f, \App\Order::class)->where(function ($spca8acc) { $spca8acc->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp20fe30)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp5359c9 = array(); foreach ($spfea7ce as $spbdd4b3) { $sp5359c9[$spbdd4b3['date']] = array((int) $spbdd4b3['count'], (int) $spbdd4b3['paid'], (int) $spbdd4b3['profit']); } return Response::success($sp5359c9); } function info(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer')); $sp8e8060 = $spba756f->input('id'); $spedec71 = $this->authQuery($spba756f, \App\Order::class)->with(array('pay' => function (Relation $spca8acc) { $spca8acc->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spca8acc) { $spca8acc->select(array('id', 'card')); }))->findOrFail($sp8e8060); $spedec71->addHidden(array('system_fee')); return Response::success($spedec71); } function remark(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer', 'remark' => 'required|string')); $sp8e8060 = $spba756f->input('id'); $spedec71 = $this->authQuery($spba756f, \App\Order::class)->findOrFail($sp8e8060); $spedec71->remark = $spba756f->input('remark'); $spedec71->save(); return Response::success(); } function set_send_status(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp8e8060 = $spba756f->input('id'); $spedec71 = $this->authQuery($spba756f, \App\Order::class)->findOrFail($sp8e8060); if ($spedec71->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spedec71->send_status = $spba756f->input('send_status'); $spedec71->saveOrFail(); return Response::success(); } function ship(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer')); $spedec71 = $this->authQuery($spba756f, \App\Order::class)->with('product')->findOrFail($spba756f->input('id')); if ($spedec71->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spedec71->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp49c574 = $spedec71->product->delivery; $sp8841a6 = ''; if ($sp49c574 === \App\Product::DELIVERY_MANUAL) { $this->validate($spba756f, array('card' => 'required|string')); $sp8841a6 = $spba756f->input('card'); } $sp6e5de7 = null; $spb73662 = array(); if (FundHelper::orderSuccess($spedec71->id, function () use(&$spedec71, &$sp6e5de7, &$spb73662, $sp49c574, $sp8841a6) { $spedec71 = \App\Order::where('id', $spedec71->id)->lockForUpdate()->firstOrFail(); if ($spedec71->cards && count($spedec71->cards)) { $sp6e5de7 = '该订单已经发货，无需再次发货'; return false; } $sp9dfc99 = $spedec71->product()->lockForUpdate()->firstOrFail(); if ($sp49c574 === \App\Product::DELIVERY_MANUAL) { $spedec71->status = \App\Order::STATUS_SUCCESS; $spedec71->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spedec71->saveOrFail(); $spa9cef2 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp9dfc99->id, 'card' => $sp8841a6, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $spb73662[] = $spa9cef2->card; $spedec71->cards()->attach($spa9cef2->id); $sp9dfc99->count_sold += $spedec71->count; $sp9dfc99->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp137cd7 = \App\Card::where('product_id', $sp9dfc99->id)->whereRaw('`count_sold`<`count_all`')->take($spedec71->count)->lockForUpdate()->get(); if (count($sp137cd7) !== $spedec71->count) { $sp6e5de7 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spedec71->status = \App\Order::STATUS_SUCCESS; $spedec71->saveOrFail(); $speccfba = array(); foreach ($sp137cd7 as $spa9cef2) { $speccfba[] = $spa9cef2->id; $spb73662[] = $spa9cef2->card; } $spedec71->cards()->attach($speccfba); \App\Card::whereIn('id', $speccfba)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp9dfc99->count_sold += $spedec71->count; $sp9dfc99->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spdf69a9 = @json_decode($spedec71->contact_ext, true)['_mail']; if ($spdf69a9) { $spedec71->sendEmail($spdf69a9); } } if ($spedec71->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spcd62a5 = @json_decode($spedec71->contact_ext, true)['_mobile']; if ($spcd62a5) { $spedec71->sendSms($spcd62a5); } } $spedec71['card_orders'] = array_map(function ($spbdd4b3) { return array('card' => array('card' => $spbdd4b3)); }, $spb73662); $spedec71->addHidden(array('system_fee')); return Response::success($spedec71); } else { return Response::fail($sp6e5de7 ?? '数据库繁忙, 请联系客服'); } } }