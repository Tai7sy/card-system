<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp510ef3, $spfbb848 = false) { $sp90af04 = $this->authQuery($sp510ef3, \App\Order::class); $sp40435f = (int) $sp510ef3->input('category_id'); $sp2f9632 = (int) $sp510ef3->input('product_id'); $sp7f27ca = (int) $sp510ef3->input('profit'); $spfb60f0 = $sp40435f === \App\Product::ID_API || $sp2f9632 === \App\Product::ID_API; $spebf2d9 = $sp510ef3->input('search', false); $spac3bf6 = $sp510ef3->input('val', false); if ($spebf2d9 && $spac3bf6) { if ($spebf2d9 == 'id' || $spebf2d9 == 'order_no' || $spebf2d9 === 'pay_trade_no' || $spebf2d9 === 'api_out_no') { $sp90af04->where($spebf2d9, $spac3bf6); } else { $sp90af04->where($spebf2d9, 'like', '%' . $spac3bf6 . '%'); } } if ($sp40435f > 0) { if ($sp2f9632 > 0) { $sp90af04->where('product_id', $sp2f9632); } else { $sp90af04->whereHas('product', function ($sp90af04) use($sp40435f) { $sp90af04->where('category_id', $sp40435f); }); } } $sp920498 = (int) $sp510ef3->input('recent', 0); if ($sp920498) { $sp7646e7 = (new Carbon())->addDay(-$sp920498); $sp90af04->where(function ($sp90af04) use($sp7646e7) { $sp90af04->where('paid_at', '>=', $sp7646e7)->orWhere(function ($sp90af04) use($sp7646e7) { $sp90af04->whereNull('paid_at')->where('created_at', '>=', $sp7646e7); }); }); } else { $sp7646e7 = $sp510ef3->input('start_at', false); if (strlen($sp7646e7)) { $sp90af04->where(function ($sp90af04) use($sp7646e7) { $sp90af04->where('paid_at', '>=', $sp7646e7 . ' 00:00:00')->orWhere(function ($sp90af04) use($sp7646e7) { $sp90af04->whereNull('paid_at')->where('created_at', '>=', $sp7646e7 . ' 00:00:00'); }); }); } $spd7f197 = $sp510ef3->input('end_at', false); if (strlen($spd7f197)) { $sp90af04->where(function ($sp90af04) use($spd7f197) { $sp90af04->where('paid_at', '<=', $spd7f197 . ' 23:59:59')->orWhere(function ($sp90af04) use($spd7f197) { $sp90af04->whereNull('paid_at')->where('created_at', '<=', $spd7f197 . ' 23:59:59'); }); }); } } if ($sp7f27ca) { $sp90af04->where('status', \App\Order::STATUS_SUCCESS); $sp23dbde = clone $sp90af04; $spf94e3e = $sp23dbde->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp671ce9 = $sp510ef3->input('status'); if (strlen($sp671ce9)) { $sp90af04->whereIn('status', explode(',', $sp671ce9)); } else { $sp90af04->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spfb60f0) { $sp90af04->where('product_id', \App\Product::ID_API); } else { $sp90af04->where('product_id', '>', 0); $sp90af04->with(array('product' => function (Relation $sp90af04) { $sp90af04->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp90af04) { $sp90af04->select(array('id', 'card')); })); } $sp90af04->with(array('pay' => function (Relation $sp90af04) { $sp90af04->select(array('id', 'name')); })); $sp90af04->orderBy('id', 'DESC'); if ($spfbb848 === true) { $sp2424e7 = (int) $sp510ef3->input('export_update_status'); $sp710b6b = $sp510ef3->input('export_update_card'); $sp865e0a = '﻿'; $sp865e0a .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp90af04->chunk(100, function ($sp99e23a) use(&$sp865e0a, $sp2424e7, $sp710b6b) { foreach ($sp99e23a as $spff5c0e) { if ($spff5c0e->status === \App\Order::STATUS_PAID) { if ($sp2424e7 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spff5c0e->send_status = $sp2424e7; $spff5c0e->saveOrFail(); } elseif ($sp2424e7 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spff5c0e->send_status = $sp2424e7; $spff5c0e->saveOrFail(); $this->ship(new Request(array('id' => $spff5c0e->id, 'card' => $sp710b6b))); } } $sp151c72 = $spff5c0e->contact_ext; if ($sp151c72) { if ($sp151c72[0] === '[') { $sp151c72 = substr($sp151c72, 2); } if ($sp151c72[strlen($sp151c72) - 1] === ']') { $sp151c72 = substr($sp151c72, 0, -2); } } $sp865e0a .= '"' . $spff5c0e->order_no . '","' . $spff5c0e->product_name . '","' . $spff5c0e->created_at . '","' . sprintf('%.2f', $spff5c0e->price / 100) . '","' . sprintf('%.2f', $spff5c0e->discount / 100) . '","' . sprintf('%.2f', $spff5c0e->paid / 100) . '","' . sprintf('%.2f', $spff5c0e->fee / 100) . '","' . sprintf('%.2f', $spff5c0e->cost / 100) . '","' . sprintf('%.2f', ($spff5c0e->paid - $spff5c0e->fee - $spff5c0e->cost) / 100) . '","' . ($spff5c0e->pay ? $spff5c0e->pay->name : '未知#' . $spff5c0e->pay_id) . '","' . $spff5c0e->pay_trade_no . '","' . $spff5c0e->paid_at . '","' . \App\Order::STATUS[$spff5c0e->status] . '","' . $spff5c0e->contact . '","' . $sp151c72 . '"'; $sp865e0a .= '
'; } }); $sp56effb = 'export_orders_' . $this->getUserIdOrFail($sp510ef3) . '_' . date('YmdHis') . '.csv'; $sp09e2ff = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp56effb), 'Content-Length' => strlen($sp865e0a)); return response()->make($sp865e0a, 200, $sp09e2ff); } $spb02a8e = (int) $sp510ef3->input('current_page', 1); $sp95f730 = (int) $sp510ef3->input('per_page', 20); $spe24324 = $sp90af04->paginate($sp95f730, array('*'), 'page', $spb02a8e); if ($sp7f27ca) { $spe24324 = $spe24324->toArray(); $spe24324['profit_sum'] = $spf94e3e; } return Response::success($spe24324); } function export(Request $sp510ef3) { return self::get($sp510ef3, true); } function stat(Request $sp510ef3) { $this->validate($sp510ef3, array('day' => 'required|integer|between:7,30')); $spac3a98 = (int) $sp510ef3->input('day'); if ($spac3a98 === 30) { $sp7646e7 = Carbon::now()->addMonths(-1)->toDateString() . ' 00:00:00'; } else { $sp7646e7 = Carbon::now()->addDays(-$spac3a98)->toDateString() . ' 00:00:00'; } $spe24324 = $this->authQuery($sp510ef3, \App\Order::class)->where(function ($sp90af04) { $sp90af04->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp7646e7)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spced997 = array(); foreach ($spe24324 as $sp185233) { $spced997[$sp185233['date']] = array((int) $sp185233['count'], (int) $sp185233['paid'], (int) $sp185233['profit']); } return Response::success($spced997); } function info(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer')); $sp258ace = $sp510ef3->input('id'); $spff5c0e = $this->authQuery($sp510ef3, \App\Order::class)->with(array('pay' => function (Relation $sp90af04) { $sp90af04->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp90af04) { $sp90af04->select(array('id', 'card')); }))->findOrFail($sp258ace); $spff5c0e->addHidden(array('system_fee')); return Response::success($spff5c0e); } function remark(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer', 'remark' => 'required|string')); $sp258ace = $sp510ef3->input('id'); $spff5c0e = $this->authQuery($sp510ef3, \App\Order::class)->findOrFail($sp258ace); $spff5c0e->remark = $sp510ef3->input('remark'); $spff5c0e->save(); return Response::success(); } function set_send_status(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp258ace = $sp510ef3->input('id'); $spff5c0e = $this->authQuery($sp510ef3, \App\Order::class)->findOrFail($sp258ace); if ($spff5c0e->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spff5c0e->send_status = $sp510ef3->input('send_status'); $spff5c0e->saveOrFail(); return Response::success(); } function ship(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer')); $spff5c0e = $this->authQuery($sp510ef3, \App\Order::class)->with('product')->findOrFail($sp510ef3->input('id')); if ($spff5c0e->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spff5c0e->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spd0719a = $spff5c0e->product->delivery; $spa8db44 = ''; if ($spd0719a === \App\Product::DELIVERY_MANUAL) { $this->validate($sp510ef3, array('card' => 'required|string')); $spa8db44 = $sp510ef3->input('card'); } $sp3d1ba4 = null; $sp114fae = array(); if (FundHelper::orderSuccess($spff5c0e->id, function () use(&$spff5c0e, &$sp3d1ba4, &$sp114fae, $spd0719a, $spa8db44) { $spff5c0e = \App\Order::where('id', $spff5c0e->id)->lockForUpdate()->firstOrFail(); if ($spff5c0e->cards && count($spff5c0e->cards)) { $sp3d1ba4 = '该订单已经发货，无需再次发货'; return false; } $spd39704 = $spff5c0e->product()->lockForUpdate()->firstOrFail(); if ($spd0719a === \App\Product::DELIVERY_MANUAL) { $spff5c0e->status = \App\Order::STATUS_SUCCESS; $spff5c0e->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spff5c0e->saveOrFail(); $spb1f3d6 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $spd39704->id, 'card' => $spa8db44, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp114fae[] = $spb1f3d6->card; $spff5c0e->cards()->attach($spb1f3d6->id); $spd39704->count_sold += $spff5c0e->count; $spd39704->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp0d18ea = \App\Card::where('product_id', $spd39704->id)->whereRaw('`count_sold`<`count_all`')->take($spff5c0e->count)->lockForUpdate()->get(); if (count($sp0d18ea) !== $spff5c0e->count) { $sp3d1ba4 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spff5c0e->status = \App\Order::STATUS_SUCCESS; $spff5c0e->saveOrFail(); $sp7b9247 = array(); foreach ($sp0d18ea as $spb1f3d6) { $sp7b9247[] = $spb1f3d6->id; $sp114fae[] = $spb1f3d6->card; } $spff5c0e->cards()->attach($sp7b9247); \App\Card::whereIn('id', $sp7b9247)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spd39704->count_sold += $spff5c0e->count; $spd39704->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spf3e9ef = @json_decode($spff5c0e->contact_ext, true)['_mail']; if ($spf3e9ef) { $spff5c0e->sendEmail($spf3e9ef); } } if ($spff5c0e->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp10ebc2 = @json_decode($spff5c0e->contact_ext, true)['_mobile']; if ($sp10ebc2) { $spff5c0e->sendSms($sp10ebc2); } } $spff5c0e['card_orders'] = array_map(function ($sp185233) { return array('card' => array('card' => $sp185233)); }, $sp114fae); $spff5c0e->addHidden(array('system_fee')); return Response::success($spff5c0e); } else { return Response::fail($sp3d1ba4 ?? '数据库繁忙, 请联系客服'); } } }