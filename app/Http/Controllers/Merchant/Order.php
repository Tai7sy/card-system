<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp26e527, $spf2a246 = false) { $spcfdf85 = $this->authQuery($sp26e527, \App\Order::class); $sp735ffa = (int) $sp26e527->input('category_id'); $sp517398 = (int) $sp26e527->input('product_id'); $spadf483 = (int) $sp26e527->input('profit'); $sp3a02a1 = $sp735ffa === \App\Product::ID_API || $sp517398 === \App\Product::ID_API; $sp78cca0 = $sp26e527->input('search', false); $sp79e569 = $sp26e527->input('val', false); if ($sp78cca0 && $sp79e569) { if ($sp78cca0 == 'id' || $sp78cca0 == 'order_no' || $sp78cca0 === 'pay_trade_no' || $sp78cca0 === 'api_out_no') { $spcfdf85->where($sp78cca0, $sp79e569); } else { $spcfdf85->where($sp78cca0, 'like', '%' . $sp79e569 . '%'); } } if ($sp735ffa > 0) { if ($sp517398 > 0) { $spcfdf85->where('product_id', $sp517398); } else { $spcfdf85->whereHas('product', function ($spcfdf85) use($sp735ffa) { $spcfdf85->where('category_id', $sp735ffa); }); } } $sp2dd241 = (int) $sp26e527->input('recent', 0); if ($sp2dd241) { $sp6bf7ca = (new Carbon())->addDay(-$sp2dd241); $spcfdf85->where(function ($spcfdf85) use($sp6bf7ca) { $spcfdf85->where('paid_at', '>=', $sp6bf7ca)->orWhere(function ($spcfdf85) use($sp6bf7ca) { $spcfdf85->whereNull('paid_at')->where('created_at', '>=', $sp6bf7ca); }); }); } else { $sp6bf7ca = $sp26e527->input('start_at', false); if (strlen($sp6bf7ca)) { $spcfdf85->where(function ($spcfdf85) use($sp6bf7ca) { $spcfdf85->where('paid_at', '>=', $sp6bf7ca . ' 00:00:00')->orWhere(function ($spcfdf85) use($sp6bf7ca) { $spcfdf85->whereNull('paid_at')->where('created_at', '>=', $sp6bf7ca . ' 00:00:00'); }); }); } $sp7d8b2f = $sp26e527->input('end_at', false); if (strlen($sp7d8b2f)) { $spcfdf85->where(function ($spcfdf85) use($sp7d8b2f) { $spcfdf85->where('paid_at', '<=', $sp7d8b2f . ' 23:59:59')->orWhere(function ($spcfdf85) use($sp7d8b2f) { $spcfdf85->whereNull('paid_at')->where('created_at', '<=', $sp7d8b2f . ' 23:59:59'); }); }); } } if ($spadf483) { $spcfdf85->where('status', \App\Order::STATUS_SUCCESS); $sp12ce43 = clone $spcfdf85; $spdbb8b5 = $sp12ce43->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp0f5dbe = $sp26e527->input('status'); if (strlen($sp0f5dbe)) { $spcfdf85->whereIn('status', explode(',', $sp0f5dbe)); } else { $spcfdf85->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp3a02a1) { $spcfdf85->where('product_id', \App\Product::ID_API); } else { $spcfdf85->where('product_id', '>', 0); $spcfdf85->with(array('product' => function (Relation $spcfdf85) { $spcfdf85->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $spcfdf85) { $spcfdf85->select(array('id', 'card')); })); } $spcfdf85->with(array('pay' => function (Relation $spcfdf85) { $spcfdf85->select(array('id', 'name')); })); $spcfdf85->orderBy('id', 'DESC'); if ($spf2a246 === true) { $sp003148 = (int) $sp26e527->input('export_update_status'); $sp42ba6f = $sp26e527->input('export_update_card'); $sp65ec79 = '﻿'; $sp65ec79 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $spcfdf85->chunk(100, function ($sp002573) use(&$sp65ec79, $sp003148, $sp42ba6f) { foreach ($sp002573 as $sp8ac6c1) { if ($sp8ac6c1->status === \App\Order::STATUS_PAID) { if ($sp003148 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp8ac6c1->send_status = $sp003148; $sp8ac6c1->saveOrFail(); } elseif ($sp003148 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp8ac6c1->send_status = $sp003148; $sp8ac6c1->saveOrFail(); $this->ship(new Request(array('id' => $sp8ac6c1->id, 'card' => $sp42ba6f))); } } $sp8bfa91 = $sp8ac6c1->contact_ext; if ($sp8bfa91) { if ($sp8bfa91[0] === '[') { $sp8bfa91 = substr($sp8bfa91, 2); } if ($sp8bfa91[strlen($sp8bfa91) - 1] === ']') { $sp8bfa91 = substr($sp8bfa91, 0, -2); } } $sp65ec79 .= '"' . $sp8ac6c1->order_no . '","' . $sp8ac6c1->product_name . '","' . $sp8ac6c1->created_at . '","' . sprintf('%.2f', $sp8ac6c1->price / 100) . '","' . sprintf('%.2f', $sp8ac6c1->discount / 100) . '","' . sprintf('%.2f', $sp8ac6c1->paid / 100) . '","' . sprintf('%.2f', $sp8ac6c1->fee / 100) . '","' . sprintf('%.2f', $sp8ac6c1->cost / 100) . '","' . sprintf('%.2f', ($sp8ac6c1->paid - $sp8ac6c1->fee - $sp8ac6c1->cost) / 100) . '","' . ($sp8ac6c1->pay ? $sp8ac6c1->pay->name : '未知#' . $sp8ac6c1->pay_id) . '","' . $sp8ac6c1->pay_trade_no . '","' . $sp8ac6c1->paid_at . '","' . \App\Order::STATUS[$sp8ac6c1->status] . '","' . $sp8ac6c1->contact . '","' . $sp8bfa91 . '"'; $sp65ec79 .= '
'; } }); $sp7c2257 = 'export_orders_' . $this->getUserIdOrFail($sp26e527) . '_' . date('YmdHis') . '.csv'; $spfeddd9 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp7c2257), 'Content-Length' => strlen($sp65ec79)); return response()->make($sp65ec79, 200, $spfeddd9); } $sp81cf40 = (int) $sp26e527->input('current_page', 1); $sp8de1f1 = (int) $sp26e527->input('per_page', 20); $spccc256 = $spcfdf85->paginate($sp8de1f1, array('*'), 'page', $sp81cf40); if ($spadf483) { $spccc256 = $spccc256->toArray(); $spccc256['profit_sum'] = $spdbb8b5; } return Response::success($spccc256); } function export(Request $sp26e527) { return self::get($sp26e527, true); } function stat(Request $sp26e527) { $this->validate($sp26e527, array('day' => 'required|integer|between:7,30')); $spc9ad9e = (int) $sp26e527->input('day'); if ($spc9ad9e === 30) { $sp6bf7ca = Carbon::now()->addMonths(-1)->toDateString() . ' 00:00:00'; } else { $sp6bf7ca = Carbon::now()->addDays(-$spc9ad9e)->toDateString() . ' 00:00:00'; } $spccc256 = $this->authQuery($sp26e527, \App\Order::class)->where(function ($spcfdf85) { $spcfdf85->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp6bf7ca)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spa87332 = array(); foreach ($spccc256 as $sp9c771b) { $spa87332[$sp9c771b['date']] = array((int) $sp9c771b['count'], (int) $sp9c771b['paid'], (int) $sp9c771b['profit']); } return Response::success($spa87332); } function info(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer')); $sp138835 = $sp26e527->input('id'); $sp8ac6c1 = $this->authQuery($sp26e527, \App\Order::class)->with(array('pay' => function (Relation $spcfdf85) { $spcfdf85->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spcfdf85) { $spcfdf85->select(array('id', 'card')); }))->findOrFail($sp138835); $sp8ac6c1->addHidden(array('system_fee')); return Response::success($sp8ac6c1); } function remark(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer', 'remark' => 'required|string')); $sp138835 = $sp26e527->input('id'); $sp8ac6c1 = $this->authQuery($sp26e527, \App\Order::class)->findOrFail($sp138835); $sp8ac6c1->remark = $sp26e527->input('remark'); $sp8ac6c1->save(); return Response::success(); } function set_send_status(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp138835 = $sp26e527->input('id'); $sp8ac6c1 = $this->authQuery($sp26e527, \App\Order::class)->findOrFail($sp138835); if ($sp8ac6c1->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp8ac6c1->send_status = $sp26e527->input('send_status'); $sp8ac6c1->saveOrFail(); return Response::success(); } function ship(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer')); $sp8ac6c1 = $this->authQuery($sp26e527, \App\Order::class)->with('product')->findOrFail($sp26e527->input('id')); if ($sp8ac6c1->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp8ac6c1->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp222d24 = $sp8ac6c1->product->delivery; $sp5ff4e0 = ''; if ($sp222d24 === \App\Product::DELIVERY_MANUAL) { $this->validate($sp26e527, array('card' => 'required|string')); $sp5ff4e0 = $sp26e527->input('card'); } $spee4ac9 = null; $sp107491 = array(); if (FundHelper::orderSuccess($sp8ac6c1->id, function () use(&$sp8ac6c1, &$spee4ac9, &$sp107491, $sp222d24, $sp5ff4e0) { $sp8ac6c1 = \App\Order::where('id', $sp8ac6c1->id)->lockForUpdate()->firstOrFail(); if ($sp8ac6c1->cards && count($sp8ac6c1->cards)) { $spee4ac9 = '该订单已经发货，无需再次发货'; return false; } $sp222f58 = $sp8ac6c1->product()->lockForUpdate()->firstOrFail(); if ($sp222d24 === \App\Product::DELIVERY_MANUAL) { $sp8ac6c1->status = \App\Order::STATUS_SUCCESS; $sp8ac6c1->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp8ac6c1->saveOrFail(); $spaeb7b9 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp222f58->id, 'card' => $sp5ff4e0, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp107491[] = $spaeb7b9->card; $sp8ac6c1->cards()->attach($spaeb7b9->id); $sp222f58->count_sold += $sp8ac6c1->count; $sp222f58->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp8088f0 = \App\Card::where('product_id', $sp222f58->id)->whereRaw('`count_sold`<`count_all`')->take($sp8ac6c1->count)->lockForUpdate()->get(); if (count($sp8088f0) !== $sp8ac6c1->count) { $spee4ac9 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp8ac6c1->status = \App\Order::STATUS_SUCCESS; $sp8ac6c1->saveOrFail(); $spd9f3f2 = array(); foreach ($sp8088f0 as $spaeb7b9) { $spd9f3f2[] = $spaeb7b9->id; $sp107491[] = $spaeb7b9->card; } $sp8ac6c1->cards()->attach($spd9f3f2); \App\Card::whereIn('id', $spd9f3f2)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp222f58->count_sold += $sp8ac6c1->count; $sp222f58->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spfea1c9 = @json_decode($sp8ac6c1->contact_ext, true)['_mail']; if ($spfea1c9) { $sp8ac6c1->sendEmail($spfea1c9); } } if ($sp8ac6c1->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp7a4107 = @json_decode($sp8ac6c1->contact_ext, true)['_mobile']; if ($sp7a4107) { $sp8ac6c1->sendSms($sp7a4107); } } $sp8ac6c1['card_orders'] = array_map(function ($sp9c771b) { return array('card' => array('card' => $sp9c771b)); }, $sp107491); $sp8ac6c1->addHidden(array('system_fee')); return Response::success($sp8ac6c1); } else { return Response::fail($spee4ac9 ?? '数据库繁忙, 请联系客服'); } } }