<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp179c14, $sp1c0966 = false) { $sp78fbd3 = $this->authQuery($sp179c14, \App\Order::class); $sp2521ab = (int) $sp179c14->input('category_id'); $spc00b16 = (int) $sp179c14->input('product_id'); $spf6028e = (int) $sp179c14->input('profit'); $sp66b3f3 = $sp2521ab === \App\Product::ID_API || $spc00b16 === \App\Product::ID_API; $sp2ae16a = $sp179c14->input('search', false); $sp2fe7b9 = $sp179c14->input('val', false); if ($sp2ae16a && $sp2fe7b9) { if ($sp2ae16a == 'id' || $sp2ae16a == 'order_no' || $sp2ae16a === 'pay_trade_no' || $sp2ae16a === 'api_out_no') { $sp78fbd3->where($sp2ae16a, $sp2fe7b9); } else { $sp78fbd3->where($sp2ae16a, 'like', '%' . $sp2fe7b9 . '%'); } } if ($sp2521ab > 0) { if ($spc00b16 > 0) { $sp78fbd3->where('product_id', $spc00b16); } else { $sp78fbd3->whereHas('product', function ($sp78fbd3) use($sp2521ab) { $sp78fbd3->where('category_id', $sp2521ab); }); } } $spa4c9fc = (int) $sp179c14->input('recent', 0); if ($spa4c9fc) { $sp1293cd = (new Carbon())->addDay(-$spa4c9fc); $sp78fbd3->where(function ($sp78fbd3) use($sp1293cd) { $sp78fbd3->where('paid_at', '>=', $sp1293cd)->orWhere(function ($sp78fbd3) use($sp1293cd) { $sp78fbd3->whereNull('paid_at')->where('created_at', '>=', $sp1293cd); }); }); } else { $sp1293cd = $sp179c14->input('start_at', false); if (strlen($sp1293cd)) { $sp78fbd3->where(function ($sp78fbd3) use($sp1293cd) { $sp78fbd3->where('paid_at', '>=', $sp1293cd . ' 00:00:00')->orWhere(function ($sp78fbd3) use($sp1293cd) { $sp78fbd3->whereNull('paid_at')->where('created_at', '>=', $sp1293cd . ' 00:00:00'); }); }); } $spf274dd = $sp179c14->input('end_at', false); if (strlen($spf274dd)) { $sp78fbd3->where(function ($sp78fbd3) use($spf274dd) { $sp78fbd3->where('paid_at', '<=', $spf274dd . ' 23:59:59')->orWhere(function ($sp78fbd3) use($spf274dd) { $sp78fbd3->whereNull('paid_at')->where('created_at', '<=', $spf274dd . ' 23:59:59'); }); }); } } if ($spf6028e) { $sp78fbd3->where('status', \App\Order::STATUS_SUCCESS); $sp5267f3 = clone $sp78fbd3; $spcc714c = $sp5267f3->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spf783c8 = $sp179c14->input('status'); if (strlen($spf783c8)) { $sp78fbd3->whereIn('status', explode(',', $spf783c8)); } else { $sp78fbd3->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($sp66b3f3) { $sp78fbd3->where('product_id', \App\Product::ID_API); } else { $sp78fbd3->where('product_id', '>', 0); $sp78fbd3->with(array('product' => function (Relation $sp78fbd3) { $sp78fbd3->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp78fbd3) { $sp78fbd3->select(array('id', 'card')); })); } $sp78fbd3->with(array('pay' => function (Relation $sp78fbd3) { $sp78fbd3->select(array('id', 'name')); })); $sp78fbd3->orderBy('id', 'DESC'); if ($sp1c0966 === true) { $spb125c6 = (int) $sp179c14->input('export_update_status'); $spf07c2b = $sp179c14->input('export_update_card'); $spc0c250 = '﻿'; $spc0c250 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp78fbd3->chunk(100, function ($sp37fe83) use(&$spc0c250, $spb125c6, $spf07c2b) { foreach ($sp37fe83 as $spd807de) { if ($spd807de->status === \App\Order::STATUS_PAID) { if ($spb125c6 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spd807de->send_status = $spb125c6; $spd807de->saveOrFail(); } elseif ($spb125c6 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spd807de->send_status = $spb125c6; $spd807de->saveOrFail(); $this->ship(new Request(array('id' => $spd807de->id, 'card' => $spf07c2b))); } } $spa4f097 = $spd807de->contact_ext; if ($spa4f097) { if ($spa4f097[0] === '[') { $spa4f097 = substr($spa4f097, 2); } if ($spa4f097[strlen($spa4f097) - 1] === ']') { $spa4f097 = substr($spa4f097, 0, -2); } } $spc0c250 .= '"' . $spd807de->order_no . '","' . $spd807de->product_name . '","' . $spd807de->created_at . '","' . sprintf('%.2f', $spd807de->price / 100) . '","' . sprintf('%.2f', $spd807de->discount / 100) . '","' . sprintf('%.2f', $spd807de->paid / 100) . '","' . sprintf('%.2f', $spd807de->fee / 100) . '","' . sprintf('%.2f', $spd807de->cost / 100) . '","' . sprintf('%.2f', ($spd807de->paid - $spd807de->fee - $spd807de->cost) / 100) . '","' . ($spd807de->pay ? $spd807de->pay->name : '未知#' . $spd807de->pay_id) . '","' . $spd807de->pay_trade_no . '","' . $spd807de->paid_at . '","' . \App\Order::STATUS[$spd807de->status] . '","' . $spd807de->contact . '","' . $spa4f097 . '"'; $spc0c250 .= '
'; } }); $sp8f1fad = 'export_orders_' . $this->getUserIdOrFail($sp179c14) . '_' . date('YmdHis') . '.csv'; $spa1a278 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp8f1fad), 'Content-Length' => strlen($spc0c250)); return response()->make($spc0c250, 200, $spa1a278); } $spababe9 = $sp179c14->input('current_page', 1); $sp4b1688 = $sp179c14->input('per_page', 20); $spe11c26 = $sp78fbd3->paginate($sp4b1688, array('*'), 'page', $spababe9); if ($spf6028e) { $spe11c26 = $spe11c26->toArray(); $spe11c26['profit_sum'] = $spcc714c; } return Response::success($spe11c26); } function export(Request $sp179c14) { return self::get($sp179c14, true); } function stat(Request $sp179c14) { $this->validate($sp179c14, array('day' => 'required|integer|between:7,30')); $sp09db71 = (int) $sp179c14->input('day'); if ($sp09db71 === 30) { $sp56db69 = Carbon::now()->addMonths(-1); } else { $sp56db69 = Carbon::now()->addDays(-$sp09db71); } $spe11c26 = $this->authQuery($sp179c14, \App\Order::class)->where(function ($sp78fbd3) { $sp78fbd3->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp56db69)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spa6aab5 = array(); foreach ($spe11c26 as $sp286f69) { $spa6aab5[$sp286f69['date']] = array((int) $sp286f69['count'], (int) $sp286f69['paid'], (int) $sp286f69['profit']); } return Response::success($spa6aab5); } function info(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer')); $spadc22c = $sp179c14->input('id'); $spd807de = $this->authQuery($sp179c14, \App\Order::class)->with(array('pay' => function (Relation $sp78fbd3) { $sp78fbd3->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp78fbd3) { $sp78fbd3->select(array('id', 'card')); }))->findOrFail($spadc22c); $spd807de->addHidden(array('system_fee')); return Response::success($spd807de); } function remark(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer', 'remark' => 'required|string')); $spadc22c = $sp179c14->input('id'); $spd807de = $this->authQuery($sp179c14, \App\Order::class)->findOrFail($spadc22c); $spd807de->remark = $sp179c14->input('remark'); $spd807de->save(); return Response::success(); } function set_send_status(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spadc22c = $sp179c14->input('id'); $spd807de = $this->authQuery($sp179c14, \App\Order::class)->findOrFail($spadc22c); if ($spd807de->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spd807de->send_status = $sp179c14->input('send_status'); $spd807de->saveOrFail(); return Response::success(); } function ship(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer')); $spd807de = $this->authQuery($sp179c14, \App\Order::class)->with('product')->findOrFail($sp179c14->input('id')); if ($spd807de->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spd807de->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $sp1fd4cc = $spd807de->product->delivery; $spcea9a6 = ''; if ($sp1fd4cc === \App\Product::DELIVERY_MANUAL) { $this->validate($sp179c14, array('card' => 'required|string')); $spcea9a6 = $sp179c14->input('card'); } $sp24466a = null; $sp43fd87 = array(); if (FundHelper::orderSuccess($spd807de->id, function () use(&$spd807de, &$sp24466a, &$sp43fd87, $sp1fd4cc, $spcea9a6) { $spd807de = \App\Order::where('id', $spd807de->id)->lockForUpdate()->firstOrFail(); if ($spd807de->cards && count($spd807de->cards)) { $sp24466a = '该订单已经发货，无需再次发货'; return false; } $sp434ec8 = $spd807de->product()->lockForUpdate()->firstOrFail(); if ($sp1fd4cc === \App\Product::DELIVERY_MANUAL) { $spd807de->status = \App\Order::STATUS_SUCCESS; $spd807de->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spd807de->saveOrFail(); $spe677ff = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp434ec8->id, 'card' => $spcea9a6, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp43fd87[] = $spe677ff->card; $spd807de->cards()->attach($spe677ff->id); $sp434ec8->count_sold += $spd807de->count; $sp434ec8->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spe48ece = \App\Card::where('product_id', $sp434ec8->id)->whereRaw('`count_sold`<`count_all`')->take($spd807de->count)->lockForUpdate()->get(); if (count($spe48ece) !== $spd807de->count) { $sp24466a = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spd807de->status = \App\Order::STATUS_SUCCESS; $spd807de->saveOrFail(); $spd81209 = array(); foreach ($spe48ece as $spe677ff) { $spd81209[] = $spe677ff->id; $sp43fd87[] = $spe677ff->card; } $spd807de->cards()->attach($spd81209); \App\Card::whereIn('id', $spd81209)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp434ec8->count_sold += $spd807de->count; $sp434ec8->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp15df0e = @json_decode($spd807de->contact_ext, true)['_mail']; if ($sp15df0e) { $spd807de->sendEmail($sp15df0e); } } if ($spd807de->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp3d31d5 = @json_decode($spd807de->contact_ext, true)['_mobile']; if ($sp3d31d5) { $spd807de->sendSms($sp3d31d5); } } $spd807de['card_orders'] = array_map(function ($sp286f69) { return array('card' => array('card' => $sp286f69)); }, $sp43fd87); $spd807de->addHidden(array('system_fee')); return Response::success($spd807de); } else { return Response::fail($sp24466a ?? '数据库繁忙, 请联系客服'); } } }