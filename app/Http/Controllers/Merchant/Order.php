<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp0aae4c, $spba6f71 = false) { $spb0a50e = $this->authQuery($sp0aae4c, \App\Order::class); $sp18887c = (int) $sp0aae4c->input('category_id'); $sp2baf03 = (int) $sp0aae4c->input('product_id'); $spbc0a71 = (int) $sp0aae4c->input('profit'); $spdf7a2f = $sp18887c === \App\Product::ID_API || $sp2baf03 === \App\Product::ID_API; $spb66be1 = $sp0aae4c->input('search', false); $spc82c62 = $sp0aae4c->input('val', false); if ($spb66be1 && $spc82c62) { if ($spb66be1 == 'id' || $spb66be1 == 'order_no' || $spb66be1 === 'pay_trade_no' || $spb66be1 === 'api_out_no') { $spb0a50e->where($spb66be1, $spc82c62); } else { $spb0a50e->where($spb66be1, 'like', '%' . $spc82c62 . '%'); } } if ($sp18887c > 0) { if ($sp2baf03 > 0) { $spb0a50e->where('product_id', $sp2baf03); } else { $spb0a50e->whereHas('product', function ($spb0a50e) use($sp18887c) { $spb0a50e->where('category_id', $sp18887c); }); } } $spac3611 = (int) $sp0aae4c->input('recent', 0); if ($spac3611) { $spee8548 = (new Carbon())->addDay(-$spac3611); $spb0a50e->where(function ($spb0a50e) use($spee8548) { $spb0a50e->where('paid_at', '>=', $spee8548)->orWhere(function ($spb0a50e) use($spee8548) { $spb0a50e->whereNull('paid_at')->where('created_at', '>=', $spee8548); }); }); } else { $spee8548 = $sp0aae4c->input('start_at', false); if (strlen($spee8548)) { $spb0a50e->where(function ($spb0a50e) use($spee8548) { $spb0a50e->where('paid_at', '>=', $spee8548 . ' 00:00:00')->orWhere(function ($spb0a50e) use($spee8548) { $spb0a50e->whereNull('paid_at')->where('created_at', '>=', $spee8548 . ' 00:00:00'); }); }); } $sp3a7045 = $sp0aae4c->input('end_at', false); if (strlen($sp3a7045)) { $spb0a50e->where(function ($spb0a50e) use($sp3a7045) { $spb0a50e->where('paid_at', '<=', $sp3a7045 . ' 23:59:59')->orWhere(function ($spb0a50e) use($sp3a7045) { $spb0a50e->whereNull('paid_at')->where('created_at', '<=', $sp3a7045 . ' 23:59:59'); }); }); } } if ($spbc0a71) { $spb0a50e->where('status', \App\Order::STATUS_SUCCESS); $sp8ddb6d = clone $spb0a50e; $sp3c2590 = $sp8ddb6d->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp2e8268 = $sp0aae4c->input('status'); if (strlen($sp2e8268)) { $spb0a50e->whereIn('status', explode(',', $sp2e8268)); } else { $spb0a50e->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spdf7a2f) { $spb0a50e->where('product_id', \App\Product::ID_API); } else { $spb0a50e->where('product_id', '>', 0); $spb0a50e->with(array('product' => function (Relation $spb0a50e) { $spb0a50e->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $spb0a50e) { $spb0a50e->select(array('id', 'card')); })); } $spb0a50e->with(array('pay' => function (Relation $spb0a50e) { $spb0a50e->select(array('id', 'name')); })); $spb0a50e->orderBy('id', 'DESC'); if ($spba6f71 === true) { $spa50b9b = (int) $sp0aae4c->input('export_update_status'); $spb2292b = $sp0aae4c->input('export_update_card'); $sp9ed20e = '﻿'; $sp9ed20e .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $spb0a50e->chunk(100, function ($sp704384) use(&$sp9ed20e, $spa50b9b, $spb2292b) { foreach ($sp704384 as $speb076b) { if ($speb076b->status === \App\Order::STATUS_PAID) { if ($spa50b9b === \App\Order::SEND_STATUS_CARD_PROCESSING) { $speb076b->send_status = $spa50b9b; $speb076b->saveOrFail(); } elseif ($spa50b9b === \App\Order::SEND_STATUS_CARD_SUCCESS) { $speb076b->send_status = $spa50b9b; $speb076b->saveOrFail(); $this->ship(new Request(array('id' => $speb076b->id, 'card' => $spb2292b))); } } $sp74b4f1 = $speb076b->contact_ext; if ($sp74b4f1) { if ($sp74b4f1[0] === '[') { $sp74b4f1 = substr($sp74b4f1, 2); } if ($sp74b4f1[strlen($sp74b4f1) - 1] === ']') { $sp74b4f1 = substr($sp74b4f1, 0, -2); } } $sp9ed20e .= '"' . $speb076b->order_no . '","' . $speb076b->product_name . '","' . $speb076b->created_at . '","' . sprintf('%.2f', $speb076b->price / 100) . '","' . sprintf('%.2f', $speb076b->discount / 100) . '","' . sprintf('%.2f', $speb076b->paid / 100) . '","' . sprintf('%.2f', $speb076b->fee / 100) . '","' . sprintf('%.2f', $speb076b->cost / 100) . '","' . sprintf('%.2f', ($speb076b->paid - $speb076b->fee - $speb076b->cost) / 100) . '","' . ($speb076b->pay ? $speb076b->pay->name : '未知#' . $speb076b->pay_id) . '","' . $speb076b->pay_trade_no . '","' . $speb076b->paid_at . '","' . \App\Order::STATUS[$speb076b->status] . '","' . $speb076b->contact . '","' . $sp74b4f1 . '"'; $sp9ed20e .= '
'; } }); $sp0ba917 = 'export_orders_' . $this->getUserIdOrFail($sp0aae4c) . '_' . date('YmdHis') . '.csv'; $sp401ae7 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp0ba917), 'Content-Length' => strlen($sp9ed20e)); return response()->make($sp9ed20e, 200, $sp401ae7); } $sp35a866 = $sp0aae4c->input('current_page', 1); $spa0426f = $sp0aae4c->input('per_page', 20); $sp4e4cfe = $spb0a50e->paginate($spa0426f, array('*'), 'page', $sp35a866); if ($spbc0a71) { $sp4e4cfe = $sp4e4cfe->toArray(); $sp4e4cfe['profit_sum'] = $sp3c2590; } return Response::success($sp4e4cfe); } function export(Request $sp0aae4c) { return self::get($sp0aae4c, true); } function stat(Request $sp0aae4c) { $this->validate($sp0aae4c, array('day' => 'required|integer|between:7,30')); $sp05bd2e = (int) $sp0aae4c->input('day'); if ($sp05bd2e === 30) { $sp3adccd = Carbon::now()->addMonths(-1); } else { $sp3adccd = Carbon::now()->addDays(-$sp05bd2e); } $sp4e4cfe = $this->authQuery($sp0aae4c, \App\Order::class)->where(function ($spb0a50e) { $spb0a50e->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp3adccd)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spf96e67 = array(); foreach ($sp4e4cfe as $sp1a74be) { $spf96e67[$sp1a74be['date']] = array((int) $sp1a74be['count'], (int) $sp1a74be['paid'], (int) $sp1a74be['profit']); } return Response::success($spf96e67); } function info(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'required|integer')); $spaaa5c2 = $sp0aae4c->input('id'); $speb076b = $this->authQuery($sp0aae4c, \App\Order::class)->with(array('pay' => function (Relation $spb0a50e) { $spb0a50e->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spb0a50e) { $spb0a50e->select(array('id', 'card')); }))->findOrFail($spaaa5c2); $speb076b->addHidden(array('system_fee')); return Response::success($speb076b); } function remark(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'required|integer', 'remark' => 'required|string')); $spaaa5c2 = $sp0aae4c->input('id'); $speb076b = $this->authQuery($sp0aae4c, \App\Order::class)->findOrFail($spaaa5c2); $speb076b->remark = $sp0aae4c->input('remark'); $speb076b->save(); return Response::success(); } function set_send_status(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spaaa5c2 = $sp0aae4c->input('id'); $speb076b = $this->authQuery($sp0aae4c, \App\Order::class)->findOrFail($spaaa5c2); if ($speb076b->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $speb076b->send_status = $sp0aae4c->input('send_status'); $speb076b->saveOrFail(); return Response::success(); } function ship(Request $sp0aae4c) { $this->validate($sp0aae4c, array('id' => 'required|integer')); $speb076b = $this->authQuery($sp0aae4c, \App\Order::class)->with('product')->findOrFail($sp0aae4c->input('id')); if ($speb076b->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($speb076b->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spd4aa76 = $speb076b->product->delivery; $sp193fe3 = ''; if ($spd4aa76 === \App\Product::DELIVERY_MANUAL) { $this->validate($sp0aae4c, array('card' => 'required|string')); $sp193fe3 = $sp0aae4c->input('card'); } $sp4d96f1 = null; $sp023092 = array(); if (FundHelper::orderSuccess($speb076b->id, function () use(&$speb076b, &$sp4d96f1, &$sp023092, $spd4aa76, $sp193fe3) { $speb076b = \App\Order::where('id', $speb076b->id)->lockForUpdate()->firstOrFail(); if ($speb076b->cards && count($speb076b->cards)) { $sp4d96f1 = '该订单已经发货，无需再次发货'; return false; } $spddd5a8 = $speb076b->product()->lockForUpdate()->firstOrFail(); if ($spd4aa76 === \App\Product::DELIVERY_MANUAL) { $speb076b->status = \App\Order::STATUS_SUCCESS; $speb076b->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $speb076b->saveOrFail(); $spcf055a = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $spddd5a8->id, 'card' => $sp193fe3, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp023092[] = $spcf055a->card; $speb076b->cards()->attach($spcf055a->id); $spddd5a8->count_sold += $speb076b->count; $spddd5a8->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp5d4a61 = \App\Card::where('product_id', $spddd5a8->id)->whereRaw('`count_sold`<`count_all`')->take($speb076b->count)->lockForUpdate()->get(); if (count($sp5d4a61) !== $speb076b->count) { $sp4d96f1 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $speb076b->status = \App\Order::STATUS_SUCCESS; $speb076b->saveOrFail(); $sp4143ec = array(); foreach ($sp5d4a61 as $spcf055a) { $sp4143ec[] = $spcf055a->id; $sp023092[] = $spcf055a->card; } $speb076b->cards()->attach($sp4143ec); \App\Card::whereIn('id', $sp4143ec)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spddd5a8->count_sold += $speb076b->count; $spddd5a8->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spcdd0ce = @json_decode($speb076b->contact_ext, true)['_mail']; if ($spcdd0ce) { $speb076b->sendEmail($spcdd0ce); } } if ($speb076b->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp4783e6 = @json_decode($speb076b->contact_ext, true)['_mobile']; if ($sp4783e6) { $speb076b->sendSms($sp4783e6); } } $speb076b['card_orders'] = array_map(function ($sp1a74be) { return array('card' => array('card' => $sp1a74be)); }, $sp023092); $speb076b->addHidden(array('system_fee')); return Response::success($speb076b); } else { return Response::fail($sp4d96f1 ?? '数据库繁忙, 请联系客服'); } } }