<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp147552, $sp68c760 = false) { $spd10097 = $this->authQuery($sp147552, \App\Order::class); $sp43c1c1 = (int) $sp147552->input('category_id'); $sp52cac1 = (int) $sp147552->input('product_id'); $sp677636 = (int) $sp147552->input('profit'); $spd47fc3 = $sp43c1c1 === \App\Product::ID_API || $sp52cac1 === \App\Product::ID_API; $spa1f2d3 = $sp147552->input('search', false); $spa55e11 = $sp147552->input('val', false); if ($spa1f2d3 && $spa55e11) { if ($spa1f2d3 == 'id' || $spa1f2d3 == 'order_no' || $spa1f2d3 === 'pay_trade_no' || $spa1f2d3 === 'api_out_no') { $spd10097->where($spa1f2d3, $spa55e11); } else { $spd10097->where($spa1f2d3, 'like', '%' . $spa55e11 . '%'); } } if ($sp43c1c1 > 0) { if ($sp52cac1 > 0) { $spd10097->where('product_id', $sp52cac1); } else { $spd10097->whereHas('product', function ($spd10097) use($sp43c1c1) { $spd10097->where('category_id', $sp43c1c1); }); } } $sp351d9e = (int) $sp147552->input('recent', 0); if ($sp351d9e) { $sp7b3d9e = (new Carbon())->addDay(-$sp351d9e); $spd10097->where(function ($spd10097) use($sp7b3d9e) { $spd10097->where('paid_at', '>=', $sp7b3d9e)->orWhere(function ($spd10097) use($sp7b3d9e) { $spd10097->whereNull('paid_at')->where('created_at', '>=', $sp7b3d9e); }); }); } else { $sp7b3d9e = $sp147552->input('start_at', false); if (strlen($sp7b3d9e)) { $spd10097->where(function ($spd10097) use($sp7b3d9e) { $spd10097->where('paid_at', '>=', $sp7b3d9e . ' 00:00:00')->orWhere(function ($spd10097) use($sp7b3d9e) { $spd10097->whereNull('paid_at')->where('created_at', '>=', $sp7b3d9e . ' 00:00:00'); }); }); } $spb32fb2 = $sp147552->input('end_at', false); if (strlen($spb32fb2)) { $spd10097->where(function ($spd10097) use($spb32fb2) { $spd10097->where('paid_at', '<=', $spb32fb2 . ' 23:59:59')->orWhere(function ($spd10097) use($spb32fb2) { $spd10097->whereNull('paid_at')->where('created_at', '<=', $spb32fb2 . ' 23:59:59'); }); }); } } if ($sp677636) { $spd10097->where('status', \App\Order::STATUS_SUCCESS); $sp25b903 = clone $spd10097; $sp732ec4 = $sp25b903->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp415e3d = $sp147552->input('status'); if (strlen($sp415e3d)) { $spd10097->whereIn('status', explode(',', $sp415e3d)); } else { $spd10097->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spd47fc3) { $spd10097->where('product_id', \App\Product::ID_API); } else { $spd10097->where('product_id', '>', 0); $spd10097->with(array('product' => function (Relation $spd10097) { $spd10097->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $spd10097) { $spd10097->select(array('id', 'card')); })); } $spd10097->with(array('pay' => function (Relation $spd10097) { $spd10097->select(array('id', 'name')); })); $spd10097->orderBy('id', 'DESC'); if ($sp68c760 === true) { $sp14b1ea = (int) $sp147552->input('export_update_status'); $spd35990 = $sp147552->input('export_update_card'); $sp6dc2d3 = '﻿'; $sp6dc2d3 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $spd10097->chunk(100, function ($spbb53f2) use(&$sp6dc2d3, $sp14b1ea, $spd35990) { foreach ($spbb53f2 as $sp7c328e) { if ($sp7c328e->status === \App\Order::STATUS_PAID) { if ($sp14b1ea === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp7c328e->send_status = $sp14b1ea; $sp7c328e->saveOrFail(); } elseif ($sp14b1ea === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp7c328e->send_status = $sp14b1ea; $sp7c328e->saveOrFail(); $this->ship(new Request(array('id' => $sp7c328e->id, 'card' => $spd35990))); } } $sp74cf3d = $sp7c328e->contact_ext; if ($sp74cf3d) { if ($sp74cf3d[0] === '[') { $sp74cf3d = substr($sp74cf3d, 2); } if ($sp74cf3d[strlen($sp74cf3d) - 1] === ']') { $sp74cf3d = substr($sp74cf3d, 0, -2); } } $sp6dc2d3 .= '"' . $sp7c328e->order_no . '","' . $sp7c328e->product_name . '","' . $sp7c328e->created_at . '","' . sprintf('%.2f', $sp7c328e->price / 100) . '","' . sprintf('%.2f', $sp7c328e->discount / 100) . '","' . sprintf('%.2f', $sp7c328e->paid / 100) . '","' . sprintf('%.2f', $sp7c328e->fee / 100) . '","' . sprintf('%.2f', $sp7c328e->cost / 100) . '","' . sprintf('%.2f', ($sp7c328e->paid - $sp7c328e->fee - $sp7c328e->cost) / 100) . '","' . ($sp7c328e->pay ? $sp7c328e->pay->name : '未知#' . $sp7c328e->pay_id) . '","' . $sp7c328e->pay_trade_no . '","' . $sp7c328e->paid_at . '","' . \App\Order::STATUS[$sp7c328e->status] . '","' . $sp7c328e->contact . '","' . $sp74cf3d . '"'; $sp6dc2d3 .= '
'; } }); $spc4e83e = 'export_orders_' . $this->getUserIdOrFail($sp147552) . '_' . date('YmdHis') . '.csv'; $spd8c799 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spc4e83e), 'Content-Length' => strlen($sp6dc2d3)); return response()->make($sp6dc2d3, 200, $spd8c799); } $sp95caec = (int) $sp147552->input('current_page', 1); $sp11fa7d = (int) $sp147552->input('per_page', 20); $sp8b8475 = $spd10097->paginate($sp11fa7d, array('*'), 'page', $sp95caec); if ($sp677636) { $sp8b8475 = $sp8b8475->toArray(); $sp8b8475['profit_sum'] = $sp732ec4; } return Response::success($sp8b8475); } function export(Request $sp147552) { return self::get($sp147552, true); } function stat(Request $sp147552) { $this->validate($sp147552, array('day' => 'required|integer|between:7,30')); $sp66f4c4 = (int) $sp147552->input('day'); if ($sp66f4c4 === 30) { $sp7b3d9e = Carbon::now()->addMonths(-1)->toDateString() . ' 00:00:00'; } else { $sp7b3d9e = Carbon::now()->addDays(-$sp66f4c4)->toDateString() . ' 00:00:00'; } $sp8b8475 = $this->authQuery($sp147552, \App\Order::class)->where(function ($spd10097) { $spd10097->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp7b3d9e)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp296935 = array(); foreach ($sp8b8475 as $sp458343) { $sp296935[$sp458343['date']] = array((int) $sp458343['count'], (int) $sp458343['paid'], (int) $sp458343['profit']); } return Response::success($sp296935); } function info(Request $sp147552) { $this->validate($sp147552, array('id' => 'required|integer')); $speb3ceb = $sp147552->input('id'); $sp7c328e = $this->authQuery($sp147552, \App\Order::class)->with(array('pay' => function (Relation $spd10097) { $spd10097->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spd10097) { $spd10097->select(array('id', 'card')); }))->findOrFail($speb3ceb); $sp7c328e->addHidden(array('system_fee')); return Response::success($sp7c328e); } function remark(Request $sp147552) { $this->validate($sp147552, array('id' => 'required|integer', 'remark' => 'required|string')); $speb3ceb = $sp147552->input('id'); $sp7c328e = $this->authQuery($sp147552, \App\Order::class)->findOrFail($speb3ceb); $sp7c328e->remark = $sp147552->input('remark'); $sp7c328e->save(); return Response::success(); } function set_send_status(Request $sp147552) { $this->validate($sp147552, array('id' => 'required|integer', 'send_status' => 'required|integer')); $speb3ceb = $sp147552->input('id'); $sp7c328e = $this->authQuery($sp147552, \App\Order::class)->findOrFail($speb3ceb); if ($sp7c328e->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp7c328e->send_status = $sp147552->input('send_status'); $sp7c328e->saveOrFail(); return Response::success(); } function ship(Request $sp147552) { $this->validate($sp147552, array('id' => 'required|integer')); $sp7c328e = $this->authQuery($sp147552, \App\Order::class)->with('product')->findOrFail($sp147552->input('id')); if ($sp7c328e->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp7c328e->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spa3d4cd = $sp7c328e->product->delivery; $spcfa996 = ''; if ($spa3d4cd === \App\Product::DELIVERY_MANUAL) { $this->validate($sp147552, array('card' => 'required|string')); $spcfa996 = $sp147552->input('card'); } $spea3597 = null; $spa504de = array(); if (FundHelper::orderSuccess($sp7c328e->id, function () use(&$sp7c328e, &$spea3597, &$spa504de, $spa3d4cd, $spcfa996) { $sp7c328e = \App\Order::where('id', $sp7c328e->id)->lockForUpdate()->firstOrFail(); if ($sp7c328e->cards && count($sp7c328e->cards)) { $spea3597 = '该订单已经发货，无需再次发货'; return false; } $sp4aad76 = $sp7c328e->product()->lockForUpdate()->firstOrFail(); if ($spa3d4cd === \App\Product::DELIVERY_MANUAL) { $sp7c328e->status = \App\Order::STATUS_SUCCESS; $sp7c328e->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp7c328e->saveOrFail(); $spb3ffd5 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp4aad76->id, 'card' => $spcfa996, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $spa504de[] = $spb3ffd5->card; $sp7c328e->cards()->attach($spb3ffd5->id); $sp4aad76->count_sold += $sp7c328e->count; $sp4aad76->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp8bdf7a = \App\Card::where('product_id', $sp4aad76->id)->whereRaw('`count_sold`<`count_all`')->take($sp7c328e->count)->lockForUpdate()->get(); if (count($sp8bdf7a) !== $sp7c328e->count) { $spea3597 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp7c328e->status = \App\Order::STATUS_SUCCESS; $sp7c328e->saveOrFail(); $spcd9244 = array(); foreach ($sp8bdf7a as $spb3ffd5) { $spcd9244[] = $spb3ffd5->id; $spa504de[] = $spb3ffd5->card; } $sp7c328e->cards()->attach($spcd9244); \App\Card::whereIn('id', $spcd9244)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp4aad76->count_sold += $sp7c328e->count; $sp4aad76->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $speab7e1 = @json_decode($sp7c328e->contact_ext, true)['_mail']; if ($speab7e1) { $sp7c328e->sendEmail($speab7e1); } } if ($sp7c328e->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp4f5b65 = @json_decode($sp7c328e->contact_ext, true)['_mobile']; if ($sp4f5b65) { $sp7c328e->sendSms($sp4f5b65); } } $sp7c328e['card_orders'] = array_map(function ($sp458343) { return array('card' => array('card' => $sp458343)); }, $spa504de); $sp7c328e->addHidden(array('system_fee')); return Response::success($sp7c328e); } else { return Response::fail($spea3597 ?? '数据库繁忙, 请联系客服'); } } }