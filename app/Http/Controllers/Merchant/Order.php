<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spf066f3, $spaf67ea = false) { $sp5044a7 = $this->authQuery($spf066f3, \App\Order::class); $spe478dd = (int) $spf066f3->input('category_id'); $spbb5d29 = (int) $spf066f3->input('product_id'); $spd16e61 = (int) $spf066f3->input('profit'); $spa4ff3c = $spe478dd === \App\Product::ID_API || $spbb5d29 === \App\Product::ID_API; $spca736c = $spf066f3->input('search', false); $sp56dec1 = $spf066f3->input('val', false); if ($spca736c && $sp56dec1) { if ($spca736c == 'id' || $spca736c == 'order_no' || $spca736c === 'pay_trade_no' || $spca736c === 'api_out_no') { $sp5044a7->where($spca736c, $sp56dec1); } else { $sp5044a7->where($spca736c, 'like', '%' . $sp56dec1 . '%'); } } if ($spe478dd > 0) { if ($spbb5d29 > 0) { $sp5044a7->where('product_id', $spbb5d29); } else { $sp5044a7->whereHas('product', function ($sp5044a7) use($spe478dd) { $sp5044a7->where('category_id', $spe478dd); }); } } $sp55fcdc = (int) $spf066f3->input('recent', 0); if ($sp55fcdc) { $spba7d12 = (new Carbon())->addDay(-$sp55fcdc); $sp5044a7->where(function ($sp5044a7) use($spba7d12) { $sp5044a7->where('paid_at', '>=', $spba7d12)->orWhere(function ($sp5044a7) use($spba7d12) { $sp5044a7->whereNull('paid_at')->where('created_at', '>=', $spba7d12); }); }); } else { $spba7d12 = $spf066f3->input('start_at', false); if (strlen($spba7d12)) { $sp5044a7->where(function ($sp5044a7) use($spba7d12) { $sp5044a7->where('paid_at', '>=', $spba7d12 . ' 00:00:00')->orWhere(function ($sp5044a7) use($spba7d12) { $sp5044a7->whereNull('paid_at')->where('created_at', '>=', $spba7d12 . ' 00:00:00'); }); }); } $sp3bf1fb = $spf066f3->input('end_at', false); if (strlen($sp3bf1fb)) { $sp5044a7->where(function ($sp5044a7) use($sp3bf1fb) { $sp5044a7->where('paid_at', '<=', $sp3bf1fb . ' 23:59:59')->orWhere(function ($sp5044a7) use($sp3bf1fb) { $sp5044a7->whereNull('paid_at')->where('created_at', '<=', $sp3bf1fb . ' 23:59:59'); }); }); } } if ($spd16e61) { $sp5044a7->where('status', \App\Order::STATUS_SUCCESS); $sp234fc3 = clone $sp5044a7; $sp1d0cd2 = $sp234fc3->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp27b58d = $spf066f3->input('status'); if (strlen($sp27b58d)) { $sp5044a7->whereIn('status', explode(',', $sp27b58d)); } else { $sp5044a7->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spa4ff3c) { $sp5044a7->where('product_id', \App\Product::ID_API); } else { $sp5044a7->where('product_id', '>', 0); $sp5044a7->with(array('product' => function (Relation $sp5044a7) { $sp5044a7->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp5044a7) { $sp5044a7->select(array('id', 'card')); })); } $sp5044a7->with(array('pay' => function (Relation $sp5044a7) { $sp5044a7->select(array('id', 'name')); })); $sp5044a7->orderBy('id', 'DESC'); if ($spaf67ea === true) { $sp654f72 = (int) $spf066f3->input('export_update_status'); $spb539b9 = $spf066f3->input('export_update_card'); $spbf887f = '﻿'; $spbf887f .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp5044a7->chunk(100, function ($sp0e06cc) use(&$spbf887f, $sp654f72, $spb539b9) { foreach ($sp0e06cc as $spe0613f) { if ($spe0613f->status === \App\Order::STATUS_PAID) { if ($sp654f72 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $spe0613f->send_status = $sp654f72; $spe0613f->saveOrFail(); } elseif ($sp654f72 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $spe0613f->send_status = $sp654f72; $spe0613f->saveOrFail(); $this->ship(new Request(array('id' => $spe0613f->id, 'card' => $spb539b9))); } } $sp7df2ff = $spe0613f->contact_ext; if ($sp7df2ff) { if ($sp7df2ff[0] === '[') { $sp7df2ff = substr($sp7df2ff, 2); } if ($sp7df2ff[strlen($sp7df2ff) - 1] === ']') { $sp7df2ff = substr($sp7df2ff, 0, -2); } } $spbf887f .= '"' . $spe0613f->order_no . '","' . $spe0613f->product_name . '","' . $spe0613f->created_at . '","' . sprintf('%.2f', $spe0613f->price / 100) . '","' . sprintf('%.2f', $spe0613f->discount / 100) . '","' . sprintf('%.2f', $spe0613f->paid / 100) . '","' . sprintf('%.2f', $spe0613f->fee / 100) . '","' . sprintf('%.2f', $spe0613f->cost / 100) . '","' . sprintf('%.2f', ($spe0613f->paid - $spe0613f->fee - $spe0613f->cost) / 100) . '","' . ($spe0613f->pay ? $spe0613f->pay->name : '未知#' . $spe0613f->pay_id) . '","' . $spe0613f->pay_trade_no . '","' . $spe0613f->paid_at . '","' . \App\Order::STATUS[$spe0613f->status] . '","' . $spe0613f->contact . '","' . $sp7df2ff . '"'; $spbf887f .= '
'; } }); $spc11887 = 'export_orders_' . $this->getUserIdOrFail($spf066f3) . '_' . date('YmdHis') . '.csv'; $spc69671 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spc11887), 'Content-Length' => strlen($spbf887f)); return response()->make($spbf887f, 200, $spc69671); } $sp72b123 = $spf066f3->input('current_page', 1); $spcfcad4 = $spf066f3->input('per_page', 20); $sp293456 = $sp5044a7->paginate($spcfcad4, array('*'), 'page', $sp72b123); if ($spd16e61) { $sp293456 = $sp293456->toArray(); $sp293456['profit_sum'] = $sp1d0cd2; } return Response::success($sp293456); } function export(Request $spf066f3) { return self::get($spf066f3, true); } function stat(Request $spf066f3) { $this->validate($spf066f3, array('day' => 'required|integer|between:7,30')); $sp403e35 = (int) $spf066f3->input('day'); if ($sp403e35 === 30) { $sp586aba = Carbon::now()->addMonths(-1); } else { $sp586aba = Carbon::now()->addDays(-$sp403e35); } $sp293456 = $this->authQuery($spf066f3, \App\Order::class)->where(function ($sp5044a7) { $sp5044a7->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp586aba)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $sp9b52fe = array(); foreach ($sp293456 as $sp10eb73) { $sp9b52fe[$sp10eb73['date']] = array((int) $sp10eb73['count'], (int) $sp10eb73['paid'], (int) $sp10eb73['profit']); } return Response::success($sp9b52fe); } function info(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer')); $sp3c46ab = $spf066f3->input('id'); $spe0613f = $this->authQuery($spf066f3, \App\Order::class)->with(array('pay' => function (Relation $sp5044a7) { $sp5044a7->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp5044a7) { $sp5044a7->select(array('id', 'card')); }))->findOrFail($sp3c46ab); $spe0613f->addHidden(array('system_fee')); return Response::success($spe0613f); } function remark(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer', 'remark' => 'required|string')); $sp3c46ab = $spf066f3->input('id'); $spe0613f = $this->authQuery($spf066f3, \App\Order::class)->findOrFail($sp3c46ab); $spe0613f->remark = $spf066f3->input('remark'); $spe0613f->save(); return Response::success(); } function set_send_status(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp3c46ab = $spf066f3->input('id'); $spe0613f = $this->authQuery($spf066f3, \App\Order::class)->findOrFail($sp3c46ab); if ($spe0613f->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $spe0613f->send_status = $spf066f3->input('send_status'); $spe0613f->saveOrFail(); return Response::success(); } function ship(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer')); $spe0613f = $this->authQuery($spf066f3, \App\Order::class)->with('product')->findOrFail($spf066f3->input('id')); if ($spe0613f->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($spe0613f->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spa44b12 = $spe0613f->product->delivery; $sp3536fb = ''; if ($spa44b12 === \App\Product::DELIVERY_MANUAL) { $this->validate($spf066f3, array('card' => 'required|string')); $sp3536fb = $spf066f3->input('card'); } $sp9ff388 = null; $spa5ca46 = array(); if (FundHelper::orderSuccess($spe0613f->id, function () use(&$spe0613f, &$sp9ff388, &$spa5ca46, $spa44b12, $sp3536fb) { $spe0613f = \App\Order::where('id', $spe0613f->id)->lockForUpdate()->firstOrFail(); if ($spe0613f->cards && count($spe0613f->cards)) { $sp9ff388 = '该订单已经发货，无需再次发货'; return false; } $sp2cf004 = $spe0613f->product()->lockForUpdate()->firstOrFail(); if ($spa44b12 === \App\Product::DELIVERY_MANUAL) { $spe0613f->status = \App\Order::STATUS_SUCCESS; $spe0613f->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $spe0613f->saveOrFail(); $spc3a8a6 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp2cf004->id, 'card' => $sp3536fb, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $spa5ca46[] = $spc3a8a6->card; $spe0613f->cards()->attach($spc3a8a6->id); $sp2cf004->count_sold += $spe0613f->count; $sp2cf004->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp54decd = \App\Card::where('product_id', $sp2cf004->id)->whereRaw('`count_sold`<`count_all`')->take($spe0613f->count)->lockForUpdate()->get(); if (count($sp54decd) !== $spe0613f->count) { $sp9ff388 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spe0613f->status = \App\Order::STATUS_SUCCESS; $spe0613f->saveOrFail(); $sp6d094b = array(); foreach ($sp54decd as $spc3a8a6) { $sp6d094b[] = $spc3a8a6->id; $spa5ca46[] = $spc3a8a6->card; } $spe0613f->cards()->attach($sp6d094b); \App\Card::whereIn('id', $sp6d094b)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp2cf004->count_sold += $spe0613f->count; $sp2cf004->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $spa7590c = @json_decode($spe0613f->contact_ext, true)['_mail']; if ($spa7590c) { $spe0613f->sendEmail($spa7590c); } } if ($spe0613f->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spc7e576 = @json_decode($spe0613f->contact_ext, true)['_mobile']; if ($spc7e576) { $spe0613f->sendSms($spc7e576); } } $spe0613f['card_orders'] = array_map(function ($sp10eb73) { return array('card' => array('card' => $sp10eb73)); }, $spa5ca46); $spe0613f->addHidden(array('system_fee')); return Response::success($spe0613f); } else { return Response::fail($sp9ff388 ?? '数据库繁忙, 请联系客服'); } } }