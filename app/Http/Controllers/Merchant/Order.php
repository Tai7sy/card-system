<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spe5a184, $spfe258e = false) { $spa8a4ff = $this->authQuery($spe5a184, \App\Order::class); $sp23779d = (int) $spe5a184->input('category_id'); $sp89bb44 = (int) $spe5a184->input('product_id'); $spe4af94 = (int) $spe5a184->input('profit'); $spfc66fd = $sp23779d === \App\Product::ID_API || $sp89bb44 === \App\Product::ID_API; $sp8336a0 = $spe5a184->input('search', false); $spdbda3a = $spe5a184->input('val', false); if ($sp8336a0 && $spdbda3a) { if ($sp8336a0 == 'id' || $sp8336a0 == 'order_no' || $sp8336a0 === 'pay_trade_no' || $sp8336a0 === 'api_out_no') { $spa8a4ff->where($sp8336a0, $spdbda3a); } else { $spa8a4ff->where($sp8336a0, 'like', '%' . $spdbda3a . '%'); } } if ($sp23779d > 0) { if ($sp89bb44 > 0) { $spa8a4ff->where('product_id', $sp89bb44); } else { $spa8a4ff->whereHas('product', function ($spa8a4ff) use($sp23779d) { $spa8a4ff->where('category_id', $sp23779d); }); } } $spe9c4d7 = (int) $spe5a184->input('recent', 0); if ($spe9c4d7) { $sp705209 = (new Carbon())->addDay(-$spe9c4d7); $spa8a4ff->where(function ($spa8a4ff) use($sp705209) { $spa8a4ff->where('paid_at', '>=', $sp705209)->orWhere(function ($spa8a4ff) use($sp705209) { $spa8a4ff->whereNull('paid_at')->where('created_at', '>=', $sp705209); }); }); } else { $sp705209 = $spe5a184->input('start_at', false); if (strlen($sp705209)) { $spa8a4ff->where(function ($spa8a4ff) use($sp705209) { $spa8a4ff->where('paid_at', '>=', $sp705209 . ' 00:00:00')->orWhere(function ($spa8a4ff) use($sp705209) { $spa8a4ff->whereNull('paid_at')->where('created_at', '>=', $sp705209 . ' 00:00:00'); }); }); } $spe4a0d2 = $spe5a184->input('end_at', false); if (strlen($spe4a0d2)) { $spa8a4ff->where(function ($spa8a4ff) use($spe4a0d2) { $spa8a4ff->where('paid_at', '<=', $spe4a0d2 . ' 23:59:59')->orWhere(function ($spa8a4ff) use($spe4a0d2) { $spa8a4ff->whereNull('paid_at')->where('created_at', '<=', $spe4a0d2 . ' 23:59:59'); }); }); } } if ($spe4af94) { $spa8a4ff->where('status', \App\Order::STATUS_SUCCESS); $spe8f37b = clone $spa8a4ff; $sp00b5d7 = $spe8f37b->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $spaa7124 = $spe5a184->input('status'); if (strlen($spaa7124)) { $spa8a4ff->whereIn('status', explode(',', $spaa7124)); } else { $spa8a4ff->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spfc66fd) { $spa8a4ff->where('product_id', \App\Product::ID_API); } else { $spa8a4ff->where('product_id', '>', 0); $spa8a4ff->with(array('product' => function (Relation $spa8a4ff) { $spa8a4ff->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $spa8a4ff) { $spa8a4ff->select(array('id', 'card')); })); } $spa8a4ff->with(array('pay' => function (Relation $spa8a4ff) { $spa8a4ff->select(array('id', 'name')); })); $spa8a4ff->orderBy('id', 'DESC'); if ($spfe258e === true) { $sp4348fd = (int) $spe5a184->input('export_update_status'); $sp9f1514 = $spe5a184->input('export_update_card'); $sp78de6b = '﻿'; $sp78de6b .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $spa8a4ff->chunk(100, function ($sp5f7c41) use(&$sp78de6b, $sp4348fd, $sp9f1514) { foreach ($sp5f7c41 as $sp42d084) { if ($sp42d084->status === \App\Order::STATUS_PAID) { if ($sp4348fd === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp42d084->send_status = $sp4348fd; $sp42d084->saveOrFail(); } elseif ($sp4348fd === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp42d084->send_status = $sp4348fd; $sp42d084->saveOrFail(); $this->ship(new Request(array('id' => $sp42d084->id, 'card' => $sp9f1514))); } } $spfee07d = $sp42d084->contact_ext; if ($spfee07d) { if ($spfee07d[0] === '[') { $spfee07d = substr($spfee07d, 2); } if ($spfee07d[strlen($spfee07d) - 1] === ']') { $spfee07d = substr($spfee07d, 0, -2); } } $sp78de6b .= '"' . $sp42d084->order_no . '","' . $sp42d084->product_name . '","' . $sp42d084->created_at . '","' . sprintf('%.2f', $sp42d084->price / 100) . '","' . sprintf('%.2f', $sp42d084->discount / 100) . '","' . sprintf('%.2f', $sp42d084->paid / 100) . '","' . sprintf('%.2f', $sp42d084->fee / 100) . '","' . sprintf('%.2f', $sp42d084->cost / 100) . '","' . sprintf('%.2f', ($sp42d084->paid - $sp42d084->fee - $sp42d084->cost) / 100) . '","' . ($sp42d084->pay ? $sp42d084->pay->name : '未知#' . $sp42d084->pay_id) . '","' . $sp42d084->pay_trade_no . '","' . $sp42d084->paid_at . '","' . \App\Order::STATUS[$sp42d084->status] . '","' . $sp42d084->contact . '","' . $spfee07d . '"'; $sp78de6b .= '
'; } }); $sp29fbb6 = 'export_orders_' . $this->getUserIdOrFail($spe5a184) . '_' . date('YmdHis') . '.csv'; $spdc767d = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp29fbb6), 'Content-Length' => strlen($sp78de6b)); return response()->make($sp78de6b, 200, $spdc767d); } $sp32b355 = (int) $spe5a184->input('current_page', 1); $sp048014 = (int) $spe5a184->input('per_page', 20); $spdf0cee = $spa8a4ff->paginate($sp048014, array('*'), 'page', $sp32b355); if ($spe4af94) { $spdf0cee = $spdf0cee->toArray(); $spdf0cee['profit_sum'] = $sp00b5d7; } return Response::success($spdf0cee); } function export(Request $spe5a184) { return self::get($spe5a184, true); } function stat(Request $spe5a184) { $this->validate($spe5a184, array('day' => 'required|integer|between:7,30')); $speb0111 = (int) $spe5a184->input('day'); if ($speb0111 === 30) { $sp705209 = Carbon::now()->addMonths(-1)->toDateString() . ' 00:00:00'; } else { $sp705209 = Carbon::now()->addDays(-$speb0111)->toDateString() . ' 00:00:00'; } $spdf0cee = $this->authQuery($spe5a184, \App\Order::class)->where(function ($spa8a4ff) { $spa8a4ff->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $sp705209)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spa64ee0 = array(); foreach ($spdf0cee as $sp415442) { $spa64ee0[$sp415442['date']] = array((int) $sp415442['count'], (int) $sp415442['paid'], (int) $sp415442['profit']); } return Response::success($spa64ee0); } function info(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'required|integer')); $spb3d6c6 = $spe5a184->input('id'); $sp42d084 = $this->authQuery($spe5a184, \App\Order::class)->with(array('pay' => function (Relation $spa8a4ff) { $spa8a4ff->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spa8a4ff) { $spa8a4ff->select(array('id', 'card')); }))->findOrFail($spb3d6c6); $sp42d084->addHidden(array('system_fee')); return Response::success($sp42d084); } function remark(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'required|integer', 'remark' => 'required|string')); $spb3d6c6 = $spe5a184->input('id'); $sp42d084 = $this->authQuery($spe5a184, \App\Order::class)->findOrFail($spb3d6c6); $sp42d084->remark = $spe5a184->input('remark'); $sp42d084->save(); return Response::success(); } function set_send_status(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'required|integer', 'send_status' => 'required|integer')); $spb3d6c6 = $spe5a184->input('id'); $sp42d084 = $this->authQuery($spe5a184, \App\Order::class)->findOrFail($spb3d6c6); if ($sp42d084->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp42d084->send_status = $spe5a184->input('send_status'); $sp42d084->saveOrFail(); return Response::success(); } function ship(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'required|integer')); $sp42d084 = $this->authQuery($spe5a184, \App\Order::class)->with('product')->findOrFail($spe5a184->input('id')); if ($sp42d084->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp42d084->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spcada25 = $sp42d084->product->delivery; $spf39dbb = ''; if ($spcada25 === \App\Product::DELIVERY_MANUAL) { $this->validate($spe5a184, array('card' => 'required|string')); $spf39dbb = $spe5a184->input('card'); } $spc0520c = null; $sp30a549 = array(); if (FundHelper::orderSuccess($sp42d084->id, function () use(&$sp42d084, &$spc0520c, &$sp30a549, $spcada25, $spf39dbb) { $sp42d084 = \App\Order::where('id', $sp42d084->id)->lockForUpdate()->firstOrFail(); if ($sp42d084->cards && count($sp42d084->cards)) { $spc0520c = '该订单已经发货，无需再次发货'; return false; } $spb395ca = $sp42d084->product()->lockForUpdate()->firstOrFail(); if ($spcada25 === \App\Product::DELIVERY_MANUAL) { $sp42d084->status = \App\Order::STATUS_SUCCESS; $sp42d084->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp42d084->saveOrFail(); $sp2173f5 = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $spb395ca->id, 'card' => $spf39dbb, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp30a549[] = $sp2173f5->card; $sp42d084->cards()->attach($sp2173f5->id); $spb395ca->count_sold += $sp42d084->count; $spb395ca->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $spc3aa7c = \App\Card::where('product_id', $spb395ca->id)->whereRaw('`count_sold`<`count_all`')->take($sp42d084->count)->lockForUpdate()->get(); if (count($spc3aa7c) !== $sp42d084->count) { $spc0520c = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp42d084->status = \App\Order::STATUS_SUCCESS; $sp42d084->saveOrFail(); $sp9173cb = array(); foreach ($spc3aa7c as $sp2173f5) { $sp9173cb[] = $sp2173f5->id; $sp30a549[] = $sp2173f5->card; } $sp42d084->cards()->attach($sp9173cb); \App\Card::whereIn('id', $sp9173cb)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spb395ca->count_sold += $sp42d084->count; $spb395ca->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp6da4b4 = @json_decode($sp42d084->contact_ext, true)['_mail']; if ($sp6da4b4) { $sp42d084->sendEmail($sp6da4b4); } } if ($sp42d084->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spbb3ff5 = @json_decode($sp42d084->contact_ext, true)['_mobile']; if ($spbb3ff5) { $sp42d084->sendSms($spbb3ff5); } } $sp42d084['card_orders'] = array_map(function ($sp415442) { return array('card' => array('card' => $sp415442)); }, $sp30a549); $sp42d084->addHidden(array('system_fee')); return Response::success($sp42d084); } else { return Response::fail($spc0520c ?? '数据库繁忙, 请联系客服'); } } }