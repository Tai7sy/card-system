<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spfeab54, $sp5389f4 = false) { $sp5786ca = $this->authQuery($spfeab54, \App\Order::class); $sp790613 = (int) $spfeab54->input('category_id'); $sp0e30a6 = (int) $spfeab54->input('product_id'); $sp6b0fdc = (int) $spfeab54->input('profit'); $spc32d4d = $sp790613 === \App\Product::ID_API || $sp0e30a6 === \App\Product::ID_API; $sped0aef = $spfeab54->input('search', false); $sp86d9ea = $spfeab54->input('val', false); if ($sped0aef && $sp86d9ea) { if ($sped0aef == 'id' || $sped0aef == 'order_no' || $sped0aef === 'pay_trade_no' || $sped0aef === 'api_out_no') { $sp5786ca->where($sped0aef, $sp86d9ea); } else { $sp5786ca->where($sped0aef, 'like', '%' . $sp86d9ea . '%'); } } if ($sp790613 > 0) { if ($sp0e30a6 > 0) { $sp5786ca->where('product_id', $sp0e30a6); } else { $sp5786ca->whereHas('product', function ($sp5786ca) use($sp790613) { $sp5786ca->where('category_id', $sp790613); }); } } $sp5cfe40 = (int) $spfeab54->input('recent', 0); if ($sp5cfe40) { $spd3b73a = (new Carbon())->addDay(-$sp5cfe40); $sp5786ca->where(function ($sp5786ca) use($spd3b73a) { $sp5786ca->where('paid_at', '>=', $spd3b73a)->orWhere(function ($sp5786ca) use($spd3b73a) { $sp5786ca->whereNull('paid_at')->where('created_at', '>=', $spd3b73a); }); }); } else { $spd3b73a = $spfeab54->input('start_at', false); if (strlen($spd3b73a)) { $sp5786ca->where(function ($sp5786ca) use($spd3b73a) { $sp5786ca->where('paid_at', '>=', $spd3b73a . ' 00:00:00')->orWhere(function ($sp5786ca) use($spd3b73a) { $sp5786ca->whereNull('paid_at')->where('created_at', '>=', $spd3b73a . ' 00:00:00'); }); }); } $sp694c55 = $spfeab54->input('end_at', false); if (strlen($sp694c55)) { $sp5786ca->where(function ($sp5786ca) use($sp694c55) { $sp5786ca->where('paid_at', '<=', $sp694c55 . ' 23:59:59')->orWhere(function ($sp5786ca) use($sp694c55) { $sp5786ca->whereNull('paid_at')->where('created_at', '<=', $sp694c55 . ' 23:59:59'); }); }); } } if ($sp6b0fdc) { $sp5786ca->where('status', \App\Order::STATUS_SUCCESS); $sp140d8b = clone $sp5786ca; $sp4ebdb2 = $sp140d8b->selectRaw('SUM(`income`) as income, SUM(`paid`-`sms_price`-`cost`-`fee`) as profit')->first(); } else { $sp7a9982 = $spfeab54->input('status'); if (strlen($sp7a9982)) { $sp5786ca->whereIn('status', explode(',', $sp7a9982)); } else { $sp5786ca->where('status', '!=', \App\Order::STATUS_UNPAY); } } if ($spc32d4d) { $sp5786ca->where('product_id', \App\Product::ID_API); } else { $sp5786ca->where('product_id', '>', 0); $sp5786ca->with(array('product' => function (Relation $sp5786ca) { $sp5786ca->select(array('id', 'name', 'delivery')); }, 'card_orders.card' => function (Relation $sp5786ca) { $sp5786ca->select(array('id', 'card')); })); } $sp5786ca->with(array('pay' => function (Relation $sp5786ca) { $sp5786ca->select(array('id', 'name')); })); $sp5786ca->orderBy('id', 'DESC'); if ($sp5389f4 === true) { $spe292f7 = (int) $spfeab54->input('export_update_status'); $sp483f11 = $spfeab54->input('export_update_card'); $spcbd397 = '﻿'; $spcbd397 .= '"订单号","商品名称","下单时间","订单金额","优惠金额","实付金额","手续费","成本价","利润","支付方式","支付流水号","支付时间","订单状态","买家联系方式","买家附加信息"' . '
'; $sp5786ca->chunk(100, function ($spc544b7) use(&$spcbd397, $spe292f7, $sp483f11) { foreach ($spc544b7 as $sp4f4c0d) { if ($sp4f4c0d->status === \App\Order::STATUS_PAID) { if ($spe292f7 === \App\Order::SEND_STATUS_CARD_PROCESSING) { $sp4f4c0d->send_status = $spe292f7; $sp4f4c0d->saveOrFail(); } elseif ($spe292f7 === \App\Order::SEND_STATUS_CARD_SUCCESS) { $sp4f4c0d->send_status = $spe292f7; $sp4f4c0d->saveOrFail(); $this->ship(new Request(array('id' => $sp4f4c0d->id, 'card' => $sp483f11))); } } $sp5e5f4d = $sp4f4c0d->contact_ext; if ($sp5e5f4d) { if ($sp5e5f4d[0] === '[') { $sp5e5f4d = substr($sp5e5f4d, 2); } if ($sp5e5f4d[strlen($sp5e5f4d) - 1] === ']') { $sp5e5f4d = substr($sp5e5f4d, 0, -2); } } $spcbd397 .= '"' . $sp4f4c0d->order_no . '","' . $sp4f4c0d->product_name . '","' . $sp4f4c0d->created_at . '","' . sprintf('%.2f', $sp4f4c0d->price / 100) . '","' . sprintf('%.2f', $sp4f4c0d->discount / 100) . '","' . sprintf('%.2f', $sp4f4c0d->paid / 100) . '","' . sprintf('%.2f', $sp4f4c0d->fee / 100) . '","' . sprintf('%.2f', $sp4f4c0d->cost / 100) . '","' . sprintf('%.2f', ($sp4f4c0d->paid - $sp4f4c0d->fee - $sp4f4c0d->cost) / 100) . '","' . ($sp4f4c0d->pay ? $sp4f4c0d->pay->name : '未知#' . $sp4f4c0d->pay_id) . '","' . $sp4f4c0d->pay_trade_no . '","' . $sp4f4c0d->paid_at . '","' . \App\Order::STATUS[$sp4f4c0d->status] . '","' . $sp4f4c0d->contact . '","' . $sp5e5f4d . '"'; $spcbd397 .= '
'; } }); $spcf532d = 'export_orders_' . $this->getUserIdOrFail($spfeab54) . '_' . date('YmdHis') . '.csv'; $sp28070b = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spcf532d), 'Content-Length' => strlen($spcbd397)); return response()->make($spcbd397, 200, $sp28070b); } $spd5ff21 = $spfeab54->input('current_page', 1); $sp372a98 = $spfeab54->input('per_page', 20); $spaff91c = $sp5786ca->paginate($sp372a98, array('*'), 'page', $spd5ff21); if ($sp6b0fdc) { $spaff91c = $spaff91c->toArray(); $spaff91c['profit_sum'] = $sp4ebdb2; } return Response::success($spaff91c); } function export(Request $spfeab54) { return self::get($spfeab54, true); } function stat(Request $spfeab54) { $this->validate($spfeab54, array('day' => 'required|integer|between:7,30')); $sp842b0e = (int) $spfeab54->input('day'); if ($sp842b0e === 30) { $spa470da = Carbon::now()->addMonths(-1); } else { $spa470da = Carbon::now()->addDays(-$sp842b0e); } $spaff91c = $this->authQuery($spfeab54, \App\Order::class)->where(function ($sp5786ca) { $sp5786ca->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', $spa470da)->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "paid",SUM(`paid`-`sms_price`-`cost`-`fee`) as "profit"')->get()->toArray(); $spb9589c = array(); foreach ($spaff91c as $sp4a9ec3) { $spb9589c[$sp4a9ec3['date']] = array((int) $sp4a9ec3['count'], (int) $sp4a9ec3['paid'], (int) $sp4a9ec3['profit']); } return Response::success($spb9589c); } function info(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer')); $sp53f8aa = $spfeab54->input('id'); $sp4f4c0d = $this->authQuery($spfeab54, \App\Order::class)->with(array('pay' => function (Relation $sp5786ca) { $sp5786ca->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp5786ca) { $sp5786ca->select(array('id', 'card')); }))->findOrFail($sp53f8aa); $sp4f4c0d->addHidden(array('system_fee')); return Response::success($sp4f4c0d); } function remark(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer', 'remark' => 'required|string')); $sp53f8aa = $spfeab54->input('id'); $sp4f4c0d = $this->authQuery($spfeab54, \App\Order::class)->findOrFail($sp53f8aa); $sp4f4c0d->remark = $spfeab54->input('remark'); $sp4f4c0d->save(); return Response::success(); } function set_send_status(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer', 'send_status' => 'required|integer')); $sp53f8aa = $spfeab54->input('id'); $sp4f4c0d = $this->authQuery($spfeab54, \App\Order::class)->findOrFail($sp53f8aa); if ($sp4f4c0d->status !== \App\Order::STATUS_PAID) { return Response::fail('此订单不是未发货状态, 无法增加发货标记'); } $sp4f4c0d->send_status = $spfeab54->input('send_status'); $sp4f4c0d->saveOrFail(); return Response::success(); } function ship(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer')); $sp4f4c0d = $this->authQuery($spfeab54, \App\Order::class)->with('product')->findOrFail($spfeab54->input('id')); if ($sp4f4c0d->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } if ($sp4f4c0d->product === null) { return Response::fail('订单对应商品不存在, 无法发货'); } $spcda929 = $sp4f4c0d->product->delivery; $spe64362 = ''; if ($spcda929 === \App\Product::DELIVERY_MANUAL) { $this->validate($spfeab54, array('card' => 'required|string')); $spe64362 = $spfeab54->input('card'); } $sp3d7336 = null; $sp62ca36 = array(); if (FundHelper::orderSuccess($sp4f4c0d->id, function () use(&$sp4f4c0d, &$sp3d7336, &$sp62ca36, $spcda929, $spe64362) { $sp4f4c0d = \App\Order::where('id', $sp4f4c0d->id)->lockForUpdate()->firstOrFail(); if ($sp4f4c0d->cards && count($sp4f4c0d->cards)) { $sp3d7336 = '该订单已经发货，无需再次发货'; return false; } $sp71cb0c = $sp4f4c0d->product()->lockForUpdate()->firstOrFail(); if ($spcda929 === \App\Product::DELIVERY_MANUAL) { $sp4f4c0d->status = \App\Order::STATUS_SUCCESS; $sp4f4c0d->send_status = \App\Order::SEND_STATUS_CARD_SUCCESS; $sp4f4c0d->saveOrFail(); $sp0f75bb = \App\Card::create(array('user_id' => Auth::id(), 'product_id' => $sp71cb0c->id, 'card' => $spe64362, 'type' => \App\Card::TYPE_ONETIME, 'status' => \App\Card::STATUS_SOLD, 'count_sold' => 1, 'count_all' => 1)); $sp62ca36[] = $sp0f75bb->card; $sp4f4c0d->cards()->attach($sp0f75bb->id); $sp71cb0c->count_sold += $sp4f4c0d->count; $sp71cb0c->saveOrFail(); return FundHelper::ACTION_CONTINUE; } $sp33f345 = \App\Card::where('product_id', $sp71cb0c->id)->whereRaw('`count_sold`<`count_all`')->take($sp4f4c0d->count)->lockForUpdate()->get(); if (count($sp33f345) !== $sp4f4c0d->count) { $sp3d7336 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp4f4c0d->status = \App\Order::STATUS_SUCCESS; $sp4f4c0d->saveOrFail(); $sp011030 = array(); foreach ($sp33f345 as $sp0f75bb) { $sp011030[] = $sp0f75bb->id; $sp62ca36[] = $sp0f75bb->card; } $sp4f4c0d->cards()->attach($sp011030); \App\Card::whereIn('id', $sp011030)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp71cb0c->count_sold += $sp4f4c0d->count; $sp71cb0c->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if (System::_getInt('mail_send_order')) { $sp4c999d = @json_decode($sp4f4c0d->contact_ext, true)['_mail']; if ($sp4c999d) { $sp4f4c0d->sendEmail($sp4c999d); } } if ($sp4f4c0d->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp6566f0 = @json_decode($sp4f4c0d->contact_ext, true)['_mobile']; if ($sp6566f0) { $sp4f4c0d->sendSms($sp6566f0); } } $sp4f4c0d['card_orders'] = array_map(function ($sp4a9ec3) { return array('card' => array('card' => $sp4a9ec3)); }, $sp62ca36); $sp4f4c0d->addHidden(array('system_fee')); return Response::success($sp4f4c0d); } else { return Response::fail($sp3d7336 ?? '数据库繁忙, 请联系客服'); } } }