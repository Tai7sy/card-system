<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use function GuzzleHttp\Psr7\mimetype_from_filename; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Storage; class File extends Controller { public static function uploadImg($sp2d0fe9, $sp134e80, $sp6a83cc, $spd81efe = false) { try { $sp7c5be9 = $sp2d0fe9->extension(); } catch (\Throwable $sped8699) { return Response::fail($sped8699->getMessage()); } if (!$sp2d0fe9 || !in_array(strtolower($sp7c5be9), array('jpg', 'jpeg', 'png', 'gif'))) { return Response::fail('图片错误, 系统支持jpg/png/gif格式'); } if ($sp2d0fe9->getSize() > 5 * 1024 * 1024) { return Response::fail('图片不能大于5MB'); } try { $sp929b45 = $sp2d0fe9->store($sp6a83cc, array('disk' => System::_get('storage_driver'))); } catch (\Exception $sped8699) { \Log::error('File.uploadImg folder:' . $sp6a83cc . ', error:' . $sped8699->getMessage(), array('exception' => $sped8699)); if (config('app.debug')) { return Response::fail($sped8699->getMessage()); } else { return Response::fail('上传文件失败, 内部错误, 请联系客服'); } } if (!$sp929b45) { return Response::fail('系统保存文件出错, 请稍后再试'); } $sp31ecd3 = System::_get('storage_driver'); $spdef5e4 = Storage::disk($sp31ecd3)->url($sp929b45); $sp0265a9 = \App\File::insertGetId(array('user_id' => $sp134e80, 'driver' => $sp31ecd3, 'path' => $sp929b45, 'url' => $spdef5e4)); if ($sp0265a9 < 1) { Storage::disk($sp31ecd3)->delete($sp929b45); return Response::fail('数据库繁忙，请稍后再试'); } $sp5f5153 = array('id' => $sp0265a9, 'url' => $spdef5e4, 'name' => pathinfo($sp929b45, PATHINFO_BASENAME)); if ($spd81efe) { return $sp5f5153; } return Response::success($sp5f5153); } function upload_merchant(Request $spfb5ae3) { $sp21e2d0 = $this->getUser($spfb5ae3); if ($sp21e2d0 === null) { return Response::forbidden('无效的用户'); } $sp2d0fe9 = $spfb5ae3->file('file'); return $this->uploadImg($sp2d0fe9, $sp21e2d0->id, \App\File::getProductFolder()); } public function renderImage(Request $spfb5ae3, $spdfab6e) { if (str_contains($spdfab6e, '..') || str_contains($spdfab6e, './') || str_contains($spdfab6e, '.\\') || !starts_with($spdfab6e, 'images/')) { $sp448041 = file_get_contents(public_path('images/illegal.jpg')); } else { $spdfab6e = str_replace('\\', '/', $spdfab6e); $sp2d0fe9 = \App\File::wherePath($spdfab6e)->first(); if ($sp2d0fe9) { $sp31ecd3 = $sp2d0fe9->driver; } else { $sp31ecd3 = System::_get('storage_driver'); } if (!in_array($sp31ecd3, array('local', 's3', 'oss', 'qiniu'))) { return response()->view('message', array('title' => '404', 'message' => '404 Driver NotFound'), 404); } try { $sp448041 = Storage::disk($sp31ecd3)->get($spdfab6e); } catch (\Illuminate\Contracts\Filesystem\FileNotFoundException $sped8699) { \Log::error('File.renderImage error: ' . $sped8699->getMessage(), array('exception' => $sped8699)); return response()->view('message', array('title' => '404', 'message' => '404 NotFound'), 404); } } ob_end_clean(); header('Content-Type: ' . mimetype_from_filename($spdfab6e)); die($sp448041); } }