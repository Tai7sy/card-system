<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use App\Library\Pay\Pay as PayApi; use App\Library\Geetest; use App\Mail\OrderShipped; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cookie; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spf066f3, $sp845b45, $sp021b00, $spf9ca0c, $spfb596a) { try { (new PayApi())->goPay($spf9ca0c, $sp845b45, $sp021b00, $sp021b00, $spfb596a); return self::renderResultPage($spf066f3, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp3f4aab) { return self::renderResultPage($spf066f3, array('msg' => $sp3f4aab->getMessage())); } } function buy(Request $spf066f3) { $sp173146 = $spf066f3->input('customer'); if (strlen($sp173146) !== 32) { return self::renderResultPage($spf066f3, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spf066f3->getQueryString() . '
提交内容: ' . var_export($sp173146) . ', 提交长度:' . strlen($sp173146) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp9b52fe = Geetest\API::verify($spf066f3->input('geetest_challenge'), $spf066f3->input('geetest_validate'), $spf066f3->input('geetest_seccode')); if (!$sp9b52fe) { return self::renderResultPage($spf066f3, array('msg' => '滑动验证超时，请返回页面重试。')); } } $spe478dd = (int) $spf066f3->input('category_id'); $spbb5d29 = (int) $spf066f3->input('product_id'); $spdd51cd = (int) $spf066f3->input('count'); $sp38c2cc = $spf066f3->input('coupon'); $spedfbdb = $spf066f3->input('contact'); $sp7df2ff = $spf066f3->input('contact_ext') ?? null; $sp057f24 = !empty(@json_decode($sp7df2ff, true)['_mobile']); $spc035b6 = (int) $spf066f3->input('pay_id'); if (!$spe478dd || !$spbb5d29) { return self::renderResultPage($spf066f3, array('msg' => '请选择商品')); } if (strlen($spedfbdb) < 1) { return self::renderResultPage($spf066f3, array('msg' => '请输入联系方式')); } $sped57d9 = Category::findOrFail($spe478dd); $sp2cf004 = Product::where('id', $spbb5d29)->where('category_id', $spe478dd)->where('enabled', 1)->with(array('user'))->first(); if ($sp2cf004 == null || $sp2cf004->user == null) { return self::renderResultPage($spf066f3, array('msg' => '该商品未找到，请重新选择')); } if ($sp2cf004->password_open) { if ($sp2cf004->password !== $spf066f3->input('product_password')) { return self::renderResultPage($spf066f3, array('msg' => '商品密码输入错误')); } } else { if ($sped57d9->password_open) { if ($sped57d9->password !== $spf066f3->input('category_password')) { if ($sped57d9->getTmpPassword() !== $spf066f3->input('category_password')) { return self::renderResultPage($spf066f3, array('msg' => '分类密码输入错误')); } } } } if ($spdd51cd < $sp2cf004->buy_min) { return self::renderResultPage($spf066f3, array('msg' => '该商品最少购买' . $sp2cf004->buy_min . '件，请重新选择')); } if ($spdd51cd > $sp2cf004->buy_max) { return self::renderResultPage($spf066f3, array('msg' => '该商品限购' . $sp2cf004->buy_max . '件，请重新选择')); } if ($sp2cf004->count < $spdd51cd) { return self::renderResultPage($spf066f3, array('msg' => '该商品库存不足')); } $sp5de949 = \App\Pay::find($spc035b6); if ($sp5de949 == null || !$sp5de949->enabled) { return self::renderResultPage($spf066f3, array('msg' => '支付方式未找到，请重新选择')); } $sp7c17c8 = $sp2cf004->price; if ($sp2cf004->price_whole) { $sp806a0f = json_decode($sp2cf004->price_whole, true); for ($sp6b283c = count($sp806a0f) - 1; $sp6b283c >= 0; $sp6b283c--) { if ($spdd51cd >= (int) $sp806a0f[$sp6b283c][0]) { $sp7c17c8 = (int) $sp806a0f[$sp6b283c][1]; break; } } } $sp45d662 = $spdd51cd * $sp7c17c8; $spfb596a = $sp45d662; $spcde107 = 0; $sp8bdd84 = null; if ($sp2cf004->support_coupon && strlen($sp38c2cc) > 0) { $sp659504 = \App\Coupon::where('user_id', $sp2cf004->user_id)->where('coupon', $sp38c2cc)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp659504 as $sp9f96c5) { if ($sp9f96c5->category_id === -1 || $sp9f96c5->category_id === $spe478dd && ($sp9f96c5->product_id === -1 || $sp9f96c5->product_id === $spbb5d29)) { if ($sp9f96c5->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spfb596a >= $sp9f96c5->discount_val) { $sp8bdd84 = $sp9f96c5; $spcde107 = $sp9f96c5->discount_val; break; } if ($sp9f96c5->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp8bdd84 = $sp9f96c5; $spcde107 = (int) round($spfb596a * $sp9f96c5->discount_val / 100); break; } } } if ($sp8bdd84 === null) { return self::renderResultPage($spf066f3, array('msg' => '优惠券信息错误，请重新输入')); } $spfb596a -= $spcde107; } $sp820958 = (int) round($spfb596a * $sp5de949->fee_system); $sp911ac3 = $spfb596a - $sp820958; $sp56f86e = $sp057f24 ? System::_getInt('sms_price', 10) : 0; $spfb596a += $sp56f86e; $spb03602 = $spdd51cd * $sp2cf004->cost; $sp845b45 = \App\Order::unique_no(); try { DB::transaction(function () use($sp2cf004, $sp845b45, $sp8bdd84, $spedfbdb, $sp7df2ff, $sp173146, $spdd51cd, $spb03602, $sp45d662, $sp56f86e, $spcde107, $spfb596a, $sp5de949, $sp820958, $sp911ac3) { if ($sp8bdd84) { $sp8bdd84->status = \App\Coupon::STATUS_USED; $sp8bdd84->count_used++; $sp8bdd84->save(); $sp615115 = '使用优惠券: ' . $sp8bdd84->coupon; } else { $sp615115 = null; } $spe0613f = \App\Order::create(array('user_id' => $sp2cf004->user_id, 'order_no' => $sp845b45, 'product_id' => $sp2cf004->id, 'product_name' => $sp2cf004->name, 'count' => $spdd51cd, 'ip' => Helper::getIP(), 'customer' => $sp173146, 'contact' => $spedfbdb, 'contact_ext' => $sp7df2ff, 'cost' => $spb03602, 'price' => $sp45d662, 'sms_price' => $sp56f86e, 'discount' => $spcde107, 'paid' => $spfb596a, 'pay_id' => $sp5de949->id, 'fee' => $sp820958, 'system_fee' => $sp820958, 'income' => $sp911ac3, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp615115, 'created_at' => Carbon::now())); assert($spe0613f !== null); }); } catch (\Throwable $sp3f4aab) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sp3f4aab)); return self::renderResultPage($spf066f3, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($spfb596a === 0) { $this->shipOrder($spf066f3, $sp845b45, $spfb596a, null); return redirect('/pay/result/' . $sp845b45); } $sp021b00 = $sp845b45; return $this->goPay($spf066f3, $sp845b45, $sp021b00, $sp5de949, $spfb596a); } function pay(Request $spf066f3, $sp845b45) { $spe0613f = \App\Order::whereOrderNo($sp845b45)->first(); if ($spe0613f == null) { return self::renderResultPage($spf066f3, array('msg' => '订单未找到，请重试')); } if ($spe0613f->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp845b45); } $sp5d5f28 = 'pay: ' . $spe0613f->pay_id; $spf9ca0c = $spe0613f->pay; if (!$spf9ca0c) { \Log::error($sp5d5f28 . ' cannot find Pay'); return $this->renderResultPage($spf066f3, array('msg' => '支付方式未找到')); } $sp5d5f28 .= ',' . $spf9ca0c->driver; $sp9d4382 = json_decode($spf9ca0c->config, true); $sp9d4382['payway'] = $spf9ca0c->way; $sp9d4382['out_trade_no'] = $sp845b45; try { $this->payApi = PayApi::getDriver($spf9ca0c->id, $spf9ca0c->driver); } catch (\Exception $sp3f4aab) { \Log::error($sp5d5f28 . ' cannot find Driver: ' . $sp3f4aab->getMessage()); return $this->renderResultPage($spf066f3, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp9d4382, function ($sp845b45, $spf59c91, $sp565d18) use($spf066f3) { try { $this->shipOrder($spf066f3, $sp845b45, $spf59c91, $sp565d18); } catch (\Exception $sp3f4aab) { $this->renderResultPage($spf066f3, array('success' => false, 'msg' => $sp3f4aab->getMessage())); } })) { \Log::notice($sp5d5f28 . ' already success' . '

'); return redirect('/pay/result/' . $sp845b45); } if ($spe0613f->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spf066f3, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp2cf004 = Product::where('id', $spe0613f->product_id)->where('enabled', 1)->first(); if ($sp2cf004 == null) { return self::renderResultPage($spf066f3, array('msg' => '该商品已下架')); } $sp2cf004->setAttribute('count', count($sp2cf004->cards) ? $sp2cf004->cards[0]->count : 0); if ($sp2cf004->count < $spe0613f->count) { return self::renderResultPage($spf066f3, array('msg' => '该商品库存不足')); } $sp021b00 = $sp845b45; return $this->goPay($spf066f3, $sp845b45, $sp021b00, $spf9ca0c, $spe0613f->paid); } function qrcode(Request $spf066f3, $sp845b45, $spcc1a16) { $spe0613f = \App\Order::whereOrderNo($sp845b45)->with('product')->first(); if ($spe0613f == null) { return self::renderResultPage($spf066f3, array('msg' => '订单未找到，请重试')); } if ($spe0613f->product_id !== \App\Product::ID_API && $spe0613f->product == null) { return self::renderResultPage($spf066f3, array('msg' => '商品未找到，请重试')); } return view('pay/' . $spcc1a16, array('pay_id' => $spe0613f->pay_id, 'name' => $spe0613f->product->name . ' x ' . $spe0613f->count . '件', 'amount' => $spe0613f->paid, 'qrcode' => $spf066f3->get('url'), 'id' => $sp845b45)); } function qrQuery(Request $spf066f3, $spc035b6) { $spaeb1c1 = $spf066f3->input('id', ''); return self::payReturn($spf066f3, $spc035b6, $spaeb1c1); } function payReturn(Request $spf066f3, $spc035b6, $sp2e47fc = '') { $sp5d5f28 = 'payReturn: ' . $spc035b6; \Log::debug($sp5d5f28); $spf9ca0c = \App\Pay::where('id', $spc035b6)->first(); if (!$spf9ca0c) { return $this->renderResultPage($spf066f3, array('success' => 0, 'msg' => '支付方式错误')); } $sp5d5f28 .= ',' . $spf9ca0c->driver; if (strlen($sp2e47fc) > 0) { $spe0613f = \App\Order::whereOrderNo($sp2e47fc)->first(); if ($spe0613f && ($spe0613f->status === \App\Order::STATUS_PAID || $spe0613f->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp5d5f28 . ' already success' . '

'); if ($spf066f3->ajax()) { return self::renderResultPage($spf066f3, array('success' => 1, 'data' => '/pay/result/' . $sp2e47fc), array('order' => $spe0613f)); } else { return redirect('/pay/result/' . $sp2e47fc); } } } try { $this->payApi = PayApi::getDriver($spf9ca0c->id, $spf9ca0c->driver); } catch (\Exception $sp3f4aab) { \Log::error($sp5d5f28 . ' cannot find Driver: ' . $sp3f4aab->getMessage()); return $this->renderResultPage($spf066f3, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp9d4382 = json_decode($spf9ca0c->config, true); $sp9d4382['out_trade_no'] = $sp2e47fc; $sp9d4382['payway'] = $spf9ca0c->way; \Log::debug($sp5d5f28 . ' will verify'); if ($this->payApi->verify($sp9d4382, function ($sp845b45, $spf59c91, $sp565d18) use($spf066f3, $sp5d5f28, &$sp2e47fc) { $sp2e47fc = $sp845b45; try { \Log::debug($sp5d5f28 . " shipOrder start, order_no: {$sp845b45}, amount: {$spf59c91}, trade_no: {$sp565d18}"); $this->shipOrder($spf066f3, $sp845b45, $spf59c91, $sp565d18); \Log::debug($sp5d5f28 . ' shipOrder end, order_no: ' . $sp845b45); } catch (\Exception $sp3f4aab) { \Log::error($sp5d5f28 . ' shipOrder Exception: ' . $sp3f4aab->getMessage()); } })) { \Log::debug($sp5d5f28 . ' verify finished: 1' . '

'); if ($spf066f3->ajax()) { return self::renderResultPage($spf066f3, array('success' => 1, 'data' => '/pay/result/' . $sp2e47fc)); } else { return redirect('/pay/result/' . $sp2e47fc); } } else { \Log::debug($sp5d5f28 . ' verify finished: 0' . '

'); return $this->renderResultPage($spf066f3, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spf066f3, $spc035b6) { $sp5d5f28 = 'payNotify pay_id: ' . $spc035b6; \Log::debug($sp5d5f28); $spf9ca0c = \App\Pay::where('id', $spc035b6)->first(); if (!$spf9ca0c) { \Log::error($sp5d5f28 . ' cannot find PayModel'); echo 'fail'; die; } $sp5d5f28 .= ',' . $spf9ca0c->driver; try { $this->payApi = PayApi::getDriver($spf9ca0c->id, $spf9ca0c->driver); } catch (\Exception $sp3f4aab) { \Log::error($sp5d5f28 . ' cannot find Driver: ' . $sp3f4aab->getMessage()); echo 'fail'; die; } $sp9d4382 = json_decode($spf9ca0c->config, true); $sp9d4382['payway'] = $spf9ca0c->way; $sp9d4382['isNotify'] = true; \Log::debug($sp5d5f28 . ' will verify'); $sp9b52fe = $this->payApi->verify($sp9d4382, function ($sp845b45, $spf59c91, $sp565d18) use($spf066f3, $sp5d5f28) { try { \Log::debug($sp5d5f28 . " shipOrder start, order_no: {$sp845b45}, amount: {$spf59c91}, trade_no: {$sp565d18}"); $this->shipOrder($spf066f3, $sp845b45, $spf59c91, $sp565d18); \Log::debug($sp5d5f28 . ' shipOrder end, order_no: ' . $sp845b45); } catch (\Exception $sp3f4aab) { \Log::error($sp5d5f28 . ' shipOrder Exception: ' . $sp3f4aab->getMessage()); } }); \Log::debug($sp5d5f28 . ' notify finished: ' . (int) $sp9b52fe . '

'); die; } function result(Request $spf066f3, $sp845b45) { $spe0613f = \App\Order::where('order_no', $sp845b45)->first(); if ($spe0613f == null) { return self::renderResultPage($spf066f3, array('msg' => '订单未找到，请重试')); } if ($spe0613f->status === \App\Order::STATUS_PAID) { $sp0e815c = $spe0613f->user->qq; if ($spe0613f->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp417133 = '您购买的为手动充值商品，请耐心等待处理'; } else { $sp417133 = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($sp0e815c) { $sp417133 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp0e815c . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp0e815c . '</a>'; } return self::renderResultPage($spf066f3, array('success' => false, 'title' => '订单已支付', 'msg' => $sp417133), array('order' => $spe0613f)); } elseif ($spe0613f->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spf066f3, $spe0613f); } return self::renderResultPage($spf066f3, array('success' => false, 'msg' => $spe0613f->remark ? '失败原因:<br>' . $spe0613f->remark : '订单支付失败，请重试'), array('order' => $spe0613f)); } function renderResultPage(Request $spf066f3, $spb72f32, $spac7a25 = array()) { if ($spf066f3->ajax()) { if (@$spb72f32['success']) { return Response::success($spb72f32['data']); } else { return Response::fail('error', $spb72f32['msg']); } } else { return view('pay.result', array_merge(array('result' => $spb72f32, 'data' => $spac7a25), $spac7a25)); } } function shipOrder($spf066f3, $sp845b45, $spf59c91, $sp565d18) { $spe0613f = \App\Order::whereOrderNo($sp845b45)->first(); if ($spe0613f === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp845b45 . ',trade_no:' . $sp565d18 . ',amount:' . $spf59c91 . ']. die(\'success\');'); die('success'); } if ($spe0613f->paid > $spf59c91) { \Log::alert('shipOrder, price may error, order_no:' . $sp845b45 . ', paid:' . $spe0613f->paid . ', $amount get:' . $spf59c91); $spe0613f->remark = '支付金额(' . sprintf('%0.2f', $spf59c91 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $spe0613f->paid / 100) . ')'; $spe0613f->save(); throw new \Exception($spe0613f->remark); } $sp2cf004 = null; if ($spe0613f->status === \App\Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $sp845b45); $spd04f8a = $spe0613f->id; if (FundHelper::orderSuccess($spe0613f->id, function ($sp4e5f00) use($spd04f8a, $sp565d18, &$spe0613f, &$sp2cf004) { $spe0613f = $sp4e5f00; if ($spe0613f->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $spe0613f->order_no . ' already processed! #2'); return false; } $sp2cf004 = $spe0613f->product()->lockForUpdate()->firstOrFail(); $spe0613f->pay_trade_no = $sp565d18; $spe0613f->paid_at = Carbon::now(); if ($sp2cf004->delivery === \App\Product::DELIVERY_MANUAL) { $spe0613f->status = \App\Order::STATUS_PAID; $spe0613f->send_status = \App\Order::SEND_STATUS_CARD_UN; $spe0613f->saveOrFail(); return true; } $sp54decd = Card::where('product_id', $spe0613f->product_id)->whereRaw('`count_sold`<`count_all`')->take($spe0613f->count)->lockForUpdate()->get(); if (count($sp54decd) !== $spe0613f->count) { Log::alert('Shop.Pay.shipOrder: 订单:' . $spe0613f->order_no . ', 购买数量:' . $spe0613f->count . ', 卡数量:' . count($sp54decd) . ' 卡密不足(已支付 未发货)'); $spe0613f->status = \App\Order::STATUS_PAID; $spe0613f->saveOrFail(); return true; } else { $sp6d094b = array(); foreach ($sp54decd as $spc3a8a6) { $sp6d094b[] = $spc3a8a6->id; } $spe0613f->cards()->attach($sp6d094b); Card::whereIn('id', $sp6d094b)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spe0613f->status = \App\Order::STATUS_SUCCESS; $spe0613f->saveOrFail(); $sp2cf004->count_sold += $spe0613f->count; $sp2cf004->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp2cf004->count_warn > 0 && $sp2cf004->count < $sp2cf004->count_warn) { try { Mail::to($spe0613f->user->email)->Queue(new ProductCountWarn($sp2cf004, $sp2cf004->count)); } catch (\Throwable $sp3f4aab) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $spe0613f->product_id, 'email' => $spe0613f->user->email, 'exception' => $sp3f4aab->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spa7590c = @json_decode($spe0613f->contact_ext, true)['_mail']; if ($spa7590c) { $spe0613f->sendEmail($spa7590c); } } if ($spe0613f->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spc7e576 = @json_decode($spe0613f->contact_ext, true)['_mobile']; if ($spc7e576) { $spe0613f->sendSms($spc7e576); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $spe0613f->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spf066f3, $spe0613f) { return self::renderResultPage($spf066f3, array('success' => true, 'msg' => $spe0613f->getSendMessage()), array('card_txt' => join('&#013;&#010;', $spe0613f->getCardsArray()), 'order' => $spe0613f, 'product' => $spe0613f->product)); } }