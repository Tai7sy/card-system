<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spba756f, $spf34e1a, $sp15079e, $sp6485f6, $sp29e1a9) { try { $spf3616d = json_decode($sp6485f6->config, true); $spf3616d['payway'] = $sp6485f6->way; GatewayPay::getDriver($sp6485f6)->goPay($spf3616d, $spf34e1a, $sp15079e, $sp15079e, $sp29e1a9); return self::renderResultPage($spba756f, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp6a7295) { return self::renderResultPage($spba756f, array('msg' => $sp6a7295->getMessage())); } } function buy(Request $spba756f) { $sp5ac530 = $spba756f->input('customer'); if (strlen($sp5ac530) !== 32) { return self::renderResultPage($spba756f, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spba756f->getQueryString() . '
提交内容: ' . var_export($sp5ac530) . ', 提交长度:' . strlen($sp5ac530) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp5359c9 = Geetest\API::verify($spba756f->input('geetest_challenge'), $spba756f->input('geetest_validate'), $spba756f->input('geetest_seccode')); if (!$sp5359c9) { return self::renderResultPage($spba756f, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp55f32c = (int) $spba756f->input('category_id'); $sp1b83a8 = (int) $spba756f->input('product_id'); $sp99aae1 = (int) $spba756f->input('count'); $sp8bf4fa = $spba756f->input('coupon'); $spa04ff6 = $spba756f->input('contact'); $sp682364 = $spba756f->input('contact_ext') ?? null; $spa2291d = !empty(@json_decode($sp682364, true)['_mobile']); $sp8e6264 = (int) $spba756f->input('pay_id'); if (!$sp55f32c || !$sp1b83a8) { return self::renderResultPage($spba756f, array('msg' => '请选择商品')); } if (strlen($spa04ff6) < 1) { return self::renderResultPage($spba756f, array('msg' => '请输入联系方式')); } $sp1cd1e4 = Category::findOrFail($sp55f32c); $sp9dfc99 = Product::where('id', $sp1b83a8)->where('category_id', $sp55f32c)->where('enabled', 1)->with(array('user'))->first(); if ($sp9dfc99 == null || $sp9dfc99->user == null) { return self::renderResultPage($spba756f, array('msg' => '该商品未找到，请重新选择')); } if ($sp9dfc99->password_open) { if ($sp9dfc99->password !== $spba756f->input('product_password')) { return self::renderResultPage($spba756f, array('msg' => '商品密码输入错误')); } } else { if ($sp1cd1e4->password_open) { if ($sp1cd1e4->password !== $spba756f->input('category_password')) { if ($sp1cd1e4->getTmpPassword() !== $spba756f->input('category_password')) { return self::renderResultPage($spba756f, array('msg' => '分类密码输入错误')); } } } } if ($sp99aae1 < $sp9dfc99->buy_min) { return self::renderResultPage($spba756f, array('msg' => '该商品最少购买' . $sp9dfc99->buy_min . '件，请重新选择')); } if ($sp99aae1 > $sp9dfc99->buy_max) { return self::renderResultPage($spba756f, array('msg' => '该商品限购' . $sp9dfc99->buy_max . '件，请重新选择')); } if ($sp9dfc99->count < $sp99aae1) { return self::renderResultPage($spba756f, array('msg' => '该商品库存不足')); } $sp91f0ec = \App\Pay::find($sp8e6264); if ($sp91f0ec == null || !$sp91f0ec->enabled) { return self::renderResultPage($spba756f, array('msg' => '支付方式未找到，请重新选择')); } $spfc2da2 = $sp9dfc99->price; if ($sp9dfc99->price_whole) { $sp75624c = json_decode($sp9dfc99->price_whole, true); for ($spc8f255 = count($sp75624c) - 1; $spc8f255 >= 0; $spc8f255--) { if ($sp99aae1 >= (int) $sp75624c[$spc8f255][0]) { $spfc2da2 = (int) $sp75624c[$spc8f255][1]; break; } } } $sp61875e = $sp99aae1 * $spfc2da2; $sp29e1a9 = $sp61875e; $sp24f85c = 0; $sp5b1ef4 = null; if ($sp9dfc99->support_coupon && strlen($sp8bf4fa) > 0) { $sp97692a = \App\Coupon::where('user_id', $sp9dfc99->user_id)->where('coupon', $sp8bf4fa)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp97692a as $sp4cb2ce) { if ($sp4cb2ce->category_id === -1 || $sp4cb2ce->category_id === $sp55f32c && ($sp4cb2ce->product_id === -1 || $sp4cb2ce->product_id === $sp1b83a8)) { if ($sp4cb2ce->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp29e1a9 >= $sp4cb2ce->discount_val) { $sp5b1ef4 = $sp4cb2ce; $sp24f85c = $sp4cb2ce->discount_val; break; } if ($sp4cb2ce->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp5b1ef4 = $sp4cb2ce; $sp24f85c = (int) round($sp29e1a9 * $sp4cb2ce->discount_val / 100); break; } } } if ($sp5b1ef4 === null) { return self::renderResultPage($spba756f, array('msg' => '优惠券信息错误，请重新输入')); } $sp29e1a9 -= $sp24f85c; } $sp052c39 = (int) round($sp29e1a9 * $sp91f0ec->fee_system); $spe40be8 = $sp29e1a9 - $sp052c39; $sp06b9c0 = $spa2291d ? System::_getInt('sms_price', 10) : 0; $sp29e1a9 += $sp06b9c0; $spdd18a5 = $sp99aae1 * $sp9dfc99->cost; $spf34e1a = \App\Order::unique_no(); try { DB::transaction(function () use($sp9dfc99, $spf34e1a, $sp5b1ef4, $spa04ff6, $sp682364, $sp5ac530, $sp99aae1, $spdd18a5, $sp61875e, $sp06b9c0, $sp24f85c, $sp29e1a9, $sp91f0ec, $sp052c39, $spe40be8) { if ($sp5b1ef4) { $sp5b1ef4->status = \App\Coupon::STATUS_USED; $sp5b1ef4->count_used++; $sp5b1ef4->save(); $spd8e3f6 = '使用优惠券: ' . $sp5b1ef4->coupon; } else { $spd8e3f6 = null; } $spedec71 = \App\Order::create(array('user_id' => $sp9dfc99->user_id, 'order_no' => $spf34e1a, 'product_id' => $sp9dfc99->id, 'product_name' => $sp9dfc99->name, 'count' => $sp99aae1, 'ip' => Helper::getIP(), 'customer' => $sp5ac530, 'contact' => $spa04ff6, 'contact_ext' => $sp682364, 'cost' => $spdd18a5, 'price' => $sp61875e, 'sms_price' => $sp06b9c0, 'discount' => $sp24f85c, 'paid' => $sp29e1a9, 'pay_id' => $sp91f0ec->id, 'fee' => $sp052c39, 'system_fee' => $sp052c39, 'income' => $spe40be8, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $spd8e3f6, 'created_at' => Carbon::now())); assert($spedec71 !== null); }); } catch (\Throwable $sp6a7295) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sp6a7295)); return self::renderResultPage($spba756f, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($sp29e1a9 === 0) { $this->shipOrder($spba756f, $spf34e1a, $sp29e1a9, null); return redirect('/pay/result/' . $spf34e1a); } $sp15079e = $spf34e1a; return $this->goPay($spba756f, $spf34e1a, $sp15079e, $sp91f0ec, $sp29e1a9); } function pay(Request $spba756f, $spf34e1a) { $spedec71 = \App\Order::whereOrderNo($spf34e1a)->first(); if ($spedec71 == null) { return self::renderResultPage($spba756f, array('msg' => '订单未找到，请重试')); } if ($spedec71->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spf34e1a); } $sp591089 = 'pay: ' . $spedec71->pay_id; $sp6485f6 = $spedec71->pay; if (!$sp6485f6) { \Log::error($sp591089 . ' cannot find Pay'); return $this->renderResultPage($spba756f, array('msg' => '支付方式未找到')); } $sp591089 .= ',' . $sp6485f6->driver; $spf3616d = json_decode($sp6485f6->config, true); $spf3616d['payway'] = $sp6485f6->way; $spf3616d['out_trade_no'] = $spf34e1a; try { $this->payApi = GatewayPay::getDriver($sp6485f6); } catch (\Exception $sp6a7295) { \Log::error($sp591089 . ' cannot find Driver: ' . $sp6a7295->getMessage()); return $this->renderResultPage($spba756f, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($spf3616d, function ($spf34e1a, $sp246f65, $sp9db197) use($spba756f) { try { $this->shipOrder($spba756f, $spf34e1a, $sp246f65, $sp9db197); } catch (\Exception $sp6a7295) { $this->renderResultPage($spba756f, array('success' => false, 'msg' => $sp6a7295->getMessage())); } })) { \Log::notice($sp591089 . ' already success' . '

'); return redirect('/pay/result/' . $spf34e1a); } if ($spedec71->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spba756f, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp9dfc99 = Product::where('id', $spedec71->product_id)->where('enabled', 1)->first(); if ($sp9dfc99 == null) { return self::renderResultPage($spba756f, array('msg' => '该商品已下架')); } $sp9dfc99->setAttribute('count', count($sp9dfc99->cards) ? $sp9dfc99->cards[0]->count : 0); if ($sp9dfc99->count < $spedec71->count) { return self::renderResultPage($spba756f, array('msg' => '该商品库存不足')); } $sp15079e = $spf34e1a; return $this->goPay($spba756f, $spf34e1a, $sp15079e, $sp6485f6, $spedec71->paid); } function qrcode(Request $spba756f, $spf34e1a, $sp51d94f) { $spedec71 = \App\Order::whereOrderNo($spf34e1a)->with('product')->first(); if ($spedec71 == null) { return self::renderResultPage($spba756f, array('msg' => '订单未找到，请重试')); } if ($spedec71->product_id !== \App\Product::ID_API && $spedec71->product == null) { return self::renderResultPage($spba756f, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp51d94f, array('pay_id' => $spedec71->pay_id, 'name' => $spedec71->product->name . ' x ' . $spedec71->count . '件', 'amount' => $spedec71->paid, 'qrcode' => $spba756f->get('url'), 'id' => $spf34e1a)); } function qrQuery(Request $spba756f, $sp8e6264) { $sp86fcb1 = $spba756f->input('id', ''); return self::payReturn($spba756f, $sp8e6264, $sp86fcb1); } function payReturn(Request $spba756f, $sp8e6264, $sp5fcd9d = '') { $sp591089 = 'payReturn: ' . $sp8e6264; \Log::debug($sp591089); $sp6485f6 = \App\Pay::where('id', $sp8e6264)->first(); if (!$sp6485f6) { return $this->renderResultPage($spba756f, array('success' => 0, 'msg' => '支付方式错误')); } $sp591089 .= ',' . $sp6485f6->driver; if (strlen($sp5fcd9d) > 0) { $spedec71 = \App\Order::whereOrderNo($sp5fcd9d)->first(); if ($spedec71 && ($spedec71->status === \App\Order::STATUS_PAID || $spedec71->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp591089 . ' already success' . '

'); if ($spba756f->ajax()) { return self::renderResultPage($spba756f, array('success' => 1, 'data' => '/pay/result/' . $sp5fcd9d), array('order' => $spedec71)); } else { return redirect('/pay/result/' . $sp5fcd9d); } } } try { $this->payApi = GatewayPay::getDriver($sp6485f6); } catch (\Exception $sp6a7295) { \Log::error($sp591089 . ' cannot find Driver: ' . $sp6a7295->getMessage()); return $this->renderResultPage($spba756f, array('success' => 0, 'msg' => '支付驱动未找到')); } $spf3616d = json_decode($sp6485f6->config, true); $spf3616d['out_trade_no'] = $sp5fcd9d; $spf3616d['payway'] = $sp6485f6->way; \Log::debug($sp591089 . ' will verify'); if ($this->payApi->verify($spf3616d, function ($spf34e1a, $sp246f65, $sp9db197) use($spba756f, $sp591089, &$sp5fcd9d) { $sp5fcd9d = $spf34e1a; try { \Log::debug($sp591089 . " shipOrder start, order_no: {$spf34e1a}, amount: {$sp246f65}, trade_no: {$sp9db197}"); $this->shipOrder($spba756f, $spf34e1a, $sp246f65, $sp9db197); \Log::debug($sp591089 . ' shipOrder end, order_no: ' . $spf34e1a); } catch (\Exception $sp6a7295) { \Log::error($sp591089 . ' shipOrder Exception: ' . $sp6a7295->getMessage()); } })) { \Log::debug($sp591089 . ' verify finished: 1' . '

'); if ($spba756f->ajax()) { return self::renderResultPage($spba756f, array('success' => 1, 'data' => '/pay/result/' . $sp5fcd9d)); } else { return redirect('/pay/result/' . $sp5fcd9d); } } else { \Log::debug($sp591089 . ' verify finished: 0' . '

'); return $this->renderResultPage($spba756f, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spba756f, $sp8e6264) { $sp591089 = 'payNotify pay_id: ' . $sp8e6264; \Log::debug($sp591089); $sp6485f6 = \App\Pay::where('id', $sp8e6264)->first(); if (!$sp6485f6) { \Log::error($sp591089 . ' cannot find PayModel'); echo 'fail'; die; } $sp591089 .= ',' . $sp6485f6->driver; try { $this->payApi = GatewayPay::getDriver($sp6485f6); } catch (\Exception $sp6a7295) { \Log::error($sp591089 . ' cannot find Driver: ' . $sp6a7295->getMessage()); echo 'fail'; die; } $spf3616d = json_decode($sp6485f6->config, true); $spf3616d['payway'] = $sp6485f6->way; $spf3616d['isNotify'] = true; \Log::debug($sp591089 . ' will verify'); $sp5359c9 = $this->payApi->verify($spf3616d, function ($spf34e1a, $sp246f65, $sp9db197) use($spba756f, $sp591089) { try { \Log::debug($sp591089 . " shipOrder start, order_no: {$spf34e1a}, amount: {$sp246f65}, trade_no: {$sp9db197}"); $this->shipOrder($spba756f, $spf34e1a, $sp246f65, $sp9db197); \Log::debug($sp591089 . ' shipOrder end, order_no: ' . $spf34e1a); } catch (\Exception $sp6a7295) { \Log::error($sp591089 . ' shipOrder Exception: ' . $sp6a7295->getMessage()); } }); \Log::debug($sp591089 . ' notify finished: ' . (int) $sp5359c9 . '

'); die; } function result(Request $spba756f, $spf34e1a) { $spedec71 = \App\Order::where('order_no', $spf34e1a)->first(); if ($spedec71 == null) { return self::renderResultPage($spba756f, array('msg' => '订单未找到，请重试')); } if ($spedec71->status === \App\Order::STATUS_PAID) { $sp19dce7 = $spedec71->user->qq; if ($spedec71->product->delivery === \App\Product::DELIVERY_MANUAL) { $spa24442 = '您购买的为手动充值商品，请耐心等待处理'; } else { $spa24442 = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($sp19dce7) { $spa24442 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp19dce7 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp19dce7 . '</a>'; } return self::renderResultPage($spba756f, array('success' => false, 'title' => '订单已支付', 'msg' => $spa24442), array('order' => $spedec71)); } elseif ($spedec71->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spba756f, $spedec71); } return self::renderResultPage($spba756f, array('success' => false, 'msg' => $spedec71->remark ? '失败原因:<br>' . $spedec71->remark : '订单支付失败，请重试'), array('order' => $spedec71)); } function renderResultPage(Request $spba756f, $spe6807d, $spe99d4c = array()) { if ($spba756f->ajax()) { if (@$spe6807d['success']) { return Response::success($spe6807d['data']); } else { return Response::fail('error', $spe6807d['msg']); } } else { return view('pay.result', array_merge(array('result' => $spe6807d, 'data' => $spe99d4c), $spe99d4c)); } } function shipOrder($spba756f, $spf34e1a, $sp246f65, $sp9db197) { $spedec71 = \App\Order::whereOrderNo($spf34e1a)->first(); if ($spedec71 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $spf34e1a . ',trade_no:' . $sp9db197 . ',amount:' . $sp246f65 . ']. die(\'success\');'); die('success'); } if ($spedec71->paid > $sp246f65) { \Log::alert('shipOrder, price may error, order_no:' . $spf34e1a . ', paid:' . $spedec71->paid . ', $amount get:' . $sp246f65); $spedec71->remark = '支付金额(' . sprintf('%0.2f', $sp246f65 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $spedec71->paid / 100) . ')'; $spedec71->save(); throw new \Exception($spedec71->remark); } $sp9dfc99 = null; if ($spedec71->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $spf34e1a); if (FundHelper::orderSuccess($spedec71->id, function ($sp88aec6) use($sp9db197, &$spedec71, &$sp9dfc99) { $spedec71 = $sp88aec6; if ($spedec71->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $spedec71->order_no . ' already processed! #2'); return false; } $sp9dfc99 = $spedec71->product()->lockForUpdate()->firstOrFail(); $spedec71->pay_trade_no = $sp9db197; $spedec71->paid_at = Carbon::now(); if ($sp9dfc99->delivery === \App\Product::DELIVERY_MANUAL) { $spedec71->status = \App\Order::STATUS_PAID; $spedec71->send_status = \App\Order::SEND_STATUS_CARD_UN; $spedec71->saveOrFail(); return true; } if ($sp9dfc99->delivery === \App\Product::DELIVERY_API) { $sp137cd7 = $sp9dfc99->createApiCards($spedec71); } else { $sp137cd7 = Card::where('product_id', $sp9dfc99->retail_root->id)->whereRaw('`count_sold`<`count_all`')->take($spedec71->count)->lockForUpdate()->get(); } $spe97000 = false; if (count($sp137cd7) === $spedec71->count) { $spe97000 = true; } else { $spe97000 = false; if (count($sp137cd7)) { foreach ($sp137cd7 as $spa9cef2) { if ($spa9cef2->type === \App\Card::TYPE_REPEAT && $spa9cef2->count >= $spedec71->count) { $sp137cd7 = array($spa9cef2); $spe97000 = true; break; } } } } if ($spe97000 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $spedec71->order_no . ', 购买数量:' . $spedec71->count . ', 卡数量:' . count($sp137cd7) . ' 卡密不足(已支付 未发货)'); $spedec71->status = \App\Order::STATUS_PAID; $spedec71->saveOrFail(); return true; } else { $speccfba = array(); foreach ($sp137cd7 as $spa9cef2) { $speccfba[] = $spa9cef2->id; } $spedec71->cards()->attach($speccfba); if (count($sp137cd7) === 1 && $sp137cd7[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $speccfba[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $spedec71->count))); } else { \App\Card::whereIn('id', $speccfba)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $spedec71->status = \App\Order::STATUS_SUCCESS; $spedec71->saveOrFail(); $sp9dfc99->count_sold += $spedec71->count; $sp9dfc99->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp9dfc99->count_warn > 0 && $sp9dfc99->count < $sp9dfc99->count_warn) { try { Mail::to($spedec71->user->email)->Queue(new ProductCountWarn($sp9dfc99, $sp9dfc99->count)); } catch (\Throwable $sp6a7295) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $spedec71->product_id, 'email' => $spedec71->user->email, 'exception' => $sp6a7295->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spdf69a9 = @json_decode($spedec71->contact_ext, true)['_mail']; if ($spdf69a9) { $spedec71->sendEmail($spdf69a9); } } if ($spedec71->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spcd62a5 = @json_decode($spedec71->contact_ext, true)['_mobile']; if ($spcd62a5) { $spedec71->sendSms($spcd62a5); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $spedec71->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spba756f, $spedec71) { return self::renderResultPage($spba756f, array('success' => true, 'msg' => $spedec71->getSendMessage()), array('card_txt' => join('&#013;&#010;', $spedec71->getCardsArray()), 'order' => $spedec71, 'product' => $spedec71->product)); } }