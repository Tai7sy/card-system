<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spe5a184, $sp0983aa, $spc1d9e3, $sp56e1de, $sp440190) { try { $sp474860 = json_decode($sp56e1de->config, true); $sp474860['payway'] = $sp56e1de->way; GatewayPay::getDriver($sp56e1de)->goPay($sp474860, $sp0983aa, $spc1d9e3, $spc1d9e3, $sp440190); return self::renderResultPage($spe5a184, array('success' => false, 'title' => trans('shop.please_wait'), 'msg' => trans('shop.please_wait_for_pay'))); } catch (\Exception $spd118f7) { if (config('app.debug')) { return self::renderResultPage($spe5a184, array('msg' => $spd118f7->getMessage() . '<br>' . str_replace('
', '<br>', $spd118f7->getTraceAsString()))); } return self::renderResultPage($spe5a184, array('msg' => $spd118f7->getMessage())); } } function buy(Request $spe5a184) { $sp44885a = $spe5a184->input('customer'); if (strlen($sp44885a) !== 32) { return self::renderResultPage($spe5a184, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spe5a184->getQueryString() . '
提交内容: ' . var_export($sp44885a) . ', 提交长度:' . strlen($sp44885a) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if (System::_getInt('vcode_shop_buy') === 1) { try { $this->validateCaptcha($spe5a184); } catch (\Throwable $spd118f7) { return self::renderResultPage($spe5a184, array('msg' => trans('validation.captcha'))); } } $sp23779d = (int) $spe5a184->input('category_id'); $sp89bb44 = (int) $spe5a184->input('product_id'); $sp9154dd = (int) $spe5a184->input('count'); $sp133cc3 = $spe5a184->input('coupon'); $sp887f08 = $spe5a184->input('contact'); $spfee07d = $spe5a184->input('contact_ext') ?? null; $sp1f6ed9 = !empty(@json_decode($spfee07d, true)['_mobile']); $sp62a4ae = (int) $spe5a184->input('pay_id'); if (!$sp23779d || !$sp89bb44) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.required'))); } if (strlen($sp887f08) < 1) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.contact.required'))); } $sp076e03 = null; if (System::_getInt('order_query_password_open')) { $sp076e03 = $spe5a184->input('query_password'); if (strlen($sp076e03) < 1) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.query_password.required'))); } if (strlen($sp076e03) < 6 || Helper::isWakePassword($sp076e03)) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.query_password.weak'))); } } $spf6286b = Category::findOrFail($sp23779d); $spb395ca = Product::where('id', $sp89bb44)->where('category_id', $sp23779d)->where('enabled', 1)->with(array('user'))->first(); if ($spb395ca == null || $spb395ca->user == null) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.not_found'))); } if (!$spb395ca->enabled) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.not_on_sell'))); } if ($spb395ca->password_open) { if ($spb395ca->password !== $spe5a184->input('product_password')) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.password_error'))); } } else { if ($spf6286b->password_open) { if ($spf6286b->password !== $spe5a184->input('category_password')) { if ($spf6286b->getTmpPassword() !== $spe5a184->input('category_password')) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.category.password_error'))); } } } } if ($sp9154dd < $spb395ca->buy_min) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.buy_min', array('num' => $spb395ca->buy_min)))); } if ($sp9154dd > $spb395ca->buy_max) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.buy_max', array('num' => $spb395ca->buy_max)))); } if ($spb395ca->count < $sp9154dd) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.out_of_stock'))); } $sp56e1de = \App\Pay::find($sp62a4ae); if ($sp56e1de == null || !$sp56e1de->enabled) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.pay.not_found'))); } $sp5630dc = $spb395ca->price; if ($spb395ca->price_whole) { $spfa2d7c = json_decode($spb395ca->price_whole, true); for ($sp03f985 = count($spfa2d7c) - 1; $sp03f985 >= 0; $sp03f985--) { if ($sp9154dd >= (int) $spfa2d7c[$sp03f985][0]) { $sp5630dc = (int) $spfa2d7c[$sp03f985][1]; break; } } } $spc44785 = $sp9154dd * $sp5630dc; $sp440190 = $spc44785; $sp2464b8 = 0; $sp6eaaa7 = null; if ($spb395ca->support_coupon && strlen($sp133cc3) > 0) { $sp6219a1 = \App\Coupon::where('user_id', $spb395ca->user_id)->where('coupon', $sp133cc3)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp6219a1 as $sp9cdc9f) { if ($sp9cdc9f->category_id === -1 || $sp9cdc9f->category_id === $sp23779d && ($sp9cdc9f->product_id === -1 || $sp9cdc9f->product_id === $sp89bb44)) { if ($sp9cdc9f->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp440190 >= $sp9cdc9f->discount_val) { $sp6eaaa7 = $sp9cdc9f; $sp2464b8 = $sp9cdc9f->discount_val; break; } if ($sp9cdc9f->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp6eaaa7 = $sp9cdc9f; $sp2464b8 = (int) round($sp440190 * $sp9cdc9f->discount_val / 100); break; } } } if ($sp6eaaa7 === null) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.coupon.invalid'))); } $sp440190 -= $sp2464b8; } $spebe844 = (int) round($sp440190 * $sp56e1de->fee_system); $sp7f37a5 = $sp440190 - $spebe844; $spb00863 = $sp1f6ed9 ? System::_getInt('sms_price', 10) : 0; $sp440190 += $spb00863; $spea6f55 = $sp9154dd * $spb395ca->cost; $sp0983aa = \App\Order::unique_no(); try { DB::transaction(function () use($spb395ca, $sp0983aa, $sp6eaaa7, $sp887f08, $spfee07d, $sp076e03, $sp44885a, $sp9154dd, $spea6f55, $spc44785, $spb00863, $sp2464b8, $sp440190, $sp56e1de, $spebe844, $sp7f37a5) { if ($sp6eaaa7) { $sp6eaaa7->status = \App\Coupon::STATUS_USED; $sp6eaaa7->count_used++; $sp6eaaa7->save(); $sp267df6 = '使用优惠券: ' . $sp6eaaa7->coupon; } else { $sp267df6 = null; } $sp42d084 = new \App\Order(array('user_id' => $spb395ca->user_id, 'order_no' => $sp0983aa, 'product_id' => $spb395ca->id, 'product_name' => $spb395ca->name, 'count' => $sp9154dd, 'ip' => Helper::getIP(), 'customer' => $sp44885a, 'contact' => $sp887f08, 'contact_ext' => $spfee07d, 'query_password' => $sp076e03, 'cost' => $spea6f55, 'price' => $spc44785, 'sms_price' => $spb00863, 'discount' => $sp2464b8, 'paid' => $sp440190, 'pay_id' => $sp56e1de->id, 'fee' => $spebe844, 'system_fee' => $spebe844, 'income' => $sp7f37a5, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp267df6, 'created_at' => Carbon::now())); $sp42d084->saveOrFail(); }); } catch (\Throwable $spd118f7) { Log::error('Shop.Pay.buy 下单失败', array('exception' => $spd118f7)); return self::renderResultPage($spe5a184, array('msg' => trans('shop.pay.internal_error'))); } if ($sp440190 === 0) { $this->shipOrder($spe5a184, $sp0983aa, $sp440190, null); return redirect()->away(route('pay.result', array($sp0983aa), false)); } $spc1d9e3 = $sp0983aa; return $this->goPay($spe5a184, $sp0983aa, $spc1d9e3, $sp56e1de, $sp440190); } function pay(Request $spe5a184, $sp0983aa) { $sp42d084 = \App\Order::whereOrderNo($sp0983aa)->first(); if ($sp42d084 == null) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.order.not_found'))); } if ($sp42d084->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp0983aa); } $sp369f74 = 'pay: ' . $sp42d084->pay_id; $sp56e1de = $sp42d084->pay; if (!$sp56e1de) { \Log::error($sp369f74 . ' cannot find Pay'); return $this->renderResultPage($spe5a184, array('msg' => trans('shop.pay.not_found'))); } $sp369f74 .= ',' . $sp56e1de->driver; $sp474860 = json_decode($sp56e1de->config, true); $sp474860['payway'] = $sp56e1de->way; $sp474860['out_trade_no'] = $sp0983aa; try { $this->payApi = GatewayPay::getDriver($sp56e1de); } catch (\Exception $spd118f7) { \Log::error($sp369f74 . ' cannot find Driver: ' . $spd118f7->getMessage()); return $this->renderResultPage($spe5a184, array('msg' => trans('shop.pay.driver_not_found'))); } if ($this->payApi->verify($sp474860, function ($sp0983aa, $sp2cb76e, $spe3cc7f) use($spe5a184) { try { $this->shipOrder($spe5a184, $sp0983aa, $sp2cb76e, $spe3cc7f); } catch (\Exception $spd118f7) { $this->renderResultPage($spe5a184, array('success' => false, 'msg' => $spd118f7->getMessage())); } })) { \Log::notice($sp369f74 . ' already success' . '

'); return redirect('/pay/result/' . $sp0983aa); } if ($sp42d084->created_at < Carbon::now()->addMinutes(-System::_getInt('order_pay_timeout_minutes', 5))) { return $this->renderResultPage($spe5a184, array('msg' => trans('shop.order.expired'))); } $spb395ca = Product::where('id', $sp42d084->product_id)->where('enabled', 1)->first(); if ($spb395ca == null) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.not_on_sell'))); } $spb395ca->setAttribute('count', count($spb395ca->cards) ? $spb395ca->cards[0]->count : 0); if ($spb395ca->count < $sp42d084->count) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.out_of_stock'))); } $spc1d9e3 = $sp0983aa; return $this->goPay($spe5a184, $sp0983aa, $spc1d9e3, $sp56e1de, $sp42d084->paid); } function qrcode(Request $spe5a184, $sp0983aa, $sp0c05ee) { $sp42d084 = \App\Order::whereOrderNo($sp0983aa)->with('product')->first(); if ($sp42d084 == null) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.order.not_found'))); } if ($sp42d084->created_at < Carbon::now()->addMinutes(-System::_getInt('order_pay_timeout_minutes', 5))) { return $this->renderResultPage($spe5a184, array('msg' => trans('shop.order.expired'))); } if ($sp42d084->product_id !== \App\Product::ID_API) { $spb395ca = $sp42d084->product; if ($spb395ca == null) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.not_found'))); } if ($spb395ca->count < $sp42d084->count) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.product.out_of_stock'))); } } if (strpos($sp0c05ee, '..')) { return $this->msg(trans('shop.you_are_sb')); } return view('pay/' . $sp0c05ee, array('pay_id' => $sp42d084->pay_id, 'name' => $sp42d084->product_id === \App\Product::ID_API ? $sp42d084->api_out_no : $sp42d084->product->name . ' x ' . $sp42d084->count . '件', 'amount' => $sp42d084->paid, 'qrcode' => $spe5a184->get('url'), 'id' => $sp0983aa)); } function qrQuery(Request $spe5a184, $sp62a4ae) { $sp46c6a5 = $spe5a184->input('id'); if (isset($sp46c6a5[5])) { return self::payReturn($spe5a184, $sp62a4ae, $sp46c6a5); } else { return Response::fail('order_no error'); } } function payReturn(Request $spe5a184, $sp62a4ae, $sp0983aa = null) { $sp369f74 = 'payReturn: ' . $sp62a4ae; \Log::debug($sp369f74); $sp56e1de = \App\Pay::where('id', $sp62a4ae)->first(); if (!$sp56e1de) { return $this->renderResultPage($spe5a184, array('success' => 0, 'msg' => trans('shop.pay.not_found'))); } $sp369f74 .= ',' . $sp56e1de->driver; if ($sp0983aa && isset($sp0983aa[5])) { $sp42d084 = \App\Order::whereOrderNo($sp0983aa)->firstOrFail(); if ($sp42d084 && ($sp42d084->status === \App\Order::STATUS_PAID || $sp42d084->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp369f74 . ' already success' . '

'); if ($spe5a184->ajax()) { return self::renderResultPage($spe5a184, array('success' => 1, 'data' => '/pay/result/' . $sp0983aa), array('order' => $sp42d084)); } else { return redirect('/pay/result/' . $sp0983aa); } } } try { $this->payApi = GatewayPay::getDriver($sp56e1de); } catch (\Exception $spd118f7) { \Log::error($sp369f74 . ' cannot find Driver: ' . $spd118f7->getMessage()); return $this->renderResultPage($spe5a184, array('success' => 0, 'msg' => trans('shop.pay.driver_not_found'))); } $sp474860 = json_decode($sp56e1de->config, true); $sp474860['out_trade_no'] = $sp0983aa; $sp474860['payway'] = $sp56e1de->way; Log::debug($sp369f74 . ' will verify'); if ($this->payApi->verify($sp474860, function ($spdf76c0, $sp2cb76e, $spe3cc7f) use($spe5a184, $sp369f74, &$sp0983aa) { $sp0983aa = $spdf76c0; try { Log::debug($sp369f74 . " shipOrder start, order_no: {$sp0983aa}, amount: {$sp2cb76e}, trade_no: {$spe3cc7f}"); $this->shipOrder($spe5a184, $sp0983aa, $sp2cb76e, $spe3cc7f); Log::debug($sp369f74 . ' shipOrder end, order_no: ' . $sp0983aa); } catch (\Exception $spd118f7) { Log::error($sp369f74 . ' shipOrder Exception: ' . $spd118f7->getMessage(), array('exception' => $spd118f7)); } })) { Log::debug($sp369f74 . ' verify finished: 1' . '

'); if ($spe5a184->ajax()) { return self::renderResultPage($spe5a184, array('success' => 1, 'data' => '/pay/result/' . $sp0983aa)); } else { return redirect('/pay/result/' . $sp0983aa); } } else { Log::debug($sp369f74 . ' verify finished: 0' . '

'); return $this->renderResultPage($spe5a184, array('success' => 0, 'msg' => trans('shop.pay.verify_failed'))); } } function payNotify(Request $spe5a184, $sp62a4ae) { $sp369f74 = 'payNotify pay_id: ' . $sp62a4ae; Log::debug($sp369f74); $sp56e1de = \App\Pay::where('id', $sp62a4ae)->first(); if (!$sp56e1de) { Log::error($sp369f74 . ' cannot find PayModel'); echo 'fail'; die; } $sp369f74 .= ',' . $sp56e1de->driver; try { $this->payApi = GatewayPay::getDriver($sp56e1de); } catch (\Exception $spd118f7) { Log::error($sp369f74 . ' cannot find Driver: ' . $spd118f7->getMessage()); echo 'fail'; die; } $sp474860 = json_decode($sp56e1de->config, true); $sp474860['payway'] = $sp56e1de->way; $sp474860['isNotify'] = true; Log::debug($sp369f74 . ' will verify'); $spa64ee0 = $this->payApi->verify($sp474860, function ($sp0983aa, $sp2cb76e, $spe3cc7f) use($spe5a184, $sp369f74) { try { Log::debug($sp369f74 . " shipOrder start, order_no: {$sp0983aa}, amount: {$sp2cb76e}, trade_no: {$spe3cc7f}"); $this->shipOrder($spe5a184, $sp0983aa, $sp2cb76e, $spe3cc7f); Log::debug($sp369f74 . ' shipOrder end, order_no: ' . $sp0983aa); } catch (\Exception $spd118f7) { Log::error($sp369f74 . ' shipOrder Exception: ' . $spd118f7->getMessage()); } }); Log::debug($sp369f74 . ' notify finished: ' . (int) $spa64ee0 . '

'); die; } function result(Request $spe5a184, $sp0983aa) { $sp42d084 = \App\Order::where('order_no', $sp0983aa)->first(); if ($sp42d084 == null) { return self::renderResultPage($spe5a184, array('msg' => trans('shop.order.not_found'))); } if ($sp42d084->status === \App\Order::STATUS_PAID) { $sp1dbc1c = $sp42d084->user->qq; if ($sp42d084->product) { if ($sp42d084->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp1955ac = trans('shop.order.msg_product_manual_please_wait'); } else { $sp1955ac = trans('shop.order.msg_product_out_of_stock_not_send'); } } else { $sp1955ac = trans('shop.order.msg_product_deleted'); } if ($sp1dbc1c) { $sp1955ac .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp1dbc1c . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp1dbc1c . '</a>'; } return self::renderResultPage($spe5a184, array('success' => false, 'title' => trans('shop.order_is_paid'), 'msg' => $sp1955ac), array('order' => $sp42d084)); } elseif ($sp42d084->status >= \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spe5a184, $sp42d084); } return self::renderResultPage($spe5a184, array('success' => false, 'msg' => $sp42d084->remark ? trans('shop.order_process_failed_because', array('reason' => $sp42d084->remark)) : trans('shop.order_process_failed_default')), array('order' => $sp42d084)); } function renderResultPage(Request $spe5a184, $spf36da4, $spb0aec6 = array()) { if ($spe5a184->ajax()) { if (@$spf36da4['success']) { return Response::success($spf36da4['data']); } else { return Response::fail('error', $spf36da4['msg']); } } else { return view('pay.result', array_merge(array('result' => $spf36da4, 'data' => $spb0aec6), $spb0aec6)); } } function shipOrder($spe5a184, $sp0983aa, $sp2cb76e, $spe3cc7f) { $sp42d084 = \App\Order::whereOrderNo($sp0983aa)->first(); if ($sp42d084 === null) { Log::error('shipOrder: No query results for model [App\\Order:' . $sp0983aa . ',trade_no:' . $spe3cc7f . ',amount:' . $sp2cb76e . ']. die(\'success\');'); die('success'); } if ($sp42d084->paid > $sp2cb76e) { Log::alert('shipOrder, price may error, order_no:' . $sp0983aa . ', paid:' . $sp42d084->paid . ', $amount get:' . $sp2cb76e); $sp42d084->remark = '支付金额(' . sprintf('%0.2f', $sp2cb76e / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp42d084->paid / 100) . ')'; $sp42d084->save(); throw new \Exception($sp42d084->remark); } $spb395ca = null; if ($sp42d084->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp0983aa); if (FundHelper::orderSuccess($sp42d084->id, function ($sp811bae) use($spe3cc7f, &$sp42d084, &$spb395ca) { $sp42d084 = $sp811bae; if ($sp42d084->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp42d084->order_no . ' already processed! #2'); return false; } $spb395ca = $sp42d084->product()->lockForUpdate()->firstOrFail(); $sp42d084->pay_trade_no = $spe3cc7f; $sp42d084->paid_at = Carbon::now(); if ($spb395ca->delivery === \App\Product::DELIVERY_MANUAL) { $sp42d084->status = \App\Order::STATUS_PAID; $sp42d084->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp42d084->saveOrFail(); return true; } if ($spb395ca->delivery === \App\Product::DELIVERY_API) { $spc3aa7c = $spb395ca->createApiCards($sp42d084); } else { $spc3aa7c = Card::where('product_id', $sp42d084->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp42d084->count)->lockForUpdate()->get(); } $sp3b4113 = false; if (count($spc3aa7c) === $sp42d084->count) { $sp3b4113 = true; } else { if (count($spc3aa7c)) { foreach ($spc3aa7c as $sp2173f5) { if ($sp2173f5->type === \App\Card::TYPE_REPEAT && $sp2173f5->count >= $sp42d084->count) { $spc3aa7c = array($sp2173f5); $sp3b4113 = true; break; } } } } if ($sp3b4113 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp42d084->order_no . ', 购买数量:' . $sp42d084->count . ', 卡数量:' . count($spc3aa7c) . ' 卡密不足(已支付 未发货)'); $sp42d084->status = \App\Order::STATUS_PAID; $sp42d084->saveOrFail(); return true; } else { $sp9173cb = array(); foreach ($spc3aa7c as $sp2173f5) { $sp9173cb[] = $sp2173f5->id; } $sp42d084->cards()->attach($sp9173cb); if (count($spc3aa7c) === 1 && $spc3aa7c[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $sp9173cb[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $sp42d084->count))); } else { \App\Card::whereIn('id', $sp9173cb)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $sp42d084->status = \App\Order::STATUS_SUCCESS; $sp42d084->saveOrFail(); $spb395ca->count_sold += $sp42d084->count; $spb395ca->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($spb395ca->count_warn > 0 && $spb395ca->count < $spb395ca->count_warn) { try { Mail::to($sp42d084->user->email)->Queue(new ProductCountWarn($spb395ca, $spb395ca->count)); } catch (\Throwable $spd118f7) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp42d084->product_id, 'email' => $sp42d084->user->email, 'exception' => $spd118f7->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $sp6da4b4 = @json_decode($sp42d084->contact_ext, true)['_mail']; if ($sp6da4b4) { $sp42d084->sendEmail($sp6da4b4); } } if ($sp42d084->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spbb3ff5 = @json_decode($sp42d084->contact_ext, true)['_mobile']; if ($spbb3ff5) { $sp42d084->sendSms($spbb3ff5); } } } else { if ($sp42d084->status !== \App\Order::STATUS_UNPAY) { } else { Log::error('Pay.shipOrder.orderSuccess Failed.'); return FALSE; } } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp42d084->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spe5a184, $sp42d084) { return self::renderResultPage($spe5a184, array('success' => true, 'msg' => $sp42d084->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp42d084->getCardsArray()), 'order' => $sp42d084, 'product' => $sp42d084->product)); } }