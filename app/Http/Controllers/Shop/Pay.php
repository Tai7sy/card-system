<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp054aa0, $sp503d88, $sp64476a, $sp2a1b4b, $spd850a5) { try { (new GatewayPay())->goPay($sp2a1b4b, $sp503d88, $sp64476a, $sp64476a, $spd850a5); return self::renderResultPage($sp054aa0, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp8e3e91) { return self::renderResultPage($sp054aa0, array('msg' => $sp8e3e91->getMessage())); } } function buy(Request $sp054aa0) { $sp88b744 = $sp054aa0->input('customer'); if (strlen($sp88b744) !== 32) { return self::renderResultPage($sp054aa0, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp054aa0->getQueryString() . '
提交内容: ' . var_export($sp88b744) . ', 提交长度:' . strlen($sp88b744) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp93ae8e = Geetest\API::verify($sp054aa0->input('geetest_challenge'), $sp054aa0->input('geetest_validate'), $sp054aa0->input('geetest_seccode')); if (!$sp93ae8e) { return self::renderResultPage($sp054aa0, array('msg' => '滑动验证超时，请返回页面重试。')); } } $spc3ee02 = (int) $sp054aa0->input('category_id'); $sp107f34 = (int) $sp054aa0->input('product_id'); $sp5df9fd = (int) $sp054aa0->input('count'); $sp4a0347 = $sp054aa0->input('coupon'); $sp9a587c = $sp054aa0->input('contact'); $spd0e834 = $sp054aa0->input('contact_ext') ?? null; $spd1a5a5 = !empty(@json_decode($spd0e834, true)['_mobile']); $spd06c79 = (int) $sp054aa0->input('pay_id'); if (!$spc3ee02 || !$sp107f34) { return self::renderResultPage($sp054aa0, array('msg' => '请选择商品')); } if (strlen($sp9a587c) < 1) { return self::renderResultPage($sp054aa0, array('msg' => '请输入联系方式')); } $sp4a59d6 = Category::findOrFail($spc3ee02); $sp648779 = Product::where('id', $sp107f34)->where('category_id', $spc3ee02)->where('enabled', 1)->with(array('user'))->first(); if ($sp648779 == null || $sp648779->user == null) { return self::renderResultPage($sp054aa0, array('msg' => '该商品未找到，请重新选择')); } if ($sp648779->password_open) { if ($sp648779->password !== $sp054aa0->input('product_password')) { return self::renderResultPage($sp054aa0, array('msg' => '商品密码输入错误')); } } else { if ($sp4a59d6->password_open) { if ($sp4a59d6->password !== $sp054aa0->input('category_password')) { if ($sp4a59d6->getTmpPassword() !== $sp054aa0->input('category_password')) { return self::renderResultPage($sp054aa0, array('msg' => '分类密码输入错误')); } } } } if ($sp5df9fd < $sp648779->buy_min) { return self::renderResultPage($sp054aa0, array('msg' => '该商品最少购买' . $sp648779->buy_min . '件，请重新选择')); } if ($sp5df9fd > $sp648779->buy_max) { return self::renderResultPage($sp054aa0, array('msg' => '该商品限购' . $sp648779->buy_max . '件，请重新选择')); } if ($sp648779->count < $sp5df9fd) { return self::renderResultPage($sp054aa0, array('msg' => '该商品库存不足')); } $spbe896f = \App\Pay::find($spd06c79); if ($spbe896f == null || !$spbe896f->enabled) { return self::renderResultPage($sp054aa0, array('msg' => '支付方式未找到，请重新选择')); } $spd8739d = $sp648779->price; if ($sp648779->price_whole) { $sp427679 = json_decode($sp648779->price_whole, true); for ($spbc3a4f = count($sp427679) - 1; $spbc3a4f >= 0; $spbc3a4f--) { if ($sp5df9fd >= (int) $sp427679[$spbc3a4f][0]) { $spd8739d = (int) $sp427679[$spbc3a4f][1]; break; } } } $sp25dfe1 = $sp5df9fd * $spd8739d; $spd850a5 = $sp25dfe1; $sp9f6943 = 0; $sp1d2f47 = null; if ($sp648779->support_coupon && strlen($sp4a0347) > 0) { $spb3fd71 = \App\Coupon::where('user_id', $sp648779->user_id)->where('coupon', $sp4a0347)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($spb3fd71 as $sp12edae) { if ($sp12edae->category_id === -1 || $sp12edae->category_id === $spc3ee02 && ($sp12edae->product_id === -1 || $sp12edae->product_id === $sp107f34)) { if ($sp12edae->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spd850a5 >= $sp12edae->discount_val) { $sp1d2f47 = $sp12edae; $sp9f6943 = $sp12edae->discount_val; break; } if ($sp12edae->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp1d2f47 = $sp12edae; $sp9f6943 = (int) round($spd850a5 * $sp12edae->discount_val / 100); break; } } } if ($sp1d2f47 === null) { return self::renderResultPage($sp054aa0, array('msg' => '优惠券信息错误，请重新输入')); } $spd850a5 -= $sp9f6943; } $sp4258de = (int) round($spd850a5 * $spbe896f->fee_system); $spbb54be = $spd850a5 - $sp4258de; $spb1c7db = $spd1a5a5 ? System::_getInt('sms_price', 10) : 0; $spd850a5 += $spb1c7db; $spd781f5 = $sp5df9fd * $sp648779->cost; $sp503d88 = \App\Order::unique_no(); try { DB::transaction(function () use($sp648779, $sp503d88, $sp1d2f47, $sp9a587c, $spd0e834, $sp88b744, $sp5df9fd, $spd781f5, $sp25dfe1, $spb1c7db, $sp9f6943, $spd850a5, $spbe896f, $sp4258de, $spbb54be) { if ($sp1d2f47) { $sp1d2f47->status = \App\Coupon::STATUS_USED; $sp1d2f47->count_used++; $sp1d2f47->save(); $sp93f669 = '使用优惠券: ' . $sp1d2f47->coupon; } else { $sp93f669 = null; } $sp8fbe20 = \App\Order::create(array('user_id' => $sp648779->user_id, 'order_no' => $sp503d88, 'product_id' => $sp648779->id, 'product_name' => $sp648779->name, 'count' => $sp5df9fd, 'ip' => Helper::getIP(), 'customer' => $sp88b744, 'contact' => $sp9a587c, 'contact_ext' => $spd0e834, 'cost' => $spd781f5, 'price' => $sp25dfe1, 'sms_price' => $spb1c7db, 'discount' => $sp9f6943, 'paid' => $spd850a5, 'pay_id' => $spbe896f->id, 'fee' => $sp4258de, 'system_fee' => $sp4258de, 'income' => $spbb54be, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp93f669, 'created_at' => Carbon::now())); assert($sp8fbe20 !== null); }); } catch (\Throwable $sp8e3e91) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sp8e3e91)); return self::renderResultPage($sp054aa0, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($spd850a5 === 0) { $this->shipOrder($sp054aa0, $sp503d88, $spd850a5, null); return redirect('/pay/result/' . $sp503d88); } $sp64476a = $sp503d88; return $this->goPay($sp054aa0, $sp503d88, $sp64476a, $spbe896f, $spd850a5); } function pay(Request $sp054aa0, $sp503d88) { $sp8fbe20 = \App\Order::whereOrderNo($sp503d88)->first(); if ($sp8fbe20 == null) { return self::renderResultPage($sp054aa0, array('msg' => '订单未找到，请重试')); } if ($sp8fbe20->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp503d88); } $sp2ecb62 = 'pay: ' . $sp8fbe20->pay_id; $sp2a1b4b = $sp8fbe20->pay; if (!$sp2a1b4b) { \Log::error($sp2ecb62 . ' cannot find Pay'); return $this->renderResultPage($sp054aa0, array('msg' => '支付方式未找到')); } $sp2ecb62 .= ',' . $sp2a1b4b->driver; $spb2491c = json_decode($sp2a1b4b->config, true); $spb2491c['payway'] = $sp2a1b4b->way; $spb2491c['out_trade_no'] = $sp503d88; try { $this->payApi = GatewayPay::getDriver($sp2a1b4b->id, $sp2a1b4b->driver); } catch (\Exception $sp8e3e91) { \Log::error($sp2ecb62 . ' cannot find Driver: ' . $sp8e3e91->getMessage()); return $this->renderResultPage($sp054aa0, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($spb2491c, function ($sp503d88, $sp2ff0db, $spa3d9e1) use($sp054aa0) { try { $this->shipOrder($sp054aa0, $sp503d88, $sp2ff0db, $spa3d9e1); } catch (\Exception $sp8e3e91) { $this->renderResultPage($sp054aa0, array('success' => false, 'msg' => $sp8e3e91->getMessage())); } })) { \Log::notice($sp2ecb62 . ' already success' . '

'); return redirect('/pay/result/' . $sp503d88); } if ($sp8fbe20->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp054aa0, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp648779 = Product::where('id', $sp8fbe20->product_id)->where('enabled', 1)->first(); if ($sp648779 == null) { return self::renderResultPage($sp054aa0, array('msg' => '该商品已下架')); } $sp648779->setAttribute('count', count($sp648779->cards) ? $sp648779->cards[0]->count : 0); if ($sp648779->count < $sp8fbe20->count) { return self::renderResultPage($sp054aa0, array('msg' => '该商品库存不足')); } $sp64476a = $sp503d88; return $this->goPay($sp054aa0, $sp503d88, $sp64476a, $sp2a1b4b, $sp8fbe20->paid); } function qrcode(Request $sp054aa0, $sp503d88, $sp4e1083) { $sp8fbe20 = \App\Order::whereOrderNo($sp503d88)->with('product')->first(); if ($sp8fbe20 == null) { return self::renderResultPage($sp054aa0, array('msg' => '订单未找到，请重试')); } if ($sp8fbe20->product_id !== \App\Product::ID_API && $sp8fbe20->product == null) { return self::renderResultPage($sp054aa0, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp4e1083, array('pay_id' => $sp8fbe20->pay_id, 'name' => $sp8fbe20->product->name . ' x ' . $sp8fbe20->count . '件', 'amount' => $sp8fbe20->paid, 'qrcode' => $sp054aa0->get('url'), 'id' => $sp503d88)); } function qrQuery(Request $sp054aa0, $spd06c79) { $spc2e367 = $sp054aa0->input('id', ''); return self::payReturn($sp054aa0, $spd06c79, $spc2e367); } function payReturn(Request $sp054aa0, $spd06c79, $sp71f6d8 = '') { $sp2ecb62 = 'payReturn: ' . $spd06c79; \Log::debug($sp2ecb62); $sp2a1b4b = \App\Pay::where('id', $spd06c79)->first(); if (!$sp2a1b4b) { return $this->renderResultPage($sp054aa0, array('success' => 0, 'msg' => '支付方式错误')); } $sp2ecb62 .= ',' . $sp2a1b4b->driver; if (strlen($sp71f6d8) > 0) { $sp8fbe20 = \App\Order::whereOrderNo($sp71f6d8)->first(); if ($sp8fbe20 && ($sp8fbe20->status === \App\Order::STATUS_PAID || $sp8fbe20->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp2ecb62 . ' already success' . '

'); if ($sp054aa0->ajax()) { return self::renderResultPage($sp054aa0, array('success' => 1, 'data' => '/pay/result/' . $sp71f6d8), array('order' => $sp8fbe20)); } else { return redirect('/pay/result/' . $sp71f6d8); } } } try { $this->payApi = GatewayPay::getDriver($sp2a1b4b->id, $sp2a1b4b->driver); } catch (\Exception $sp8e3e91) { \Log::error($sp2ecb62 . ' cannot find Driver: ' . $sp8e3e91->getMessage()); return $this->renderResultPage($sp054aa0, array('success' => 0, 'msg' => '支付驱动未找到')); } $spb2491c = json_decode($sp2a1b4b->config, true); $spb2491c['out_trade_no'] = $sp71f6d8; $spb2491c['payway'] = $sp2a1b4b->way; \Log::debug($sp2ecb62 . ' will verify'); if ($this->payApi->verify($spb2491c, function ($sp503d88, $sp2ff0db, $spa3d9e1) use($sp054aa0, $sp2ecb62, &$sp71f6d8) { $sp71f6d8 = $sp503d88; try { \Log::debug($sp2ecb62 . " shipOrder start, order_no: {$sp503d88}, amount: {$sp2ff0db}, trade_no: {$spa3d9e1}"); $this->shipOrder($sp054aa0, $sp503d88, $sp2ff0db, $spa3d9e1); \Log::debug($sp2ecb62 . ' shipOrder end, order_no: ' . $sp503d88); } catch (\Exception $sp8e3e91) { \Log::error($sp2ecb62 . ' shipOrder Exception: ' . $sp8e3e91->getMessage()); } })) { \Log::debug($sp2ecb62 . ' verify finished: 1' . '

'); if ($sp054aa0->ajax()) { return self::renderResultPage($sp054aa0, array('success' => 1, 'data' => '/pay/result/' . $sp71f6d8)); } else { return redirect('/pay/result/' . $sp71f6d8); } } else { \Log::debug($sp2ecb62 . ' verify finished: 0' . '

'); return $this->renderResultPage($sp054aa0, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp054aa0, $spd06c79) { $sp2ecb62 = 'payNotify pay_id: ' . $spd06c79; \Log::debug($sp2ecb62); $sp2a1b4b = \App\Pay::where('id', $spd06c79)->first(); if (!$sp2a1b4b) { \Log::error($sp2ecb62 . ' cannot find PayModel'); echo 'fail'; die; } $sp2ecb62 .= ',' . $sp2a1b4b->driver; try { $this->payApi = GatewayPay::getDriver($sp2a1b4b->id, $sp2a1b4b->driver); } catch (\Exception $sp8e3e91) { \Log::error($sp2ecb62 . ' cannot find Driver: ' . $sp8e3e91->getMessage()); echo 'fail'; die; } $spb2491c = json_decode($sp2a1b4b->config, true); $spb2491c['payway'] = $sp2a1b4b->way; $spb2491c['isNotify'] = true; \Log::debug($sp2ecb62 . ' will verify'); $sp93ae8e = $this->payApi->verify($spb2491c, function ($sp503d88, $sp2ff0db, $spa3d9e1) use($sp054aa0, $sp2ecb62) { try { \Log::debug($sp2ecb62 . " shipOrder start, order_no: {$sp503d88}, amount: {$sp2ff0db}, trade_no: {$spa3d9e1}"); $this->shipOrder($sp054aa0, $sp503d88, $sp2ff0db, $spa3d9e1); \Log::debug($sp2ecb62 . ' shipOrder end, order_no: ' . $sp503d88); } catch (\Exception $sp8e3e91) { \Log::error($sp2ecb62 . ' shipOrder Exception: ' . $sp8e3e91->getMessage()); } }); \Log::debug($sp2ecb62 . ' notify finished: ' . (int) $sp93ae8e . '

'); die; } function result(Request $sp054aa0, $sp503d88) { $sp8fbe20 = \App\Order::where('order_no', $sp503d88)->first(); if ($sp8fbe20 == null) { return self::renderResultPage($sp054aa0, array('msg' => '订单未找到，请重试')); } if ($sp8fbe20->status === \App\Order::STATUS_PAID) { $spe9e343 = $sp8fbe20->user->qq; if ($sp8fbe20->product->delivery === \App\Product::DELIVERY_MANUAL) { $spadbb50 = '您购买的为手动充值商品，请耐心等待处理'; } else { $spadbb50 = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($spe9e343) { $spadbb50 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spe9e343 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spe9e343 . '</a>'; } return self::renderResultPage($sp054aa0, array('success' => false, 'title' => '订单已支付', 'msg' => $spadbb50), array('order' => $sp8fbe20)); } elseif ($sp8fbe20->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp054aa0, $sp8fbe20); } return self::renderResultPage($sp054aa0, array('success' => false, 'msg' => $sp8fbe20->remark ? '失败原因:<br>' . $sp8fbe20->remark : '订单支付失败，请重试'), array('order' => $sp8fbe20)); } function renderResultPage(Request $sp054aa0, $sp7cc108, $sp824779 = array()) { if ($sp054aa0->ajax()) { if (@$sp7cc108['success']) { return Response::success($sp7cc108['data']); } else { return Response::fail('error', $sp7cc108['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp7cc108, 'data' => $sp824779), $sp824779)); } } function shipOrder($sp054aa0, $sp503d88, $sp2ff0db, $spa3d9e1) { $sp8fbe20 = \App\Order::whereOrderNo($sp503d88)->first(); if ($sp8fbe20 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp503d88 . ',trade_no:' . $spa3d9e1 . ',amount:' . $sp2ff0db . ']. die(\'success\');'); die('success'); } if ($sp8fbe20->paid > $sp2ff0db) { \Log::alert('shipOrder, price may error, order_no:' . $sp503d88 . ', paid:' . $sp8fbe20->paid . ', $amount get:' . $sp2ff0db); $sp8fbe20->remark = '支付金额(' . sprintf('%0.2f', $sp2ff0db / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp8fbe20->paid / 100) . ')'; $sp8fbe20->save(); throw new \Exception($sp8fbe20->remark); } $sp648779 = null; if ($sp8fbe20->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp503d88); if (FundHelper::orderSuccess($sp8fbe20->id, function ($sp0d1834) use($spa3d9e1, &$sp8fbe20, &$sp648779) { $sp8fbe20 = $sp0d1834; if ($sp8fbe20->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp8fbe20->order_no . ' already processed! #2'); return false; } $sp648779 = $sp8fbe20->product()->lockForUpdate()->firstOrFail(); $sp8fbe20->pay_trade_no = $spa3d9e1; $sp8fbe20->paid_at = Carbon::now(); if ($sp648779->delivery === \App\Product::DELIVERY_MANUAL) { $sp8fbe20->status = \App\Order::STATUS_PAID; $sp8fbe20->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp8fbe20->saveOrFail(); return true; } if ($sp648779->delivery === \App\Product::DELIVERY_API) { $spe6d16e = $sp648779->createApiCards($sp8fbe20); } else { $spe6d16e = Card::where('product_id', $sp8fbe20->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp8fbe20->count)->lockForUpdate()->get(); } if (count($spe6d16e) !== $sp8fbe20->count) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp8fbe20->order_no . ', 购买数量:' . $sp8fbe20->count . ', 卡数量:' . count($spe6d16e) . ' 卡密不足(已支付 未发货)'); $sp8fbe20->status = \App\Order::STATUS_PAID; $sp8fbe20->saveOrFail(); return true; } else { $spfafdbb = array(); foreach ($spe6d16e as $sp33a701) { $spfafdbb[] = $sp33a701->id; } $sp8fbe20->cards()->attach($spfafdbb); Card::whereIn('id', $spfafdbb)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp8fbe20->status = \App\Order::STATUS_SUCCESS; $sp8fbe20->saveOrFail(); $sp648779->count_sold += $sp8fbe20->count; $sp648779->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp648779->count_warn > 0 && $sp648779->count < $sp648779->count_warn) { try { Mail::to($sp8fbe20->user->email)->Queue(new ProductCountWarn($sp648779, $sp648779->count)); } catch (\Throwable $sp8e3e91) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp8fbe20->product_id, 'email' => $sp8fbe20->user->email, 'exception' => $sp8e3e91->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spaac16b = @json_decode($sp8fbe20->contact_ext, true)['_mail']; if ($spaac16b) { $sp8fbe20->sendEmail($spaac16b); } } if ($sp8fbe20->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp848a51 = @json_decode($sp8fbe20->contact_ext, true)['_mobile']; if ($sp848a51) { $sp8fbe20->sendSms($sp848a51); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp8fbe20->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp054aa0, $sp8fbe20) { return self::renderResultPage($sp054aa0, array('success' => true, 'msg' => $sp8fbe20->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp8fbe20->getCardsArray()), 'order' => $sp8fbe20, 'product' => $sp8fbe20->product)); } }