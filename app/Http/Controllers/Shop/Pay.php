<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spaa0004, $spef6915, $spa8e10d, $spce2254, $sp90e9b5) { try { (new GatewayPay())->goPay($spce2254, $spef6915, $spa8e10d, $spa8e10d, $sp90e9b5); return self::renderResultPage($spaa0004, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp2251d3) { return self::renderResultPage($spaa0004, array('msg' => $sp2251d3->getMessage())); } } function buy(Request $spaa0004) { $spfed1c8 = $spaa0004->input('customer'); if (strlen($spfed1c8) !== 32) { return self::renderResultPage($spaa0004, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spaa0004->getQueryString() . '
提交内容: ' . var_export($spfed1c8) . ', 提交长度:' . strlen($spfed1c8) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp4e109c = Geetest\API::verify($spaa0004->input('geetest_challenge'), $spaa0004->input('geetest_validate'), $spaa0004->input('geetest_seccode')); if (!$sp4e109c) { return self::renderResultPage($spaa0004, array('msg' => '滑动验证超时，请返回页面重试。')); } } $spa990f1 = (int) $spaa0004->input('category_id'); $sp52bbb2 = (int) $spaa0004->input('product_id'); $spf525ee = (int) $spaa0004->input('count'); $sp36c7e2 = $spaa0004->input('coupon'); $spba1d62 = $spaa0004->input('contact'); $sp8b7ab9 = $spaa0004->input('contact_ext') ?? null; $sp91a8ed = !empty(@json_decode($sp8b7ab9, true)['_mobile']); $sp92588f = (int) $spaa0004->input('pay_id'); if (!$spa990f1 || !$sp52bbb2) { return self::renderResultPage($spaa0004, array('msg' => '请选择商品')); } if (strlen($spba1d62) < 1) { return self::renderResultPage($spaa0004, array('msg' => '请输入联系方式')); } $sp9c1285 = Category::findOrFail($spa990f1); $sp59cabc = Product::where('id', $sp52bbb2)->where('category_id', $spa990f1)->where('enabled', 1)->with(array('user'))->first(); if ($sp59cabc == null || $sp59cabc->user == null) { return self::renderResultPage($spaa0004, array('msg' => '该商品未找到，请重新选择')); } if ($sp59cabc->password_open) { if ($sp59cabc->password !== $spaa0004->input('product_password')) { return self::renderResultPage($spaa0004, array('msg' => '商品密码输入错误')); } } else { if ($sp9c1285->password_open) { if ($sp9c1285->password !== $spaa0004->input('category_password')) { if ($sp9c1285->getTmpPassword() !== $spaa0004->input('category_password')) { return self::renderResultPage($spaa0004, array('msg' => '分类密码输入错误')); } } } } if ($spf525ee < $sp59cabc->buy_min) { return self::renderResultPage($spaa0004, array('msg' => '该商品最少购买' . $sp59cabc->buy_min . '件，请重新选择')); } if ($spf525ee > $sp59cabc->buy_max) { return self::renderResultPage($spaa0004, array('msg' => '该商品限购' . $sp59cabc->buy_max . '件，请重新选择')); } if ($sp59cabc->count < $spf525ee) { return self::renderResultPage($spaa0004, array('msg' => '该商品库存不足')); } $sp680e79 = \App\Pay::find($sp92588f); if ($sp680e79 == null || !$sp680e79->enabled) { return self::renderResultPage($spaa0004, array('msg' => '支付方式未找到，请重新选择')); } $sp19ff32 = $sp59cabc->price; if ($sp59cabc->price_whole) { $spd9bf31 = json_decode($sp59cabc->price_whole, true); for ($spb11c4c = count($spd9bf31) - 1; $spb11c4c >= 0; $spb11c4c--) { if ($spf525ee >= (int) $spd9bf31[$spb11c4c][0]) { $sp19ff32 = (int) $spd9bf31[$spb11c4c][1]; break; } } } $sp7cf538 = $spf525ee * $sp19ff32; $sp90e9b5 = $sp7cf538; $spc0015e = 0; $spf0722a = null; if ($sp59cabc->support_coupon && strlen($sp36c7e2) > 0) { $spb5f71e = \App\Coupon::where('user_id', $sp59cabc->user_id)->where('coupon', $sp36c7e2)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($spb5f71e as $spb9e3aa) { if ($spb9e3aa->category_id === -1 || $spb9e3aa->category_id === $spa990f1 && ($spb9e3aa->product_id === -1 || $spb9e3aa->product_id === $sp52bbb2)) { if ($spb9e3aa->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp90e9b5 >= $spb9e3aa->discount_val) { $spf0722a = $spb9e3aa; $spc0015e = $spb9e3aa->discount_val; break; } if ($spb9e3aa->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $spf0722a = $spb9e3aa; $spc0015e = (int) round($sp90e9b5 * $spb9e3aa->discount_val / 100); break; } } } if ($spf0722a === null) { return self::renderResultPage($spaa0004, array('msg' => '优惠券信息错误，请重新输入')); } $sp90e9b5 -= $spc0015e; } $sp991fe7 = (int) round($sp90e9b5 * $sp680e79->fee_system); $sp0008ff = $sp90e9b5 - $sp991fe7; $spb44277 = $sp91a8ed ? System::_getInt('sms_price', 10) : 0; $sp90e9b5 += $spb44277; $sp622ac3 = $spf525ee * $sp59cabc->cost; $spef6915 = \App\Order::unique_no(); try { DB::transaction(function () use($sp59cabc, $spef6915, $spf0722a, $spba1d62, $sp8b7ab9, $spfed1c8, $spf525ee, $sp622ac3, $sp7cf538, $spb44277, $spc0015e, $sp90e9b5, $sp680e79, $sp991fe7, $sp0008ff) { if ($spf0722a) { $spf0722a->status = \App\Coupon::STATUS_USED; $spf0722a->count_used++; $spf0722a->save(); $sp4aa812 = '使用优惠券: ' . $spf0722a->coupon; } else { $sp4aa812 = null; } $spd09b83 = \App\Order::create(array('user_id' => $sp59cabc->user_id, 'order_no' => $spef6915, 'product_id' => $sp59cabc->id, 'product_name' => $sp59cabc->name, 'count' => $spf525ee, 'ip' => Helper::getIP(), 'customer' => $spfed1c8, 'contact' => $spba1d62, 'contact_ext' => $sp8b7ab9, 'cost' => $sp622ac3, 'price' => $sp7cf538, 'sms_price' => $spb44277, 'discount' => $spc0015e, 'paid' => $sp90e9b5, 'pay_id' => $sp680e79->id, 'fee' => $sp991fe7, 'system_fee' => $sp991fe7, 'income' => $sp0008ff, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp4aa812, 'created_at' => Carbon::now())); assert($spd09b83 !== null); }); } catch (\Throwable $sp2251d3) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sp2251d3)); return self::renderResultPage($spaa0004, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($sp90e9b5 === 0) { $this->shipOrder($spaa0004, $spef6915, $sp90e9b5, null); return redirect('/pay/result/' . $spef6915); } $spa8e10d = $spef6915; return $this->goPay($spaa0004, $spef6915, $spa8e10d, $sp680e79, $sp90e9b5); } function pay(Request $spaa0004, $spef6915) { $spd09b83 = \App\Order::whereOrderNo($spef6915)->first(); if ($spd09b83 == null) { return self::renderResultPage($spaa0004, array('msg' => '订单未找到，请重试')); } if ($spd09b83->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spef6915); } $sp1aa7f3 = 'pay: ' . $spd09b83->pay_id; $spce2254 = $spd09b83->pay; if (!$spce2254) { \Log::error($sp1aa7f3 . ' cannot find Pay'); return $this->renderResultPage($spaa0004, array('msg' => '支付方式未找到')); } $sp1aa7f3 .= ',' . $spce2254->driver; $sp47d7e2 = json_decode($spce2254->config, true); $sp47d7e2['payway'] = $spce2254->way; $sp47d7e2['out_trade_no'] = $spef6915; try { $this->payApi = GatewayPay::getDriver($spce2254->id, $spce2254->driver); } catch (\Exception $sp2251d3) { \Log::error($sp1aa7f3 . ' cannot find Driver: ' . $sp2251d3->getMessage()); return $this->renderResultPage($spaa0004, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp47d7e2, function ($spef6915, $sp9727fb, $sp47aa88) use($spaa0004) { try { $this->shipOrder($spaa0004, $spef6915, $sp9727fb, $sp47aa88); } catch (\Exception $sp2251d3) { $this->renderResultPage($spaa0004, array('success' => false, 'msg' => $sp2251d3->getMessage())); } })) { \Log::notice($sp1aa7f3 . ' already success' . '

'); return redirect('/pay/result/' . $spef6915); } if ($spd09b83->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spaa0004, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp59cabc = Product::where('id', $spd09b83->product_id)->where('enabled', 1)->first(); if ($sp59cabc == null) { return self::renderResultPage($spaa0004, array('msg' => '该商品已下架')); } $sp59cabc->setAttribute('count', count($sp59cabc->cards) ? $sp59cabc->cards[0]->count : 0); if ($sp59cabc->count < $spd09b83->count) { return self::renderResultPage($spaa0004, array('msg' => '该商品库存不足')); } $spa8e10d = $spef6915; return $this->goPay($spaa0004, $spef6915, $spa8e10d, $spce2254, $spd09b83->paid); } function qrcode(Request $spaa0004, $spef6915, $sp4e5297) { $spd09b83 = \App\Order::whereOrderNo($spef6915)->with('product')->first(); if ($spd09b83 == null) { return self::renderResultPage($spaa0004, array('msg' => '订单未找到，请重试')); } if ($spd09b83->product_id !== \App\Product::ID_API && $spd09b83->product == null) { return self::renderResultPage($spaa0004, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp4e5297, array('pay_id' => $spd09b83->pay_id, 'name' => $spd09b83->product->name . ' x ' . $spd09b83->count . '件', 'amount' => $spd09b83->paid, 'qrcode' => $spaa0004->get('url'), 'id' => $spef6915)); } function qrQuery(Request $spaa0004, $sp92588f) { $sp0ef92c = $spaa0004->input('id', ''); return self::payReturn($spaa0004, $sp92588f, $sp0ef92c); } function payReturn(Request $spaa0004, $sp92588f, $sp5eafbd = '') { $sp1aa7f3 = 'payReturn: ' . $sp92588f; \Log::debug($sp1aa7f3); $spce2254 = \App\Pay::where('id', $sp92588f)->first(); if (!$spce2254) { return $this->renderResultPage($spaa0004, array('success' => 0, 'msg' => '支付方式错误')); } $sp1aa7f3 .= ',' . $spce2254->driver; if (strlen($sp5eafbd) > 0) { $spd09b83 = \App\Order::whereOrderNo($sp5eafbd)->first(); if ($spd09b83 && ($spd09b83->status === \App\Order::STATUS_PAID || $spd09b83->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp1aa7f3 . ' already success' . '

'); if ($spaa0004->ajax()) { return self::renderResultPage($spaa0004, array('success' => 1, 'data' => '/pay/result/' . $sp5eafbd), array('order' => $spd09b83)); } else { return redirect('/pay/result/' . $sp5eafbd); } } } try { $this->payApi = GatewayPay::getDriver($spce2254->id, $spce2254->driver); } catch (\Exception $sp2251d3) { \Log::error($sp1aa7f3 . ' cannot find Driver: ' . $sp2251d3->getMessage()); return $this->renderResultPage($spaa0004, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp47d7e2 = json_decode($spce2254->config, true); $sp47d7e2['out_trade_no'] = $sp5eafbd; $sp47d7e2['payway'] = $spce2254->way; \Log::debug($sp1aa7f3 . ' will verify'); if ($this->payApi->verify($sp47d7e2, function ($spef6915, $sp9727fb, $sp47aa88) use($spaa0004, $sp1aa7f3, &$sp5eafbd) { $sp5eafbd = $spef6915; try { \Log::debug($sp1aa7f3 . " shipOrder start, order_no: {$spef6915}, amount: {$sp9727fb}, trade_no: {$sp47aa88}"); $this->shipOrder($spaa0004, $spef6915, $sp9727fb, $sp47aa88); \Log::debug($sp1aa7f3 . ' shipOrder end, order_no: ' . $spef6915); } catch (\Exception $sp2251d3) { \Log::error($sp1aa7f3 . ' shipOrder Exception: ' . $sp2251d3->getMessage()); } })) { \Log::debug($sp1aa7f3 . ' verify finished: 1' . '

'); if ($spaa0004->ajax()) { return self::renderResultPage($spaa0004, array('success' => 1, 'data' => '/pay/result/' . $sp5eafbd)); } else { return redirect('/pay/result/' . $sp5eafbd); } } else { \Log::debug($sp1aa7f3 . ' verify finished: 0' . '

'); return $this->renderResultPage($spaa0004, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spaa0004, $sp92588f) { $sp1aa7f3 = 'payNotify pay_id: ' . $sp92588f; \Log::debug($sp1aa7f3); $spce2254 = \App\Pay::where('id', $sp92588f)->first(); if (!$spce2254) { \Log::error($sp1aa7f3 . ' cannot find PayModel'); echo 'fail'; die; } $sp1aa7f3 .= ',' . $spce2254->driver; try { $this->payApi = GatewayPay::getDriver($spce2254->id, $spce2254->driver); } catch (\Exception $sp2251d3) { \Log::error($sp1aa7f3 . ' cannot find Driver: ' . $sp2251d3->getMessage()); echo 'fail'; die; } $sp47d7e2 = json_decode($spce2254->config, true); $sp47d7e2['payway'] = $spce2254->way; $sp47d7e2['isNotify'] = true; \Log::debug($sp1aa7f3 . ' will verify'); $sp4e109c = $this->payApi->verify($sp47d7e2, function ($spef6915, $sp9727fb, $sp47aa88) use($spaa0004, $sp1aa7f3) { try { \Log::debug($sp1aa7f3 . " shipOrder start, order_no: {$spef6915}, amount: {$sp9727fb}, trade_no: {$sp47aa88}"); $this->shipOrder($spaa0004, $spef6915, $sp9727fb, $sp47aa88); \Log::debug($sp1aa7f3 . ' shipOrder end, order_no: ' . $spef6915); } catch (\Exception $sp2251d3) { \Log::error($sp1aa7f3 . ' shipOrder Exception: ' . $sp2251d3->getMessage()); } }); \Log::debug($sp1aa7f3 . ' notify finished: ' . (int) $sp4e109c . '

'); die; } function result(Request $spaa0004, $spef6915) { $spd09b83 = \App\Order::where('order_no', $spef6915)->first(); if ($spd09b83 == null) { return self::renderResultPage($spaa0004, array('msg' => '订单未找到，请重试')); } if ($spd09b83->status === \App\Order::STATUS_PAID) { $sp2dcf76 = $spd09b83->user->qq; if ($spd09b83->product->delivery === \App\Product::DELIVERY_MANUAL) { $spc5e95b = '您购买的为手动充值商品，请耐心等待处理'; } else { $spc5e95b = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($sp2dcf76) { $spc5e95b .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp2dcf76 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp2dcf76 . '</a>'; } return self::renderResultPage($spaa0004, array('success' => false, 'title' => '订单已支付', 'msg' => $spc5e95b), array('order' => $spd09b83)); } elseif ($spd09b83->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spaa0004, $spd09b83); } return self::renderResultPage($spaa0004, array('success' => false, 'msg' => $spd09b83->remark ? '失败原因:<br>' . $spd09b83->remark : '订单支付失败，请重试'), array('order' => $spd09b83)); } function renderResultPage(Request $spaa0004, $sp097648, $spf4ad48 = array()) { if ($spaa0004->ajax()) { if (@$sp097648['success']) { return Response::success($sp097648['data']); } else { return Response::fail('error', $sp097648['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp097648, 'data' => $spf4ad48), $spf4ad48)); } } function shipOrder($spaa0004, $spef6915, $sp9727fb, $sp47aa88) { $spd09b83 = \App\Order::whereOrderNo($spef6915)->first(); if ($spd09b83 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $spef6915 . ',trade_no:' . $sp47aa88 . ',amount:' . $sp9727fb . ']. die(\'success\');'); die('success'); } if ($spd09b83->paid > $sp9727fb) { \Log::alert('shipOrder, price may error, order_no:' . $spef6915 . ', paid:' . $spd09b83->paid . ', $amount get:' . $sp9727fb); $spd09b83->remark = '支付金额(' . sprintf('%0.2f', $sp9727fb / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $spd09b83->paid / 100) . ')'; $spd09b83->save(); throw new \Exception($spd09b83->remark); } $sp59cabc = null; if ($spd09b83->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $spef6915); if (FundHelper::orderSuccess($spd09b83->id, function ($sp153365) use($sp47aa88, &$spd09b83, &$sp59cabc) { $spd09b83 = $sp153365; if ($spd09b83->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $spd09b83->order_no . ' already processed! #2'); return false; } $sp59cabc = $spd09b83->product()->lockForUpdate()->firstOrFail(); $spd09b83->pay_trade_no = $sp47aa88; $spd09b83->paid_at = Carbon::now(); if ($sp59cabc->delivery === \App\Product::DELIVERY_MANUAL) { $spd09b83->status = \App\Order::STATUS_PAID; $spd09b83->send_status = \App\Order::SEND_STATUS_CARD_UN; $spd09b83->saveOrFail(); return true; } if ($sp59cabc->delivery === \App\Product::DELIVERY_API) { $sp42fc07 = $sp59cabc->createApiCards($spd09b83); } else { $sp42fc07 = Card::where('product_id', $spd09b83->product_id)->whereRaw('`count_sold`<`count_all`')->take($spd09b83->count)->lockForUpdate()->get(); } if (count($sp42fc07) !== $spd09b83->count) { Log::alert('Shop.Pay.shipOrder: 订单:' . $spd09b83->order_no . ', 购买数量:' . $spd09b83->count . ', 卡数量:' . count($sp42fc07) . ' 卡密不足(已支付 未发货)'); $spd09b83->status = \App\Order::STATUS_PAID; $spd09b83->saveOrFail(); return true; } else { $spc4fb89 = array(); foreach ($sp42fc07 as $sp11c399) { $spc4fb89[] = $sp11c399->id; } $spd09b83->cards()->attach($spc4fb89); Card::whereIn('id', $spc4fb89)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $spd09b83->status = \App\Order::STATUS_SUCCESS; $spd09b83->saveOrFail(); $sp59cabc->count_sold += $spd09b83->count; $sp59cabc->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp59cabc->count_warn > 0 && $sp59cabc->count < $sp59cabc->count_warn) { try { Mail::to($spd09b83->user->email)->Queue(new ProductCountWarn($sp59cabc, $sp59cabc->count)); } catch (\Throwable $sp2251d3) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $spd09b83->product_id, 'email' => $spd09b83->user->email, 'exception' => $sp2251d3->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spcb263c = @json_decode($spd09b83->contact_ext, true)['_mail']; if ($spcb263c) { $spd09b83->sendEmail($spcb263c); } } if ($spd09b83->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp23c6f7 = @json_decode($spd09b83->contact_ext, true)['_mobile']; if ($sp23c6f7) { $spd09b83->sendSms($sp23c6f7); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $spd09b83->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spaa0004, $spd09b83) { return self::renderResultPage($spaa0004, array('success' => true, 'msg' => $spd09b83->getSendMessage()), array('card_txt' => join('&#013;&#010;', $spd09b83->getCardsArray()), 'order' => $spd09b83, 'product' => $spd09b83->product)); } }