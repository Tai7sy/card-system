<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp179c14, $sp1b0c2d, $speadd0b, $sp5effa1, $sp9a4c28) { try { (new GatewayPay())->goPay($sp5effa1, $sp1b0c2d, $speadd0b, $speadd0b, $sp9a4c28); return self::renderResultPage($sp179c14, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $spa356ee) { return self::renderResultPage($sp179c14, array('msg' => $spa356ee->getMessage())); } } function buy(Request $sp179c14) { $spf4810e = $sp179c14->input('customer'); if (strlen($spf4810e) !== 32) { return self::renderResultPage($sp179c14, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp179c14->getQueryString() . '
提交内容: ' . var_export($spf4810e) . ', 提交长度:' . strlen($spf4810e) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $spa6aab5 = Geetest\API::verify($sp179c14->input('geetest_challenge'), $sp179c14->input('geetest_validate'), $sp179c14->input('geetest_seccode')); if (!$spa6aab5) { return self::renderResultPage($sp179c14, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp2521ab = (int) $sp179c14->input('category_id'); $spc00b16 = (int) $sp179c14->input('product_id'); $spb37164 = (int) $sp179c14->input('count'); $sp7109e6 = $sp179c14->input('coupon'); $sp8762f0 = $sp179c14->input('contact'); $spa4f097 = $sp179c14->input('contact_ext') ?? null; $spcf3e38 = !empty(@json_decode($spa4f097, true)['_mobile']); $sp5c7999 = (int) $sp179c14->input('pay_id'); if (!$sp2521ab || !$spc00b16) { return self::renderResultPage($sp179c14, array('msg' => '请选择商品')); } if (strlen($sp8762f0) < 1) { return self::renderResultPage($sp179c14, array('msg' => '请输入联系方式')); } $sp555b23 = Category::findOrFail($sp2521ab); $sp434ec8 = Product::where('id', $spc00b16)->where('category_id', $sp2521ab)->where('enabled', 1)->with(array('user'))->first(); if ($sp434ec8 == null || $sp434ec8->user == null) { return self::renderResultPage($sp179c14, array('msg' => '该商品未找到，请重新选择')); } if ($sp434ec8->password_open) { if ($sp434ec8->password !== $sp179c14->input('product_password')) { return self::renderResultPage($sp179c14, array('msg' => '商品密码输入错误')); } } else { if ($sp555b23->password_open) { if ($sp555b23->password !== $sp179c14->input('category_password')) { if ($sp555b23->getTmpPassword() !== $sp179c14->input('category_password')) { return self::renderResultPage($sp179c14, array('msg' => '分类密码输入错误')); } } } } if ($spb37164 < $sp434ec8->buy_min) { return self::renderResultPage($sp179c14, array('msg' => '该商品最少购买' . $sp434ec8->buy_min . '件，请重新选择')); } if ($spb37164 > $sp434ec8->buy_max) { return self::renderResultPage($sp179c14, array('msg' => '该商品限购' . $sp434ec8->buy_max . '件，请重新选择')); } if ($sp434ec8->count < $spb37164) { return self::renderResultPage($sp179c14, array('msg' => '该商品库存不足')); } $sp1596b5 = \App\Pay::find($sp5c7999); if ($sp1596b5 == null || !$sp1596b5->enabled) { return self::renderResultPage($sp179c14, array('msg' => '支付方式未找到，请重新选择')); } $sp440517 = $sp434ec8->price; if ($sp434ec8->price_whole) { $sp36eee5 = json_decode($sp434ec8->price_whole, true); for ($sp133c87 = count($sp36eee5) - 1; $sp133c87 >= 0; $sp133c87--) { if ($spb37164 >= (int) $sp36eee5[$sp133c87][0]) { $sp440517 = (int) $sp36eee5[$sp133c87][1]; break; } } } $sp85e2da = $spb37164 * $sp440517; $sp9a4c28 = $sp85e2da; $sp16da8a = 0; $sp7f5e91 = null; if ($sp434ec8->support_coupon && strlen($sp7109e6) > 0) { $sp1618d0 = \App\Coupon::where('user_id', $sp434ec8->user_id)->where('coupon', $sp7109e6)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp1618d0 as $spf5555a) { if ($spf5555a->category_id === -1 || $spf5555a->category_id === $sp2521ab && ($spf5555a->product_id === -1 || $spf5555a->product_id === $spc00b16)) { if ($spf5555a->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp9a4c28 >= $spf5555a->discount_val) { $sp7f5e91 = $spf5555a; $sp16da8a = $spf5555a->discount_val; break; } if ($spf5555a->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp7f5e91 = $spf5555a; $sp16da8a = (int) round($sp9a4c28 * $spf5555a->discount_val / 100); break; } } } if ($sp7f5e91 === null) { return self::renderResultPage($sp179c14, array('msg' => '优惠券信息错误，请重新输入')); } $sp9a4c28 -= $sp16da8a; } $sp173386 = (int) round($sp9a4c28 * $sp1596b5->fee_system); $spbed003 = $sp9a4c28 - $sp173386; $sp7cfadb = $spcf3e38 ? System::_getInt('sms_price', 10) : 0; $sp9a4c28 += $sp7cfadb; $sp316cb9 = $spb37164 * $sp434ec8->cost; $sp1b0c2d = \App\Order::unique_no(); try { DB::transaction(function () use($sp434ec8, $sp1b0c2d, $sp7f5e91, $sp8762f0, $spa4f097, $spf4810e, $spb37164, $sp316cb9, $sp85e2da, $sp7cfadb, $sp16da8a, $sp9a4c28, $sp1596b5, $sp173386, $spbed003) { if ($sp7f5e91) { $sp7f5e91->status = \App\Coupon::STATUS_USED; $sp7f5e91->count_used++; $sp7f5e91->save(); $sp46d3b9 = '使用优惠券: ' . $sp7f5e91->coupon; } else { $sp46d3b9 = null; } $spd807de = \App\Order::create(array('user_id' => $sp434ec8->user_id, 'order_no' => $sp1b0c2d, 'product_id' => $sp434ec8->id, 'product_name' => $sp434ec8->name, 'count' => $spb37164, 'ip' => Helper::getIP(), 'customer' => $spf4810e, 'contact' => $sp8762f0, 'contact_ext' => $spa4f097, 'cost' => $sp316cb9, 'price' => $sp85e2da, 'sms_price' => $sp7cfadb, 'discount' => $sp16da8a, 'paid' => $sp9a4c28, 'pay_id' => $sp1596b5->id, 'fee' => $sp173386, 'system_fee' => $sp173386, 'income' => $spbed003, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp46d3b9, 'created_at' => Carbon::now())); assert($spd807de !== null); }); } catch (\Throwable $spa356ee) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $spa356ee)); return self::renderResultPage($sp179c14, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($sp9a4c28 === 0) { $this->shipOrder($sp179c14, $sp1b0c2d, $sp9a4c28, null); return redirect('/pay/result/' . $sp1b0c2d); } $speadd0b = $sp1b0c2d; return $this->goPay($sp179c14, $sp1b0c2d, $speadd0b, $sp1596b5, $sp9a4c28); } function pay(Request $sp179c14, $sp1b0c2d) { $spd807de = \App\Order::whereOrderNo($sp1b0c2d)->first(); if ($spd807de == null) { return self::renderResultPage($sp179c14, array('msg' => '订单未找到，请重试')); } if ($spd807de->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp1b0c2d); } $sp102ea3 = 'pay: ' . $spd807de->pay_id; $sp5effa1 = $spd807de->pay; if (!$sp5effa1) { \Log::error($sp102ea3 . ' cannot find Pay'); return $this->renderResultPage($sp179c14, array('msg' => '支付方式未找到')); } $sp102ea3 .= ',' . $sp5effa1->driver; $sp42ccac = json_decode($sp5effa1->config, true); $sp42ccac['payway'] = $sp5effa1->way; $sp42ccac['out_trade_no'] = $sp1b0c2d; try { $this->payApi = GatewayPay::getDriver($sp5effa1->id, $sp5effa1->driver); } catch (\Exception $spa356ee) { \Log::error($sp102ea3 . ' cannot find Driver: ' . $spa356ee->getMessage()); return $this->renderResultPage($sp179c14, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp42ccac, function ($sp1b0c2d, $sp2b3edf, $sp6ace54) use($sp179c14) { try { $this->shipOrder($sp179c14, $sp1b0c2d, $sp2b3edf, $sp6ace54); } catch (\Exception $spa356ee) { $this->renderResultPage($sp179c14, array('success' => false, 'msg' => $spa356ee->getMessage())); } })) { \Log::notice($sp102ea3 . ' already success' . '

'); return redirect('/pay/result/' . $sp1b0c2d); } if ($spd807de->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp179c14, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp434ec8 = Product::where('id', $spd807de->product_id)->where('enabled', 1)->first(); if ($sp434ec8 == null) { return self::renderResultPage($sp179c14, array('msg' => '该商品已下架')); } $sp434ec8->setAttribute('count', count($sp434ec8->cards) ? $sp434ec8->cards[0]->count : 0); if ($sp434ec8->count < $spd807de->count) { return self::renderResultPage($sp179c14, array('msg' => '该商品库存不足')); } $speadd0b = $sp1b0c2d; return $this->goPay($sp179c14, $sp1b0c2d, $speadd0b, $sp5effa1, $spd807de->paid); } function qrcode(Request $sp179c14, $sp1b0c2d, $spd21adc) { $spd807de = \App\Order::whereOrderNo($sp1b0c2d)->with('product')->first(); if ($spd807de == null) { return self::renderResultPage($sp179c14, array('msg' => '订单未找到，请重试')); } if ($spd807de->product_id !== \App\Product::ID_API && $spd807de->product == null) { return self::renderResultPage($sp179c14, array('msg' => '商品未找到，请重试')); } return view('pay/' . $spd21adc, array('pay_id' => $spd807de->pay_id, 'name' => $spd807de->product->name . ' x ' . $spd807de->count . '件', 'amount' => $spd807de->paid, 'qrcode' => $sp179c14->get('url'), 'id' => $sp1b0c2d)); } function qrQuery(Request $sp179c14, $sp5c7999) { $sp7afbbc = $sp179c14->input('id', ''); return self::payReturn($sp179c14, $sp5c7999, $sp7afbbc); } function payReturn(Request $sp179c14, $sp5c7999, $sp7088a3 = '') { $sp102ea3 = 'payReturn: ' . $sp5c7999; \Log::debug($sp102ea3); $sp5effa1 = \App\Pay::where('id', $sp5c7999)->first(); if (!$sp5effa1) { return $this->renderResultPage($sp179c14, array('success' => 0, 'msg' => '支付方式错误')); } $sp102ea3 .= ',' . $sp5effa1->driver; if (strlen($sp7088a3) > 0) { $spd807de = \App\Order::whereOrderNo($sp7088a3)->first(); if ($spd807de && ($spd807de->status === \App\Order::STATUS_PAID || $spd807de->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp102ea3 . ' already success' . '

'); if ($sp179c14->ajax()) { return self::renderResultPage($sp179c14, array('success' => 1, 'data' => '/pay/result/' . $sp7088a3), array('order' => $spd807de)); } else { return redirect('/pay/result/' . $sp7088a3); } } } try { $this->payApi = GatewayPay::getDriver($sp5effa1->id, $sp5effa1->driver); } catch (\Exception $spa356ee) { \Log::error($sp102ea3 . ' cannot find Driver: ' . $spa356ee->getMessage()); return $this->renderResultPage($sp179c14, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp42ccac = json_decode($sp5effa1->config, true); $sp42ccac['out_trade_no'] = $sp7088a3; $sp42ccac['payway'] = $sp5effa1->way; \Log::debug($sp102ea3 . ' will verify'); if ($this->payApi->verify($sp42ccac, function ($sp1b0c2d, $sp2b3edf, $sp6ace54) use($sp179c14, $sp102ea3, &$sp7088a3) { $sp7088a3 = $sp1b0c2d; try { \Log::debug($sp102ea3 . " shipOrder start, order_no: {$sp1b0c2d}, amount: {$sp2b3edf}, trade_no: {$sp6ace54}"); $this->shipOrder($sp179c14, $sp1b0c2d, $sp2b3edf, $sp6ace54); \Log::debug($sp102ea3 . ' shipOrder end, order_no: ' . $sp1b0c2d); } catch (\Exception $spa356ee) { \Log::error($sp102ea3 . ' shipOrder Exception: ' . $spa356ee->getMessage()); } })) { \Log::debug($sp102ea3 . ' verify finished: 1' . '

'); if ($sp179c14->ajax()) { return self::renderResultPage($sp179c14, array('success' => 1, 'data' => '/pay/result/' . $sp7088a3)); } else { return redirect('/pay/result/' . $sp7088a3); } } else { \Log::debug($sp102ea3 . ' verify finished: 0' . '

'); return $this->renderResultPage($sp179c14, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp179c14, $sp5c7999) { $sp102ea3 = 'payNotify pay_id: ' . $sp5c7999; \Log::debug($sp102ea3); $sp5effa1 = \App\Pay::where('id', $sp5c7999)->first(); if (!$sp5effa1) { \Log::error($sp102ea3 . ' cannot find PayModel'); echo 'fail'; die; } $sp102ea3 .= ',' . $sp5effa1->driver; try { $this->payApi = GatewayPay::getDriver($sp5effa1->id, $sp5effa1->driver); } catch (\Exception $spa356ee) { \Log::error($sp102ea3 . ' cannot find Driver: ' . $spa356ee->getMessage()); echo 'fail'; die; } $sp42ccac = json_decode($sp5effa1->config, true); $sp42ccac['payway'] = $sp5effa1->way; $sp42ccac['isNotify'] = true; \Log::debug($sp102ea3 . ' will verify'); $spa6aab5 = $this->payApi->verify($sp42ccac, function ($sp1b0c2d, $sp2b3edf, $sp6ace54) use($sp179c14, $sp102ea3) { try { \Log::debug($sp102ea3 . " shipOrder start, order_no: {$sp1b0c2d}, amount: {$sp2b3edf}, trade_no: {$sp6ace54}"); $this->shipOrder($sp179c14, $sp1b0c2d, $sp2b3edf, $sp6ace54); \Log::debug($sp102ea3 . ' shipOrder end, order_no: ' . $sp1b0c2d); } catch (\Exception $spa356ee) { \Log::error($sp102ea3 . ' shipOrder Exception: ' . $spa356ee->getMessage()); } }); \Log::debug($sp102ea3 . ' notify finished: ' . (int) $spa6aab5 . '

'); die; } function result(Request $sp179c14, $sp1b0c2d) { $spd807de = \App\Order::where('order_no', $sp1b0c2d)->first(); if ($spd807de == null) { return self::renderResultPage($sp179c14, array('msg' => '订单未找到，请重试')); } if ($spd807de->status === \App\Order::STATUS_PAID) { $sp3b5d3a = $spd807de->user->qq; if ($spd807de->product->delivery === \App\Product::DELIVERY_MANUAL) { $spa32dfd = '您购买的为手动充值商品，请耐心等待处理'; } else { $spa32dfd = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($sp3b5d3a) { $spa32dfd .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp3b5d3a . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp3b5d3a . '</a>'; } return self::renderResultPage($sp179c14, array('success' => false, 'title' => '订单已支付', 'msg' => $spa32dfd), array('order' => $spd807de)); } elseif ($spd807de->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp179c14, $spd807de); } return self::renderResultPage($sp179c14, array('success' => false, 'msg' => $spd807de->remark ? '失败原因:<br>' . $spd807de->remark : '订单支付失败，请重试'), array('order' => $spd807de)); } function renderResultPage(Request $sp179c14, $sp8b1f25, $spe55efb = array()) { if ($sp179c14->ajax()) { if (@$sp8b1f25['success']) { return Response::success($sp8b1f25['data']); } else { return Response::fail('error', $sp8b1f25['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp8b1f25, 'data' => $spe55efb), $spe55efb)); } } function shipOrder($sp179c14, $sp1b0c2d, $sp2b3edf, $sp6ace54) { $spd807de = \App\Order::whereOrderNo($sp1b0c2d)->first(); if ($spd807de === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp1b0c2d . ',trade_no:' . $sp6ace54 . ',amount:' . $sp2b3edf . ']. die(\'success\');'); die('success'); } if ($spd807de->paid > $sp2b3edf) { \Log::alert('shipOrder, price may error, order_no:' . $sp1b0c2d . ', paid:' . $spd807de->paid . ', $amount get:' . $sp2b3edf); $spd807de->remark = '支付金额(' . sprintf('%0.2f', $sp2b3edf / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $spd807de->paid / 100) . ')'; $spd807de->save(); throw new \Exception($spd807de->remark); } $sp434ec8 = null; if ($spd807de->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp1b0c2d); if (FundHelper::orderSuccess($spd807de->id, function ($spb1aae1) use($sp6ace54, &$spd807de, &$sp434ec8) { $spd807de = $spb1aae1; if ($spd807de->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $spd807de->order_no . ' already processed! #2'); return false; } $sp434ec8 = $spd807de->product()->lockForUpdate()->firstOrFail(); $spd807de->pay_trade_no = $sp6ace54; $spd807de->paid_at = Carbon::now(); if ($sp434ec8->delivery === \App\Product::DELIVERY_MANUAL) { $spd807de->status = \App\Order::STATUS_PAID; $spd807de->send_status = \App\Order::SEND_STATUS_CARD_UN; $spd807de->saveOrFail(); return true; } if ($sp434ec8->delivery === \App\Product::DELIVERY_API) { $spe48ece = $sp434ec8->createApiCards($spd807de); } else { $spe48ece = Card::where('product_id', $sp434ec8->retail_root->id)->whereRaw('`count_sold`<`count_all`')->take($spd807de->count)->lockForUpdate()->get(); } $spfc9c88 = false; if (count($spe48ece) === $spd807de->count) { $spfc9c88 = true; } else { $spfc9c88 = false; if (count($spe48ece)) { foreach ($spe48ece as $spe677ff) { if ($spe677ff->type === \App\Card::TYPE_REPEAT && $spe677ff->count >= $spd807de->count) { $spe48ece = array($spe677ff); $spfc9c88 = true; break; } } } } if ($spfc9c88 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $spd807de->order_no . ', 购买数量:' . $spd807de->count . ', 卡数量:' . count($spe48ece) . ' 卡密不足(已支付 未发货)'); $spd807de->status = \App\Order::STATUS_PAID; $spd807de->saveOrFail(); return true; } else { $spd81209 = array(); foreach ($spe48ece as $spe677ff) { $spd81209[] = $spe677ff->id; } $spd807de->cards()->attach($spd81209); if (count($spe48ece) === 1 && $spe48ece[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $spd81209[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $spd807de->count))); } else { \App\Card::whereIn('id', $spd81209)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $spd807de->status = \App\Order::STATUS_SUCCESS; $spd807de->saveOrFail(); $sp434ec8->count_sold += $spd807de->count; $sp434ec8->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp434ec8->count_warn > 0 && $sp434ec8->count < $sp434ec8->count_warn) { try { Mail::to($spd807de->user->email)->Queue(new ProductCountWarn($sp434ec8, $sp434ec8->count)); } catch (\Throwable $spa356ee) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $spd807de->product_id, 'email' => $spd807de->user->email, 'exception' => $spa356ee->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $sp15df0e = @json_decode($spd807de->contact_ext, true)['_mail']; if ($sp15df0e) { $spd807de->sendEmail($sp15df0e); } } if ($spd807de->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp3d31d5 = @json_decode($spd807de->contact_ext, true)['_mobile']; if ($sp3d31d5) { $spd807de->sendSms($sp3d31d5); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $spd807de->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp179c14, $spd807de) { return self::renderResultPage($sp179c14, array('success' => true, 'msg' => $spd807de->getSendMessage()), array('card_txt' => join('&#013;&#010;', $spd807de->getCardsArray()), 'order' => $spd807de, 'product' => $spd807de->product)); } }