<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp26e527, $spf82521, $sp6946cc, $spade156, $sp323887) { try { $sp799f04 = json_decode($spade156->config, true); $sp799f04['payway'] = $spade156->way; GatewayPay::getDriver($spade156)->goPay($sp799f04, $spf82521, $sp6946cc, $sp6946cc, $sp323887); return self::renderResultPage($sp26e527, array('success' => false, 'title' => trans('shop.please_wait'), 'msg' => trans('shop.please_wait_for_pay'))); } catch (\Exception $sp7900a2) { return self::renderResultPage($sp26e527, array('msg' => $sp7900a2->getMessage())); } } function buy(Request $sp26e527) { $sp5fb842 = $sp26e527->input('customer'); if (strlen($sp5fb842) !== 32) { return self::renderResultPage($sp26e527, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp26e527->getQueryString() . '
提交内容: ' . var_export($sp5fb842) . ', 提交长度:' . strlen($sp5fb842) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if (System::_getInt('vcode_shop_buy') === 1) { try { $this->validateCaptcha($sp26e527); } catch (\Throwable $sp7900a2) { return self::renderResultPage($sp26e527, array('msg' => trans('validation.captcha'))); } } $sp735ffa = (int) $sp26e527->input('category_id'); $sp517398 = (int) $sp26e527->input('product_id'); $spe95220 = (int) $sp26e527->input('count'); $sp698fdf = $sp26e527->input('coupon'); $spc5e5ef = $sp26e527->input('contact'); $sp8bfa91 = $sp26e527->input('contact_ext') ?? null; $sp78dc77 = !empty(@json_decode($sp8bfa91, true)['_mobile']); $sp951599 = (int) $sp26e527->input('pay_id'); if (!$sp735ffa || !$sp517398) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.required'))); } if (strlen($spc5e5ef) < 1) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.contact.required'))); } $sp08b465 = Category::findOrFail($sp735ffa); $sp222f58 = Product::where('id', $sp517398)->where('category_id', $sp735ffa)->where('enabled', 1)->with(array('user'))->first(); if ($sp222f58 == null || $sp222f58->user == null) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.not_found'))); } if (!$sp222f58->enabled) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.not_on_sell'))); } if ($sp222f58->password_open) { if ($sp222f58->password !== $sp26e527->input('product_password')) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.password_error'))); } } else { if ($sp08b465->password_open) { if ($sp08b465->password !== $sp26e527->input('category_password')) { if ($sp08b465->getTmpPassword() !== $sp26e527->input('category_password')) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.category.password_error'))); } } } } if ($spe95220 < $sp222f58->buy_min) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.buy_min', array('num' => $sp222f58->buy_min)))); } if ($spe95220 > $sp222f58->buy_max) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.buy_max', array('num' => $sp222f58->buy_max)))); } if ($sp222f58->count < $spe95220) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.out_of_stock'))); } $spade156 = \App\Pay::find($sp951599); if ($spade156 == null || !$spade156->enabled) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.pay.not_found'))); } $sp7d8791 = $sp222f58->price; if ($sp222f58->price_whole) { $sp2c950a = json_decode($sp222f58->price_whole, true); for ($sp8f2283 = count($sp2c950a) - 1; $sp8f2283 >= 0; $sp8f2283--) { if ($spe95220 >= (int) $sp2c950a[$sp8f2283][0]) { $sp7d8791 = (int) $sp2c950a[$sp8f2283][1]; break; } } } $spa5d52b = $spe95220 * $sp7d8791; $sp323887 = $spa5d52b; $sp0db951 = 0; $sp265c3c = null; if ($sp222f58->support_coupon && strlen($sp698fdf) > 0) { $sp7aa1e0 = \App\Coupon::where('user_id', $sp222f58->user_id)->where('coupon', $sp698fdf)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp7aa1e0 as $sp2067c6) { if ($sp2067c6->category_id === -1 || $sp2067c6->category_id === $sp735ffa && ($sp2067c6->product_id === -1 || $sp2067c6->product_id === $sp517398)) { if ($sp2067c6->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp323887 >= $sp2067c6->discount_val) { $sp265c3c = $sp2067c6; $sp0db951 = $sp2067c6->discount_val; break; } if ($sp2067c6->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp265c3c = $sp2067c6; $sp0db951 = (int) round($sp323887 * $sp2067c6->discount_val / 100); break; } } } if ($sp265c3c === null) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.coupon.invalid'))); } $sp323887 -= $sp0db951; } $sp0a0f0c = (int) round($sp323887 * $spade156->fee_system); $spfbb0a4 = $sp323887 - $sp0a0f0c; $spca6d7b = $sp78dc77 ? System::_getInt('sms_price', 10) : 0; $sp323887 += $spca6d7b; $sp3d08df = $spe95220 * $sp222f58->cost; $spf82521 = \App\Order::unique_no(); try { DB::transaction(function () use($sp222f58, $spf82521, $sp265c3c, $spc5e5ef, $sp8bfa91, $sp5fb842, $spe95220, $sp3d08df, $spa5d52b, $spca6d7b, $sp0db951, $sp323887, $spade156, $sp0a0f0c, $spfbb0a4) { if ($sp265c3c) { $sp265c3c->status = \App\Coupon::STATUS_USED; $sp265c3c->count_used++; $sp265c3c->save(); $sp869669 = '使用优惠券: ' . $sp265c3c->coupon; } else { $sp869669 = null; } $sp8ac6c1 = new \App\Order(array('user_id' => $sp222f58->user_id, 'order_no' => $spf82521, 'product_id' => $sp222f58->id, 'product_name' => $sp222f58->name, 'count' => $spe95220, 'ip' => Helper::getIP(), 'customer' => $sp5fb842, 'contact' => $spc5e5ef, 'contact_ext' => $sp8bfa91, 'cost' => $sp3d08df, 'price' => $spa5d52b, 'sms_price' => $spca6d7b, 'discount' => $sp0db951, 'paid' => $sp323887, 'pay_id' => $spade156->id, 'fee' => $sp0a0f0c, 'system_fee' => $sp0a0f0c, 'income' => $spfbb0a4, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp869669, 'created_at' => Carbon::now())); $sp8ac6c1->saveOrFail(); }); } catch (\Throwable $sp7900a2) { Log::error('Shop.Pay.buy 下单失败', array('exception' => $sp7900a2)); return self::renderResultPage($sp26e527, array('msg' => trans('shop.pay.internal_error'))); } if ($sp323887 === 0) { $this->shipOrder($sp26e527, $spf82521, $sp323887, null); return redirect()->away(route('pay.result', array($spf82521), false)); } $sp6946cc = $spf82521; return $this->goPay($sp26e527, $spf82521, $sp6946cc, $spade156, $sp323887); } function pay(Request $sp26e527, $spf82521) { $sp8ac6c1 = \App\Order::whereOrderNo($spf82521)->first(); if ($sp8ac6c1 == null) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.order.not_found'))); } if ($sp8ac6c1->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spf82521); } $spb399b9 = 'pay: ' . $sp8ac6c1->pay_id; $spade156 = $sp8ac6c1->pay; if (!$spade156) { \Log::error($spb399b9 . ' cannot find Pay'); return $this->renderResultPage($sp26e527, array('msg' => trans('shop.pay.not_found'))); } $spb399b9 .= ',' . $spade156->driver; $sp799f04 = json_decode($spade156->config, true); $sp799f04['payway'] = $spade156->way; $sp799f04['out_trade_no'] = $spf82521; try { $this->payApi = GatewayPay::getDriver($spade156); } catch (\Exception $sp7900a2) { \Log::error($spb399b9 . ' cannot find Driver: ' . $sp7900a2->getMessage()); return $this->renderResultPage($sp26e527, array('msg' => trans('shop.pay.driver_not_found'))); } if ($this->payApi->verify($sp799f04, function ($spf82521, $sp7f4b1f, $sp6324c8) use($sp26e527) { try { $this->shipOrder($sp26e527, $spf82521, $sp7f4b1f, $sp6324c8); } catch (\Exception $sp7900a2) { $this->renderResultPage($sp26e527, array('success' => false, 'msg' => $sp7900a2->getMessage())); } })) { \Log::notice($spb399b9 . ' already success' . '

'); return redirect('/pay/result/' . $spf82521); } if ($sp8ac6c1->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp26e527, array('msg' => trans('shop.order.expired'))); } $sp222f58 = Product::where('id', $sp8ac6c1->product_id)->where('enabled', 1)->first(); if ($sp222f58 == null) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.not_on_sell'))); } $sp222f58->setAttribute('count', count($sp222f58->cards) ? $sp222f58->cards[0]->count : 0); if ($sp222f58->count < $sp8ac6c1->count) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.out_of_stock'))); } $sp6946cc = $spf82521; return $this->goPay($sp26e527, $spf82521, $sp6946cc, $spade156, $sp8ac6c1->paid); } function qrcode(Request $sp26e527, $spf82521, $spb269e5) { $sp8ac6c1 = \App\Order::whereOrderNo($spf82521)->with('product')->first(); if ($sp8ac6c1 == null) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.order.not_found'))); } if ($sp8ac6c1->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp26e527, array('msg' => trans('shop.order.expired'))); } if ($sp8ac6c1->product_id !== \App\Product::ID_API) { $sp222f58 = $sp8ac6c1->product; if ($sp222f58 == null) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.not_found'))); } if ($sp222f58->count < $sp8ac6c1->count) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.product.out_of_stock'))); } } if (strpos($spb269e5, '..')) { return $this->msg(trans('shop.you_are_sb')); } return view('pay/' . $spb269e5, array('pay_id' => $sp8ac6c1->pay_id, 'name' => $sp8ac6c1->product_id === \App\Product::ID_API ? $sp8ac6c1->api_out_no : $sp8ac6c1->product->name . ' x ' . $sp8ac6c1->count . '件', 'amount' => $sp8ac6c1->paid, 'qrcode' => $sp26e527->get('url'), 'id' => $spf82521)); } function qrQuery(Request $sp26e527, $sp951599) { $spae07d4 = $sp26e527->input('id'); if (isset($spae07d4[5])) { return self::payReturn($sp26e527, $sp951599, $spae07d4); } else { return Response::fail('order_no error'); } } function payReturn(Request $sp26e527, $sp951599, $spf82521 = null) { $spb399b9 = 'payReturn: ' . $sp951599; \Log::debug($spb399b9); $spade156 = \App\Pay::where('id', $sp951599)->first(); if (!$spade156) { return $this->renderResultPage($sp26e527, array('success' => 0, 'msg' => trans('shop.pay.not_found'))); } $spb399b9 .= ',' . $spade156->driver; if ($spf82521 && isset($spf82521[5])) { $sp8ac6c1 = \App\Order::whereOrderNo($spf82521)->firstOrFail(); if ($sp8ac6c1 && ($sp8ac6c1->status === \App\Order::STATUS_PAID || $sp8ac6c1->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spb399b9 . ' already success' . '

'); if ($sp26e527->ajax()) { return self::renderResultPage($sp26e527, array('success' => 1, 'data' => '/pay/result/' . $spf82521), array('order' => $sp8ac6c1)); } else { return redirect('/pay/result/' . $spf82521); } } } try { $this->payApi = GatewayPay::getDriver($spade156); } catch (\Exception $sp7900a2) { \Log::error($spb399b9 . ' cannot find Driver: ' . $sp7900a2->getMessage()); return $this->renderResultPage($sp26e527, array('success' => 0, 'msg' => trans('shop.pay.driver_not_found'))); } $sp799f04 = json_decode($spade156->config, true); $sp799f04['out_trade_no'] = $spf82521; $sp799f04['payway'] = $spade156->way; Log::debug($spb399b9 . ' will verify'); if ($this->payApi->verify($sp799f04, function ($sp5eff06, $sp7f4b1f, $sp6324c8) use($sp26e527, $spb399b9, &$spf82521) { $spf82521 = $sp5eff06; try { Log::debug($spb399b9 . " shipOrder start, order_no: {$spf82521}, amount: {$sp7f4b1f}, trade_no: {$sp6324c8}"); $this->shipOrder($sp26e527, $spf82521, $sp7f4b1f, $sp6324c8); Log::debug($spb399b9 . ' shipOrder end, order_no: ' . $spf82521); } catch (\Exception $sp7900a2) { Log::error($spb399b9 . ' shipOrder Exception: ' . $sp7900a2->getMessage(), array('exception' => $sp7900a2)); } })) { Log::debug($spb399b9 . ' verify finished: 1' . '

'); if ($sp26e527->ajax()) { return self::renderResultPage($sp26e527, array('success' => 1, 'data' => '/pay/result/' . $spf82521)); } else { return redirect('/pay/result/' . $spf82521); } } else { Log::debug($spb399b9 . ' verify finished: 0' . '

'); return $this->renderResultPage($sp26e527, array('success' => 0, 'msg' => trans('shop.pay.verify_failed'))); } } function payNotify(Request $sp26e527, $sp951599) { $spb399b9 = 'payNotify pay_id: ' . $sp951599; Log::debug($spb399b9); $spade156 = \App\Pay::where('id', $sp951599)->first(); if (!$spade156) { Log::error($spb399b9 . ' cannot find PayModel'); echo 'fail'; die; } $spb399b9 .= ',' . $spade156->driver; try { $this->payApi = GatewayPay::getDriver($spade156); } catch (\Exception $sp7900a2) { Log::error($spb399b9 . ' cannot find Driver: ' . $sp7900a2->getMessage()); echo 'fail'; die; } $sp799f04 = json_decode($spade156->config, true); $sp799f04['payway'] = $spade156->way; $sp799f04['isNotify'] = true; Log::debug($spb399b9 . ' will verify'); $spa87332 = $this->payApi->verify($sp799f04, function ($spf82521, $sp7f4b1f, $sp6324c8) use($sp26e527, $spb399b9) { try { Log::debug($spb399b9 . " shipOrder start, order_no: {$spf82521}, amount: {$sp7f4b1f}, trade_no: {$sp6324c8}"); $this->shipOrder($sp26e527, $spf82521, $sp7f4b1f, $sp6324c8); Log::debug($spb399b9 . ' shipOrder end, order_no: ' . $spf82521); } catch (\Exception $sp7900a2) { Log::error($spb399b9 . ' shipOrder Exception: ' . $sp7900a2->getMessage()); } }); Log::debug($spb399b9 . ' notify finished: ' . (int) $spa87332 . '

'); die; } function result(Request $sp26e527, $spf82521) { $sp8ac6c1 = \App\Order::where('order_no', $spf82521)->first(); if ($sp8ac6c1 == null) { return self::renderResultPage($sp26e527, array('msg' => trans('shop.order.not_found'))); } if ($sp8ac6c1->status === \App\Order::STATUS_PAID) { $sp5e9401 = $sp8ac6c1->user->qq; if ($sp8ac6c1->product) { if ($sp8ac6c1->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp93a168 = trans('shop.order.msg_product_manual_please_wait'); } else { $sp93a168 = trans('shop.order.msg_product_out_of_stock_not_send'); } } else { $sp93a168 = trans('shop.order.msg_product_deleted'); } if ($sp5e9401) { $sp93a168 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp5e9401 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp5e9401 . '</a>'; } return self::renderResultPage($sp26e527, array('success' => false, 'title' => trans('shop.order_is_paid'), 'msg' => $sp93a168), array('order' => $sp8ac6c1)); } elseif ($sp8ac6c1->status >= \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp26e527, $sp8ac6c1); } return self::renderResultPage($sp26e527, array('success' => false, 'msg' => $sp8ac6c1->remark ? trans('shop.order_process_failed_because', array('reason' => $sp8ac6c1->remark)) : trans('shop.order_process_failed_default')), array('order' => $sp8ac6c1)); } function renderResultPage(Request $sp26e527, $spdf3304, $sp692366 = array()) { if ($sp26e527->ajax()) { if (@$spdf3304['success']) { return Response::success($spdf3304['data']); } else { return Response::fail('error', $spdf3304['msg']); } } else { return view('pay.result', array_merge(array('result' => $spdf3304, 'data' => $sp692366), $sp692366)); } } function shipOrder($sp26e527, $spf82521, $sp7f4b1f, $sp6324c8) { $sp8ac6c1 = \App\Order::whereOrderNo($spf82521)->first(); if ($sp8ac6c1 === null) { Log::error('shipOrder: No query results for model [App\\Order:' . $spf82521 . ',trade_no:' . $sp6324c8 . ',amount:' . $sp7f4b1f . ']. die(\'success\');'); die('success'); } if ($sp8ac6c1->paid > $sp7f4b1f) { Log::alert('shipOrder, price may error, order_no:' . $spf82521 . ', paid:' . $sp8ac6c1->paid . ', $amount get:' . $sp7f4b1f); $sp8ac6c1->remark = '支付金额(' . sprintf('%0.2f', $sp7f4b1f / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp8ac6c1->paid / 100) . ')'; $sp8ac6c1->save(); throw new \Exception($sp8ac6c1->remark); } $sp222f58 = null; if ($sp8ac6c1->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $spf82521); if (FundHelper::orderSuccess($sp8ac6c1->id, function ($sp1de1d7) use($sp6324c8, &$sp8ac6c1, &$sp222f58) { $sp8ac6c1 = $sp1de1d7; if ($sp8ac6c1->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp8ac6c1->order_no . ' already processed! #2'); return false; } $sp222f58 = $sp8ac6c1->product()->lockForUpdate()->firstOrFail(); $sp8ac6c1->pay_trade_no = $sp6324c8; $sp8ac6c1->paid_at = Carbon::now(); if ($sp222f58->delivery === \App\Product::DELIVERY_MANUAL) { $sp8ac6c1->status = \App\Order::STATUS_PAID; $sp8ac6c1->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp8ac6c1->saveOrFail(); return true; } if ($sp222f58->delivery === \App\Product::DELIVERY_API) { $sp8088f0 = $sp222f58->createApiCards($sp8ac6c1); } else { $sp8088f0 = Card::where('product_id', $sp8ac6c1->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp8ac6c1->count)->lockForUpdate()->get(); } $sp60a922 = false; if (count($sp8088f0) === $sp8ac6c1->count) { $sp60a922 = true; } else { if (count($sp8088f0)) { foreach ($sp8088f0 as $spaeb7b9) { if ($spaeb7b9->type === \App\Card::TYPE_REPEAT && $spaeb7b9->count >= $sp8ac6c1->count) { $sp8088f0 = array($spaeb7b9); $sp60a922 = true; break; } } } } if ($sp60a922 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp8ac6c1->order_no . ', 购买数量:' . $sp8ac6c1->count . ', 卡数量:' . count($sp8088f0) . ' 卡密不足(已支付 未发货)'); $sp8ac6c1->status = \App\Order::STATUS_PAID; $sp8ac6c1->saveOrFail(); return true; } else { $spd9f3f2 = array(); foreach ($sp8088f0 as $spaeb7b9) { $spd9f3f2[] = $spaeb7b9->id; } $sp8ac6c1->cards()->attach($spd9f3f2); if (count($sp8088f0) === 1 && $sp8088f0[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $spd9f3f2[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $sp8ac6c1->count))); } else { \App\Card::whereIn('id', $spd9f3f2)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $sp8ac6c1->status = \App\Order::STATUS_SUCCESS; $sp8ac6c1->saveOrFail(); $sp222f58->count_sold += $sp8ac6c1->count; $sp222f58->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp222f58->count_warn > 0 && $sp222f58->count < $sp222f58->count_warn) { try { Mail::to($sp8ac6c1->user->email)->Queue(new ProductCountWarn($sp222f58, $sp222f58->count)); } catch (\Throwable $sp7900a2) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp8ac6c1->product_id, 'email' => $sp8ac6c1->user->email, 'exception' => $sp7900a2->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spfea1c9 = @json_decode($sp8ac6c1->contact_ext, true)['_mail']; if ($spfea1c9) { $sp8ac6c1->sendEmail($spfea1c9); } } if ($sp8ac6c1->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp7a4107 = @json_decode($sp8ac6c1->contact_ext, true)['_mobile']; if ($sp7a4107) { $sp8ac6c1->sendSms($sp7a4107); } } } else { if ($sp8ac6c1->status !== \App\Order::STATUS_UNPAY) { } else { Log::error('Pay.shipOrder.orderSuccess Failed.'); return FALSE; } } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp8ac6c1->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp26e527, $sp8ac6c1) { return self::renderResultPage($sp26e527, array('success' => true, 'msg' => $sp8ac6c1->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp8ac6c1->getCardsArray()), 'order' => $sp8ac6c1, 'product' => $sp8ac6c1->product)); } }