<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp3c91bd, $spd10b1a, $sp022d9d, $spe4dc53, $spa1bef3) { try { $sp8a1f10 = json_decode($spe4dc53->config, true); $sp8a1f10['payway'] = $spe4dc53->way; GatewayPay::getDriver($spe4dc53)->goPay($sp8a1f10, $spd10b1a, $sp022d9d, $sp022d9d, $spa1bef3); return self::renderResultPage($sp3c91bd, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp96dd17) { return self::renderResultPage($sp3c91bd, array('msg' => $sp96dd17->getMessage())); } } function buy(Request $sp3c91bd) { $sp7eb55c = $sp3c91bd->input('customer'); if (strlen($sp7eb55c) !== 32) { return self::renderResultPage($sp3c91bd, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp3c91bd->getQueryString() . '
提交内容: ' . var_export($sp7eb55c) . ', 提交长度:' . strlen($sp7eb55c) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp6a22d6 = Geetest\API::verify($sp3c91bd->input('geetest_challenge'), $sp3c91bd->input('geetest_validate'), $sp3c91bd->input('geetest_seccode')); if (!$sp6a22d6) { return self::renderResultPage($sp3c91bd, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp8af541 = (int) $sp3c91bd->input('category_id'); $sp5d967e = (int) $sp3c91bd->input('product_id'); $spdba6bb = (int) $sp3c91bd->input('count'); $spda423d = $sp3c91bd->input('coupon'); $sp10107a = $sp3c91bd->input('contact'); $spe00d1f = $sp3c91bd->input('contact_ext') ?? null; $sp9e4a0c = !empty(@json_decode($spe00d1f, true)['_mobile']); $sp38072d = (int) $sp3c91bd->input('pay_id'); if (!$sp8af541 || !$sp5d967e) { return self::renderResultPage($sp3c91bd, array('msg' => '请选择商品')); } if (strlen($sp10107a) < 1) { return self::renderResultPage($sp3c91bd, array('msg' => '请输入联系方式')); } $spa74819 = Category::findOrFail($sp8af541); $spe7d79d = Product::where('id', $sp5d967e)->where('category_id', $sp8af541)->where('enabled', 1)->with(array('user'))->first(); if ($spe7d79d == null || $spe7d79d->user == null) { return self::renderResultPage($sp3c91bd, array('msg' => '该商品未找到，请重新选择')); } if ($spe7d79d->password_open) { if ($spe7d79d->password !== $sp3c91bd->input('product_password')) { return self::renderResultPage($sp3c91bd, array('msg' => '商品密码输入错误')); } } else { if ($spa74819->password_open) { if ($spa74819->password !== $sp3c91bd->input('category_password')) { if ($spa74819->getTmpPassword() !== $sp3c91bd->input('category_password')) { return self::renderResultPage($sp3c91bd, array('msg' => '分类密码输入错误')); } } } } if ($spdba6bb < $spe7d79d->buy_min) { return self::renderResultPage($sp3c91bd, array('msg' => '该商品最少购买' . $spe7d79d->buy_min . '件，请重新选择')); } if ($spdba6bb > $spe7d79d->buy_max) { return self::renderResultPage($sp3c91bd, array('msg' => '该商品限购' . $spe7d79d->buy_max . '件，请重新选择')); } if ($spe7d79d->count < $spdba6bb) { return self::renderResultPage($sp3c91bd, array('msg' => '该商品库存不足')); } $sp1b768e = \App\Pay::find($sp38072d); if ($sp1b768e == null || !$sp1b768e->enabled) { return self::renderResultPage($sp3c91bd, array('msg' => '支付方式未找到，请重新选择')); } $sp7ce46e = $spe7d79d->price; if ($spe7d79d->price_whole) { $spbd77db = json_decode($spe7d79d->price_whole, true); for ($spe89d11 = count($spbd77db) - 1; $spe89d11 >= 0; $spe89d11--) { if ($spdba6bb >= (int) $spbd77db[$spe89d11][0]) { $sp7ce46e = (int) $spbd77db[$spe89d11][1]; break; } } } $sp8af8bc = $spdba6bb * $sp7ce46e; $spa1bef3 = $sp8af8bc; $sp1ec34d = 0; $sp080079 = null; if ($spe7d79d->support_coupon && strlen($spda423d) > 0) { $sp5984c3 = \App\Coupon::where('user_id', $spe7d79d->user_id)->where('coupon', $spda423d)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp5984c3 as $sp9ac414) { if ($sp9ac414->category_id === -1 || $sp9ac414->category_id === $sp8af541 && ($sp9ac414->product_id === -1 || $sp9ac414->product_id === $sp5d967e)) { if ($sp9ac414->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spa1bef3 >= $sp9ac414->discount_val) { $sp080079 = $sp9ac414; $sp1ec34d = $sp9ac414->discount_val; break; } if ($sp9ac414->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp080079 = $sp9ac414; $sp1ec34d = (int) round($spa1bef3 * $sp9ac414->discount_val / 100); break; } } } if ($sp080079 === null) { return self::renderResultPage($sp3c91bd, array('msg' => '优惠券信息错误，请重新输入')); } $spa1bef3 -= $sp1ec34d; } $sp1efa73 = (int) round($spa1bef3 * $sp1b768e->fee_system); $sp216075 = $spa1bef3 - $sp1efa73; $sp736d62 = $sp9e4a0c ? System::_getInt('sms_price', 10) : 0; $spa1bef3 += $sp736d62; $sp971da7 = $spdba6bb * $spe7d79d->cost; $spd10b1a = \App\Order::unique_no(); try { DB::transaction(function () use($spe7d79d, $spd10b1a, $sp080079, $sp10107a, $spe00d1f, $sp7eb55c, $spdba6bb, $sp971da7, $sp8af8bc, $sp736d62, $sp1ec34d, $spa1bef3, $sp1b768e, $sp1efa73, $sp216075) { if ($sp080079) { $sp080079->status = \App\Coupon::STATUS_USED; $sp080079->count_used++; $sp080079->save(); $sp7b8ff5 = '使用优惠券: ' . $sp080079->coupon; } else { $sp7b8ff5 = null; } $sp600a89 = \App\Order::create(array('user_id' => $spe7d79d->user_id, 'order_no' => $spd10b1a, 'product_id' => $spe7d79d->id, 'product_name' => $spe7d79d->name, 'count' => $spdba6bb, 'ip' => Helper::getIP(), 'customer' => $sp7eb55c, 'contact' => $sp10107a, 'contact_ext' => $spe00d1f, 'cost' => $sp971da7, 'price' => $sp8af8bc, 'sms_price' => $sp736d62, 'discount' => $sp1ec34d, 'paid' => $spa1bef3, 'pay_id' => $sp1b768e->id, 'fee' => $sp1efa73, 'system_fee' => $sp1efa73, 'income' => $sp216075, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp7b8ff5, 'created_at' => Carbon::now())); assert($sp600a89 !== null); }); } catch (\Throwable $sp96dd17) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sp96dd17)); return self::renderResultPage($sp3c91bd, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($spa1bef3 === 0) { $this->shipOrder($sp3c91bd, $spd10b1a, $spa1bef3, null); return redirect('/pay/result/' . $spd10b1a); } $sp022d9d = $spd10b1a; return $this->goPay($sp3c91bd, $spd10b1a, $sp022d9d, $sp1b768e, $spa1bef3); } function pay(Request $sp3c91bd, $spd10b1a) { $sp600a89 = \App\Order::whereOrderNo($spd10b1a)->first(); if ($sp600a89 == null) { return self::renderResultPage($sp3c91bd, array('msg' => '订单未找到，请重试')); } if ($sp600a89->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spd10b1a); } $spc2269a = 'pay: ' . $sp600a89->pay_id; $spe4dc53 = $sp600a89->pay; if (!$spe4dc53) { \Log::error($spc2269a . ' cannot find Pay'); return $this->renderResultPage($sp3c91bd, array('msg' => '支付方式未找到')); } $spc2269a .= ',' . $spe4dc53->driver; $sp8a1f10 = json_decode($spe4dc53->config, true); $sp8a1f10['payway'] = $spe4dc53->way; $sp8a1f10['out_trade_no'] = $spd10b1a; try { $this->payApi = GatewayPay::getDriver($spe4dc53); } catch (\Exception $sp96dd17) { \Log::error($spc2269a . ' cannot find Driver: ' . $sp96dd17->getMessage()); return $this->renderResultPage($sp3c91bd, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp8a1f10, function ($spd10b1a, $sp0b9841, $sp3b1b1d) use($sp3c91bd) { try { $this->shipOrder($sp3c91bd, $spd10b1a, $sp0b9841, $sp3b1b1d); } catch (\Exception $sp96dd17) { $this->renderResultPage($sp3c91bd, array('success' => false, 'msg' => $sp96dd17->getMessage())); } })) { \Log::notice($spc2269a . ' already success' . '

'); return redirect('/pay/result/' . $spd10b1a); } if ($sp600a89->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp3c91bd, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $spe7d79d = Product::where('id', $sp600a89->product_id)->where('enabled', 1)->first(); if ($spe7d79d == null) { return self::renderResultPage($sp3c91bd, array('msg' => '该商品已下架')); } $spe7d79d->setAttribute('count', count($spe7d79d->cards) ? $spe7d79d->cards[0]->count : 0); if ($spe7d79d->count < $sp600a89->count) { return self::renderResultPage($sp3c91bd, array('msg' => '该商品库存不足')); } $sp022d9d = $spd10b1a; return $this->goPay($sp3c91bd, $spd10b1a, $sp022d9d, $spe4dc53, $sp600a89->paid); } function qrcode(Request $sp3c91bd, $spd10b1a, $sp08fc35) { $sp600a89 = \App\Order::whereOrderNo($spd10b1a)->with('product')->first(); if ($sp600a89 == null) { return self::renderResultPage($sp3c91bd, array('msg' => '订单未找到，请重试')); } if ($sp600a89->product_id !== \App\Product::ID_API && $sp600a89->product == null) { return self::renderResultPage($sp3c91bd, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp08fc35, array('pay_id' => $sp600a89->pay_id, 'name' => $sp600a89->product->name . ' x ' . $sp600a89->count . '件', 'amount' => $sp600a89->paid, 'qrcode' => $sp3c91bd->get('url'), 'id' => $spd10b1a)); } function qrQuery(Request $sp3c91bd, $sp38072d) { $spcc8735 = $sp3c91bd->input('id', ''); return self::payReturn($sp3c91bd, $sp38072d, $spcc8735); } function payReturn(Request $sp3c91bd, $sp38072d, $spf3e840 = '') { $spc2269a = 'payReturn: ' . $sp38072d; \Log::debug($spc2269a); $spe4dc53 = \App\Pay::where('id', $sp38072d)->first(); if (!$spe4dc53) { return $this->renderResultPage($sp3c91bd, array('success' => 0, 'msg' => '支付方式错误')); } $spc2269a .= ',' . $spe4dc53->driver; if (strlen($spf3e840) > 0) { $sp600a89 = \App\Order::whereOrderNo($spf3e840)->first(); if ($sp600a89 && ($sp600a89->status === \App\Order::STATUS_PAID || $sp600a89->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spc2269a . ' already success' . '

'); if ($sp3c91bd->ajax()) { return self::renderResultPage($sp3c91bd, array('success' => 1, 'data' => '/pay/result/' . $spf3e840), array('order' => $sp600a89)); } else { return redirect('/pay/result/' . $spf3e840); } } } try { $this->payApi = GatewayPay::getDriver($spe4dc53); } catch (\Exception $sp96dd17) { \Log::error($spc2269a . ' cannot find Driver: ' . $sp96dd17->getMessage()); return $this->renderResultPage($sp3c91bd, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp8a1f10 = json_decode($spe4dc53->config, true); $sp8a1f10['out_trade_no'] = $spf3e840; $sp8a1f10['payway'] = $spe4dc53->way; \Log::debug($spc2269a . ' will verify'); if ($this->payApi->verify($sp8a1f10, function ($spd10b1a, $sp0b9841, $sp3b1b1d) use($sp3c91bd, $spc2269a, &$spf3e840) { $spf3e840 = $spd10b1a; try { \Log::debug($spc2269a . " shipOrder start, order_no: {$spd10b1a}, amount: {$sp0b9841}, trade_no: {$sp3b1b1d}"); $this->shipOrder($sp3c91bd, $spd10b1a, $sp0b9841, $sp3b1b1d); \Log::debug($spc2269a . ' shipOrder end, order_no: ' . $spd10b1a); } catch (\Exception $sp96dd17) { \Log::error($spc2269a . ' shipOrder Exception: ' . $sp96dd17->getMessage()); } })) { \Log::debug($spc2269a . ' verify finished: 1' . '

'); if ($sp3c91bd->ajax()) { return self::renderResultPage($sp3c91bd, array('success' => 1, 'data' => '/pay/result/' . $spf3e840)); } else { return redirect('/pay/result/' . $spf3e840); } } else { \Log::debug($spc2269a . ' verify finished: 0' . '

'); return $this->renderResultPage($sp3c91bd, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp3c91bd, $sp38072d) { $spc2269a = 'payNotify pay_id: ' . $sp38072d; \Log::debug($spc2269a); $spe4dc53 = \App\Pay::where('id', $sp38072d)->first(); if (!$spe4dc53) { \Log::error($spc2269a . ' cannot find PayModel'); echo 'fail'; die; } $spc2269a .= ',' . $spe4dc53->driver; try { $this->payApi = GatewayPay::getDriver($spe4dc53); } catch (\Exception $sp96dd17) { \Log::error($spc2269a . ' cannot find Driver: ' . $sp96dd17->getMessage()); echo 'fail'; die; } $sp8a1f10 = json_decode($spe4dc53->config, true); $sp8a1f10['payway'] = $spe4dc53->way; $sp8a1f10['isNotify'] = true; \Log::debug($spc2269a . ' will verify'); $sp6a22d6 = $this->payApi->verify($sp8a1f10, function ($spd10b1a, $sp0b9841, $sp3b1b1d) use($sp3c91bd, $spc2269a) { try { \Log::debug($spc2269a . " shipOrder start, order_no: {$spd10b1a}, amount: {$sp0b9841}, trade_no: {$sp3b1b1d}"); $this->shipOrder($sp3c91bd, $spd10b1a, $sp0b9841, $sp3b1b1d); \Log::debug($spc2269a . ' shipOrder end, order_no: ' . $spd10b1a); } catch (\Exception $sp96dd17) { \Log::error($spc2269a . ' shipOrder Exception: ' . $sp96dd17->getMessage()); } }); \Log::debug($spc2269a . ' notify finished: ' . (int) $sp6a22d6 . '

'); die; } function result(Request $sp3c91bd, $spd10b1a) { $sp600a89 = \App\Order::where('order_no', $spd10b1a)->first(); if ($sp600a89 == null) { return self::renderResultPage($sp3c91bd, array('msg' => '订单未找到，请重试')); } if ($sp600a89->status === \App\Order::STATUS_PAID) { $sp9ee8ed = $sp600a89->user->qq; if ($sp600a89->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp6edbee = '您购买的为手动充值商品，请耐心等待处理'; } else { $sp6edbee = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($sp9ee8ed) { $sp6edbee .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp9ee8ed . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp9ee8ed . '</a>'; } return self::renderResultPage($sp3c91bd, array('success' => false, 'title' => '订单已支付', 'msg' => $sp6edbee), array('order' => $sp600a89)); } elseif ($sp600a89->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp3c91bd, $sp600a89); } return self::renderResultPage($sp3c91bd, array('success' => false, 'msg' => $sp600a89->remark ? '失败原因:<br>' . $sp600a89->remark : '订单支付失败，请重试'), array('order' => $sp600a89)); } function renderResultPage(Request $sp3c91bd, $spf77edc, $spbb494e = array()) { if ($sp3c91bd->ajax()) { if (@$spf77edc['success']) { return Response::success($spf77edc['data']); } else { return Response::fail('error', $spf77edc['msg']); } } else { return view('pay.result', array_merge(array('result' => $spf77edc, 'data' => $spbb494e), $spbb494e)); } } function shipOrder($sp3c91bd, $spd10b1a, $sp0b9841, $sp3b1b1d) { $sp600a89 = \App\Order::whereOrderNo($spd10b1a)->first(); if ($sp600a89 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $spd10b1a . ',trade_no:' . $sp3b1b1d . ',amount:' . $sp0b9841 . ']. die(\'success\');'); die('success'); } if ($sp600a89->paid > $sp0b9841) { \Log::alert('shipOrder, price may error, order_no:' . $spd10b1a . ', paid:' . $sp600a89->paid . ', $amount get:' . $sp0b9841); $sp600a89->remark = '支付金额(' . sprintf('%0.2f', $sp0b9841 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp600a89->paid / 100) . ')'; $sp600a89->save(); throw new \Exception($sp600a89->remark); } $spe7d79d = null; if ($sp600a89->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $spd10b1a); if (FundHelper::orderSuccess($sp600a89->id, function ($spce8535) use($sp3b1b1d, &$sp600a89, &$spe7d79d) { $sp600a89 = $spce8535; if ($sp600a89->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp600a89->order_no . ' already processed! #2'); return false; } $spe7d79d = $sp600a89->product()->lockForUpdate()->firstOrFail(); $sp600a89->pay_trade_no = $sp3b1b1d; $sp600a89->paid_at = Carbon::now(); if ($spe7d79d->delivery === \App\Product::DELIVERY_MANUAL) { $sp600a89->status = \App\Order::STATUS_PAID; $sp600a89->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp600a89->saveOrFail(); return true; } if ($spe7d79d->delivery === \App\Product::DELIVERY_API) { $spf7b822 = $spe7d79d->createApiCards($sp600a89); } else { $spf7b822 = Card::where('product_id', $spe7d79d->retail_root->id)->whereRaw('`count_sold`<`count_all`')->take($sp600a89->count)->lockForUpdate()->get(); } $spc08238 = false; if (count($spf7b822) === $sp600a89->count) { $spc08238 = true; } else { $spc08238 = false; if (count($spf7b822)) { foreach ($spf7b822 as $sp3fbb89) { if ($sp3fbb89->type === \App\Card::TYPE_REPEAT && $sp3fbb89->count >= $sp600a89->count) { $spf7b822 = array($sp3fbb89); $spc08238 = true; break; } } } } if ($spc08238 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp600a89->order_no . ', 购买数量:' . $sp600a89->count . ', 卡数量:' . count($spf7b822) . ' 卡密不足(已支付 未发货)'); $sp600a89->status = \App\Order::STATUS_PAID; $sp600a89->saveOrFail(); return true; } else { $spf36bfb = array(); foreach ($spf7b822 as $sp3fbb89) { $spf36bfb[] = $sp3fbb89->id; } $sp600a89->cards()->attach($spf36bfb); if (count($spf7b822) === 1 && $spf7b822[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $spf36bfb[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $sp600a89->count))); } else { \App\Card::whereIn('id', $spf36bfb)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $sp600a89->status = \App\Order::STATUS_SUCCESS; $sp600a89->saveOrFail(); $spe7d79d->count_sold += $sp600a89->count; $spe7d79d->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($spe7d79d->count_warn > 0 && $spe7d79d->count < $spe7d79d->count_warn) { try { Mail::to($sp600a89->user->email)->Queue(new ProductCountWarn($spe7d79d, $spe7d79d->count)); } catch (\Throwable $sp96dd17) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp600a89->product_id, 'email' => $sp600a89->user->email, 'exception' => $sp96dd17->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $sp030dc3 = @json_decode($sp600a89->contact_ext, true)['_mail']; if ($sp030dc3) { $sp600a89->sendEmail($sp030dc3); } } if ($sp600a89->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spe34083 = @json_decode($sp600a89->contact_ext, true)['_mobile']; if ($spe34083) { $sp600a89->sendSms($spe34083); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp600a89->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp3c91bd, $sp600a89) { return self::renderResultPage($sp3c91bd, array('success' => true, 'msg' => $sp600a89->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp600a89->getCardsArray()), 'order' => $sp600a89, 'product' => $sp600a89->product)); } }