<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp147552, $sp3bc683, $spfc050b, $spf93c32, $sp28017d) { try { $spf516d3 = json_decode($spf93c32->config, true); $spf516d3['payway'] = $spf93c32->way; GatewayPay::getDriver($spf93c32)->goPay($spf516d3, $sp3bc683, $spfc050b, $spfc050b, $sp28017d); return self::renderResultPage($sp147552, array('success' => false, 'title' => trans('shop.please_wait'), 'msg' => trans('shop.please_wait_for_pay'))); } catch (\Exception $spbd4f27) { return self::renderResultPage($sp147552, array('msg' => $spbd4f27->getMessage())); } } function buy(Request $sp147552) { $sp4bdf4a = $sp147552->input('customer'); if (strlen($sp4bdf4a) !== 32) { return self::renderResultPage($sp147552, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp147552->getQueryString() . '
提交内容: ' . var_export($sp4bdf4a) . ', 提交长度:' . strlen($sp4bdf4a) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if (System::_getInt('vcode_shop_buy') === 1) { try { $this->validateCaptcha($sp147552); } catch (\Throwable $spbd4f27) { return self::renderResultPage($sp147552, array('msg' => trans('validation.captcha'))); } } $sp43c1c1 = (int) $sp147552->input('category_id'); $sp52cac1 = (int) $sp147552->input('product_id'); $sp75f1cf = (int) $sp147552->input('count'); $spb940a6 = $sp147552->input('coupon'); $sp974618 = $sp147552->input('contact'); $sp74cf3d = $sp147552->input('contact_ext') ?? null; $spcd0ae7 = !empty(@json_decode($sp74cf3d, true)['_mobile']); $sp47a82e = (int) $sp147552->input('pay_id'); if (!$sp43c1c1 || !$sp52cac1) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.required'))); } if (strlen($sp974618) < 1) { return self::renderResultPage($sp147552, array('msg' => trans('shop.contact.required'))); } $sp62ae3e = Category::findOrFail($sp43c1c1); $sp4aad76 = Product::where('id', $sp52cac1)->where('category_id', $sp43c1c1)->where('enabled', 1)->with(array('user'))->first(); if ($sp4aad76 == null || $sp4aad76->user == null) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.not_found'))); } if (!$sp4aad76->enabled) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.not_on_sell'))); } if ($sp4aad76->password_open) { if ($sp4aad76->password !== $sp147552->input('product_password')) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.password_error'))); } } else { if ($sp62ae3e->password_open) { if ($sp62ae3e->password !== $sp147552->input('category_password')) { if ($sp62ae3e->getTmpPassword() !== $sp147552->input('category_password')) { return self::renderResultPage($sp147552, array('msg' => trans('shop.category.password_error'))); } } } } if ($sp75f1cf < $sp4aad76->buy_min) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.buy_min', array('num' => $sp4aad76->buy_min)))); } if ($sp75f1cf > $sp4aad76->buy_max) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.buy_max', array('num' => $sp4aad76->buy_max)))); } if ($sp4aad76->count < $sp75f1cf) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.out_of_stock'))); } $spf93c32 = \App\Pay::find($sp47a82e); if ($spf93c32 == null || !$spf93c32->enabled) { return self::renderResultPage($sp147552, array('msg' => trans('shop.pay.not_found'))); } $sp6d6e80 = $sp4aad76->price; if ($sp4aad76->price_whole) { $spf49f8b = json_decode($sp4aad76->price_whole, true); for ($sp80b4fe = count($spf49f8b) - 1; $sp80b4fe >= 0; $sp80b4fe--) { if ($sp75f1cf >= (int) $spf49f8b[$sp80b4fe][0]) { $sp6d6e80 = (int) $spf49f8b[$sp80b4fe][1]; break; } } } $spa195a9 = $sp75f1cf * $sp6d6e80; $sp28017d = $spa195a9; $sp146532 = 0; $sp1d1ac5 = null; if ($sp4aad76->support_coupon && strlen($spb940a6) > 0) { $sp76025f = \App\Coupon::where('user_id', $sp4aad76->user_id)->where('coupon', $spb940a6)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp76025f as $sp37c7df) { if ($sp37c7df->category_id === -1 || $sp37c7df->category_id === $sp43c1c1 && ($sp37c7df->product_id === -1 || $sp37c7df->product_id === $sp52cac1)) { if ($sp37c7df->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp28017d >= $sp37c7df->discount_val) { $sp1d1ac5 = $sp37c7df; $sp146532 = $sp37c7df->discount_val; break; } if ($sp37c7df->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp1d1ac5 = $sp37c7df; $sp146532 = (int) round($sp28017d * $sp37c7df->discount_val / 100); break; } } } if ($sp1d1ac5 === null) { return self::renderResultPage($sp147552, array('msg' => trans('shop.coupon.invalid'))); } $sp28017d -= $sp146532; } $spfe91d1 = (int) round($sp28017d * $spf93c32->fee_system); $spc69ad9 = $sp28017d - $spfe91d1; $spfe2e15 = $spcd0ae7 ? System::_getInt('sms_price', 10) : 0; $sp28017d += $spfe2e15; $sp589765 = $sp75f1cf * $sp4aad76->cost; $sp3bc683 = \App\Order::unique_no(); try { DB::transaction(function () use($sp4aad76, $sp3bc683, $sp1d1ac5, $sp974618, $sp74cf3d, $sp4bdf4a, $sp75f1cf, $sp589765, $spa195a9, $spfe2e15, $sp146532, $sp28017d, $spf93c32, $spfe91d1, $spc69ad9) { if ($sp1d1ac5) { $sp1d1ac5->status = \App\Coupon::STATUS_USED; $sp1d1ac5->count_used++; $sp1d1ac5->save(); $sp8d25d5 = '使用优惠券: ' . $sp1d1ac5->coupon; } else { $sp8d25d5 = null; } $sp7c328e = new \App\Order(array('user_id' => $sp4aad76->user_id, 'order_no' => $sp3bc683, 'product_id' => $sp4aad76->id, 'product_name' => $sp4aad76->name, 'count' => $sp75f1cf, 'ip' => Helper::getIP(), 'customer' => $sp4bdf4a, 'contact' => $sp974618, 'contact_ext' => $sp74cf3d, 'cost' => $sp589765, 'price' => $spa195a9, 'sms_price' => $spfe2e15, 'discount' => $sp146532, 'paid' => $sp28017d, 'pay_id' => $spf93c32->id, 'fee' => $spfe91d1, 'system_fee' => $spfe91d1, 'income' => $spc69ad9, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp8d25d5, 'created_at' => Carbon::now())); $sp7c328e->saveOrFail(); }); } catch (\Throwable $spbd4f27) { Log::error('Shop.Pay.buy 下单失败', array('exception' => $spbd4f27)); return self::renderResultPage($sp147552, array('msg' => trans('shop.pay.internal_error'))); } if ($sp28017d === 0) { $this->shipOrder($sp147552, $sp3bc683, $sp28017d, null); return redirect()->away(route('pay.result', array($sp3bc683), false)); } $spfc050b = $sp3bc683; return $this->goPay($sp147552, $sp3bc683, $spfc050b, $spf93c32, $sp28017d); } function pay(Request $sp147552, $sp3bc683) { $sp7c328e = \App\Order::whereOrderNo($sp3bc683)->first(); if ($sp7c328e == null) { return self::renderResultPage($sp147552, array('msg' => trans('shop.order.not_found'))); } if ($sp7c328e->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp3bc683); } $spf63a25 = 'pay: ' . $sp7c328e->pay_id; $spf93c32 = $sp7c328e->pay; if (!$spf93c32) { \Log::error($spf63a25 . ' cannot find Pay'); return $this->renderResultPage($sp147552, array('msg' => trans('shop.pay.not_found'))); } $spf63a25 .= ',' . $spf93c32->driver; $spf516d3 = json_decode($spf93c32->config, true); $spf516d3['payway'] = $spf93c32->way; $spf516d3['out_trade_no'] = $sp3bc683; try { $this->payApi = GatewayPay::getDriver($spf93c32); } catch (\Exception $spbd4f27) { \Log::error($spf63a25 . ' cannot find Driver: ' . $spbd4f27->getMessage()); return $this->renderResultPage($sp147552, array('msg' => trans('shop.pay.driver_not_found'))); } if ($this->payApi->verify($spf516d3, function ($sp3bc683, $sp6d2f0f, $sp7926dc) use($sp147552) { try { $this->shipOrder($sp147552, $sp3bc683, $sp6d2f0f, $sp7926dc); } catch (\Exception $spbd4f27) { $this->renderResultPage($sp147552, array('success' => false, 'msg' => $spbd4f27->getMessage())); } })) { \Log::notice($spf63a25 . ' already success' . '

'); return redirect('/pay/result/' . $sp3bc683); } if ($sp7c328e->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp147552, array('msg' => trans('shop.order.expired'))); } $sp4aad76 = Product::where('id', $sp7c328e->product_id)->where('enabled', 1)->first(); if ($sp4aad76 == null) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.not_on_sell'))); } $sp4aad76->setAttribute('count', count($sp4aad76->cards) ? $sp4aad76->cards[0]->count : 0); if ($sp4aad76->count < $sp7c328e->count) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.out_of_stock'))); } $spfc050b = $sp3bc683; return $this->goPay($sp147552, $sp3bc683, $spfc050b, $spf93c32, $sp7c328e->paid); } function qrcode(Request $sp147552, $sp3bc683, $sp3abcb2) { $sp7c328e = \App\Order::whereOrderNo($sp3bc683)->with('product')->first(); if ($sp7c328e == null) { return self::renderResultPage($sp147552, array('msg' => trans('shop.order.not_found'))); } if ($sp7c328e->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp147552, array('msg' => trans('shop.order.expired'))); } if ($sp7c328e->product_id !== \App\Product::ID_API) { $sp4aad76 = $sp7c328e->product; if ($sp4aad76 == null) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.not_found'))); } if ($sp4aad76->count < $sp7c328e->count) { return self::renderResultPage($sp147552, array('msg' => trans('shop.product.out_of_stock'))); } } if (strpos($sp3abcb2, '..')) { return $this->msg(trans('shop.you_are_sb')); } return view('pay/' . $sp3abcb2, array('pay_id' => $sp7c328e->pay_id, 'name' => $sp7c328e->product_id === \App\Product::ID_API ? $sp7c328e->api_out_no : $sp7c328e->product->name . ' x ' . $sp7c328e->count . '件', 'amount' => $sp7c328e->paid, 'qrcode' => $sp147552->get('url'), 'id' => $sp3bc683)); } function qrQuery(Request $sp147552, $sp47a82e) { $sp8ece1e = $sp147552->input('id'); if (isset($sp8ece1e[5])) { return self::payReturn($sp147552, $sp47a82e, $sp8ece1e); } else { return Response::fail('order_no error'); } } function payReturn(Request $sp147552, $sp47a82e, $sp3bc683 = null) { $spf63a25 = 'payReturn: ' . $sp47a82e; \Log::debug($spf63a25); $spf93c32 = \App\Pay::where('id', $sp47a82e)->first(); if (!$spf93c32) { return $this->renderResultPage($sp147552, array('success' => 0, 'msg' => trans('shop.pay.not_found'))); } $spf63a25 .= ',' . $spf93c32->driver; if ($sp3bc683 && isset($sp3bc683[5])) { $sp7c328e = \App\Order::whereOrderNo($sp3bc683)->firstOrFail(); if ($sp7c328e && ($sp7c328e->status === \App\Order::STATUS_PAID || $sp7c328e->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spf63a25 . ' already success' . '

'); if ($sp147552->ajax()) { return self::renderResultPage($sp147552, array('success' => 1, 'data' => '/pay/result/' . $sp3bc683), array('order' => $sp7c328e)); } else { return redirect('/pay/result/' . $sp3bc683); } } } try { $this->payApi = GatewayPay::getDriver($spf93c32); } catch (\Exception $spbd4f27) { \Log::error($spf63a25 . ' cannot find Driver: ' . $spbd4f27->getMessage()); return $this->renderResultPage($sp147552, array('success' => 0, 'msg' => trans('shop.pay.driver_not_found'))); } $spf516d3 = json_decode($spf93c32->config, true); $spf516d3['out_trade_no'] = $sp3bc683; $spf516d3['payway'] = $spf93c32->way; Log::debug($spf63a25 . ' will verify'); if ($this->payApi->verify($spf516d3, function ($spb04caf, $sp6d2f0f, $sp7926dc) use($sp147552, $spf63a25, &$sp3bc683) { $sp3bc683 = $spb04caf; try { Log::debug($spf63a25 . " shipOrder start, order_no: {$sp3bc683}, amount: {$sp6d2f0f}, trade_no: {$sp7926dc}"); $this->shipOrder($sp147552, $sp3bc683, $sp6d2f0f, $sp7926dc); Log::debug($spf63a25 . ' shipOrder end, order_no: ' . $sp3bc683); } catch (\Exception $spbd4f27) { Log::error($spf63a25 . ' shipOrder Exception: ' . $spbd4f27->getMessage(), array('exception' => $spbd4f27)); } })) { Log::debug($spf63a25 . ' verify finished: 1' . '

'); if ($sp147552->ajax()) { return self::renderResultPage($sp147552, array('success' => 1, 'data' => '/pay/result/' . $sp3bc683)); } else { return redirect('/pay/result/' . $sp3bc683); } } else { Log::debug($spf63a25 . ' verify finished: 0' . '

'); return $this->renderResultPage($sp147552, array('success' => 0, 'msg' => trans('shop.pay.verify_failed'))); } } function payNotify(Request $sp147552, $sp47a82e) { $spf63a25 = 'payNotify pay_id: ' . $sp47a82e; Log::debug($spf63a25); $spf93c32 = \App\Pay::where('id', $sp47a82e)->first(); if (!$spf93c32) { Log::error($spf63a25 . ' cannot find PayModel'); echo 'fail'; die; } $spf63a25 .= ',' . $spf93c32->driver; try { $this->payApi = GatewayPay::getDriver($spf93c32); } catch (\Exception $spbd4f27) { Log::error($spf63a25 . ' cannot find Driver: ' . $spbd4f27->getMessage()); echo 'fail'; die; } $spf516d3 = json_decode($spf93c32->config, true); $spf516d3['payway'] = $spf93c32->way; $spf516d3['isNotify'] = true; Log::debug($spf63a25 . ' will verify'); $sp296935 = $this->payApi->verify($spf516d3, function ($sp3bc683, $sp6d2f0f, $sp7926dc) use($sp147552, $spf63a25) { try { Log::debug($spf63a25 . " shipOrder start, order_no: {$sp3bc683}, amount: {$sp6d2f0f}, trade_no: {$sp7926dc}"); $this->shipOrder($sp147552, $sp3bc683, $sp6d2f0f, $sp7926dc); Log::debug($spf63a25 . ' shipOrder end, order_no: ' . $sp3bc683); } catch (\Exception $spbd4f27) { Log::error($spf63a25 . ' shipOrder Exception: ' . $spbd4f27->getMessage()); } }); Log::debug($spf63a25 . ' notify finished: ' . (int) $sp296935 . '

'); die; } function result(Request $sp147552, $sp3bc683) { $sp7c328e = \App\Order::where('order_no', $sp3bc683)->first(); if ($sp7c328e == null) { return self::renderResultPage($sp147552, array('msg' => trans('shop.order.not_found'))); } if ($sp7c328e->status === \App\Order::STATUS_PAID) { $spdc53ff = $sp7c328e->user->qq; if ($sp7c328e->product) { if ($sp7c328e->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp7ee4b9 = trans('shop.order.msg_product_manual_please_wait'); } else { $sp7ee4b9 = trans('shop.order.msg_product_out_of_stock_not_send'); } } else { $sp7ee4b9 = trans('shop.order.msg_product_deleted'); } if ($spdc53ff) { $sp7ee4b9 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spdc53ff . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spdc53ff . '</a>'; } return self::renderResultPage($sp147552, array('success' => false, 'title' => trans('shop.order_is_paid'), 'msg' => $sp7ee4b9), array('order' => $sp7c328e)); } elseif ($sp7c328e->status >= \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp147552, $sp7c328e); } return self::renderResultPage($sp147552, array('success' => false, 'msg' => $sp7c328e->remark ? trans('shop.order_process_failed_because', array('reason' => $sp7c328e->remark)) : trans('shop.order_process_failed_default')), array('order' => $sp7c328e)); } function renderResultPage(Request $sp147552, $sp02366f, $sp6bb6c7 = array()) { if ($sp147552->ajax()) { if (@$sp02366f['success']) { return Response::success($sp02366f['data']); } else { return Response::fail('error', $sp02366f['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp02366f, 'data' => $sp6bb6c7), $sp6bb6c7)); } } function shipOrder($sp147552, $sp3bc683, $sp6d2f0f, $sp7926dc) { $sp7c328e = \App\Order::whereOrderNo($sp3bc683)->first(); if ($sp7c328e === null) { Log::error('shipOrder: No query results for model [App\\Order:' . $sp3bc683 . ',trade_no:' . $sp7926dc . ',amount:' . $sp6d2f0f . ']. die(\'success\');'); die('success'); } if ($sp7c328e->paid > $sp6d2f0f) { Log::alert('shipOrder, price may error, order_no:' . $sp3bc683 . ', paid:' . $sp7c328e->paid . ', $amount get:' . $sp6d2f0f); $sp7c328e->remark = '支付金额(' . sprintf('%0.2f', $sp6d2f0f / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp7c328e->paid / 100) . ')'; $sp7c328e->save(); throw new \Exception($sp7c328e->remark); } $sp4aad76 = null; if ($sp7c328e->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp3bc683); if (FundHelper::orderSuccess($sp7c328e->id, function ($spa121e9) use($sp7926dc, &$sp7c328e, &$sp4aad76) { $sp7c328e = $spa121e9; if ($sp7c328e->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp7c328e->order_no . ' already processed! #2'); return false; } $sp4aad76 = $sp7c328e->product()->lockForUpdate()->firstOrFail(); $sp7c328e->pay_trade_no = $sp7926dc; $sp7c328e->paid_at = Carbon::now(); if ($sp4aad76->delivery === \App\Product::DELIVERY_MANUAL) { $sp7c328e->status = \App\Order::STATUS_PAID; $sp7c328e->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp7c328e->saveOrFail(); return true; } if ($sp4aad76->delivery === \App\Product::DELIVERY_API) { $sp8bdf7a = $sp4aad76->createApiCards($sp7c328e); } else { $sp8bdf7a = Card::where('product_id', $sp7c328e->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp7c328e->count)->lockForUpdate()->get(); } $sp978a8e = false; if (count($sp8bdf7a) === $sp7c328e->count) { $sp978a8e = true; } else { if (count($sp8bdf7a)) { foreach ($sp8bdf7a as $spb3ffd5) { if ($spb3ffd5->type === \App\Card::TYPE_REPEAT && $spb3ffd5->count >= $sp7c328e->count) { $sp8bdf7a = array($spb3ffd5); $sp978a8e = true; break; } } } } if ($sp978a8e === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp7c328e->order_no . ', 购买数量:' . $sp7c328e->count . ', 卡数量:' . count($sp8bdf7a) . ' 卡密不足(已支付 未发货)'); $sp7c328e->status = \App\Order::STATUS_PAID; $sp7c328e->saveOrFail(); return true; } else { $spcd9244 = array(); foreach ($sp8bdf7a as $spb3ffd5) { $spcd9244[] = $spb3ffd5->id; } $sp7c328e->cards()->attach($spcd9244); if (count($sp8bdf7a) === 1 && $sp8bdf7a[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $spcd9244[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $sp7c328e->count))); } else { \App\Card::whereIn('id', $spcd9244)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $sp7c328e->status = \App\Order::STATUS_SUCCESS; $sp7c328e->saveOrFail(); $sp4aad76->count_sold += $sp7c328e->count; $sp4aad76->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp4aad76->count_warn > 0 && $sp4aad76->count < $sp4aad76->count_warn) { try { Mail::to($sp7c328e->user->email)->Queue(new ProductCountWarn($sp4aad76, $sp4aad76->count)); } catch (\Throwable $spbd4f27) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp7c328e->product_id, 'email' => $sp7c328e->user->email, 'exception' => $spbd4f27->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $speab7e1 = @json_decode($sp7c328e->contact_ext, true)['_mail']; if ($speab7e1) { $sp7c328e->sendEmail($speab7e1); } } if ($sp7c328e->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp4f5b65 = @json_decode($sp7c328e->contact_ext, true)['_mobile']; if ($sp4f5b65) { $sp7c328e->sendSms($sp4f5b65); } } } else { if ($sp7c328e->status !== \App\Order::STATUS_UNPAY) { } else { Log::error('Pay.shipOrder.orderSuccess Failed.'); return FALSE; } } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp7c328e->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp147552, $sp7c328e) { return self::renderResultPage($sp147552, array('success' => true, 'msg' => $sp7c328e->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp7c328e->getCardsArray()), 'order' => $sp7c328e, 'product' => $sp7c328e->product)); } }