<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spccbfb6, $spebe6f4, $sp8dde87, $spec443a, $spaa4c78) { try { $sp3125db = json_decode($spec443a->config, true); $sp3125db['payway'] = $spec443a->way; GatewayPay::getDriver($spec443a)->goPay($sp3125db, $spebe6f4, $sp8dde87, $sp8dde87, $spaa4c78); return self::renderResultPage($spccbfb6, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $spdfbc42) { return self::renderResultPage($spccbfb6, array('msg' => $spdfbc42->getMessage())); } } function buy(Request $spccbfb6) { $spd3051c = $spccbfb6->input('customer'); if (strlen($spd3051c) !== 32) { return self::renderResultPage($spccbfb6, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spccbfb6->getQueryString() . '
提交内容: ' . var_export($spd3051c) . ', 提交长度:' . strlen($spd3051c) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if (System::_getInt('vcode_shop_buy') === 1) { $this->validateCaptcha($spccbfb6); } $sp76eadf = (int) $spccbfb6->input('category_id'); $spa981f6 = (int) $spccbfb6->input('product_id'); $spc2ebcd = (int) $spccbfb6->input('count'); $spa389e8 = $spccbfb6->input('coupon'); $sp74c357 = $spccbfb6->input('contact'); $sp353605 = $spccbfb6->input('contact_ext') ?? null; $sp4b3275 = !empty(@json_decode($sp353605, true)['_mobile']); $sp697b06 = (int) $spccbfb6->input('pay_id'); if (!$sp76eadf || !$spa981f6) { return self::renderResultPage($spccbfb6, array('msg' => '请选择商品')); } if (strlen($sp74c357) < 1) { return self::renderResultPage($spccbfb6, array('msg' => '请输入联系方式')); } $sp6e5e3d = Category::findOrFail($sp76eadf); $sp886a9b = Product::where('id', $spa981f6)->where('category_id', $sp76eadf)->where('enabled', 1)->with(array('user'))->first(); if ($sp886a9b == null || $sp886a9b->user == null) { return self::renderResultPage($spccbfb6, array('msg' => '该商品未找到，请重新选择')); } if ($sp886a9b->password_open) { if ($sp886a9b->password !== $spccbfb6->input('product_password')) { return self::renderResultPage($spccbfb6, array('msg' => '商品密码输入错误')); } } else { if ($sp6e5e3d->password_open) { if ($sp6e5e3d->password !== $spccbfb6->input('category_password')) { if ($sp6e5e3d->getTmpPassword() !== $spccbfb6->input('category_password')) { return self::renderResultPage($spccbfb6, array('msg' => '分类密码输入错误')); } } } } if ($spc2ebcd < $sp886a9b->buy_min) { return self::renderResultPage($spccbfb6, array('msg' => '该商品最少购买' . $sp886a9b->buy_min . '件，请重新选择')); } if ($spc2ebcd > $sp886a9b->buy_max) { return self::renderResultPage($spccbfb6, array('msg' => '该商品限购' . $sp886a9b->buy_max . '件，请重新选择')); } if ($sp886a9b->count < $spc2ebcd) { return self::renderResultPage($spccbfb6, array('msg' => '该商品库存不足')); } $spec443a = \App\Pay::find($sp697b06); if ($spec443a == null || !$spec443a->enabled) { return self::renderResultPage($spccbfb6, array('msg' => '支付方式未找到，请重新选择')); } $sp8b5ff4 = $sp886a9b->price; if ($sp886a9b->price_whole) { $sp5467a7 = json_decode($sp886a9b->price_whole, true); for ($spa4cc2a = count($sp5467a7) - 1; $spa4cc2a >= 0; $spa4cc2a--) { if ($spc2ebcd >= (int) $sp5467a7[$spa4cc2a][0]) { $sp8b5ff4 = (int) $sp5467a7[$spa4cc2a][1]; break; } } } $spbd6b66 = $spc2ebcd * $sp8b5ff4; $spaa4c78 = $spbd6b66; $spe38003 = 0; $sp9afd58 = null; if ($sp886a9b->support_coupon && strlen($spa389e8) > 0) { $sp44a76a = \App\Coupon::where('user_id', $sp886a9b->user_id)->where('coupon', $spa389e8)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp44a76a as $spbae5bf) { if ($spbae5bf->category_id === -1 || $spbae5bf->category_id === $sp76eadf && ($spbae5bf->product_id === -1 || $spbae5bf->product_id === $spa981f6)) { if ($spbae5bf->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spaa4c78 >= $spbae5bf->discount_val) { $sp9afd58 = $spbae5bf; $spe38003 = $spbae5bf->discount_val; break; } if ($spbae5bf->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp9afd58 = $spbae5bf; $spe38003 = (int) round($spaa4c78 * $spbae5bf->discount_val / 100); break; } } } if ($sp9afd58 === null) { return self::renderResultPage($spccbfb6, array('msg' => '优惠券信息错误，请重新输入')); } $spaa4c78 -= $spe38003; } $sp74e915 = (int) round($spaa4c78 * $spec443a->fee_system); $spda814b = $spaa4c78 - $sp74e915; $sp709fd1 = $sp4b3275 ? System::_getInt('sms_price', 10) : 0; $spaa4c78 += $sp709fd1; $sp1f80b5 = $spc2ebcd * $sp886a9b->cost; $spebe6f4 = \App\Order::unique_no(); try { DB::transaction(function () use($sp886a9b, $spebe6f4, $sp9afd58, $sp74c357, $sp353605, $spd3051c, $spc2ebcd, $sp1f80b5, $spbd6b66, $sp709fd1, $spe38003, $spaa4c78, $spec443a, $sp74e915, $spda814b) { if ($sp9afd58) { $sp9afd58->status = \App\Coupon::STATUS_USED; $sp9afd58->count_used++; $sp9afd58->save(); $sp84159d = '使用优惠券: ' . $sp9afd58->coupon; } else { $sp84159d = null; } $spcd0b15 = new \App\Order(array('user_id' => $sp886a9b->user_id, 'order_no' => $spebe6f4, 'product_id' => $sp886a9b->id, 'product_name' => $sp886a9b->name, 'count' => $spc2ebcd, 'ip' => Helper::getIP(), 'customer' => $spd3051c, 'contact' => $sp74c357, 'contact_ext' => $sp353605, 'cost' => $sp1f80b5, 'price' => $spbd6b66, 'sms_price' => $sp709fd1, 'discount' => $spe38003, 'paid' => $spaa4c78, 'pay_id' => $spec443a->id, 'fee' => $sp74e915, 'system_fee' => $sp74e915, 'income' => $spda814b, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp84159d, 'created_at' => Carbon::now())); $spcd0b15->saveOrFail(); }); } catch (\Throwable $spdfbc42) { Log::error('Shop.Pay.buy 下单失败', array('exception' => $spdfbc42)); return self::renderResultPage($spccbfb6, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($spaa4c78 === 0) { $this->shipOrder($spccbfb6, $spebe6f4, $spaa4c78, null); return route('pay.result', array($spebe6f4), false); } $sp8dde87 = $spebe6f4; return $this->goPay($spccbfb6, $spebe6f4, $sp8dde87, $spec443a, $spaa4c78); } function pay(Request $spccbfb6, $spebe6f4) { $spcd0b15 = \App\Order::whereOrderNo($spebe6f4)->first(); if ($spcd0b15 == null) { return self::renderResultPage($spccbfb6, array('msg' => '订单未找到，请重试')); } if ($spcd0b15->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spebe6f4); } $spf343c3 = 'pay: ' . $spcd0b15->pay_id; $spec443a = $spcd0b15->pay; if (!$spec443a) { \Log::error($spf343c3 . ' cannot find Pay'); return $this->renderResultPage($spccbfb6, array('msg' => '支付方式未找到')); } $spf343c3 .= ',' . $spec443a->driver; $sp3125db = json_decode($spec443a->config, true); $sp3125db['payway'] = $spec443a->way; $sp3125db['out_trade_no'] = $spebe6f4; try { $this->payApi = GatewayPay::getDriver($spec443a); } catch (\Exception $spdfbc42) { \Log::error($spf343c3 . ' cannot find Driver: ' . $spdfbc42->getMessage()); return $this->renderResultPage($spccbfb6, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp3125db, function ($spebe6f4, $sp5a0200, $spefc3d0) use($spccbfb6) { try { $this->shipOrder($spccbfb6, $spebe6f4, $sp5a0200, $spefc3d0); } catch (\Exception $spdfbc42) { $this->renderResultPage($spccbfb6, array('success' => false, 'msg' => $spdfbc42->getMessage())); } })) { \Log::notice($spf343c3 . ' already success' . '

'); return redirect('/pay/result/' . $spebe6f4); } if ($spcd0b15->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spccbfb6, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp886a9b = Product::where('id', $spcd0b15->product_id)->where('enabled', 1)->first(); if ($sp886a9b == null) { return self::renderResultPage($spccbfb6, array('msg' => '该商品已下架')); } $sp886a9b->setAttribute('count', count($sp886a9b->cards) ? $sp886a9b->cards[0]->count : 0); if ($sp886a9b->count < $spcd0b15->count) { return self::renderResultPage($spccbfb6, array('msg' => '该商品库存不足')); } $sp8dde87 = $spebe6f4; return $this->goPay($spccbfb6, $spebe6f4, $sp8dde87, $spec443a, $spcd0b15->paid); } function qrcode(Request $spccbfb6, $spebe6f4, $sp5cda4b) { $spcd0b15 = \App\Order::whereOrderNo($spebe6f4)->with('product')->first(); if ($spcd0b15 == null) { return self::renderResultPage($spccbfb6, array('msg' => '订单未找到，请重试')); } if ($spcd0b15->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spccbfb6, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } if ($spcd0b15->product_id !== \App\Product::ID_API) { $sp886a9b = $spcd0b15->product; if ($sp886a9b == null) { return self::renderResultPage($spccbfb6, array('msg' => '商品未找到，请重试')); } if ($sp886a9b->count < $spcd0b15->count) { return self::renderResultPage($spccbfb6, array('msg' => '该商品库存不足')); } } if (strpos($sp5cda4b, '..')) { return $this->msg('你玩你妈呢'); } return view('pay/' . $sp5cda4b, array('pay_id' => $spcd0b15->pay_id, 'name' => $spcd0b15->product_id === \App\Product::ID_API ? $spcd0b15->api_out_no : $spcd0b15->product->name . ' x ' . $spcd0b15->count . '件', 'amount' => $spcd0b15->paid, 'qrcode' => $spccbfb6->get('url'), 'id' => $spebe6f4)); } function qrQuery(Request $spccbfb6, $sp697b06) { $spcee7f9 = $spccbfb6->input('id', ''); return self::payReturn($spccbfb6, $sp697b06, $spcee7f9); } function payReturn(Request $spccbfb6, $sp697b06, $spebe6f4 = '') { $spf343c3 = 'payReturn: ' . $sp697b06; \Log::debug($spf343c3); $spec443a = \App\Pay::where('id', $sp697b06)->first(); if (!$spec443a) { return $this->renderResultPage($spccbfb6, array('success' => 0, 'msg' => '支付方式错误')); } $spf343c3 .= ',' . $spec443a->driver; if (strlen($spebe6f4) > 0) { $spcd0b15 = \App\Order::whereOrderNo($spebe6f4)->firstOrFail(); if ($spcd0b15 && ($spcd0b15->status === \App\Order::STATUS_PAID || $spcd0b15->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spf343c3 . ' already success' . '

'); if ($spccbfb6->ajax()) { return self::renderResultPage($spccbfb6, array('success' => 1, 'data' => '/pay/result/' . $spebe6f4), array('order' => $spcd0b15)); } else { return redirect('/pay/result/' . $spebe6f4); } } } try { $this->payApi = GatewayPay::getDriver($spec443a); } catch (\Exception $spdfbc42) { \Log::error($spf343c3 . ' cannot find Driver: ' . $spdfbc42->getMessage()); return $this->renderResultPage($spccbfb6, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp3125db = json_decode($spec443a->config, true); $sp3125db['out_trade_no'] = $spebe6f4; $sp3125db['payway'] = $spec443a->way; Log::debug($spf343c3 . ' will verify'); if ($this->payApi->verify($sp3125db, function ($sp440b29, $sp5a0200, $spefc3d0) use($spccbfb6, $spf343c3, &$spebe6f4) { $spebe6f4 = $sp440b29; try { Log::debug($spf343c3 . " shipOrder start, order_no: {$spebe6f4}, amount: {$sp5a0200}, trade_no: {$spefc3d0}"); $this->shipOrder($spccbfb6, $spebe6f4, $sp5a0200, $spefc3d0); Log::debug($spf343c3 . ' shipOrder end, order_no: ' . $spebe6f4); } catch (\Exception $spdfbc42) { Log::error($spf343c3 . ' shipOrder Exception: ' . $spdfbc42->getMessage(), array('exception' => $spdfbc42)); } })) { Log::debug($spf343c3 . ' verify finished: 1' . '

'); if ($spccbfb6->ajax()) { return self::renderResultPage($spccbfb6, array('success' => 1, 'data' => '/pay/result/' . $spebe6f4)); } else { return redirect('/pay/result/' . $spebe6f4); } } else { Log::debug($spf343c3 . ' verify finished: 0' . '

'); return $this->renderResultPage($spccbfb6, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spccbfb6, $sp697b06) { $spf343c3 = 'payNotify pay_id: ' . $sp697b06; Log::debug($spf343c3); $spec443a = \App\Pay::where('id', $sp697b06)->first(); if (!$spec443a) { Log::error($spf343c3 . ' cannot find PayModel'); echo 'fail'; die; } $spf343c3 .= ',' . $spec443a->driver; try { $this->payApi = GatewayPay::getDriver($spec443a); } catch (\Exception $spdfbc42) { Log::error($spf343c3 . ' cannot find Driver: ' . $spdfbc42->getMessage()); echo 'fail'; die; } $sp3125db = json_decode($spec443a->config, true); $sp3125db['payway'] = $spec443a->way; $sp3125db['isNotify'] = true; Log::debug($spf343c3 . ' will verify'); $spa51230 = $this->payApi->verify($sp3125db, function ($spebe6f4, $sp5a0200, $spefc3d0) use($spccbfb6, $spf343c3) { try { Log::debug($spf343c3 . " shipOrder start, order_no: {$spebe6f4}, amount: {$sp5a0200}, trade_no: {$spefc3d0}"); $this->shipOrder($spccbfb6, $spebe6f4, $sp5a0200, $spefc3d0); Log::debug($spf343c3 . ' shipOrder end, order_no: ' . $spebe6f4); } catch (\Exception $spdfbc42) { Log::error($spf343c3 . ' shipOrder Exception: ' . $spdfbc42->getMessage()); } }); Log::debug($spf343c3 . ' notify finished: ' . (int) $spa51230 . '

'); die; } function result(Request $spccbfb6, $spebe6f4) { $spcd0b15 = \App\Order::where('order_no', $spebe6f4)->first(); if ($spcd0b15 == null) { return self::renderResultPage($spccbfb6, array('msg' => '订单未找到，请重试')); } if ($spcd0b15->status === \App\Order::STATUS_PAID) { $sp7c3ff5 = $spcd0b15->user->qq; if ($spcd0b15->product) { if ($spcd0b15->product->delivery === \App\Product::DELIVERY_MANUAL) { $spabf7f9 = '您购买的为手动充值商品，请耐心等待处理'; } else { $spabf7f9 = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } } else { $spabf7f9 = '卖家已删除此商品，请联系客服退款'; } if ($sp7c3ff5) { $spabf7f9 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp7c3ff5 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp7c3ff5 . '</a>'; } return self::renderResultPage($spccbfb6, array('success' => false, 'title' => '订单已支付', 'msg' => $spabf7f9), array('order' => $spcd0b15)); } elseif ($spcd0b15->status >= \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spccbfb6, $spcd0b15); } return self::renderResultPage($spccbfb6, array('success' => false, 'msg' => $spcd0b15->remark ? '失败原因:<br>' . $spcd0b15->remark : '订单未支付成功<br>如果您已经支付请耐心等待或联系客服解决'), array('order' => $spcd0b15)); } function renderResultPage(Request $spccbfb6, $sp5c45d8, $sp53fb1e = array()) { if ($spccbfb6->ajax()) { if (@$sp5c45d8['success']) { return Response::success($sp5c45d8['data']); } else { return Response::fail('error', $sp5c45d8['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp5c45d8, 'data' => $sp53fb1e), $sp53fb1e)); } } function shipOrder($spccbfb6, $spebe6f4, $sp5a0200, $spefc3d0) { $spcd0b15 = \App\Order::whereOrderNo($spebe6f4)->first(); if ($spcd0b15 === null) { Log::error('shipOrder: No query results for model [App\\Order:' . $spebe6f4 . ',trade_no:' . $spefc3d0 . ',amount:' . $sp5a0200 . ']. die(\'success\');'); die('success'); } if ($spcd0b15->paid > $sp5a0200) { Log::alert('shipOrder, price may error, order_no:' . $spebe6f4 . ', paid:' . $spcd0b15->paid . ', $amount get:' . $sp5a0200); $spcd0b15->remark = '支付金额(' . sprintf('%0.2f', $sp5a0200 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $spcd0b15->paid / 100) . ')'; $spcd0b15->save(); throw new \Exception($spcd0b15->remark); } $sp886a9b = null; if ($spcd0b15->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $spebe6f4); if (FundHelper::orderSuccess($spcd0b15->id, function ($spa4f848) use($spefc3d0, &$spcd0b15, &$sp886a9b) { $spcd0b15 = $spa4f848; if ($spcd0b15->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $spcd0b15->order_no . ' already processed! #2'); return false; } $sp886a9b = $spcd0b15->product()->lockForUpdate()->firstOrFail(); $spcd0b15->pay_trade_no = $spefc3d0; $spcd0b15->paid_at = Carbon::now(); if ($sp886a9b->delivery === \App\Product::DELIVERY_MANUAL) { $spcd0b15->status = \App\Order::STATUS_PAID; $spcd0b15->send_status = \App\Order::SEND_STATUS_CARD_UN; $spcd0b15->saveOrFail(); return true; } if ($sp886a9b->delivery === \App\Product::DELIVERY_API) { $spb6331b = $sp886a9b->createApiCards($spcd0b15); } else { $spb6331b = Card::where('product_id', $spcd0b15->product_id)->whereRaw('`count_sold`<`count_all`')->take($spcd0b15->count)->lockForUpdate()->get(); } $sp3cc62b = false; if (count($spb6331b) === $spcd0b15->count) { $sp3cc62b = true; } else { if (count($spb6331b)) { foreach ($spb6331b as $sp8bda65) { if ($sp8bda65->type === \App\Card::TYPE_REPEAT && $sp8bda65->count >= $spcd0b15->count) { $spb6331b = array($sp8bda65); $sp3cc62b = true; break; } } } } if ($sp3cc62b === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $spcd0b15->order_no . ', 购买数量:' . $spcd0b15->count . ', 卡数量:' . count($spb6331b) . ' 卡密不足(已支付 未发货)'); $spcd0b15->status = \App\Order::STATUS_PAID; $spcd0b15->saveOrFail(); return true; } else { $sp19f407 = array(); foreach ($spb6331b as $sp8bda65) { $sp19f407[] = $sp8bda65->id; } $spcd0b15->cards()->attach($sp19f407); if (count($spb6331b) === 1 && $spb6331b[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $sp19f407[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $spcd0b15->count))); } else { \App\Card::whereIn('id', $sp19f407)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $spcd0b15->status = \App\Order::STATUS_SUCCESS; $spcd0b15->saveOrFail(); $sp886a9b->count_sold += $spcd0b15->count; $sp886a9b->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp886a9b->count_warn > 0 && $sp886a9b->count < $sp886a9b->count_warn) { try { Mail::to($spcd0b15->user->email)->Queue(new ProductCountWarn($sp886a9b, $sp886a9b->count)); } catch (\Throwable $spdfbc42) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $spcd0b15->product_id, 'email' => $spcd0b15->user->email, 'exception' => $spdfbc42->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $sp44298b = @json_decode($spcd0b15->contact_ext, true)['_mail']; if ($sp44298b) { $spcd0b15->sendEmail($sp44298b); } } if ($spcd0b15->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp40cdb8 = @json_decode($spcd0b15->contact_ext, true)['_mobile']; if ($sp40cdb8) { $spcd0b15->sendSms($sp40cdb8); } } } else { if ($spcd0b15->status !== \App\Order::STATUS_UNPAY) { } else { Log::error('Pay.shipOrder.orderSuccess Failed.'); return FALSE; } } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $spcd0b15->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spccbfb6, $spcd0b15) { return self::renderResultPage($spccbfb6, array('success' => true, 'msg' => $spcd0b15->getSendMessage()), array('card_txt' => join('&#013;&#010;', $spcd0b15->getCardsArray()), 'order' => $spcd0b15, 'product' => $spcd0b15->product)); } }