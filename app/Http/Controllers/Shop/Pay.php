<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use App\Library\Pay\Pay as PayApi; use App\Library\Geetest; use App\Mail\OrderShipped; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cookie; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spd5cc4d, $spd56469, $sp4e6fa6, $spd53b1c, $sp1c061b) { try { (new PayApi())->goPay($spd53b1c, $spd56469, $sp4e6fa6, $sp4e6fa6, $sp1c061b); return self::renderResultPage($spd5cc4d, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $spece20f) { return self::renderResultPage($spd5cc4d, array('msg' => $spece20f->getMessage())); } } function buy(Request $spd5cc4d) { $sp2e64ab = $spd5cc4d->input('customer'); if (strlen($sp2e64ab) !== 32) { return self::renderResultPage($spd5cc4d, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spd5cc4d->getQueryString() . '
提交内容: ' . var_export($sp2e64ab) . ', 提交长度:' . strlen($sp2e64ab) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp29a775 = Geetest\API::verify($spd5cc4d->input('geetest_challenge'), $spd5cc4d->input('geetest_validate'), $spd5cc4d->input('geetest_seccode')); if (!$sp29a775) { return self::renderResultPage($spd5cc4d, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp7b7cc9 = (int) $spd5cc4d->input('category_id'); $spad8100 = (int) $spd5cc4d->input('product_id'); $sp058528 = (int) $spd5cc4d->input('count'); $sp8c149f = $spd5cc4d->input('coupon'); $spfe0489 = $spd5cc4d->input('contact'); $sp7cc5a1 = $spd5cc4d->input('contact_ext') ?? null; $sp9c0821 = !empty(@json_decode($sp7cc5a1, true)['_mobile']); $spba5a3b = (int) $spd5cc4d->input('pay_id'); if (!$sp7b7cc9 || !$spad8100) { return self::renderResultPage($spd5cc4d, array('msg' => '请选择商品')); } if (strlen($spfe0489) < 1) { return self::renderResultPage($spd5cc4d, array('msg' => '请输入联系方式')); } $sp2e76be = Category::findOrFail($sp7b7cc9); $spaeec37 = Product::where('id', $spad8100)->where('category_id', $sp7b7cc9)->where('enabled', 1)->with(array('user'))->first(); if ($spaeec37 == null || $spaeec37->user == null) { return self::renderResultPage($spd5cc4d, array('msg' => '该商品未找到，请重新选择')); } if ($spaeec37->password_open) { if ($spaeec37->password !== $spd5cc4d->input('product_password')) { return self::renderResultPage($spd5cc4d, array('msg' => '商品密码输入错误')); } } else { if ($sp2e76be->password_open) { if ($sp2e76be->password !== $spd5cc4d->input('category_password')) { if ($sp2e76be->getTmpPassword() !== $spd5cc4d->input('category_password')) { return self::renderResultPage($spd5cc4d, array('msg' => '分类密码输入错误')); } } } } if ($sp058528 < $spaeec37->buy_min) { return self::renderResultPage($spd5cc4d, array('msg' => '该商品最少购买' . $spaeec37->buy_min . '件，请重新选择')); } if ($sp058528 > $spaeec37->buy_max) { return self::renderResultPage($spd5cc4d, array('msg' => '该商品限购' . $spaeec37->buy_max . '件，请重新选择')); } if ($spaeec37->count < $sp058528) { return self::renderResultPage($spd5cc4d, array('msg' => '该商品库存不足')); } $sp1840d6 = \App\Pay::find($spba5a3b); if ($sp1840d6 == null || !$sp1840d6->enabled) { return self::renderResultPage($spd5cc4d, array('msg' => '支付方式未找到，请重新选择')); } $sp148756 = $spaeec37->price; if ($spaeec37->price_whole) { $spf6a624 = json_decode($spaeec37->price_whole, true); for ($spb75665 = count($spf6a624) - 1; $spb75665 >= 0; $spb75665--) { if ($sp058528 >= (int) $spf6a624[$spb75665][0]) { $sp148756 = (int) $spf6a624[$spb75665][1]; break; } } } $spac16b8 = $sp058528 * $sp148756; $sp1c061b = $spac16b8; $sp0af5c2 = 0; $sp6d1221 = null; if ($spaeec37->support_coupon && strlen($sp8c149f) > 0) { $spa0d41d = \App\Coupon::where('user_id', $spaeec37->user_id)->where('coupon', $sp8c149f)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($spa0d41d as $spdd957a) { if ($spdd957a->category_id === -1 || $spdd957a->category_id === $sp7b7cc9 && ($spdd957a->product_id === -1 || $spdd957a->product_id === $spad8100)) { if ($spdd957a->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp1c061b >= $spdd957a->discount_val) { $sp6d1221 = $spdd957a; $sp0af5c2 = $spdd957a->discount_val; break; } if ($spdd957a->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp6d1221 = $spdd957a; $sp0af5c2 = (int) round($sp1c061b * $spdd957a->discount_val / 100); break; } } } if ($sp6d1221 === null) { return self::renderResultPage($spd5cc4d, array('msg' => '优惠券信息错误，请重新输入')); } $sp1c061b -= $sp0af5c2; } $sp62e4c0 = (int) round($sp1c061b * $sp1840d6->fee_system); $sp7571bc = $sp1c061b - $sp62e4c0; $sp07e9d0 = $sp9c0821 ? System::_getInt('sms_price', 10) : 0; $sp1c061b += $sp07e9d0; $sp92a485 = $sp058528 * $spaeec37->cost; $spd56469 = \App\Order::unique_no(); try { DB::transaction(function () use($spaeec37, $spd56469, $sp6d1221, $spfe0489, $sp7cc5a1, $sp2e64ab, $sp058528, $sp92a485, $spac16b8, $sp07e9d0, $sp0af5c2, $sp1c061b, $sp1840d6, $sp62e4c0, $sp7571bc) { if ($sp6d1221) { $sp6d1221->status = \App\Coupon::STATUS_USED; $sp6d1221->count_used++; $sp6d1221->save(); $spf420e3 = '使用优惠券: ' . $sp6d1221->coupon; } else { $spf420e3 = null; } $sp7dcca7 = \App\Order::create(array('user_id' => $spaeec37->user_id, 'order_no' => $spd56469, 'product_id' => $spaeec37->id, 'product_name' => $spaeec37->name, 'count' => $sp058528, 'ip' => Helper::getIP(), 'customer' => $sp2e64ab, 'contact' => $spfe0489, 'contact_ext' => $sp7cc5a1, 'cost' => $sp92a485, 'price' => $spac16b8, 'sms_price' => $sp07e9d0, 'discount' => $sp0af5c2, 'paid' => $sp1c061b, 'pay_id' => $sp1840d6->id, 'fee' => $sp62e4c0, 'system_fee' => $sp62e4c0, 'income' => $sp7571bc, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $spf420e3, 'created_at' => Carbon::now())); assert($sp7dcca7 !== null); }); } catch (\Throwable $spece20f) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $spece20f)); return self::renderResultPage($spd5cc4d, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($sp1c061b === 0) { $this->shipOrder($spd5cc4d, $spd56469, $sp1c061b, null); return redirect('/pay/result/' . $spd56469); } $sp4e6fa6 = $spd56469; return $this->goPay($spd5cc4d, $spd56469, $sp4e6fa6, $sp1840d6, $sp1c061b); } function pay(Request $spd5cc4d, $spd56469) { $sp7dcca7 = \App\Order::whereOrderNo($spd56469)->first(); if ($sp7dcca7 == null) { return self::renderResultPage($spd5cc4d, array('msg' => '订单未找到，请重试')); } if ($sp7dcca7->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spd56469); } $spff31ad = 'pay: ' . $sp7dcca7->pay_id; $spd53b1c = $sp7dcca7->pay; if (!$spd53b1c) { \Log::error($spff31ad . ' cannot find Pay'); return $this->renderResultPage($spd5cc4d, array('msg' => '支付方式未找到')); } $spff31ad .= ',' . $spd53b1c->driver; $spc27de0 = json_decode($spd53b1c->config, true); $spc27de0['payway'] = $spd53b1c->way; $spc27de0['out_trade_no'] = $spd56469; try { $this->payApi = PayApi::getDriver($spd53b1c->id, $spd53b1c->driver); } catch (\Exception $spece20f) { \Log::error($spff31ad . ' cannot find Driver: ' . $spece20f->getMessage()); return $this->renderResultPage($spd5cc4d, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($spc27de0, function ($spd56469, $sp9b2bb6, $spa24b71) use($spd5cc4d) { try { $this->shipOrder($spd5cc4d, $spd56469, $sp9b2bb6, $spa24b71); } catch (\Exception $spece20f) { $this->renderResultPage($spd5cc4d, array('success' => false, 'msg' => $spece20f->getMessage())); } })) { \Log::notice($spff31ad . ' already success' . '

'); return redirect('/pay/result/' . $spd56469); } if ($sp7dcca7->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spd5cc4d, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $spaeec37 = Product::where('id', $sp7dcca7->product_id)->where('enabled', 1)->first(); if ($spaeec37 == null) { return self::renderResultPage($spd5cc4d, array('msg' => '该商品已下架')); } $spaeec37->setAttribute('count', count($spaeec37->cards) ? $spaeec37->cards[0]->count : 0); if ($spaeec37->count < $sp7dcca7->count) { return self::renderResultPage($spd5cc4d, array('msg' => '该商品库存不足')); } $sp4e6fa6 = $spd56469; return $this->goPay($spd5cc4d, $spd56469, $sp4e6fa6, $spd53b1c, $sp7dcca7->paid); } function qrcode(Request $spd5cc4d, $spd56469, $sp0d0ae4) { $sp7dcca7 = \App\Order::whereOrderNo($spd56469)->with('product')->first(); if ($sp7dcca7 == null) { return self::renderResultPage($spd5cc4d, array('msg' => '订单未找到，请重试')); } if ($sp7dcca7->product_id !== \App\Product::ID_API && $sp7dcca7->product == null) { return self::renderResultPage($spd5cc4d, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp0d0ae4, array('pay_id' => $sp7dcca7->pay_id, 'name' => $sp7dcca7->product->name . ' x ' . $sp7dcca7->count . '件', 'amount' => $sp7dcca7->paid, 'qrcode' => $spd5cc4d->get('url'), 'id' => $spd56469)); } function qrQuery(Request $spd5cc4d, $spba5a3b) { $spe43d3e = $spd5cc4d->input('id', ''); return self::payReturn($spd5cc4d, $spba5a3b, $spe43d3e); } function payReturn(Request $spd5cc4d, $spba5a3b, $spba04f6 = '') { $spff31ad = 'payReturn: ' . $spba5a3b; \Log::debug($spff31ad); $spd53b1c = \App\Pay::where('id', $spba5a3b)->first(); if (!$spd53b1c) { return $this->renderResultPage($spd5cc4d, array('success' => 0, 'msg' => '支付方式错误')); } $spff31ad .= ',' . $spd53b1c->driver; if (strlen($spba04f6) > 0) { $sp7dcca7 = \App\Order::whereOrderNo($spba04f6)->first(); if ($sp7dcca7 && ($sp7dcca7->status === \App\Order::STATUS_PAID || $sp7dcca7->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spff31ad . ' already success' . '

'); if ($spd5cc4d->ajax()) { return self::renderResultPage($spd5cc4d, array('success' => 1, 'data' => '/pay/result/' . $spba04f6), array('order' => $sp7dcca7)); } else { return redirect('/pay/result/' . $spba04f6); } } } try { $this->payApi = PayApi::getDriver($spd53b1c->id, $spd53b1c->driver); } catch (\Exception $spece20f) { \Log::error($spff31ad . ' cannot find Driver: ' . $spece20f->getMessage()); return $this->renderResultPage($spd5cc4d, array('success' => 0, 'msg' => '支付驱动未找到')); } $spc27de0 = json_decode($spd53b1c->config, true); $spc27de0['out_trade_no'] = $spba04f6; $spc27de0['payway'] = $spd53b1c->way; \Log::debug($spff31ad . ' will verify'); if ($this->payApi->verify($spc27de0, function ($spd56469, $sp9b2bb6, $spa24b71) use($spd5cc4d, $spff31ad, &$spba04f6) { $spba04f6 = $spd56469; try { \Log::debug($spff31ad . " shipOrder start, order_no: {$spd56469}, amount: {$sp9b2bb6}, trade_no: {$spa24b71}"); $this->shipOrder($spd5cc4d, $spd56469, $sp9b2bb6, $spa24b71); \Log::debug($spff31ad . ' shipOrder end, order_no: ' . $spd56469); } catch (\Exception $spece20f) { \Log::error($spff31ad . ' shipOrder Exception: ' . $spece20f->getMessage()); } })) { \Log::debug($spff31ad . ' verify finished: 1' . '

'); if ($spd5cc4d->ajax()) { return self::renderResultPage($spd5cc4d, array('success' => 1, 'data' => '/pay/result/' . $spba04f6)); } else { return redirect('/pay/result/' . $spba04f6); } } else { \Log::debug($spff31ad . ' verify finished: 0' . '

'); return $this->renderResultPage($spd5cc4d, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spd5cc4d, $spba5a3b) { $spff31ad = 'payNotify pay_id: ' . $spba5a3b; \Log::debug($spff31ad); $spd53b1c = \App\Pay::where('id', $spba5a3b)->first(); if (!$spd53b1c) { \Log::error($spff31ad . ' cannot find PayModel'); echo 'fail'; die; } $spff31ad .= ',' . $spd53b1c->driver; try { $this->payApi = PayApi::getDriver($spd53b1c->id, $spd53b1c->driver); } catch (\Exception $spece20f) { \Log::error($spff31ad . ' cannot find Driver: ' . $spece20f->getMessage()); echo 'fail'; die; } $spc27de0 = json_decode($spd53b1c->config, true); $spc27de0['payway'] = $spd53b1c->way; $spc27de0['isNotify'] = true; \Log::debug($spff31ad . ' will verify'); $sp29a775 = $this->payApi->verify($spc27de0, function ($spd56469, $sp9b2bb6, $spa24b71) use($spd5cc4d, $spff31ad) { try { \Log::debug($spff31ad . " shipOrder start, order_no: {$spd56469}, amount: {$sp9b2bb6}, trade_no: {$spa24b71}"); $this->shipOrder($spd5cc4d, $spd56469, $sp9b2bb6, $spa24b71); \Log::debug($spff31ad . ' shipOrder end, order_no: ' . $spd56469); } catch (\Exception $spece20f) { \Log::error($spff31ad . ' shipOrder Exception: ' . $spece20f->getMessage()); } }); \Log::debug($spff31ad . ' notify finished: ' . (int) $sp29a775 . '

'); die; } function result(Request $spd5cc4d, $spd56469) { $sp7dcca7 = \App\Order::where('order_no', $spd56469)->first(); if ($sp7dcca7 == null) { return self::renderResultPage($spd5cc4d, array('msg' => '订单未找到，请重试')); } if ($sp7dcca7->status === \App\Order::STATUS_PAID) { $spb5e5ba = $sp7dcca7->user->qq; if ($sp7dcca7->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp2af324 = '您购买的为手动充值商品，请耐心等待处理'; } else { $sp2af324 = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($spb5e5ba) { $sp2af324 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spb5e5ba . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spb5e5ba . '</a>'; } return self::renderResultPage($spd5cc4d, array('success' => false, 'title' => '订单已支付', 'msg' => $sp2af324), array('order' => $sp7dcca7)); } elseif ($sp7dcca7->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spd5cc4d, $sp7dcca7); } return self::renderResultPage($spd5cc4d, array('success' => false, 'msg' => $sp7dcca7->remark ? '失败原因:<br>' . $sp7dcca7->remark : '订单支付失败，请重试'), array('order' => $sp7dcca7)); } function renderResultPage(Request $spd5cc4d, $spb34b01, $sp0a1540 = array()) { if ($spd5cc4d->ajax()) { if (@$spb34b01['success']) { return Response::success($spb34b01['data']); } else { return Response::fail('error', $spb34b01['msg']); } } else { return view('pay.result', array_merge(array('result' => $spb34b01, 'data' => $sp0a1540), $sp0a1540)); } } function shipOrder($spd5cc4d, $spd56469, $sp9b2bb6, $spa24b71) { $sp7dcca7 = \App\Order::whereOrderNo($spd56469)->first(); if ($sp7dcca7 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $spd56469 . ',trade_no:' . $spa24b71 . ',amount:' . $sp9b2bb6 . ']. die(\'success\');'); die('success'); } if ($sp7dcca7->paid > $sp9b2bb6) { \Log::alert('shipOrder, price may error, order_no:' . $spd56469 . ', paid:' . $sp7dcca7->paid . ', $amount get:' . $sp9b2bb6); $sp7dcca7->remark = '支付金额(' . sprintf('%0.2f', $sp9b2bb6 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp7dcca7->paid / 100) . ')'; $sp7dcca7->save(); throw new \Exception($sp7dcca7->remark); } $spaeec37 = null; if ($sp7dcca7->status === \App\Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $spd56469); $sp1f742d = $sp7dcca7->id; if (FundHelper::orderSuccess($sp7dcca7->id, function ($sp762ce1) use($sp1f742d, $spa24b71, &$sp7dcca7, &$spaeec37) { $sp7dcca7 = $sp762ce1; if ($sp7dcca7->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp7dcca7->order_no . ' already processed! #2'); return false; } $spaeec37 = $sp7dcca7->product()->lockForUpdate()->firstOrFail(); $sp7dcca7->pay_trade_no = $spa24b71; $sp7dcca7->paid_at = Carbon::now(); if ($spaeec37->delivery === \App\Product::DELIVERY_MANUAL) { $sp7dcca7->status = \App\Order::STATUS_PAID; $sp7dcca7->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp7dcca7->saveOrFail(); return true; } $spac6360 = Card::where('product_id', $sp7dcca7->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp7dcca7->count)->lockForUpdate()->get(); if (count($spac6360) !== $sp7dcca7->count) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp7dcca7->order_no . ', 购买数量:' . $sp7dcca7->count . ', 卡数量:' . count($spac6360) . ' 卡密不足(已支付 未发货)'); $sp7dcca7->status = \App\Order::STATUS_PAID; $sp7dcca7->saveOrFail(); return true; } else { $sp227200 = array(); foreach ($spac6360 as $sp21b3f0) { $sp227200[] = $sp21b3f0->id; } $sp7dcca7->cards()->attach($sp227200); Card::whereIn('id', $sp227200)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp7dcca7->status = \App\Order::STATUS_SUCCESS; $sp7dcca7->saveOrFail(); $spaeec37->count_sold += $sp7dcca7->count; $spaeec37->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($spaeec37->count_warn > 0 && $spaeec37->count < $spaeec37->count_warn) { try { Mail::to($sp7dcca7->user->email)->Queue(new ProductCountWarn($spaeec37, $spaeec37->count)); } catch (\Throwable $spece20f) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp7dcca7->product_id, 'email' => $sp7dcca7->user->email, 'exception' => $spece20f->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $sp7d9677 = @json_decode($sp7dcca7->contact_ext, true)['_mail']; if ($sp7d9677) { $sp7dcca7->sendEmail($sp7d9677); } } if ($sp7dcca7->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp052029 = @json_decode($sp7dcca7->contact_ext, true)['_mobile']; if ($sp052029) { $sp7dcca7->sendSms($sp052029); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp7dcca7->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spd5cc4d, $sp7dcca7) { return self::renderResultPage($spd5cc4d, array('success' => true, 'msg' => $sp7dcca7->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp7dcca7->getCardsArray()), 'order' => $sp7dcca7, 'product' => $sp7dcca7->product)); } }