<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp16eb02, $sp88df5b, $sp0f1e62, $spfb532d, $spbded52) { try { (new GatewayPay())->goPay($spfb532d, $sp88df5b, $sp0f1e62, $sp0f1e62, $spbded52); return self::renderResultPage($sp16eb02, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp803aea) { return self::renderResultPage($sp16eb02, array('msg' => $sp803aea->getMessage())); } } function buy(Request $sp16eb02) { $sp2ff1c9 = $sp16eb02->input('customer'); if (strlen($sp2ff1c9) !== 32) { return self::renderResultPage($sp16eb02, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp16eb02->getQueryString() . '
提交内容: ' . var_export($sp2ff1c9) . ', 提交长度:' . strlen($sp2ff1c9) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $spc31330 = Geetest\API::verify($sp16eb02->input('geetest_challenge'), $sp16eb02->input('geetest_validate'), $sp16eb02->input('geetest_seccode')); if (!$spc31330) { return self::renderResultPage($sp16eb02, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp2d88a9 = (int) $sp16eb02->input('category_id'); $spc53a3f = (int) $sp16eb02->input('product_id'); $sp0fccd1 = (int) $sp16eb02->input('count'); $sp6b2261 = $sp16eb02->input('coupon'); $sp7a59a6 = $sp16eb02->input('contact'); $spca273d = $sp16eb02->input('contact_ext') ?? null; $spab450e = !empty(@json_decode($spca273d, true)['_mobile']); $spdd4035 = (int) $sp16eb02->input('pay_id'); if (!$sp2d88a9 || !$spc53a3f) { return self::renderResultPage($sp16eb02, array('msg' => '请选择商品')); } if (strlen($sp7a59a6) < 1) { return self::renderResultPage($sp16eb02, array('msg' => '请输入联系方式')); } $sp1012fd = Category::findOrFail($sp2d88a9); $sp48b1b0 = Product::where('id', $spc53a3f)->where('category_id', $sp2d88a9)->where('enabled', 1)->with(array('user'))->first(); if ($sp48b1b0 == null || $sp48b1b0->user == null) { return self::renderResultPage($sp16eb02, array('msg' => '该商品未找到，请重新选择')); } if ($sp48b1b0->password_open) { if ($sp48b1b0->password !== $sp16eb02->input('product_password')) { return self::renderResultPage($sp16eb02, array('msg' => '商品密码输入错误')); } } else { if ($sp1012fd->password_open) { if ($sp1012fd->password !== $sp16eb02->input('category_password')) { if ($sp1012fd->getTmpPassword() !== $sp16eb02->input('category_password')) { return self::renderResultPage($sp16eb02, array('msg' => '分类密码输入错误')); } } } } if ($sp0fccd1 < $sp48b1b0->buy_min) { return self::renderResultPage($sp16eb02, array('msg' => '该商品最少购买' . $sp48b1b0->buy_min . '件，请重新选择')); } if ($sp0fccd1 > $sp48b1b0->buy_max) { return self::renderResultPage($sp16eb02, array('msg' => '该商品限购' . $sp48b1b0->buy_max . '件，请重新选择')); } if ($sp48b1b0->count < $sp0fccd1) { return self::renderResultPage($sp16eb02, array('msg' => '该商品库存不足')); } $spae3141 = \App\Pay::find($spdd4035); if ($spae3141 == null || !$spae3141->enabled) { return self::renderResultPage($sp16eb02, array('msg' => '支付方式未找到，请重新选择')); } $sp6d09d9 = $sp48b1b0->price; if ($sp48b1b0->price_whole) { $sp815cdb = json_decode($sp48b1b0->price_whole, true); for ($spc24184 = count($sp815cdb) - 1; $spc24184 >= 0; $spc24184--) { if ($sp0fccd1 >= (int) $sp815cdb[$spc24184][0]) { $sp6d09d9 = (int) $sp815cdb[$spc24184][1]; break; } } } $spa43558 = $sp0fccd1 * $sp6d09d9; $spbded52 = $spa43558; $sp55338e = 0; $sp550664 = null; if ($sp48b1b0->support_coupon && strlen($sp6b2261) > 0) { $spe553d3 = \App\Coupon::where('user_id', $sp48b1b0->user_id)->where('coupon', $sp6b2261)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($spe553d3 as $sp2c1e09) { if ($sp2c1e09->category_id === -1 || $sp2c1e09->category_id === $sp2d88a9 && ($sp2c1e09->product_id === -1 || $sp2c1e09->product_id === $spc53a3f)) { if ($sp2c1e09->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spbded52 >= $sp2c1e09->discount_val) { $sp550664 = $sp2c1e09; $sp55338e = $sp2c1e09->discount_val; break; } if ($sp2c1e09->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp550664 = $sp2c1e09; $sp55338e = (int) round($spbded52 * $sp2c1e09->discount_val / 100); break; } } } if ($sp550664 === null) { return self::renderResultPage($sp16eb02, array('msg' => '优惠券信息错误，请重新输入')); } $spbded52 -= $sp55338e; } $sp7dcf12 = (int) round($spbded52 * $spae3141->fee_system); $spdde2cc = $spbded52 - $sp7dcf12; $sp686b38 = $spab450e ? System::_getInt('sms_price', 10) : 0; $spbded52 += $sp686b38; $sp7643c6 = $sp0fccd1 * $sp48b1b0->cost; $sp88df5b = \App\Order::unique_no(); try { DB::transaction(function () use($sp48b1b0, $sp88df5b, $sp550664, $sp7a59a6, $spca273d, $sp2ff1c9, $sp0fccd1, $sp7643c6, $spa43558, $sp686b38, $sp55338e, $spbded52, $spae3141, $sp7dcf12, $spdde2cc) { if ($sp550664) { $sp550664->status = \App\Coupon::STATUS_USED; $sp550664->count_used++; $sp550664->save(); $sp53aa42 = '使用优惠券: ' . $sp550664->coupon; } else { $sp53aa42 = null; } $sp6f156a = \App\Order::create(array('user_id' => $sp48b1b0->user_id, 'order_no' => $sp88df5b, 'product_id' => $sp48b1b0->id, 'product_name' => $sp48b1b0->name, 'count' => $sp0fccd1, 'ip' => Helper::getIP(), 'customer' => $sp2ff1c9, 'contact' => $sp7a59a6, 'contact_ext' => $spca273d, 'cost' => $sp7643c6, 'price' => $spa43558, 'sms_price' => $sp686b38, 'discount' => $sp55338e, 'paid' => $spbded52, 'pay_id' => $spae3141->id, 'fee' => $sp7dcf12, 'system_fee' => $sp7dcf12, 'income' => $spdde2cc, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp53aa42, 'created_at' => Carbon::now())); assert($sp6f156a !== null); }); } catch (\Throwable $sp803aea) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sp803aea)); return self::renderResultPage($sp16eb02, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($spbded52 === 0) { $this->shipOrder($sp16eb02, $sp88df5b, $spbded52, null); return redirect('/pay/result/' . $sp88df5b); } $sp0f1e62 = $sp88df5b; return $this->goPay($sp16eb02, $sp88df5b, $sp0f1e62, $spae3141, $spbded52); } function pay(Request $sp16eb02, $sp88df5b) { $sp6f156a = \App\Order::whereOrderNo($sp88df5b)->first(); if ($sp6f156a == null) { return self::renderResultPage($sp16eb02, array('msg' => '订单未找到，请重试')); } if ($sp6f156a->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp88df5b); } $sp72aa9c = 'pay: ' . $sp6f156a->pay_id; $spfb532d = $sp6f156a->pay; if (!$spfb532d) { \Log::error($sp72aa9c . ' cannot find Pay'); return $this->renderResultPage($sp16eb02, array('msg' => '支付方式未找到')); } $sp72aa9c .= ',' . $spfb532d->driver; $sp8ba223 = json_decode($spfb532d->config, true); $sp8ba223['payway'] = $spfb532d->way; $sp8ba223['out_trade_no'] = $sp88df5b; try { $this->payApi = GatewayPay::getDriver($spfb532d->id, $spfb532d->driver); } catch (\Exception $sp803aea) { \Log::error($sp72aa9c . ' cannot find Driver: ' . $sp803aea->getMessage()); return $this->renderResultPage($sp16eb02, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp8ba223, function ($sp88df5b, $spd3c300, $spffd96e) use($sp16eb02) { try { $this->shipOrder($sp16eb02, $sp88df5b, $spd3c300, $spffd96e); } catch (\Exception $sp803aea) { $this->renderResultPage($sp16eb02, array('success' => false, 'msg' => $sp803aea->getMessage())); } })) { \Log::notice($sp72aa9c . ' already success' . '

'); return redirect('/pay/result/' . $sp88df5b); } if ($sp6f156a->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp16eb02, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp48b1b0 = Product::where('id', $sp6f156a->product_id)->where('enabled', 1)->first(); if ($sp48b1b0 == null) { return self::renderResultPage($sp16eb02, array('msg' => '该商品已下架')); } $sp48b1b0->setAttribute('count', count($sp48b1b0->cards) ? $sp48b1b0->cards[0]->count : 0); if ($sp48b1b0->count < $sp6f156a->count) { return self::renderResultPage($sp16eb02, array('msg' => '该商品库存不足')); } $sp0f1e62 = $sp88df5b; return $this->goPay($sp16eb02, $sp88df5b, $sp0f1e62, $spfb532d, $sp6f156a->paid); } function qrcode(Request $sp16eb02, $sp88df5b, $spc04db9) { $sp6f156a = \App\Order::whereOrderNo($sp88df5b)->with('product')->first(); if ($sp6f156a == null) { return self::renderResultPage($sp16eb02, array('msg' => '订单未找到，请重试')); } if ($sp6f156a->product_id !== \App\Product::ID_API && $sp6f156a->product == null) { return self::renderResultPage($sp16eb02, array('msg' => '商品未找到，请重试')); } return view('pay/' . $spc04db9, array('pay_id' => $sp6f156a->pay_id, 'name' => $sp6f156a->product->name . ' x ' . $sp6f156a->count . '件', 'amount' => $sp6f156a->paid, 'qrcode' => $sp16eb02->get('url'), 'id' => $sp88df5b)); } function qrQuery(Request $sp16eb02, $spdd4035) { $sp90f359 = $sp16eb02->input('id', ''); return self::payReturn($sp16eb02, $spdd4035, $sp90f359); } function payReturn(Request $sp16eb02, $spdd4035, $sp178dbe = '') { $sp72aa9c = 'payReturn: ' . $spdd4035; \Log::debug($sp72aa9c); $spfb532d = \App\Pay::where('id', $spdd4035)->first(); if (!$spfb532d) { return $this->renderResultPage($sp16eb02, array('success' => 0, 'msg' => '支付方式错误')); } $sp72aa9c .= ',' . $spfb532d->driver; if (strlen($sp178dbe) > 0) { $sp6f156a = \App\Order::whereOrderNo($sp178dbe)->first(); if ($sp6f156a && ($sp6f156a->status === \App\Order::STATUS_PAID || $sp6f156a->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp72aa9c . ' already success' . '

'); if ($sp16eb02->ajax()) { return self::renderResultPage($sp16eb02, array('success' => 1, 'data' => '/pay/result/' . $sp178dbe), array('order' => $sp6f156a)); } else { return redirect('/pay/result/' . $sp178dbe); } } } try { $this->payApi = GatewayPay::getDriver($spfb532d->id, $spfb532d->driver); } catch (\Exception $sp803aea) { \Log::error($sp72aa9c . ' cannot find Driver: ' . $sp803aea->getMessage()); return $this->renderResultPage($sp16eb02, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp8ba223 = json_decode($spfb532d->config, true); $sp8ba223['out_trade_no'] = $sp178dbe; $sp8ba223['payway'] = $spfb532d->way; \Log::debug($sp72aa9c . ' will verify'); if ($this->payApi->verify($sp8ba223, function ($sp88df5b, $spd3c300, $spffd96e) use($sp16eb02, $sp72aa9c, &$sp178dbe) { $sp178dbe = $sp88df5b; try { \Log::debug($sp72aa9c . " shipOrder start, order_no: {$sp88df5b}, amount: {$spd3c300}, trade_no: {$spffd96e}"); $this->shipOrder($sp16eb02, $sp88df5b, $spd3c300, $spffd96e); \Log::debug($sp72aa9c . ' shipOrder end, order_no: ' . $sp88df5b); } catch (\Exception $sp803aea) { \Log::error($sp72aa9c . ' shipOrder Exception: ' . $sp803aea->getMessage()); } })) { \Log::debug($sp72aa9c . ' verify finished: 1' . '

'); if ($sp16eb02->ajax()) { return self::renderResultPage($sp16eb02, array('success' => 1, 'data' => '/pay/result/' . $sp178dbe)); } else { return redirect('/pay/result/' . $sp178dbe); } } else { \Log::debug($sp72aa9c . ' verify finished: 0' . '

'); return $this->renderResultPage($sp16eb02, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp16eb02, $spdd4035) { $sp72aa9c = 'payNotify pay_id: ' . $spdd4035; \Log::debug($sp72aa9c); $spfb532d = \App\Pay::where('id', $spdd4035)->first(); if (!$spfb532d) { \Log::error($sp72aa9c . ' cannot find PayModel'); echo 'fail'; die; } $sp72aa9c .= ',' . $spfb532d->driver; try { $this->payApi = GatewayPay::getDriver($spfb532d->id, $spfb532d->driver); } catch (\Exception $sp803aea) { \Log::error($sp72aa9c . ' cannot find Driver: ' . $sp803aea->getMessage()); echo 'fail'; die; } $sp8ba223 = json_decode($spfb532d->config, true); $sp8ba223['payway'] = $spfb532d->way; $sp8ba223['isNotify'] = true; \Log::debug($sp72aa9c . ' will verify'); $spc31330 = $this->payApi->verify($sp8ba223, function ($sp88df5b, $spd3c300, $spffd96e) use($sp16eb02, $sp72aa9c) { try { \Log::debug($sp72aa9c . " shipOrder start, order_no: {$sp88df5b}, amount: {$spd3c300}, trade_no: {$spffd96e}"); $this->shipOrder($sp16eb02, $sp88df5b, $spd3c300, $spffd96e); \Log::debug($sp72aa9c . ' shipOrder end, order_no: ' . $sp88df5b); } catch (\Exception $sp803aea) { \Log::error($sp72aa9c . ' shipOrder Exception: ' . $sp803aea->getMessage()); } }); \Log::debug($sp72aa9c . ' notify finished: ' . (int) $spc31330 . '

'); die; } function result(Request $sp16eb02, $sp88df5b) { $sp6f156a = \App\Order::where('order_no', $sp88df5b)->first(); if ($sp6f156a == null) { return self::renderResultPage($sp16eb02, array('msg' => '订单未找到，请重试')); } if ($sp6f156a->status === \App\Order::STATUS_PAID) { $spacaa54 = $sp6f156a->user->qq; if ($sp6f156a->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp3219af = '您购买的为手动充值商品，请耐心等待处理'; } else { $sp3219af = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($spacaa54) { $sp3219af .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spacaa54 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spacaa54 . '</a>'; } return self::renderResultPage($sp16eb02, array('success' => false, 'title' => '订单已支付', 'msg' => $sp3219af), array('order' => $sp6f156a)); } elseif ($sp6f156a->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp16eb02, $sp6f156a); } return self::renderResultPage($sp16eb02, array('success' => false, 'msg' => $sp6f156a->remark ? '失败原因:<br>' . $sp6f156a->remark : '订单支付失败，请重试'), array('order' => $sp6f156a)); } function renderResultPage(Request $sp16eb02, $sp590507, $spdf6c63 = array()) { if ($sp16eb02->ajax()) { if (@$sp590507['success']) { return Response::success($sp590507['data']); } else { return Response::fail('error', $sp590507['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp590507, 'data' => $spdf6c63), $spdf6c63)); } } function shipOrder($sp16eb02, $sp88df5b, $spd3c300, $spffd96e) { $sp6f156a = \App\Order::whereOrderNo($sp88df5b)->first(); if ($sp6f156a === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp88df5b . ',trade_no:' . $spffd96e . ',amount:' . $spd3c300 . ']. die(\'success\');'); die('success'); } if ($sp6f156a->paid > $spd3c300) { \Log::alert('shipOrder, price may error, order_no:' . $sp88df5b . ', paid:' . $sp6f156a->paid . ', $amount get:' . $spd3c300); $sp6f156a->remark = '支付金额(' . sprintf('%0.2f', $spd3c300 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp6f156a->paid / 100) . ')'; $sp6f156a->save(); throw new \Exception($sp6f156a->remark); } $sp48b1b0 = null; if ($sp6f156a->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp88df5b); if (FundHelper::orderSuccess($sp6f156a->id, function ($sp515b05) use($spffd96e, &$sp6f156a, &$sp48b1b0) { $sp6f156a = $sp515b05; if ($sp6f156a->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp6f156a->order_no . ' already processed! #2'); return false; } $sp48b1b0 = $sp6f156a->product()->lockForUpdate()->firstOrFail(); $sp6f156a->pay_trade_no = $spffd96e; $sp6f156a->paid_at = Carbon::now(); if ($sp48b1b0->delivery === \App\Product::DELIVERY_MANUAL) { $sp6f156a->status = \App\Order::STATUS_PAID; $sp6f156a->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp6f156a->saveOrFail(); return true; } if ($sp48b1b0->delivery === \App\Product::DELIVERY_API) { $sp49b79c = $sp48b1b0->createApiCards($sp6f156a); } else { $sp49b79c = Card::where('product_id', $sp6f156a->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp6f156a->count)->lockForUpdate()->get(); } if (count($sp49b79c) !== $sp6f156a->count) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp6f156a->order_no . ', 购买数量:' . $sp6f156a->count . ', 卡数量:' . count($sp49b79c) . ' 卡密不足(已支付 未发货)'); $sp6f156a->status = \App\Order::STATUS_PAID; $sp6f156a->saveOrFail(); return true; } else { $spc9b1c5 = array(); foreach ($sp49b79c as $sp93f85e) { $spc9b1c5[] = $sp93f85e->id; } $sp6f156a->cards()->attach($spc9b1c5); Card::whereIn('id', $spc9b1c5)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp6f156a->status = \App\Order::STATUS_SUCCESS; $sp6f156a->saveOrFail(); $sp48b1b0->count_sold += $sp6f156a->count; $sp48b1b0->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp48b1b0->count_warn > 0 && $sp48b1b0->count < $sp48b1b0->count_warn) { try { Mail::to($sp6f156a->user->email)->Queue(new ProductCountWarn($sp48b1b0, $sp48b1b0->count)); } catch (\Throwable $sp803aea) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp6f156a->product_id, 'email' => $sp6f156a->user->email, 'exception' => $sp803aea->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $sp7fcad4 = @json_decode($sp6f156a->contact_ext, true)['_mail']; if ($sp7fcad4) { $sp6f156a->sendEmail($sp7fcad4); } } if ($sp6f156a->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp373703 = @json_decode($sp6f156a->contact_ext, true)['_mobile']; if ($sp373703) { $sp6f156a->sendSms($sp373703); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp6f156a->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp16eb02, $sp6f156a) { return self::renderResultPage($sp16eb02, array('success' => true, 'msg' => $sp6f156a->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp6f156a->getCardsArray()), 'order' => $sp6f156a, 'product' => $sp6f156a->product)); } }