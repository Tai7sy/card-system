<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spa20801, $sp54976c, $sp991706, $sp243273, $spa1143d) { try { $sp03dee9 = json_decode($sp243273->config, true); $sp03dee9['payway'] = $sp243273->way; GatewayPay::getDriver($sp243273)->goPay($sp03dee9, $sp54976c, $sp991706, $sp991706, $spa1143d); return self::renderResultPage($spa20801, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp16b835) { return self::renderResultPage($spa20801, array('msg' => $sp16b835->getMessage())); } } function buy(Request $spa20801) { $sp43a1bd = $spa20801->input('customer'); if (strlen($sp43a1bd) !== 32) { return self::renderResultPage($spa20801, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spa20801->getQueryString() . '
提交内容: ' . var_export($sp43a1bd) . ', 提交长度:' . strlen($sp43a1bd) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if (System::_getInt('vcode_shop_buy') === 1) { $this->validateCaptcha($spa20801); } $sp664160 = (int) $spa20801->input('category_id'); $sp17d280 = (int) $spa20801->input('product_id'); $spb5d933 = (int) $spa20801->input('count'); $sp845919 = $spa20801->input('coupon'); $spc4ccaf = $spa20801->input('contact'); $sp8d0122 = $spa20801->input('contact_ext') ?? null; $sp94c2f0 = !empty(@json_decode($sp8d0122, true)['_mobile']); $sp9a7ae4 = (int) $spa20801->input('pay_id'); if (!$sp664160 || !$sp17d280) { return self::renderResultPage($spa20801, array('msg' => '请选择商品')); } if (strlen($spc4ccaf) < 1) { return self::renderResultPage($spa20801, array('msg' => '请输入联系方式')); } $spdd6a6c = Category::findOrFail($sp664160); $sp0a72f9 = Product::where('id', $sp17d280)->where('category_id', $sp664160)->where('enabled', 1)->with(array('user'))->first(); if ($sp0a72f9 == null || $sp0a72f9->user == null) { return self::renderResultPage($spa20801, array('msg' => '该商品未找到，请重新选择')); } if ($sp0a72f9->password_open) { if ($sp0a72f9->password !== $spa20801->input('product_password')) { return self::renderResultPage($spa20801, array('msg' => '商品密码输入错误')); } } else { if ($spdd6a6c->password_open) { if ($spdd6a6c->password !== $spa20801->input('category_password')) { if ($spdd6a6c->getTmpPassword() !== $spa20801->input('category_password')) { return self::renderResultPage($spa20801, array('msg' => '分类密码输入错误')); } } } } if ($spb5d933 < $sp0a72f9->buy_min) { return self::renderResultPage($spa20801, array('msg' => '该商品最少购买' . $sp0a72f9->buy_min . '件，请重新选择')); } if ($spb5d933 > $sp0a72f9->buy_max) { return self::renderResultPage($spa20801, array('msg' => '该商品限购' . $sp0a72f9->buy_max . '件，请重新选择')); } if ($sp0a72f9->count < $spb5d933) { return self::renderResultPage($spa20801, array('msg' => '该商品库存不足')); } $sp243273 = \App\Pay::find($sp9a7ae4); if ($sp243273 == null || !$sp243273->enabled) { return self::renderResultPage($spa20801, array('msg' => '支付方式未找到，请重新选择')); } $sp7e7f6c = $sp0a72f9->price; if ($sp0a72f9->price_whole) { $sp7273ad = json_decode($sp0a72f9->price_whole, true); for ($spec1f96 = count($sp7273ad) - 1; $spec1f96 >= 0; $spec1f96--) { if ($spb5d933 >= (int) $sp7273ad[$spec1f96][0]) { $sp7e7f6c = (int) $sp7273ad[$spec1f96][1]; break; } } } $spe2c722 = $spb5d933 * $sp7e7f6c; $spa1143d = $spe2c722; $sp044963 = 0; $sp82ce72 = null; if ($sp0a72f9->support_coupon && strlen($sp845919) > 0) { $sp57c3d1 = \App\Coupon::where('user_id', $sp0a72f9->user_id)->where('coupon', $sp845919)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp57c3d1 as $spd64f45) { if ($spd64f45->category_id === -1 || $spd64f45->category_id === $sp664160 && ($spd64f45->product_id === -1 || $spd64f45->product_id === $sp17d280)) { if ($spd64f45->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spa1143d >= $spd64f45->discount_val) { $sp82ce72 = $spd64f45; $sp044963 = $spd64f45->discount_val; break; } if ($spd64f45->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp82ce72 = $spd64f45; $sp044963 = (int) round($spa1143d * $spd64f45->discount_val / 100); break; } } } if ($sp82ce72 === null) { return self::renderResultPage($spa20801, array('msg' => '优惠券信息错误，请重新输入')); } $spa1143d -= $sp044963; } $spf75bc2 = (int) round($spa1143d * $sp243273->fee_system); $sp13d4a7 = $spa1143d - $spf75bc2; $spa780a3 = $sp94c2f0 ? System::_getInt('sms_price', 10) : 0; $spa1143d += $spa780a3; $sp1fe4ff = $spb5d933 * $sp0a72f9->cost; $sp54976c = \App\Order::unique_no(); try { DB::transaction(function () use($sp0a72f9, $sp54976c, $sp82ce72, $spc4ccaf, $sp8d0122, $sp43a1bd, $spb5d933, $sp1fe4ff, $spe2c722, $spa780a3, $sp044963, $spa1143d, $sp243273, $spf75bc2, $sp13d4a7) { if ($sp82ce72) { $sp82ce72->status = \App\Coupon::STATUS_USED; $sp82ce72->count_used++; $sp82ce72->save(); $spaccaab = '使用优惠券: ' . $sp82ce72->coupon; } else { $spaccaab = null; } $sp106d4b = new \App\Order(array('user_id' => $sp0a72f9->user_id, 'order_no' => $sp54976c, 'product_id' => $sp0a72f9->id, 'product_name' => $sp0a72f9->name, 'count' => $spb5d933, 'ip' => Helper::getIP(), 'customer' => $sp43a1bd, 'contact' => $spc4ccaf, 'contact_ext' => $sp8d0122, 'cost' => $sp1fe4ff, 'price' => $spe2c722, 'sms_price' => $spa780a3, 'discount' => $sp044963, 'paid' => $spa1143d, 'pay_id' => $sp243273->id, 'fee' => $spf75bc2, 'system_fee' => $spf75bc2, 'income' => $sp13d4a7, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $spaccaab, 'created_at' => Carbon::now())); $sp106d4b->saveOrFail(); }); } catch (\Throwable $sp16b835) { Log::error('Shop.Pay.buy 下单失败', array('exception' => $sp16b835)); return self::renderResultPage($spa20801, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($spa1143d === 0) { $this->shipOrder($spa20801, $sp54976c, $spa1143d, null); return route('pay.result', array($sp54976c), false); } $sp991706 = $sp54976c; return $this->goPay($spa20801, $sp54976c, $sp991706, $sp243273, $spa1143d); } function pay(Request $spa20801, $sp54976c) { $sp106d4b = \App\Order::whereOrderNo($sp54976c)->first(); if ($sp106d4b == null) { return self::renderResultPage($spa20801, array('msg' => '订单未找到，请重试')); } if ($sp106d4b->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp54976c); } $spc70996 = 'pay: ' . $sp106d4b->pay_id; $sp243273 = $sp106d4b->pay; if (!$sp243273) { \Log::error($spc70996 . ' cannot find Pay'); return $this->renderResultPage($spa20801, array('msg' => '支付方式未找到')); } $spc70996 .= ',' . $sp243273->driver; $sp03dee9 = json_decode($sp243273->config, true); $sp03dee9['payway'] = $sp243273->way; $sp03dee9['out_trade_no'] = $sp54976c; try { $this->payApi = GatewayPay::getDriver($sp243273); } catch (\Exception $sp16b835) { \Log::error($spc70996 . ' cannot find Driver: ' . $sp16b835->getMessage()); return $this->renderResultPage($spa20801, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp03dee9, function ($sp54976c, $spaf895a, $sp414d60) use($spa20801) { try { $this->shipOrder($spa20801, $sp54976c, $spaf895a, $sp414d60); } catch (\Exception $sp16b835) { $this->renderResultPage($spa20801, array('success' => false, 'msg' => $sp16b835->getMessage())); } })) { \Log::notice($spc70996 . ' already success' . '

'); return redirect('/pay/result/' . $sp54976c); } if ($sp106d4b->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spa20801, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp0a72f9 = Product::where('id', $sp106d4b->product_id)->where('enabled', 1)->first(); if ($sp0a72f9 == null) { return self::renderResultPage($spa20801, array('msg' => '该商品已下架')); } $sp0a72f9->setAttribute('count', count($sp0a72f9->cards) ? $sp0a72f9->cards[0]->count : 0); if ($sp0a72f9->count < $sp106d4b->count) { return self::renderResultPage($spa20801, array('msg' => '该商品库存不足')); } $sp991706 = $sp54976c; return $this->goPay($spa20801, $sp54976c, $sp991706, $sp243273, $sp106d4b->paid); } function qrcode(Request $spa20801, $sp54976c, $sp26c247) { $sp106d4b = \App\Order::whereOrderNo($sp54976c)->with('product')->first(); if ($sp106d4b == null) { return self::renderResultPage($spa20801, array('msg' => '订单未找到，请重试')); } if ($sp106d4b->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spa20801, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } if ($sp106d4b->product_id !== \App\Product::ID_API) { $sp0a72f9 = $sp106d4b->product; if ($sp0a72f9 == null) { return self::renderResultPage($spa20801, array('msg' => '商品未找到，请重试')); } if ($sp0a72f9->count < $sp106d4b->count) { return self::renderResultPage($spa20801, array('msg' => '该商品库存不足')); } } if (strpos($sp26c247, '..')) { return $this->msg('你玩你妈呢'); } return view('pay/' . $sp26c247, array('pay_id' => $sp106d4b->pay_id, 'name' => $sp106d4b->product_id === \App\Product::ID_API ? $sp106d4b->api_out_no : $sp106d4b->product->name . ' x ' . $sp106d4b->count . '件', 'amount' => $sp106d4b->paid, 'qrcode' => $spa20801->get('url'), 'id' => $sp54976c)); } function qrQuery(Request $spa20801, $sp9a7ae4) { $sp8c76d3 = $spa20801->input('id', ''); return self::payReturn($spa20801, $sp9a7ae4, $sp8c76d3); } function payReturn(Request $spa20801, $sp9a7ae4, $sp54976c = '') { $spc70996 = 'payReturn: ' . $sp9a7ae4; \Log::debug($spc70996); $sp243273 = \App\Pay::where('id', $sp9a7ae4)->first(); if (!$sp243273) { return $this->renderResultPage($spa20801, array('success' => 0, 'msg' => '支付方式错误')); } $spc70996 .= ',' . $sp243273->driver; if (strlen($sp54976c) > 0) { $sp106d4b = \App\Order::whereOrderNo($sp54976c)->firstOrFail(); if ($sp106d4b && ($sp106d4b->status === \App\Order::STATUS_PAID || $sp106d4b->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spc70996 . ' already success' . '

'); if ($spa20801->ajax()) { return self::renderResultPage($spa20801, array('success' => 1, 'data' => '/pay/result/' . $sp54976c), array('order' => $sp106d4b)); } else { return redirect('/pay/result/' . $sp54976c); } } } try { $this->payApi = GatewayPay::getDriver($sp243273); } catch (\Exception $sp16b835) { \Log::error($spc70996 . ' cannot find Driver: ' . $sp16b835->getMessage()); return $this->renderResultPage($spa20801, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp03dee9 = json_decode($sp243273->config, true); $sp03dee9['out_trade_no'] = $sp54976c; $sp03dee9['payway'] = $sp243273->way; Log::debug($spc70996 . ' will verify'); if ($this->payApi->verify($sp03dee9, function ($sp722b88, $spaf895a, $sp414d60) use($spa20801, $spc70996, &$sp54976c) { $sp54976c = $sp722b88; try { Log::debug($spc70996 . " shipOrder start, order_no: {$sp54976c}, amount: {$spaf895a}, trade_no: {$sp414d60}"); $this->shipOrder($spa20801, $sp54976c, $spaf895a, $sp414d60); Log::debug($spc70996 . ' shipOrder end, order_no: ' . $sp54976c); } catch (\Exception $sp16b835) { Log::error($spc70996 . ' shipOrder Exception: ' . $sp16b835->getMessage(), array('exception' => $sp16b835)); } })) { Log::debug($spc70996 . ' verify finished: 1' . '

'); if ($spa20801->ajax()) { return self::renderResultPage($spa20801, array('success' => 1, 'data' => '/pay/result/' . $sp54976c)); } else { return redirect('/pay/result/' . $sp54976c); } } else { Log::debug($spc70996 . ' verify finished: 0' . '

'); return $this->renderResultPage($spa20801, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spa20801, $sp9a7ae4) { $spc70996 = 'payNotify pay_id: ' . $sp9a7ae4; Log::debug($spc70996); $sp243273 = \App\Pay::where('id', $sp9a7ae4)->first(); if (!$sp243273) { Log::error($spc70996 . ' cannot find PayModel'); echo 'fail'; die; } $spc70996 .= ',' . $sp243273->driver; try { $this->payApi = GatewayPay::getDriver($sp243273); } catch (\Exception $sp16b835) { Log::error($spc70996 . ' cannot find Driver: ' . $sp16b835->getMessage()); echo 'fail'; die; } $sp03dee9 = json_decode($sp243273->config, true); $sp03dee9['payway'] = $sp243273->way; $sp03dee9['isNotify'] = true; Log::debug($spc70996 . ' will verify'); $sp179a17 = $this->payApi->verify($sp03dee9, function ($sp54976c, $spaf895a, $sp414d60) use($spa20801, $spc70996) { try { Log::debug($spc70996 . " shipOrder start, order_no: {$sp54976c}, amount: {$spaf895a}, trade_no: {$sp414d60}"); $this->shipOrder($spa20801, $sp54976c, $spaf895a, $sp414d60); Log::debug($spc70996 . ' shipOrder end, order_no: ' . $sp54976c); } catch (\Exception $sp16b835) { Log::error($spc70996 . ' shipOrder Exception: ' . $sp16b835->getMessage()); } }); Log::debug($spc70996 . ' notify finished: ' . (int) $sp179a17 . '

'); die; } function result(Request $spa20801, $sp54976c) { $sp106d4b = \App\Order::where('order_no', $sp54976c)->first(); if ($sp106d4b == null) { return self::renderResultPage($spa20801, array('msg' => '订单未找到，请重试')); } if ($sp106d4b->status === \App\Order::STATUS_PAID) { $sp2521b5 = $sp106d4b->user->qq; if ($sp106d4b->product) { if ($sp106d4b->product->delivery === \App\Product::DELIVERY_MANUAL) { $spab838f = '您购买的为手动充值商品，请耐心等待处理'; } else { $spab838f = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } } else { $spab838f = '卖家已删除此商品，请联系客服退款'; } if ($sp2521b5) { $spab838f .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp2521b5 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp2521b5 . '</a>'; } return self::renderResultPage($spa20801, array('success' => false, 'title' => '订单已支付', 'msg' => $spab838f), array('order' => $sp106d4b)); } elseif ($sp106d4b->status >= \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spa20801, $sp106d4b); } return self::renderResultPage($spa20801, array('success' => false, 'msg' => $sp106d4b->remark ? '失败原因:<br>' . $sp106d4b->remark : '订单未支付成功<br>如果您已经支付请耐心等待或联系客服解决'), array('order' => $sp106d4b)); } function renderResultPage(Request $spa20801, $sp660b66, $sp295e9d = array()) { if ($spa20801->ajax()) { if (@$sp660b66['success']) { return Response::success($sp660b66['data']); } else { return Response::fail('error', $sp660b66['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp660b66, 'data' => $sp295e9d), $sp295e9d)); } } function shipOrder($spa20801, $sp54976c, $spaf895a, $sp414d60) { $sp106d4b = \App\Order::whereOrderNo($sp54976c)->first(); if ($sp106d4b === null) { Log::error('shipOrder: No query results for model [App\\Order:' . $sp54976c . ',trade_no:' . $sp414d60 . ',amount:' . $spaf895a . ']. die(\'success\');'); die('success'); } if ($sp106d4b->paid > $spaf895a) { Log::alert('shipOrder, price may error, order_no:' . $sp54976c . ', paid:' . $sp106d4b->paid . ', $amount get:' . $spaf895a); $sp106d4b->remark = '支付金额(' . sprintf('%0.2f', $spaf895a / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp106d4b->paid / 100) . ')'; $sp106d4b->save(); throw new \Exception($sp106d4b->remark); } $sp0a72f9 = null; if ($sp106d4b->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp54976c); if (FundHelper::orderSuccess($sp106d4b->id, function ($sp92e81c) use($sp414d60, &$sp106d4b, &$sp0a72f9) { $sp106d4b = $sp92e81c; if ($sp106d4b->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp106d4b->order_no . ' already processed! #2'); return false; } $sp0a72f9 = $sp106d4b->product()->lockForUpdate()->firstOrFail(); $sp106d4b->pay_trade_no = $sp414d60; $sp106d4b->paid_at = Carbon::now(); if ($sp0a72f9->delivery === \App\Product::DELIVERY_MANUAL) { $sp106d4b->status = \App\Order::STATUS_PAID; $sp106d4b->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp106d4b->saveOrFail(); return true; } if ($sp0a72f9->delivery === \App\Product::DELIVERY_API) { $spbccba7 = $sp0a72f9->createApiCards($sp106d4b); } else { $spbccba7 = Card::where('product_id', $sp106d4b->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp106d4b->count)->lockForUpdate()->get(); } $spcc7264 = false; if (count($spbccba7) === $sp106d4b->count) { $spcc7264 = true; } else { if (count($spbccba7)) { foreach ($spbccba7 as $spe34968) { if ($spe34968->type === \App\Card::TYPE_REPEAT && $spe34968->count >= $sp106d4b->count) { $spbccba7 = array($spe34968); $spcc7264 = true; break; } } } } if ($spcc7264 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp106d4b->order_no . ', 购买数量:' . $sp106d4b->count . ', 卡数量:' . count($spbccba7) . ' 卡密不足(已支付 未发货)'); $sp106d4b->status = \App\Order::STATUS_PAID; $sp106d4b->saveOrFail(); return true; } else { $sp09aea7 = array(); foreach ($spbccba7 as $spe34968) { $sp09aea7[] = $spe34968->id; } $sp106d4b->cards()->attach($sp09aea7); if (count($spbccba7) === 1 && $spbccba7[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $sp09aea7[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $sp106d4b->count))); } else { \App\Card::whereIn('id', $sp09aea7)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $sp106d4b->status = \App\Order::STATUS_SUCCESS; $sp106d4b->saveOrFail(); $sp0a72f9->count_sold += $sp106d4b->count; $sp0a72f9->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp0a72f9->count_warn > 0 && $sp0a72f9->count < $sp0a72f9->count_warn) { try { Mail::to($sp106d4b->user->email)->Queue(new ProductCountWarn($sp0a72f9, $sp0a72f9->count)); } catch (\Throwable $sp16b835) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp106d4b->product_id, 'email' => $sp106d4b->user->email, 'exception' => $sp16b835->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spe4a432 = @json_decode($sp106d4b->contact_ext, true)['_mail']; if ($spe4a432) { $sp106d4b->sendEmail($spe4a432); } } if ($sp106d4b->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp2c0e96 = @json_decode($sp106d4b->contact_ext, true)['_mobile']; if ($sp2c0e96) { $sp106d4b->sendSms($sp2c0e96); } } } else { if ($sp106d4b->status !== \App\Order::STATUS_UNPAY) { } else { Log::error('Pay.shipOrder.orderSuccess Failed.'); return FALSE; } } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp106d4b->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spa20801, $sp106d4b) { return self::renderResultPage($spa20801, array('success' => true, 'msg' => $sp106d4b->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp106d4b->getCardsArray()), 'order' => $sp106d4b, 'product' => $sp106d4b->product)); } }