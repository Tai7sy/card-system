<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spa27895, $sp0dbaa3, $spbcc226, $sp460280, $sp3cd8b6) { try { (new GatewayPay())->goPay($sp460280, $sp0dbaa3, $spbcc226, $spbcc226, $sp3cd8b6); return self::renderResultPage($spa27895, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp45f5f1) { return self::renderResultPage($spa27895, array('msg' => $sp45f5f1->getMessage())); } } function buy(Request $spa27895) { $spe44380 = $spa27895->input('customer'); if (strlen($spe44380) !== 32) { return self::renderResultPage($spa27895, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spa27895->getQueryString() . '
提交内容: ' . var_export($spe44380) . ', 提交长度:' . strlen($spe44380) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp786169 = Geetest\API::verify($spa27895->input('geetest_challenge'), $spa27895->input('geetest_validate'), $spa27895->input('geetest_seccode')); if (!$sp786169) { return self::renderResultPage($spa27895, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp980f44 = (int) $spa27895->input('category_id'); $sp112a12 = (int) $spa27895->input('product_id'); $spdf4a99 = (int) $spa27895->input('count'); $sp2a00ee = $spa27895->input('coupon'); $sp0c9f2e = $spa27895->input('contact'); $spa3a8ba = $spa27895->input('contact_ext') ?? null; $sp710247 = !empty(@json_decode($spa3a8ba, true)['_mobile']); $sp70c8c8 = (int) $spa27895->input('pay_id'); if (!$sp980f44 || !$sp112a12) { return self::renderResultPage($spa27895, array('msg' => '请选择商品')); } if (strlen($sp0c9f2e) < 1) { return self::renderResultPage($spa27895, array('msg' => '请输入联系方式')); } $spd14ca3 = Category::findOrFail($sp980f44); $sp1a3ec5 = Product::where('id', $sp112a12)->where('category_id', $sp980f44)->where('enabled', 1)->with(array('user'))->first(); if ($sp1a3ec5 == null || $sp1a3ec5->user == null) { return self::renderResultPage($spa27895, array('msg' => '该商品未找到，请重新选择')); } if ($sp1a3ec5->password_open) { if ($sp1a3ec5->password !== $spa27895->input('product_password')) { return self::renderResultPage($spa27895, array('msg' => '商品密码输入错误')); } } else { if ($spd14ca3->password_open) { if ($spd14ca3->password !== $spa27895->input('category_password')) { if ($spd14ca3->getTmpPassword() !== $spa27895->input('category_password')) { return self::renderResultPage($spa27895, array('msg' => '分类密码输入错误')); } } } } if ($spdf4a99 < $sp1a3ec5->buy_min) { return self::renderResultPage($spa27895, array('msg' => '该商品最少购买' . $sp1a3ec5->buy_min . '件，请重新选择')); } if ($spdf4a99 > $sp1a3ec5->buy_max) { return self::renderResultPage($spa27895, array('msg' => '该商品限购' . $sp1a3ec5->buy_max . '件，请重新选择')); } if ($sp1a3ec5->count < $spdf4a99) { return self::renderResultPage($spa27895, array('msg' => '该商品库存不足')); } $sp1d1f3d = \App\Pay::find($sp70c8c8); if ($sp1d1f3d == null || !$sp1d1f3d->enabled) { return self::renderResultPage($spa27895, array('msg' => '支付方式未找到，请重新选择')); } $sp228f7b = $sp1a3ec5->price; if ($sp1a3ec5->price_whole) { $sp7523bd = json_decode($sp1a3ec5->price_whole, true); for ($spe20094 = count($sp7523bd) - 1; $spe20094 >= 0; $spe20094--) { if ($spdf4a99 >= (int) $sp7523bd[$spe20094][0]) { $sp228f7b = (int) $sp7523bd[$spe20094][1]; break; } } } $sp2a8f2c = $spdf4a99 * $sp228f7b; $sp3cd8b6 = $sp2a8f2c; $spe60e57 = 0; $sp298ce7 = null; if ($sp1a3ec5->support_coupon && strlen($sp2a00ee) > 0) { $sp6de18e = \App\Coupon::where('user_id', $sp1a3ec5->user_id)->where('coupon', $sp2a00ee)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp6de18e as $sp1ea3c0) { if ($sp1ea3c0->category_id === -1 || $sp1ea3c0->category_id === $sp980f44 && ($sp1ea3c0->product_id === -1 || $sp1ea3c0->product_id === $sp112a12)) { if ($sp1ea3c0->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp3cd8b6 >= $sp1ea3c0->discount_val) { $sp298ce7 = $sp1ea3c0; $spe60e57 = $sp1ea3c0->discount_val; break; } if ($sp1ea3c0->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp298ce7 = $sp1ea3c0; $spe60e57 = (int) round($sp3cd8b6 * $sp1ea3c0->discount_val / 100); break; } } } if ($sp298ce7 === null) { return self::renderResultPage($spa27895, array('msg' => '优惠券信息错误，请重新输入')); } $sp3cd8b6 -= $spe60e57; } $spccc361 = (int) round($sp3cd8b6 * $sp1d1f3d->fee_system); $spbcd262 = $sp3cd8b6 - $spccc361; $sp65ab2f = $sp710247 ? System::_getInt('sms_price', 10) : 0; $sp3cd8b6 += $sp65ab2f; $sp40d222 = $spdf4a99 * $sp1a3ec5->cost; $sp0dbaa3 = \App\Order::unique_no(); try { DB::transaction(function () use($sp1a3ec5, $sp0dbaa3, $sp298ce7, $sp0c9f2e, $spa3a8ba, $spe44380, $spdf4a99, $sp40d222, $sp2a8f2c, $sp65ab2f, $spe60e57, $sp3cd8b6, $sp1d1f3d, $spccc361, $spbcd262) { if ($sp298ce7) { $sp298ce7->status = \App\Coupon::STATUS_USED; $sp298ce7->count_used++; $sp298ce7->save(); $sp52fef6 = '使用优惠券: ' . $sp298ce7->coupon; } else { $sp52fef6 = null; } $sp7b2cfc = \App\Order::create(array('user_id' => $sp1a3ec5->user_id, 'order_no' => $sp0dbaa3, 'product_id' => $sp1a3ec5->id, 'product_name' => $sp1a3ec5->name, 'count' => $spdf4a99, 'ip' => Helper::getIP(), 'customer' => $spe44380, 'contact' => $sp0c9f2e, 'contact_ext' => $spa3a8ba, 'cost' => $sp40d222, 'price' => $sp2a8f2c, 'sms_price' => $sp65ab2f, 'discount' => $spe60e57, 'paid' => $sp3cd8b6, 'pay_id' => $sp1d1f3d->id, 'fee' => $spccc361, 'system_fee' => $spccc361, 'income' => $spbcd262, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp52fef6, 'created_at' => Carbon::now())); assert($sp7b2cfc !== null); }); } catch (\Throwable $sp45f5f1) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sp45f5f1)); return self::renderResultPage($spa27895, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($sp3cd8b6 === 0) { $this->shipOrder($spa27895, $sp0dbaa3, $sp3cd8b6, null); return redirect('/pay/result/' . $sp0dbaa3); } $spbcc226 = $sp0dbaa3; return $this->goPay($spa27895, $sp0dbaa3, $spbcc226, $sp1d1f3d, $sp3cd8b6); } function pay(Request $spa27895, $sp0dbaa3) { $sp7b2cfc = \App\Order::whereOrderNo($sp0dbaa3)->first(); if ($sp7b2cfc == null) { return self::renderResultPage($spa27895, array('msg' => '订单未找到，请重试')); } if ($sp7b2cfc->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp0dbaa3); } $sp860109 = 'pay: ' . $sp7b2cfc->pay_id; $sp460280 = $sp7b2cfc->pay; if (!$sp460280) { \Log::error($sp860109 . ' cannot find Pay'); return $this->renderResultPage($spa27895, array('msg' => '支付方式未找到')); } $sp860109 .= ',' . $sp460280->driver; $spfd6e52 = json_decode($sp460280->config, true); $spfd6e52['payway'] = $sp460280->way; $spfd6e52['out_trade_no'] = $sp0dbaa3; try { $this->payApi = GatewayPay::getDriver($sp460280->id, $sp460280->driver); } catch (\Exception $sp45f5f1) { \Log::error($sp860109 . ' cannot find Driver: ' . $sp45f5f1->getMessage()); return $this->renderResultPage($spa27895, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($spfd6e52, function ($sp0dbaa3, $spa468fd, $sp002509) use($spa27895) { try { $this->shipOrder($spa27895, $sp0dbaa3, $spa468fd, $sp002509); } catch (\Exception $sp45f5f1) { $this->renderResultPage($spa27895, array('success' => false, 'msg' => $sp45f5f1->getMessage())); } })) { \Log::notice($sp860109 . ' already success' . '

'); return redirect('/pay/result/' . $sp0dbaa3); } if ($sp7b2cfc->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spa27895, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp1a3ec5 = Product::where('id', $sp7b2cfc->product_id)->where('enabled', 1)->first(); if ($sp1a3ec5 == null) { return self::renderResultPage($spa27895, array('msg' => '该商品已下架')); } $sp1a3ec5->setAttribute('count', count($sp1a3ec5->cards) ? $sp1a3ec5->cards[0]->count : 0); if ($sp1a3ec5->count < $sp7b2cfc->count) { return self::renderResultPage($spa27895, array('msg' => '该商品库存不足')); } $spbcc226 = $sp0dbaa3; return $this->goPay($spa27895, $sp0dbaa3, $spbcc226, $sp460280, $sp7b2cfc->paid); } function qrcode(Request $spa27895, $sp0dbaa3, $sp64a576) { $sp7b2cfc = \App\Order::whereOrderNo($sp0dbaa3)->with('product')->first(); if ($sp7b2cfc == null) { return self::renderResultPage($spa27895, array('msg' => '订单未找到，请重试')); } if ($sp7b2cfc->product_id !== \App\Product::ID_API && $sp7b2cfc->product == null) { return self::renderResultPage($spa27895, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp64a576, array('pay_id' => $sp7b2cfc->pay_id, 'name' => $sp7b2cfc->product->name . ' x ' . $sp7b2cfc->count . '件', 'amount' => $sp7b2cfc->paid, 'qrcode' => $spa27895->get('url'), 'id' => $sp0dbaa3)); } function qrQuery(Request $spa27895, $sp70c8c8) { $sp4c9240 = $spa27895->input('id', ''); return self::payReturn($spa27895, $sp70c8c8, $sp4c9240); } function payReturn(Request $spa27895, $sp70c8c8, $spe3eeee = '') { $sp860109 = 'payReturn: ' . $sp70c8c8; \Log::debug($sp860109); $sp460280 = \App\Pay::where('id', $sp70c8c8)->first(); if (!$sp460280) { return $this->renderResultPage($spa27895, array('success' => 0, 'msg' => '支付方式错误')); } $sp860109 .= ',' . $sp460280->driver; if (strlen($spe3eeee) > 0) { $sp7b2cfc = \App\Order::whereOrderNo($spe3eeee)->first(); if ($sp7b2cfc && ($sp7b2cfc->status === \App\Order::STATUS_PAID || $sp7b2cfc->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp860109 . ' already success' . '

'); if ($spa27895->ajax()) { return self::renderResultPage($spa27895, array('success' => 1, 'data' => '/pay/result/' . $spe3eeee), array('order' => $sp7b2cfc)); } else { return redirect('/pay/result/' . $spe3eeee); } } } try { $this->payApi = GatewayPay::getDriver($sp460280->id, $sp460280->driver); } catch (\Exception $sp45f5f1) { \Log::error($sp860109 . ' cannot find Driver: ' . $sp45f5f1->getMessage()); return $this->renderResultPage($spa27895, array('success' => 0, 'msg' => '支付驱动未找到')); } $spfd6e52 = json_decode($sp460280->config, true); $spfd6e52['out_trade_no'] = $spe3eeee; $spfd6e52['payway'] = $sp460280->way; \Log::debug($sp860109 . ' will verify'); if ($this->payApi->verify($spfd6e52, function ($sp0dbaa3, $spa468fd, $sp002509) use($spa27895, $sp860109, &$spe3eeee) { $spe3eeee = $sp0dbaa3; try { \Log::debug($sp860109 . " shipOrder start, order_no: {$sp0dbaa3}, amount: {$spa468fd}, trade_no: {$sp002509}"); $this->shipOrder($spa27895, $sp0dbaa3, $spa468fd, $sp002509); \Log::debug($sp860109 . ' shipOrder end, order_no: ' . $sp0dbaa3); } catch (\Exception $sp45f5f1) { \Log::error($sp860109 . ' shipOrder Exception: ' . $sp45f5f1->getMessage()); } })) { \Log::debug($sp860109 . ' verify finished: 1' . '

'); if ($spa27895->ajax()) { return self::renderResultPage($spa27895, array('success' => 1, 'data' => '/pay/result/' . $spe3eeee)); } else { return redirect('/pay/result/' . $spe3eeee); } } else { \Log::debug($sp860109 . ' verify finished: 0' . '

'); return $this->renderResultPage($spa27895, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spa27895, $sp70c8c8) { $sp860109 = 'payNotify pay_id: ' . $sp70c8c8; \Log::debug($sp860109); $sp460280 = \App\Pay::where('id', $sp70c8c8)->first(); if (!$sp460280) { \Log::error($sp860109 . ' cannot find PayModel'); echo 'fail'; die; } $sp860109 .= ',' . $sp460280->driver; try { $this->payApi = GatewayPay::getDriver($sp460280->id, $sp460280->driver); } catch (\Exception $sp45f5f1) { \Log::error($sp860109 . ' cannot find Driver: ' . $sp45f5f1->getMessage()); echo 'fail'; die; } $spfd6e52 = json_decode($sp460280->config, true); $spfd6e52['payway'] = $sp460280->way; $spfd6e52['isNotify'] = true; \Log::debug($sp860109 . ' will verify'); $sp786169 = $this->payApi->verify($spfd6e52, function ($sp0dbaa3, $spa468fd, $sp002509) use($spa27895, $sp860109) { try { \Log::debug($sp860109 . " shipOrder start, order_no: {$sp0dbaa3}, amount: {$spa468fd}, trade_no: {$sp002509}"); $this->shipOrder($spa27895, $sp0dbaa3, $spa468fd, $sp002509); \Log::debug($sp860109 . ' shipOrder end, order_no: ' . $sp0dbaa3); } catch (\Exception $sp45f5f1) { \Log::error($sp860109 . ' shipOrder Exception: ' . $sp45f5f1->getMessage()); } }); \Log::debug($sp860109 . ' notify finished: ' . (int) $sp786169 . '

'); die; } function result(Request $spa27895, $sp0dbaa3) { $sp7b2cfc = \App\Order::where('order_no', $sp0dbaa3)->first(); if ($sp7b2cfc == null) { return self::renderResultPage($spa27895, array('msg' => '订单未找到，请重试')); } if ($sp7b2cfc->status === \App\Order::STATUS_PAID) { $speb4458 = $sp7b2cfc->user->qq; if ($sp7b2cfc->product->delivery === \App\Product::DELIVERY_MANUAL) { $spa9bccc = '您购买的为手动充值商品，请耐心等待处理'; } else { $spa9bccc = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($speb4458) { $spa9bccc .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $speb4458 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $speb4458 . '</a>'; } return self::renderResultPage($spa27895, array('success' => false, 'title' => '订单已支付', 'msg' => $spa9bccc), array('order' => $sp7b2cfc)); } elseif ($sp7b2cfc->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spa27895, $sp7b2cfc); } return self::renderResultPage($spa27895, array('success' => false, 'msg' => $sp7b2cfc->remark ? '失败原因:<br>' . $sp7b2cfc->remark : '订单支付失败，请重试'), array('order' => $sp7b2cfc)); } function renderResultPage(Request $spa27895, $sp0cbff8, $sp1d26e1 = array()) { if ($spa27895->ajax()) { if (@$sp0cbff8['success']) { return Response::success($sp0cbff8['data']); } else { return Response::fail('error', $sp0cbff8['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp0cbff8, 'data' => $sp1d26e1), $sp1d26e1)); } } function shipOrder($spa27895, $sp0dbaa3, $spa468fd, $sp002509) { $sp7b2cfc = \App\Order::whereOrderNo($sp0dbaa3)->first(); if ($sp7b2cfc === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp0dbaa3 . ',trade_no:' . $sp002509 . ',amount:' . $spa468fd . ']. die(\'success\');'); die('success'); } if ($sp7b2cfc->paid > $spa468fd) { \Log::alert('shipOrder, price may error, order_no:' . $sp0dbaa3 . ', paid:' . $sp7b2cfc->paid . ', $amount get:' . $spa468fd); $sp7b2cfc->remark = '支付金额(' . sprintf('%0.2f', $spa468fd / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp7b2cfc->paid / 100) . ')'; $sp7b2cfc->save(); throw new \Exception($sp7b2cfc->remark); } $sp1a3ec5 = null; if ($sp7b2cfc->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp0dbaa3); if (FundHelper::orderSuccess($sp7b2cfc->id, function ($sp358313) use($sp002509, &$sp7b2cfc, &$sp1a3ec5) { $sp7b2cfc = $sp358313; if ($sp7b2cfc->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp7b2cfc->order_no . ' already processed! #2'); return false; } $sp1a3ec5 = $sp7b2cfc->product()->lockForUpdate()->firstOrFail(); $sp7b2cfc->pay_trade_no = $sp002509; $sp7b2cfc->paid_at = Carbon::now(); if ($sp1a3ec5->delivery === \App\Product::DELIVERY_MANUAL) { $sp7b2cfc->status = \App\Order::STATUS_PAID; $sp7b2cfc->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp7b2cfc->saveOrFail(); return true; } if ($sp1a3ec5->delivery === \App\Product::DELIVERY_API) { $sp16ec83 = $sp1a3ec5->createApiCards($sp7b2cfc); } else { $sp16ec83 = Card::where('product_id', $sp1a3ec5->retail_root->id)->whereRaw('`count_sold`<`count_all`')->take($sp7b2cfc->count)->lockForUpdate()->get(); } $spe810a6 = false; if (count($sp16ec83) === $sp7b2cfc->count) { $spe810a6 = true; } else { $spe810a6 = false; if (count($sp16ec83)) { foreach ($sp16ec83 as $sp089eb8) { if ($sp089eb8->type === \App\Card::TYPE_REPEAT && $sp089eb8->count >= $sp7b2cfc->count) { $sp16ec83 = array($sp089eb8); $spe810a6 = true; break; } } } } if ($spe810a6 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp7b2cfc->order_no . ', 购买数量:' . $sp7b2cfc->count . ', 卡数量:' . count($sp16ec83) . ' 卡密不足(已支付 未发货)'); $sp7b2cfc->status = \App\Order::STATUS_PAID; $sp7b2cfc->saveOrFail(); return true; } else { $sp5be395 = array(); foreach ($sp16ec83 as $sp089eb8) { $sp5be395[] = $sp089eb8->id; } $sp7b2cfc->cards()->attach($sp5be395); if (count($sp16ec83) === 1 && $sp16ec83[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $sp5be395[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $sp7b2cfc->count))); } else { \App\Card::whereIn('id', $sp5be395)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $sp7b2cfc->status = \App\Order::STATUS_SUCCESS; $sp7b2cfc->saveOrFail(); $sp1a3ec5->count_sold += $sp7b2cfc->count; $sp1a3ec5->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp1a3ec5->count_warn > 0 && $sp1a3ec5->count < $sp1a3ec5->count_warn) { try { Mail::to($sp7b2cfc->user->email)->Queue(new ProductCountWarn($sp1a3ec5, $sp1a3ec5->count)); } catch (\Throwable $sp45f5f1) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp7b2cfc->product_id, 'email' => $sp7b2cfc->user->email, 'exception' => $sp45f5f1->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $sp98ce8d = @json_decode($sp7b2cfc->contact_ext, true)['_mail']; if ($sp98ce8d) { $sp7b2cfc->sendEmail($sp98ce8d); } } if ($sp7b2cfc->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spd9b726 = @json_decode($sp7b2cfc->contact_ext, true)['_mobile']; if ($spd9b726) { $sp7b2cfc->sendSms($spd9b726); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp7b2cfc->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spa27895, $sp7b2cfc) { return self::renderResultPage($spa27895, array('success' => true, 'msg' => $sp7b2cfc->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp7b2cfc->getCardsArray()), 'order' => $sp7b2cfc, 'product' => $sp7b2cfc->product)); } }