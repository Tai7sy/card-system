<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp510ef3, $sp31fa09, $spcd19c0, $sp7a9e03, $spc47f2b) { try { $spfdba56 = json_decode($sp7a9e03->config, true); $spfdba56['payway'] = $sp7a9e03->way; GatewayPay::getDriver($sp7a9e03)->goPay($spfdba56, $sp31fa09, $spcd19c0, $spcd19c0, $spc47f2b); return self::renderResultPage($sp510ef3, array('success' => false, 'title' => trans('shop.please_wait'), 'msg' => trans('shop.please_wait_for_pay'))); } catch (\Exception $spd3b3eb) { if (config('app.debug')) { return self::renderResultPage($sp510ef3, array('msg' => $spd3b3eb->getMessage() . '<br>' . str_replace('
', '<br>', $spd3b3eb->getTraceAsString()))); } return self::renderResultPage($sp510ef3, array('msg' => $spd3b3eb->getMessage())); } } function buy(Request $sp510ef3) { $sp9dd25c = $sp510ef3->input('customer'); if (strlen($sp9dd25c) !== 32) { return self::renderResultPage($sp510ef3, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp510ef3->getQueryString() . '
提交内容: ' . var_export($sp9dd25c) . ', 提交长度:' . strlen($sp9dd25c) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if (System::_getInt('vcode_shop_buy') === 1) { try { $this->validateCaptcha($sp510ef3); } catch (\Throwable $spd3b3eb) { return self::renderResultPage($sp510ef3, array('msg' => trans('validation.captcha'))); } } $sp40435f = (int) $sp510ef3->input('category_id'); $sp2f9632 = (int) $sp510ef3->input('product_id'); $spad28c0 = (int) $sp510ef3->input('count'); $spa1dd92 = $sp510ef3->input('coupon'); $sp9c4e0c = $sp510ef3->input('contact'); $sp151c72 = $sp510ef3->input('contact_ext') ?? null; $sp1ac2ef = !empty(@json_decode($sp151c72, true)['_mobile']); $spab3d63 = (int) $sp510ef3->input('pay_id'); if (!$sp40435f || !$sp2f9632) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.required'))); } if (strlen($sp9c4e0c) < 1) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.contact.required'))); } $sp5ce090 = null; if (System::_getInt('order_query_password_open')) { $sp5ce090 = $sp510ef3->input('query_password'); if (strlen($sp5ce090) < 1) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.query_password.required'))); } if (strlen($sp5ce090) < 6 || Helper::isWakePassword($sp5ce090)) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.query_password.weak'))); } } $sp577aae = Category::findOrFail($sp40435f); $spd39704 = Product::where('id', $sp2f9632)->where('category_id', $sp40435f)->where('enabled', 1)->with(array('user'))->first(); if ($spd39704 == null || $spd39704->user == null) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.not_found'))); } if (!$spd39704->enabled) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.not_on_sell'))); } if ($spd39704->password_open) { if ($spd39704->password !== $sp510ef3->input('product_password')) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.password_error'))); } } else { if ($sp577aae->password_open) { if ($sp577aae->password !== $sp510ef3->input('category_password')) { if ($sp577aae->getTmpPassword() !== $sp510ef3->input('category_password')) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.category.password_error'))); } } } } if ($spad28c0 < $spd39704->buy_min) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.buy_min', array('num' => $spd39704->buy_min)))); } if ($spad28c0 > $spd39704->buy_max) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.buy_max', array('num' => $spd39704->buy_max)))); } if ($spd39704->count < $spad28c0) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.out_of_stock'))); } $sp7a9e03 = \App\Pay::find($spab3d63); if ($sp7a9e03 == null || !$sp7a9e03->enabled) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.pay.not_found'))); } $spce4a8c = $spd39704->price; if ($spd39704->price_whole) { $sp3c2080 = json_decode($spd39704->price_whole, true); for ($sp59ca22 = count($sp3c2080) - 1; $sp59ca22 >= 0; $sp59ca22--) { if ($spad28c0 >= (int) $sp3c2080[$sp59ca22][0]) { $spce4a8c = (int) $sp3c2080[$sp59ca22][1]; break; } } } $sp77e8f9 = $spad28c0 * $spce4a8c; $spc47f2b = $sp77e8f9; $spcbe58c = 0; $sp61e878 = null; if ($spd39704->support_coupon && strlen($spa1dd92) > 0) { $sp16f28c = \App\Coupon::where('user_id', $spd39704->user_id)->where('coupon', $spa1dd92)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp16f28c as $spdbfd09) { if ($spdbfd09->category_id === -1 || $spdbfd09->category_id === $sp40435f && ($spdbfd09->product_id === -1 || $spdbfd09->product_id === $sp2f9632)) { if ($spdbfd09->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spc47f2b >= $spdbfd09->discount_val) { $sp61e878 = $spdbfd09; $spcbe58c = $spdbfd09->discount_val; break; } if ($spdbfd09->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp61e878 = $spdbfd09; $spcbe58c = (int) round($spc47f2b * $spdbfd09->discount_val / 100); break; } } } if ($sp61e878 === null) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.coupon.invalid'))); } $spc47f2b -= $spcbe58c; } $sp699b68 = (int) round($spc47f2b * $sp7a9e03->fee_system); $sp5967f4 = $spc47f2b - $sp699b68; $spab3c69 = $sp1ac2ef ? System::_getInt('sms_price', 10) : 0; $spc47f2b += $spab3c69; $spcc291e = $spad28c0 * $spd39704->cost; $sp31fa09 = \App\Order::unique_no(); try { DB::transaction(function () use($spd39704, $sp31fa09, $sp61e878, $sp9c4e0c, $sp151c72, $sp5ce090, $sp9dd25c, $spad28c0, $spcc291e, $sp77e8f9, $spab3c69, $spcbe58c, $spc47f2b, $sp7a9e03, $sp699b68, $sp5967f4) { if ($sp61e878) { $sp61e878->status = \App\Coupon::STATUS_USED; $sp61e878->count_used++; $sp61e878->save(); $sp48a8d4 = '使用优惠券: ' . $sp61e878->coupon; } else { $sp48a8d4 = null; } $spff5c0e = new \App\Order(array('user_id' => $spd39704->user_id, 'order_no' => $sp31fa09, 'product_id' => $spd39704->id, 'product_name' => $spd39704->name, 'count' => $spad28c0, 'ip' => Helper::getIP(), 'customer' => $sp9dd25c, 'contact' => $sp9c4e0c, 'contact_ext' => $sp151c72, 'query_password' => $sp5ce090, 'cost' => $spcc291e, 'price' => $sp77e8f9, 'sms_price' => $spab3c69, 'discount' => $spcbe58c, 'paid' => $spc47f2b, 'pay_id' => $sp7a9e03->id, 'fee' => $sp699b68, 'system_fee' => $sp699b68, 'income' => $sp5967f4, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp48a8d4, 'created_at' => Carbon::now())); $spff5c0e->saveOrFail(); }); } catch (\Throwable $spd3b3eb) { Log::error('Shop.Pay.buy 下单失败', array('exception' => $spd3b3eb)); return self::renderResultPage($sp510ef3, array('msg' => trans('shop.pay.internal_error'))); } if ($spc47f2b === 0) { $this->shipOrder($sp510ef3, $sp31fa09, $spc47f2b, null); return redirect()->away(route('pay.result', array($sp31fa09), false)); } $spcd19c0 = $sp31fa09; return $this->goPay($sp510ef3, $sp31fa09, $spcd19c0, $sp7a9e03, $spc47f2b); } function pay(Request $sp510ef3, $sp31fa09) { $spff5c0e = \App\Order::whereOrderNo($sp31fa09)->first(); if ($spff5c0e == null) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.order.not_found'))); } if ($spff5c0e->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp31fa09); } $sp7c05a2 = 'pay: ' . $spff5c0e->pay_id; $sp7a9e03 = $spff5c0e->pay; if (!$sp7a9e03) { \Log::error($sp7c05a2 . ' cannot find Pay'); return $this->renderResultPage($sp510ef3, array('msg' => trans('shop.pay.not_found'))); } $sp7c05a2 .= ',' . $sp7a9e03->driver; $spfdba56 = json_decode($sp7a9e03->config, true); $spfdba56['payway'] = $sp7a9e03->way; $spfdba56['out_trade_no'] = $sp31fa09; try { $this->payApi = GatewayPay::getDriver($sp7a9e03); } catch (\Exception $spd3b3eb) { \Log::error($sp7c05a2 . ' cannot find Driver: ' . $spd3b3eb->getMessage()); return $this->renderResultPage($sp510ef3, array('msg' => trans('shop.pay.driver_not_found'))); } if ($this->payApi->verify($spfdba56, function ($sp31fa09, $sp320f03, $spb2d237) use($sp510ef3) { try { $this->shipOrder($sp510ef3, $sp31fa09, $sp320f03, $spb2d237); } catch (\Exception $spd3b3eb) { $this->renderResultPage($sp510ef3, array('success' => false, 'msg' => $spd3b3eb->getMessage())); } })) { \Log::notice($sp7c05a2 . ' already success' . '

'); return redirect('/pay/result/' . $sp31fa09); } if ($spff5c0e->created_at < Carbon::now()->addMinutes(-System::_getInt('order_pay_timeout_minutes', 5))) { return $this->renderResultPage($sp510ef3, array('msg' => trans('shop.order.expired'))); } $spd39704 = Product::where('id', $spff5c0e->product_id)->where('enabled', 1)->first(); if ($spd39704 == null) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.not_on_sell'))); } $spd39704->setAttribute('count', count($spd39704->cards) ? $spd39704->cards[0]->count : 0); if ($spd39704->count < $spff5c0e->count) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.out_of_stock'))); } $spcd19c0 = $sp31fa09; return $this->goPay($sp510ef3, $sp31fa09, $spcd19c0, $sp7a9e03, $spff5c0e->paid); } function qrcode(Request $sp510ef3, $sp31fa09, $spfa6d25) { $spff5c0e = \App\Order::whereOrderNo($sp31fa09)->with('product')->first(); if ($spff5c0e == null) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.order.not_found'))); } if ($spff5c0e->created_at < Carbon::now()->addMinutes(-System::_getInt('order_pay_timeout_minutes', 5))) { return $this->renderResultPage($sp510ef3, array('msg' => trans('shop.order.expired'))); } if ($spff5c0e->product_id !== \App\Product::ID_API) { $spd39704 = $spff5c0e->product; if ($spd39704 == null) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.not_found'))); } if ($spd39704->count < $spff5c0e->count) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.product.out_of_stock'))); } } if (strpos($spfa6d25, '..')) { return $this->msg(trans('shop.you_are_sb')); } return view('pay/' . $spfa6d25, array('pay_id' => $spff5c0e->pay_id, 'name' => $spff5c0e->product_id === \App\Product::ID_API ? $spff5c0e->api_out_no : $spff5c0e->product->name . ' x ' . $spff5c0e->count . '件', 'amount' => $spff5c0e->paid, 'qrcode' => $sp510ef3->get('url'), 'id' => $sp31fa09)); } function qrQuery(Request $sp510ef3, $spab3d63) { $sp7bec14 = $sp510ef3->input('id'); if (isset($sp7bec14[5])) { return self::payReturn($sp510ef3, $spab3d63, $sp7bec14); } else { return Response::fail('order_no error'); } } function payReturn(Request $sp510ef3, $spab3d63, $sp31fa09 = null) { $sp7c05a2 = 'payReturn: ' . $spab3d63; \Log::debug($sp7c05a2); $sp7a9e03 = \App\Pay::where('id', $spab3d63)->first(); if (!$sp7a9e03) { return $this->renderResultPage($sp510ef3, array('success' => 0, 'msg' => trans('shop.pay.not_found'))); } $sp7c05a2 .= ',' . $sp7a9e03->driver; if ($sp31fa09 && isset($sp31fa09[5])) { $spff5c0e = \App\Order::whereOrderNo($sp31fa09)->firstOrFail(); if ($spff5c0e && ($spff5c0e->status === \App\Order::STATUS_PAID || $spff5c0e->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp7c05a2 . ' already success' . '

'); if ($sp510ef3->ajax()) { return self::renderResultPage($sp510ef3, array('success' => 1, 'data' => '/pay/result/' . $sp31fa09), array('order' => $spff5c0e)); } else { return redirect('/pay/result/' . $sp31fa09); } } } try { $this->payApi = GatewayPay::getDriver($sp7a9e03); } catch (\Exception $spd3b3eb) { \Log::error($sp7c05a2 . ' cannot find Driver: ' . $spd3b3eb->getMessage()); return $this->renderResultPage($sp510ef3, array('success' => 0, 'msg' => trans('shop.pay.driver_not_found'))); } $spfdba56 = json_decode($sp7a9e03->config, true); $spfdba56['out_trade_no'] = $sp31fa09; $spfdba56['payway'] = $sp7a9e03->way; Log::debug($sp7c05a2 . ' will verify'); if ($this->payApi->verify($spfdba56, function ($sp928a2e, $sp320f03, $spb2d237) use($sp510ef3, $sp7c05a2, &$sp31fa09) { $sp31fa09 = $sp928a2e; try { Log::debug($sp7c05a2 . " shipOrder start, order_no: {$sp31fa09}, amount: {$sp320f03}, trade_no: {$spb2d237}"); $this->shipOrder($sp510ef3, $sp31fa09, $sp320f03, $spb2d237); Log::debug($sp7c05a2 . ' shipOrder end, order_no: ' . $sp31fa09); } catch (\Exception $spd3b3eb) { Log::error($sp7c05a2 . ' shipOrder Exception: ' . $spd3b3eb->getMessage(), array('exception' => $spd3b3eb)); } })) { Log::debug($sp7c05a2 . ' verify finished: 1' . '

'); if ($sp510ef3->ajax()) { return self::renderResultPage($sp510ef3, array('success' => 1, 'data' => '/pay/result/' . $sp31fa09)); } else { return redirect('/pay/result/' . $sp31fa09); } } else { Log::debug($sp7c05a2 . ' verify finished: 0' . '

'); return $this->renderResultPage($sp510ef3, array('success' => 0, 'msg' => trans('shop.pay.verify_failed'))); } } function payNotify(Request $sp510ef3, $spab3d63) { $sp7c05a2 = 'payNotify pay_id: ' . $spab3d63; Log::debug($sp7c05a2); $sp7a9e03 = \App\Pay::where('id', $spab3d63)->first(); if (!$sp7a9e03) { Log::error($sp7c05a2 . ' cannot find PayModel'); echo 'fail'; die; } $sp7c05a2 .= ',' . $sp7a9e03->driver; try { $this->payApi = GatewayPay::getDriver($sp7a9e03); } catch (\Exception $spd3b3eb) { Log::error($sp7c05a2 . ' cannot find Driver: ' . $spd3b3eb->getMessage()); echo 'fail'; die; } $spfdba56 = json_decode($sp7a9e03->config, true); $spfdba56['payway'] = $sp7a9e03->way; $spfdba56['isNotify'] = true; Log::debug($sp7c05a2 . ' will verify'); $spced997 = $this->payApi->verify($spfdba56, function ($sp31fa09, $sp320f03, $spb2d237) use($sp510ef3, $sp7c05a2) { try { Log::debug($sp7c05a2 . " shipOrder start, order_no: {$sp31fa09}, amount: {$sp320f03}, trade_no: {$spb2d237}"); $this->shipOrder($sp510ef3, $sp31fa09, $sp320f03, $spb2d237); Log::debug($sp7c05a2 . ' shipOrder end, order_no: ' . $sp31fa09); } catch (\Exception $spd3b3eb) { Log::error($sp7c05a2 . ' shipOrder Exception: ' . $spd3b3eb->getMessage()); } }); Log::debug($sp7c05a2 . ' notify finished: ' . (int) $spced997 . '

'); die; } function result(Request $sp510ef3, $sp31fa09) { $spff5c0e = \App\Order::where('order_no', $sp31fa09)->first(); if ($spff5c0e == null) { return self::renderResultPage($sp510ef3, array('msg' => trans('shop.order.not_found'))); } if ($spff5c0e->status === \App\Order::STATUS_PAID) { $spcb99da = $spff5c0e->user->qq; if ($spff5c0e->product) { if ($spff5c0e->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp1f5ff7 = trans('shop.order.msg_product_manual_please_wait'); } else { $sp1f5ff7 = trans('shop.order.msg_product_out_of_stock_not_send'); } } else { $sp1f5ff7 = trans('shop.order.msg_product_deleted'); } if ($spcb99da) { $sp1f5ff7 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spcb99da . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spcb99da . '</a>'; } return self::renderResultPage($sp510ef3, array('success' => false, 'title' => trans('shop.order_is_paid'), 'msg' => $sp1f5ff7), array('order' => $spff5c0e)); } elseif ($spff5c0e->status >= \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp510ef3, $spff5c0e); } return self::renderResultPage($sp510ef3, array('success' => false, 'msg' => $spff5c0e->remark ? trans('shop.order_process_failed_because', array('reason' => $spff5c0e->remark)) : trans('shop.order_process_failed_default')), array('order' => $spff5c0e)); } function renderResultPage(Request $sp510ef3, $sp33dd24, $sp93daeb = array()) { if ($sp510ef3->ajax()) { if (@$sp33dd24['success']) { return Response::success($sp33dd24['data']); } else { return Response::fail('error', $sp33dd24['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp33dd24, 'data' => $sp93daeb), $sp93daeb)); } } function shipOrder($sp510ef3, $sp31fa09, $sp320f03, $spb2d237) { $spff5c0e = \App\Order::whereOrderNo($sp31fa09)->first(); if ($spff5c0e === null) { Log::error('shipOrder: No query results for model [App\\Order:' . $sp31fa09 . ',trade_no:' . $spb2d237 . ',amount:' . $sp320f03 . ']. die(\'success\');'); die('success'); } if ($spff5c0e->paid > $sp320f03) { Log::alert('shipOrder, price may error, order_no:' . $sp31fa09 . ', paid:' . $spff5c0e->paid . ', $amount get:' . $sp320f03); $spff5c0e->remark = '支付金额(' . sprintf('%0.2f', $sp320f03 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $spff5c0e->paid / 100) . ')'; $spff5c0e->save(); throw new \Exception($spff5c0e->remark); } $spd39704 = null; if ($spff5c0e->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp31fa09); if (FundHelper::orderSuccess($spff5c0e->id, function ($sp27e9a8) use($spb2d237, &$spff5c0e, &$spd39704) { $spff5c0e = $sp27e9a8; if ($spff5c0e->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $spff5c0e->order_no . ' already processed! #2'); return false; } $spd39704 = $spff5c0e->product()->lockForUpdate()->firstOrFail(); $spff5c0e->pay_trade_no = $spb2d237; $spff5c0e->paid_at = Carbon::now(); if ($spd39704->delivery === \App\Product::DELIVERY_MANUAL) { $spff5c0e->status = \App\Order::STATUS_PAID; $spff5c0e->send_status = \App\Order::SEND_STATUS_CARD_UN; $spff5c0e->saveOrFail(); return true; } if ($spd39704->delivery === \App\Product::DELIVERY_API) { $sp0d18ea = $spd39704->createApiCards($spff5c0e); } else { $sp0d18ea = Card::where('product_id', $spff5c0e->product_id)->whereRaw('`count_sold`<`count_all`')->take($spff5c0e->count)->lockForUpdate()->get(); } $sp9f42a2 = false; if (count($sp0d18ea) === $spff5c0e->count) { $sp9f42a2 = true; } else { if (count($sp0d18ea)) { foreach ($sp0d18ea as $spb1f3d6) { if ($spb1f3d6->type === \App\Card::TYPE_REPEAT && $spb1f3d6->count >= $spff5c0e->count) { $sp0d18ea = array($spb1f3d6); $sp9f42a2 = true; break; } } } } if ($sp9f42a2 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $spff5c0e->order_no . ', 购买数量:' . $spff5c0e->count . ', 卡数量:' . count($sp0d18ea) . ' 卡密不足(已支付 未发货)'); $spff5c0e->status = \App\Order::STATUS_PAID; $spff5c0e->saveOrFail(); return true; } else { $sp7b9247 = array(); foreach ($sp0d18ea as $spb1f3d6) { $sp7b9247[] = $spb1f3d6->id; } $spff5c0e->cards()->attach($sp7b9247); if (count($sp0d18ea) === 1 && $sp0d18ea[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $sp7b9247[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $spff5c0e->count))); } else { \App\Card::whereIn('id', $sp7b9247)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $spff5c0e->status = \App\Order::STATUS_SUCCESS; $spff5c0e->saveOrFail(); $spd39704->count_sold += $spff5c0e->count; $spd39704->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($spd39704->count_warn > 0 && $spd39704->count < $spd39704->count_warn) { try { Mail::to($spff5c0e->user->email)->Queue(new ProductCountWarn($spd39704, $spd39704->count)); } catch (\Throwable $spd3b3eb) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $spff5c0e->product_id, 'email' => $spff5c0e->user->email, 'exception' => $spd3b3eb->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spf3e9ef = @json_decode($spff5c0e->contact_ext, true)['_mail']; if ($spf3e9ef) { $spff5c0e->sendEmail($spf3e9ef); } } if ($spff5c0e->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp10ebc2 = @json_decode($spff5c0e->contact_ext, true)['_mobile']; if ($sp10ebc2) { $spff5c0e->sendSms($sp10ebc2); } } } else { if ($spff5c0e->status !== \App\Order::STATUS_UNPAY) { } else { Log::error('Pay.shipOrder.orderSuccess Failed.'); return FALSE; } } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $spff5c0e->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp510ef3, $spff5c0e) { return self::renderResultPage($sp510ef3, array('success' => true, 'msg' => $spff5c0e->getSendMessage()), array('card_txt' => join('&#013;&#010;', $spff5c0e->getCardsArray()), 'order' => $spff5c0e, 'product' => $spff5c0e->product)); } }