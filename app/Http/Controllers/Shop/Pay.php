<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spfb41ce, $sp6fdb49, $sp1219d9, $sp083f26, $sp1c680e) { try { (new GatewayPay())->goPay($sp083f26, $sp6fdb49, $sp1219d9, $sp1219d9, $sp1c680e); return self::renderResultPage($spfb41ce, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp4b79b8) { return self::renderResultPage($spfb41ce, array('msg' => $sp4b79b8->getMessage())); } } function buy(Request $spfb41ce) { $spaa904b = $spfb41ce->input('customer'); if (strlen($spaa904b) !== 32) { return self::renderResultPage($spfb41ce, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spfb41ce->getQueryString() . '
提交内容: ' . var_export($spaa904b) . ', 提交长度:' . strlen($spaa904b) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $spd7b285 = Geetest\API::verify($spfb41ce->input('geetest_challenge'), $spfb41ce->input('geetest_validate'), $spfb41ce->input('geetest_seccode')); if (!$spd7b285) { return self::renderResultPage($spfb41ce, array('msg' => '滑动验证超时，请返回页面重试。')); } } $spf9ba01 = (int) $spfb41ce->input('category_id'); $sp2fece4 = (int) $spfb41ce->input('product_id'); $sp2150fd = (int) $spfb41ce->input('count'); $spe30c7d = $spfb41ce->input('coupon'); $sp69517f = $spfb41ce->input('contact'); $spa39708 = $spfb41ce->input('contact_ext') ?? null; $sp037538 = !empty(@json_decode($spa39708, true)['_mobile']); $sp5fd2cf = (int) $spfb41ce->input('pay_id'); if (!$spf9ba01 || !$sp2fece4) { return self::renderResultPage($spfb41ce, array('msg' => '请选择商品')); } if (strlen($sp69517f) < 1) { return self::renderResultPage($spfb41ce, array('msg' => '请输入联系方式')); } $sp6ebb48 = Category::findOrFail($spf9ba01); $spae5d03 = Product::where('id', $sp2fece4)->where('category_id', $spf9ba01)->where('enabled', 1)->with(array('user'))->first(); if ($spae5d03 == null || $spae5d03->user == null) { return self::renderResultPage($spfb41ce, array('msg' => '该商品未找到，请重新选择')); } if ($spae5d03->password_open) { if ($spae5d03->password !== $spfb41ce->input('product_password')) { return self::renderResultPage($spfb41ce, array('msg' => '商品密码输入错误')); } } else { if ($sp6ebb48->password_open) { if ($sp6ebb48->password !== $spfb41ce->input('category_password')) { if ($sp6ebb48->getTmpPassword() !== $spfb41ce->input('category_password')) { return self::renderResultPage($spfb41ce, array('msg' => '分类密码输入错误')); } } } } if ($sp2150fd < $spae5d03->buy_min) { return self::renderResultPage($spfb41ce, array('msg' => '该商品最少购买' . $spae5d03->buy_min . '件，请重新选择')); } if ($sp2150fd > $spae5d03->buy_max) { return self::renderResultPage($spfb41ce, array('msg' => '该商品限购' . $spae5d03->buy_max . '件，请重新选择')); } if ($spae5d03->count < $sp2150fd) { return self::renderResultPage($spfb41ce, array('msg' => '该商品库存不足')); } $sp56a5d4 = \App\Pay::find($sp5fd2cf); if ($sp56a5d4 == null || !$sp56a5d4->enabled) { return self::renderResultPage($spfb41ce, array('msg' => '支付方式未找到，请重新选择')); } $sp228b80 = $spae5d03->price; if ($spae5d03->price_whole) { $sp6c12c2 = json_decode($spae5d03->price_whole, true); for ($spdb14d1 = count($sp6c12c2) - 1; $spdb14d1 >= 0; $spdb14d1--) { if ($sp2150fd >= (int) $sp6c12c2[$spdb14d1][0]) { $sp228b80 = (int) $sp6c12c2[$spdb14d1][1]; break; } } } $sp5e3d10 = $sp2150fd * $sp228b80; $sp1c680e = $sp5e3d10; $spe9923f = 0; $sp8971e7 = null; if ($spae5d03->support_coupon && strlen($spe30c7d) > 0) { $sp832c5d = \App\Coupon::where('user_id', $spae5d03->user_id)->where('coupon', $spe30c7d)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp832c5d as $sp22a7c0) { if ($sp22a7c0->category_id === -1 || $sp22a7c0->category_id === $spf9ba01 && ($sp22a7c0->product_id === -1 || $sp22a7c0->product_id === $sp2fece4)) { if ($sp22a7c0->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp1c680e >= $sp22a7c0->discount_val) { $sp8971e7 = $sp22a7c0; $spe9923f = $sp22a7c0->discount_val; break; } if ($sp22a7c0->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp8971e7 = $sp22a7c0; $spe9923f = (int) round($sp1c680e * $sp22a7c0->discount_val / 100); break; } } } if ($sp8971e7 === null) { return self::renderResultPage($spfb41ce, array('msg' => '优惠券信息错误，请重新输入')); } $sp1c680e -= $spe9923f; } $spf0e002 = (int) round($sp1c680e * $sp56a5d4->fee_system); $spa806f7 = $sp1c680e - $spf0e002; $spb0ec2d = $sp037538 ? System::_getInt('sms_price', 10) : 0; $sp1c680e += $spb0ec2d; $spb8e7fd = $sp2150fd * $spae5d03->cost; $sp6fdb49 = \App\Order::unique_no(); try { DB::transaction(function () use($spae5d03, $sp6fdb49, $sp8971e7, $sp69517f, $spa39708, $spaa904b, $sp2150fd, $spb8e7fd, $sp5e3d10, $spb0ec2d, $spe9923f, $sp1c680e, $sp56a5d4, $spf0e002, $spa806f7) { if ($sp8971e7) { $sp8971e7->status = \App\Coupon::STATUS_USED; $sp8971e7->count_used++; $sp8971e7->save(); $spd4d093 = '使用优惠券: ' . $sp8971e7->coupon; } else { $spd4d093 = null; } $spbaa1fa = \App\Order::create(array('user_id' => $spae5d03->user_id, 'order_no' => $sp6fdb49, 'product_id' => $spae5d03->id, 'product_name' => $spae5d03->name, 'count' => $sp2150fd, 'ip' => Helper::getIP(), 'customer' => $spaa904b, 'contact' => $sp69517f, 'contact_ext' => $spa39708, 'cost' => $spb8e7fd, 'price' => $sp5e3d10, 'sms_price' => $spb0ec2d, 'discount' => $spe9923f, 'paid' => $sp1c680e, 'pay_id' => $sp56a5d4->id, 'fee' => $spf0e002, 'system_fee' => $spf0e002, 'income' => $spa806f7, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $spd4d093, 'created_at' => Carbon::now())); assert($spbaa1fa !== null); }); } catch (\Throwable $sp4b79b8) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sp4b79b8)); return self::renderResultPage($spfb41ce, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($sp1c680e === 0) { $this->shipOrder($spfb41ce, $sp6fdb49, $sp1c680e, null); return redirect('/pay/result/' . $sp6fdb49); } $sp1219d9 = $sp6fdb49; return $this->goPay($spfb41ce, $sp6fdb49, $sp1219d9, $sp56a5d4, $sp1c680e); } function pay(Request $spfb41ce, $sp6fdb49) { $spbaa1fa = \App\Order::whereOrderNo($sp6fdb49)->first(); if ($spbaa1fa == null) { return self::renderResultPage($spfb41ce, array('msg' => '订单未找到，请重试')); } if ($spbaa1fa->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp6fdb49); } $spd91b14 = 'pay: ' . $spbaa1fa->pay_id; $sp083f26 = $spbaa1fa->pay; if (!$sp083f26) { \Log::error($spd91b14 . ' cannot find Pay'); return $this->renderResultPage($spfb41ce, array('msg' => '支付方式未找到')); } $spd91b14 .= ',' . $sp083f26->driver; $sp2c498e = json_decode($sp083f26->config, true); $sp2c498e['payway'] = $sp083f26->way; $sp2c498e['out_trade_no'] = $sp6fdb49; try { $this->payApi = GatewayPay::getDriver($sp083f26->id, $sp083f26->driver); } catch (\Exception $sp4b79b8) { \Log::error($spd91b14 . ' cannot find Driver: ' . $sp4b79b8->getMessage()); return $this->renderResultPage($spfb41ce, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp2c498e, function ($sp6fdb49, $sp06731b, $spd94f0a) use($spfb41ce) { try { $this->shipOrder($spfb41ce, $sp6fdb49, $sp06731b, $spd94f0a); } catch (\Exception $sp4b79b8) { $this->renderResultPage($spfb41ce, array('success' => false, 'msg' => $sp4b79b8->getMessage())); } })) { \Log::notice($spd91b14 . ' already success' . '

'); return redirect('/pay/result/' . $sp6fdb49); } if ($spbaa1fa->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spfb41ce, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $spae5d03 = Product::where('id', $spbaa1fa->product_id)->where('enabled', 1)->first(); if ($spae5d03 == null) { return self::renderResultPage($spfb41ce, array('msg' => '该商品已下架')); } $spae5d03->setAttribute('count', count($spae5d03->cards) ? $spae5d03->cards[0]->count : 0); if ($spae5d03->count < $spbaa1fa->count) { return self::renderResultPage($spfb41ce, array('msg' => '该商品库存不足')); } $sp1219d9 = $sp6fdb49; return $this->goPay($spfb41ce, $sp6fdb49, $sp1219d9, $sp083f26, $spbaa1fa->paid); } function qrcode(Request $spfb41ce, $sp6fdb49, $sp36e42d) { $spbaa1fa = \App\Order::whereOrderNo($sp6fdb49)->with('product')->first(); if ($spbaa1fa == null) { return self::renderResultPage($spfb41ce, array('msg' => '订单未找到，请重试')); } if ($spbaa1fa->product_id !== \App\Product::ID_API && $spbaa1fa->product == null) { return self::renderResultPage($spfb41ce, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp36e42d, array('pay_id' => $spbaa1fa->pay_id, 'name' => $spbaa1fa->product->name . ' x ' . $spbaa1fa->count . '件', 'amount' => $spbaa1fa->paid, 'qrcode' => $spfb41ce->get('url'), 'id' => $sp6fdb49)); } function qrQuery(Request $spfb41ce, $sp5fd2cf) { $sp19a869 = $spfb41ce->input('id', ''); return self::payReturn($spfb41ce, $sp5fd2cf, $sp19a869); } function payReturn(Request $spfb41ce, $sp5fd2cf, $sp2f826c = '') { $spd91b14 = 'payReturn: ' . $sp5fd2cf; \Log::debug($spd91b14); $sp083f26 = \App\Pay::where('id', $sp5fd2cf)->first(); if (!$sp083f26) { return $this->renderResultPage($spfb41ce, array('success' => 0, 'msg' => '支付方式错误')); } $spd91b14 .= ',' . $sp083f26->driver; if (strlen($sp2f826c) > 0) { $spbaa1fa = \App\Order::whereOrderNo($sp2f826c)->first(); if ($spbaa1fa && ($spbaa1fa->status === \App\Order::STATUS_PAID || $spbaa1fa->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spd91b14 . ' already success' . '

'); if ($spfb41ce->ajax()) { return self::renderResultPage($spfb41ce, array('success' => 1, 'data' => '/pay/result/' . $sp2f826c), array('order' => $spbaa1fa)); } else { return redirect('/pay/result/' . $sp2f826c); } } } try { $this->payApi = GatewayPay::getDriver($sp083f26->id, $sp083f26->driver); } catch (\Exception $sp4b79b8) { \Log::error($spd91b14 . ' cannot find Driver: ' . $sp4b79b8->getMessage()); return $this->renderResultPage($spfb41ce, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp2c498e = json_decode($sp083f26->config, true); $sp2c498e['out_trade_no'] = $sp2f826c; $sp2c498e['payway'] = $sp083f26->way; \Log::debug($spd91b14 . ' will verify'); if ($this->payApi->verify($sp2c498e, function ($sp6fdb49, $sp06731b, $spd94f0a) use($spfb41ce, $spd91b14, &$sp2f826c) { $sp2f826c = $sp6fdb49; try { \Log::debug($spd91b14 . " shipOrder start, order_no: {$sp6fdb49}, amount: {$sp06731b}, trade_no: {$spd94f0a}"); $this->shipOrder($spfb41ce, $sp6fdb49, $sp06731b, $spd94f0a); \Log::debug($spd91b14 . ' shipOrder end, order_no: ' . $sp6fdb49); } catch (\Exception $sp4b79b8) { \Log::error($spd91b14 . ' shipOrder Exception: ' . $sp4b79b8->getMessage()); } })) { \Log::debug($spd91b14 . ' verify finished: 1' . '

'); if ($spfb41ce->ajax()) { return self::renderResultPage($spfb41ce, array('success' => 1, 'data' => '/pay/result/' . $sp2f826c)); } else { return redirect('/pay/result/' . $sp2f826c); } } else { \Log::debug($spd91b14 . ' verify finished: 0' . '

'); return $this->renderResultPage($spfb41ce, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spfb41ce, $sp5fd2cf) { $spd91b14 = 'payNotify pay_id: ' . $sp5fd2cf; \Log::debug($spd91b14); $sp083f26 = \App\Pay::where('id', $sp5fd2cf)->first(); if (!$sp083f26) { \Log::error($spd91b14 . ' cannot find PayModel'); echo 'fail'; die; } $spd91b14 .= ',' . $sp083f26->driver; try { $this->payApi = GatewayPay::getDriver($sp083f26->id, $sp083f26->driver); } catch (\Exception $sp4b79b8) { \Log::error($spd91b14 . ' cannot find Driver: ' . $sp4b79b8->getMessage()); echo 'fail'; die; } $sp2c498e = json_decode($sp083f26->config, true); $sp2c498e['payway'] = $sp083f26->way; $sp2c498e['isNotify'] = true; \Log::debug($spd91b14 . ' will verify'); $spd7b285 = $this->payApi->verify($sp2c498e, function ($sp6fdb49, $sp06731b, $spd94f0a) use($spfb41ce, $spd91b14) { try { \Log::debug($spd91b14 . " shipOrder start, order_no: {$sp6fdb49}, amount: {$sp06731b}, trade_no: {$spd94f0a}"); $this->shipOrder($spfb41ce, $sp6fdb49, $sp06731b, $spd94f0a); \Log::debug($spd91b14 . ' shipOrder end, order_no: ' . $sp6fdb49); } catch (\Exception $sp4b79b8) { \Log::error($spd91b14 . ' shipOrder Exception: ' . $sp4b79b8->getMessage()); } }); \Log::debug($spd91b14 . ' notify finished: ' . (int) $spd7b285 . '

'); die; } function result(Request $spfb41ce, $sp6fdb49) { $spbaa1fa = \App\Order::where('order_no', $sp6fdb49)->first(); if ($spbaa1fa == null) { return self::renderResultPage($spfb41ce, array('msg' => '订单未找到，请重试')); } if ($spbaa1fa->status === \App\Order::STATUS_PAID) { $sp5b4a98 = $spbaa1fa->user->qq; if ($spbaa1fa->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp4c4581 = '您购买的为手动充值商品，请耐心等待处理'; } else { $sp4c4581 = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($sp5b4a98) { $sp4c4581 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp5b4a98 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp5b4a98 . '</a>'; } return self::renderResultPage($spfb41ce, array('success' => false, 'title' => '订单已支付', 'msg' => $sp4c4581), array('order' => $spbaa1fa)); } elseif ($spbaa1fa->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spfb41ce, $spbaa1fa); } return self::renderResultPage($spfb41ce, array('success' => false, 'msg' => $spbaa1fa->remark ? '失败原因:<br>' . $spbaa1fa->remark : '订单支付失败，请重试'), array('order' => $spbaa1fa)); } function renderResultPage(Request $spfb41ce, $sp08ce12, $spd6d3f9 = array()) { if ($spfb41ce->ajax()) { if (@$sp08ce12['success']) { return Response::success($sp08ce12['data']); } else { return Response::fail('error', $sp08ce12['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp08ce12, 'data' => $spd6d3f9), $spd6d3f9)); } } function shipOrder($spfb41ce, $sp6fdb49, $sp06731b, $spd94f0a) { $spbaa1fa = \App\Order::whereOrderNo($sp6fdb49)->first(); if ($spbaa1fa === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp6fdb49 . ',trade_no:' . $spd94f0a . ',amount:' . $sp06731b . ']. die(\'success\');'); die('success'); } if ($spbaa1fa->paid > $sp06731b) { \Log::alert('shipOrder, price may error, order_no:' . $sp6fdb49 . ', paid:' . $spbaa1fa->paid . ', $amount get:' . $sp06731b); $spbaa1fa->remark = '支付金额(' . sprintf('%0.2f', $sp06731b / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $spbaa1fa->paid / 100) . ')'; $spbaa1fa->save(); throw new \Exception($spbaa1fa->remark); } $spae5d03 = null; if ($spbaa1fa->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp6fdb49); if (FundHelper::orderSuccess($spbaa1fa->id, function ($sp6cb1fa) use($spd94f0a, &$spbaa1fa, &$spae5d03) { $spbaa1fa = $sp6cb1fa; if ($spbaa1fa->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $spbaa1fa->order_no . ' already processed! #2'); return false; } $spae5d03 = $spbaa1fa->product()->lockForUpdate()->firstOrFail(); $spbaa1fa->pay_trade_no = $spd94f0a; $spbaa1fa->paid_at = Carbon::now(); if ($spae5d03->delivery === \App\Product::DELIVERY_MANUAL) { $spbaa1fa->status = \App\Order::STATUS_PAID; $spbaa1fa->send_status = \App\Order::SEND_STATUS_CARD_UN; $spbaa1fa->saveOrFail(); return true; } if ($spae5d03->delivery === \App\Product::DELIVERY_API) { $spc5023f = $spae5d03->createApiCards($spbaa1fa); } else { $spc5023f = Card::where('product_id', $spae5d03->retail_root->id)->whereRaw('`count_sold`<`count_all`')->take($spbaa1fa->count)->lockForUpdate()->get(); } $sp550c01 = false; if (count($spc5023f) === $spbaa1fa->count) { $sp550c01 = true; } else { $sp550c01 = false; if (count($spc5023f)) { foreach ($spc5023f as $sp38ab38) { if ($sp38ab38->type === \App\Card::TYPE_REPEAT && $sp38ab38->count >= $spbaa1fa->count) { $spc5023f = array($sp38ab38); $sp550c01 = true; break; } } } } if ($sp550c01 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $spbaa1fa->order_no . ', 购买数量:' . $spbaa1fa->count . ', 卡数量:' . count($spc5023f) . ' 卡密不足(已支付 未发货)'); $spbaa1fa->status = \App\Order::STATUS_PAID; $spbaa1fa->saveOrFail(); return true; } else { $sp889640 = array(); foreach ($spc5023f as $sp38ab38) { $sp889640[] = $sp38ab38->id; } $spbaa1fa->cards()->attach($sp889640); if (count($spc5023f) === 1 && $spc5023f[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $sp889640[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $spbaa1fa->count))); } else { \App\Card::whereIn('id', $sp889640)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $spbaa1fa->status = \App\Order::STATUS_SUCCESS; $spbaa1fa->saveOrFail(); $spae5d03->count_sold += $spbaa1fa->count; $spae5d03->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($spae5d03->count_warn > 0 && $spae5d03->count < $spae5d03->count_warn) { try { Mail::to($spbaa1fa->user->email)->Queue(new ProductCountWarn($spae5d03, $spae5d03->count)); } catch (\Throwable $sp4b79b8) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $spbaa1fa->product_id, 'email' => $spbaa1fa->user->email, 'exception' => $sp4b79b8->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spd18bc3 = @json_decode($spbaa1fa->contact_ext, true)['_mail']; if ($spd18bc3) { $spbaa1fa->sendEmail($spd18bc3); } } if ($spbaa1fa->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spe2fed0 = @json_decode($spbaa1fa->contact_ext, true)['_mobile']; if ($spe2fed0) { $spbaa1fa->sendSms($spe2fed0); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $spbaa1fa->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spfb41ce, $spbaa1fa) { return self::renderResultPage($spfb41ce, array('success' => true, 'msg' => $spbaa1fa->getSendMessage()), array('card_txt' => join('&#013;&#010;', $spbaa1fa->getCardsArray()), 'order' => $spbaa1fa, 'product' => $spbaa1fa->product)); } }