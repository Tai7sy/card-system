<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spfb5ae3, $spa19857, $sp4f357f, $spfffca7, $spdc4e90) { try { (new GatewayPay())->goPay($spfffca7, $spa19857, $sp4f357f, $sp4f357f, $spdc4e90); return self::renderResultPage($spfb5ae3, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sped8699) { return self::renderResultPage($spfb5ae3, array('msg' => $sped8699->getMessage())); } } function buy(Request $spfb5ae3) { $spddaf27 = $spfb5ae3->input('customer'); if (strlen($spddaf27) !== 32) { return self::renderResultPage($spfb5ae3, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spfb5ae3->getQueryString() . '
提交内容: ' . var_export($spddaf27) . ', 提交长度:' . strlen($spddaf27) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp5f5153 = Geetest\API::verify($spfb5ae3->input('geetest_challenge'), $spfb5ae3->input('geetest_validate'), $spfb5ae3->input('geetest_seccode')); if (!$sp5f5153) { return self::renderResultPage($spfb5ae3, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp66458a = (int) $spfb5ae3->input('category_id'); $sp3edfae = (int) $spfb5ae3->input('product_id'); $sp10fb8e = (int) $spfb5ae3->input('count'); $sp81431c = $spfb5ae3->input('coupon'); $sp836fef = $spfb5ae3->input('contact'); $sp771333 = $spfb5ae3->input('contact_ext') ?? null; $sp0090d8 = !empty(@json_decode($sp771333, true)['_mobile']); $spdd8674 = (int) $spfb5ae3->input('pay_id'); if (!$sp66458a || !$sp3edfae) { return self::renderResultPage($spfb5ae3, array('msg' => '请选择商品')); } if (strlen($sp836fef) < 1) { return self::renderResultPage($spfb5ae3, array('msg' => '请输入联系方式')); } $sp0ff930 = Category::findOrFail($sp66458a); $sp7eba0d = Product::where('id', $sp3edfae)->where('category_id', $sp66458a)->where('enabled', 1)->with(array('user'))->first(); if ($sp7eba0d == null || $sp7eba0d->user == null) { return self::renderResultPage($spfb5ae3, array('msg' => '该商品未找到，请重新选择')); } if ($sp7eba0d->password_open) { if ($sp7eba0d->password !== $spfb5ae3->input('product_password')) { return self::renderResultPage($spfb5ae3, array('msg' => '商品密码输入错误')); } } else { if ($sp0ff930->password_open) { if ($sp0ff930->password !== $spfb5ae3->input('category_password')) { if ($sp0ff930->getTmpPassword() !== $spfb5ae3->input('category_password')) { return self::renderResultPage($spfb5ae3, array('msg' => '分类密码输入错误')); } } } } if ($sp10fb8e < $sp7eba0d->buy_min) { return self::renderResultPage($spfb5ae3, array('msg' => '该商品最少购买' . $sp7eba0d->buy_min . '件，请重新选择')); } if ($sp10fb8e > $sp7eba0d->buy_max) { return self::renderResultPage($spfb5ae3, array('msg' => '该商品限购' . $sp7eba0d->buy_max . '件，请重新选择')); } if ($sp7eba0d->count < $sp10fb8e) { return self::renderResultPage($spfb5ae3, array('msg' => '该商品库存不足')); } $sp880618 = \App\Pay::find($spdd8674); if ($sp880618 == null || !$sp880618->enabled) { return self::renderResultPage($spfb5ae3, array('msg' => '支付方式未找到，请重新选择')); } $sp290a1d = $sp7eba0d->price; if ($sp7eba0d->price_whole) { $sp99651a = json_decode($sp7eba0d->price_whole, true); for ($sp53b67d = count($sp99651a) - 1; $sp53b67d >= 0; $sp53b67d--) { if ($sp10fb8e >= (int) $sp99651a[$sp53b67d][0]) { $sp290a1d = (int) $sp99651a[$sp53b67d][1]; break; } } } $sp5bf5aa = $sp10fb8e * $sp290a1d; $spdc4e90 = $sp5bf5aa; $spcff12c = 0; $sp1e1293 = null; if ($sp7eba0d->support_coupon && strlen($sp81431c) > 0) { $sp7cc331 = \App\Coupon::where('user_id', $sp7eba0d->user_id)->where('coupon', $sp81431c)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp7cc331 as $sp7bd94d) { if ($sp7bd94d->category_id === -1 || $sp7bd94d->category_id === $sp66458a && ($sp7bd94d->product_id === -1 || $sp7bd94d->product_id === $sp3edfae)) { if ($sp7bd94d->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spdc4e90 >= $sp7bd94d->discount_val) { $sp1e1293 = $sp7bd94d; $spcff12c = $sp7bd94d->discount_val; break; } if ($sp7bd94d->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp1e1293 = $sp7bd94d; $spcff12c = (int) round($spdc4e90 * $sp7bd94d->discount_val / 100); break; } } } if ($sp1e1293 === null) { return self::renderResultPage($spfb5ae3, array('msg' => '优惠券信息错误，请重新输入')); } $spdc4e90 -= $spcff12c; } $sp631e87 = (int) round($spdc4e90 * $sp880618->fee_system); $sp69b501 = $spdc4e90 - $sp631e87; $spd545c8 = $sp0090d8 ? System::_getInt('sms_price', 10) : 0; $spdc4e90 += $spd545c8; $sp0dee07 = $sp10fb8e * $sp7eba0d->cost; $spa19857 = \App\Order::unique_no(); try { DB::transaction(function () use($sp7eba0d, $spa19857, $sp1e1293, $sp836fef, $sp771333, $spddaf27, $sp10fb8e, $sp0dee07, $sp5bf5aa, $spd545c8, $spcff12c, $spdc4e90, $sp880618, $sp631e87, $sp69b501) { if ($sp1e1293) { $sp1e1293->status = \App\Coupon::STATUS_USED; $sp1e1293->count_used++; $sp1e1293->save(); $sp14a4d4 = '使用优惠券: ' . $sp1e1293->coupon; } else { $sp14a4d4 = null; } $sp1abdd8 = \App\Order::create(array('user_id' => $sp7eba0d->user_id, 'order_no' => $spa19857, 'product_id' => $sp7eba0d->id, 'product_name' => $sp7eba0d->name, 'count' => $sp10fb8e, 'ip' => Helper::getIP(), 'customer' => $spddaf27, 'contact' => $sp836fef, 'contact_ext' => $sp771333, 'cost' => $sp0dee07, 'price' => $sp5bf5aa, 'sms_price' => $spd545c8, 'discount' => $spcff12c, 'paid' => $spdc4e90, 'pay_id' => $sp880618->id, 'fee' => $sp631e87, 'system_fee' => $sp631e87, 'income' => $sp69b501, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp14a4d4, 'created_at' => Carbon::now())); assert($sp1abdd8 !== null); }); } catch (\Throwable $sped8699) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $sped8699)); return self::renderResultPage($spfb5ae3, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($spdc4e90 === 0) { $this->shipOrder($spfb5ae3, $spa19857, $spdc4e90, null); return redirect('/pay/result/' . $spa19857); } $sp4f357f = $spa19857; return $this->goPay($spfb5ae3, $spa19857, $sp4f357f, $sp880618, $spdc4e90); } function pay(Request $spfb5ae3, $spa19857) { $sp1abdd8 = \App\Order::whereOrderNo($spa19857)->first(); if ($sp1abdd8 == null) { return self::renderResultPage($spfb5ae3, array('msg' => '订单未找到，请重试')); } if ($sp1abdd8->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spa19857); } $sp4374d2 = 'pay: ' . $sp1abdd8->pay_id; $spfffca7 = $sp1abdd8->pay; if (!$spfffca7) { \Log::error($sp4374d2 . ' cannot find Pay'); return $this->renderResultPage($spfb5ae3, array('msg' => '支付方式未找到')); } $sp4374d2 .= ',' . $spfffca7->driver; $speeef4e = json_decode($spfffca7->config, true); $speeef4e['payway'] = $spfffca7->way; $speeef4e['out_trade_no'] = $spa19857; try { $this->payApi = GatewayPay::getDriver($spfffca7->id, $spfffca7->driver); } catch (\Exception $sped8699) { \Log::error($sp4374d2 . ' cannot find Driver: ' . $sped8699->getMessage()); return $this->renderResultPage($spfb5ae3, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($speeef4e, function ($spa19857, $sp8ecca6, $spd50168) use($spfb5ae3) { try { $this->shipOrder($spfb5ae3, $spa19857, $sp8ecca6, $spd50168); } catch (\Exception $sped8699) { $this->renderResultPage($spfb5ae3, array('success' => false, 'msg' => $sped8699->getMessage())); } })) { \Log::notice($sp4374d2 . ' already success' . '

'); return redirect('/pay/result/' . $spa19857); } if ($sp1abdd8->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spfb5ae3, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $sp7eba0d = Product::where('id', $sp1abdd8->product_id)->where('enabled', 1)->first(); if ($sp7eba0d == null) { return self::renderResultPage($spfb5ae3, array('msg' => '该商品已下架')); } $sp7eba0d->setAttribute('count', count($sp7eba0d->cards) ? $sp7eba0d->cards[0]->count : 0); if ($sp7eba0d->count < $sp1abdd8->count) { return self::renderResultPage($spfb5ae3, array('msg' => '该商品库存不足')); } $sp4f357f = $spa19857; return $this->goPay($spfb5ae3, $spa19857, $sp4f357f, $spfffca7, $sp1abdd8->paid); } function qrcode(Request $spfb5ae3, $spa19857, $spe8e25b) { $sp1abdd8 = \App\Order::whereOrderNo($spa19857)->with('product')->first(); if ($sp1abdd8 == null) { return self::renderResultPage($spfb5ae3, array('msg' => '订单未找到，请重试')); } if ($sp1abdd8->product_id !== \App\Product::ID_API && $sp1abdd8->product == null) { return self::renderResultPage($spfb5ae3, array('msg' => '商品未找到，请重试')); } return view('pay/' . $spe8e25b, array('pay_id' => $sp1abdd8->pay_id, 'name' => $sp1abdd8->product->name . ' x ' . $sp1abdd8->count . '件', 'amount' => $sp1abdd8->paid, 'qrcode' => $spfb5ae3->get('url'), 'id' => $spa19857)); } function qrQuery(Request $spfb5ae3, $spdd8674) { $sp0fb26f = $spfb5ae3->input('id', ''); return self::payReturn($spfb5ae3, $spdd8674, $sp0fb26f); } function payReturn(Request $spfb5ae3, $spdd8674, $spf03ee6 = '') { $sp4374d2 = 'payReturn: ' . $spdd8674; \Log::debug($sp4374d2); $spfffca7 = \App\Pay::where('id', $spdd8674)->first(); if (!$spfffca7) { return $this->renderResultPage($spfb5ae3, array('success' => 0, 'msg' => '支付方式错误')); } $sp4374d2 .= ',' . $spfffca7->driver; if (strlen($spf03ee6) > 0) { $sp1abdd8 = \App\Order::whereOrderNo($spf03ee6)->first(); if ($sp1abdd8 && ($sp1abdd8->status === \App\Order::STATUS_PAID || $sp1abdd8->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp4374d2 . ' already success' . '

'); if ($spfb5ae3->ajax()) { return self::renderResultPage($spfb5ae3, array('success' => 1, 'data' => '/pay/result/' . $spf03ee6), array('order' => $sp1abdd8)); } else { return redirect('/pay/result/' . $spf03ee6); } } } try { $this->payApi = GatewayPay::getDriver($spfffca7->id, $spfffca7->driver); } catch (\Exception $sped8699) { \Log::error($sp4374d2 . ' cannot find Driver: ' . $sped8699->getMessage()); return $this->renderResultPage($spfb5ae3, array('success' => 0, 'msg' => '支付驱动未找到')); } $speeef4e = json_decode($spfffca7->config, true); $speeef4e['out_trade_no'] = $spf03ee6; $speeef4e['payway'] = $spfffca7->way; \Log::debug($sp4374d2 . ' will verify'); if ($this->payApi->verify($speeef4e, function ($spa19857, $sp8ecca6, $spd50168) use($spfb5ae3, $sp4374d2, &$spf03ee6) { $spf03ee6 = $spa19857; try { \Log::debug($sp4374d2 . " shipOrder start, order_no: {$spa19857}, amount: {$sp8ecca6}, trade_no: {$spd50168}"); $this->shipOrder($spfb5ae3, $spa19857, $sp8ecca6, $spd50168); \Log::debug($sp4374d2 . ' shipOrder end, order_no: ' . $spa19857); } catch (\Exception $sped8699) { \Log::error($sp4374d2 . ' shipOrder Exception: ' . $sped8699->getMessage()); } })) { \Log::debug($sp4374d2 . ' verify finished: 1' . '

'); if ($spfb5ae3->ajax()) { return self::renderResultPage($spfb5ae3, array('success' => 1, 'data' => '/pay/result/' . $spf03ee6)); } else { return redirect('/pay/result/' . $spf03ee6); } } else { \Log::debug($sp4374d2 . ' verify finished: 0' . '

'); return $this->renderResultPage($spfb5ae3, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spfb5ae3, $spdd8674) { $sp4374d2 = 'payNotify pay_id: ' . $spdd8674; \Log::debug($sp4374d2); $spfffca7 = \App\Pay::where('id', $spdd8674)->first(); if (!$spfffca7) { \Log::error($sp4374d2 . ' cannot find PayModel'); echo 'fail'; die; } $sp4374d2 .= ',' . $spfffca7->driver; try { $this->payApi = GatewayPay::getDriver($spfffca7->id, $spfffca7->driver); } catch (\Exception $sped8699) { \Log::error($sp4374d2 . ' cannot find Driver: ' . $sped8699->getMessage()); echo 'fail'; die; } $speeef4e = json_decode($spfffca7->config, true); $speeef4e['payway'] = $spfffca7->way; $speeef4e['isNotify'] = true; \Log::debug($sp4374d2 . ' will verify'); $sp5f5153 = $this->payApi->verify($speeef4e, function ($spa19857, $sp8ecca6, $spd50168) use($spfb5ae3, $sp4374d2) { try { \Log::debug($sp4374d2 . " shipOrder start, order_no: {$spa19857}, amount: {$sp8ecca6}, trade_no: {$spd50168}"); $this->shipOrder($spfb5ae3, $spa19857, $sp8ecca6, $spd50168); \Log::debug($sp4374d2 . ' shipOrder end, order_no: ' . $spa19857); } catch (\Exception $sped8699) { \Log::error($sp4374d2 . ' shipOrder Exception: ' . $sped8699->getMessage()); } }); \Log::debug($sp4374d2 . ' notify finished: ' . (int) $sp5f5153 . '

'); die; } function result(Request $spfb5ae3, $spa19857) { $sp1abdd8 = \App\Order::where('order_no', $spa19857)->first(); if ($sp1abdd8 == null) { return self::renderResultPage($spfb5ae3, array('msg' => '订单未找到，请重试')); } if ($sp1abdd8->status === \App\Order::STATUS_PAID) { $sp100139 = $sp1abdd8->user->qq; if ($sp1abdd8->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp3c95ae = '您购买的为手动充值商品，请耐心等待处理'; } else { $sp3c95ae = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($sp100139) { $sp3c95ae .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp100139 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $sp100139 . '</a>'; } return self::renderResultPage($spfb5ae3, array('success' => false, 'title' => '订单已支付', 'msg' => $sp3c95ae), array('order' => $sp1abdd8)); } elseif ($sp1abdd8->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spfb5ae3, $sp1abdd8); } return self::renderResultPage($spfb5ae3, array('success' => false, 'msg' => $sp1abdd8->remark ? '失败原因:<br>' . $sp1abdd8->remark : '订单支付失败，请重试'), array('order' => $sp1abdd8)); } function renderResultPage(Request $spfb5ae3, $spe37386, $spa546f1 = array()) { if ($spfb5ae3->ajax()) { if (@$spe37386['success']) { return Response::success($spe37386['data']); } else { return Response::fail('error', $spe37386['msg']); } } else { return view('pay.result', array_merge(array('result' => $spe37386, 'data' => $spa546f1), $spa546f1)); } } function shipOrder($spfb5ae3, $spa19857, $sp8ecca6, $spd50168) { $sp1abdd8 = \App\Order::whereOrderNo($spa19857)->first(); if ($sp1abdd8 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $spa19857 . ',trade_no:' . $spd50168 . ',amount:' . $sp8ecca6 . ']. die(\'success\');'); die('success'); } if ($sp1abdd8->paid > $sp8ecca6) { \Log::alert('shipOrder, price may error, order_no:' . $spa19857 . ', paid:' . $sp1abdd8->paid . ', $amount get:' . $sp8ecca6); $sp1abdd8->remark = '支付金额(' . sprintf('%0.2f', $sp8ecca6 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp1abdd8->paid / 100) . ')'; $sp1abdd8->save(); throw new \Exception($sp1abdd8->remark); } $sp7eba0d = null; if ($sp1abdd8->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $spa19857); if (FundHelper::orderSuccess($sp1abdd8->id, function ($sp1b7923) use($spd50168, &$sp1abdd8, &$sp7eba0d) { $sp1abdd8 = $sp1b7923; if ($sp1abdd8->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp1abdd8->order_no . ' already processed! #2'); return false; } $sp7eba0d = $sp1abdd8->product()->lockForUpdate()->firstOrFail(); $sp1abdd8->pay_trade_no = $spd50168; $sp1abdd8->paid_at = Carbon::now(); if ($sp7eba0d->delivery === \App\Product::DELIVERY_MANUAL) { $sp1abdd8->status = \App\Order::STATUS_PAID; $sp1abdd8->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp1abdd8->saveOrFail(); return true; } if ($sp7eba0d->delivery === \App\Product::DELIVERY_API) { $spcbd80a = $sp7eba0d->createApiCards($sp1abdd8); } else { $spcbd80a = Card::where('product_id', $sp7eba0d->retail_root->id)->whereRaw('`count_sold`<`count_all`')->take($sp1abdd8->count)->lockForUpdate()->get(); } $spe4d884 = false; if (count($spcbd80a) === $sp1abdd8->count) { $spe4d884 = true; } else { $spe4d884 = false; if (count($spcbd80a)) { foreach ($spcbd80a as $sp62d3f6) { if ($sp62d3f6->type === \App\Card::TYPE_REPEAT && $sp62d3f6->count >= $sp1abdd8->count) { $spcbd80a = array($sp62d3f6); $spe4d884 = true; break; } } } } if ($spe4d884 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp1abdd8->order_no . ', 购买数量:' . $sp1abdd8->count . ', 卡数量:' . count($spcbd80a) . ' 卡密不足(已支付 未发货)'); $sp1abdd8->status = \App\Order::STATUS_PAID; $sp1abdd8->saveOrFail(); return true; } else { $spcd0d98 = array(); foreach ($spcbd80a as $sp62d3f6) { $spcd0d98[] = $sp62d3f6->id; } $sp1abdd8->cards()->attach($spcd0d98); if (count($spcbd80a) === 1 && $spcbd80a[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $spcd0d98[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $sp1abdd8->count))); } else { \App\Card::whereIn('id', $spcd0d98)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $sp1abdd8->status = \App\Order::STATUS_SUCCESS; $sp1abdd8->saveOrFail(); $sp7eba0d->count_sold += $sp1abdd8->count; $sp7eba0d->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp7eba0d->count_warn > 0 && $sp7eba0d->count < $sp7eba0d->count_warn) { try { Mail::to($sp1abdd8->user->email)->Queue(new ProductCountWarn($sp7eba0d, $sp7eba0d->count)); } catch (\Throwable $sped8699) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp1abdd8->product_id, 'email' => $sp1abdd8->user->email, 'exception' => $sped8699->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spc043b0 = @json_decode($sp1abdd8->contact_ext, true)['_mail']; if ($spc043b0) { $sp1abdd8->sendEmail($spc043b0); } } if ($sp1abdd8->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp234667 = @json_decode($sp1abdd8->contact_ext, true)['_mobile']; if ($sp234667) { $sp1abdd8->sendSms($sp234667); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp1abdd8->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spfb5ae3, $sp1abdd8) { return self::renderResultPage($spfb5ae3, array('success' => true, 'msg' => $sp1abdd8->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp1abdd8->getCardsArray()), 'order' => $sp1abdd8, 'product' => $sp1abdd8->product)); } }