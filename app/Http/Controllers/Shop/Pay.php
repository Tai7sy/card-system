<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp0aae4c, $spdcb7fd, $sp481862, $sp486a43, $spcea7e8) { try { (new GatewayPay())->goPay($sp486a43, $spdcb7fd, $sp481862, $sp481862, $spcea7e8); return self::renderResultPage($sp0aae4c, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $spb62437) { return self::renderResultPage($sp0aae4c, array('msg' => $spb62437->getMessage())); } } function buy(Request $sp0aae4c) { $sp21127d = $sp0aae4c->input('customer'); if (strlen($sp21127d) !== 32) { return self::renderResultPage($sp0aae4c, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp0aae4c->getQueryString() . '
提交内容: ' . var_export($sp21127d) . ', 提交长度:' . strlen($sp21127d) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $spf96e67 = Geetest\API::verify($sp0aae4c->input('geetest_challenge'), $sp0aae4c->input('geetest_validate'), $sp0aae4c->input('geetest_seccode')); if (!$spf96e67) { return self::renderResultPage($sp0aae4c, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp18887c = (int) $sp0aae4c->input('category_id'); $sp2baf03 = (int) $sp0aae4c->input('product_id'); $sp3bfbd2 = (int) $sp0aae4c->input('count'); $spe01d85 = $sp0aae4c->input('coupon'); $spb9200e = $sp0aae4c->input('contact'); $sp74b4f1 = $sp0aae4c->input('contact_ext') ?? null; $sp6fd1a2 = !empty(@json_decode($sp74b4f1, true)['_mobile']); $sp6a6615 = (int) $sp0aae4c->input('pay_id'); if (!$sp18887c || !$sp2baf03) { return self::renderResultPage($sp0aae4c, array('msg' => '请选择商品')); } if (strlen($spb9200e) < 1) { return self::renderResultPage($sp0aae4c, array('msg' => '请输入联系方式')); } $spe1f015 = Category::findOrFail($sp18887c); $spddd5a8 = Product::where('id', $sp2baf03)->where('category_id', $sp18887c)->where('enabled', 1)->with(array('user'))->first(); if ($spddd5a8 == null || $spddd5a8->user == null) { return self::renderResultPage($sp0aae4c, array('msg' => '该商品未找到，请重新选择')); } if ($spddd5a8->password_open) { if ($spddd5a8->password !== $sp0aae4c->input('product_password')) { return self::renderResultPage($sp0aae4c, array('msg' => '商品密码输入错误')); } } else { if ($spe1f015->password_open) { if ($spe1f015->password !== $sp0aae4c->input('category_password')) { if ($spe1f015->getTmpPassword() !== $sp0aae4c->input('category_password')) { return self::renderResultPage($sp0aae4c, array('msg' => '分类密码输入错误')); } } } } if ($sp3bfbd2 < $spddd5a8->buy_min) { return self::renderResultPage($sp0aae4c, array('msg' => '该商品最少购买' . $spddd5a8->buy_min . '件，请重新选择')); } if ($sp3bfbd2 > $spddd5a8->buy_max) { return self::renderResultPage($sp0aae4c, array('msg' => '该商品限购' . $spddd5a8->buy_max . '件，请重新选择')); } if ($spddd5a8->count < $sp3bfbd2) { return self::renderResultPage($sp0aae4c, array('msg' => '该商品库存不足')); } $sp7023fd = \App\Pay::find($sp6a6615); if ($sp7023fd == null || !$sp7023fd->enabled) { return self::renderResultPage($sp0aae4c, array('msg' => '支付方式未找到，请重新选择')); } $spebd845 = $spddd5a8->price; if ($spddd5a8->price_whole) { $spf68cab = json_decode($spddd5a8->price_whole, true); for ($spda68a1 = count($spf68cab) - 1; $spda68a1 >= 0; $spda68a1--) { if ($sp3bfbd2 >= (int) $spf68cab[$spda68a1][0]) { $spebd845 = (int) $spf68cab[$spda68a1][1]; break; } } } $sp737bbd = $sp3bfbd2 * $spebd845; $spcea7e8 = $sp737bbd; $sp317014 = 0; $spfa0456 = null; if ($spddd5a8->support_coupon && strlen($spe01d85) > 0) { $sp124ce4 = \App\Coupon::where('user_id', $spddd5a8->user_id)->where('coupon', $spe01d85)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp124ce4 as $sp396447) { if ($sp396447->category_id === -1 || $sp396447->category_id === $sp18887c && ($sp396447->product_id === -1 || $sp396447->product_id === $sp2baf03)) { if ($sp396447->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spcea7e8 >= $sp396447->discount_val) { $spfa0456 = $sp396447; $sp317014 = $sp396447->discount_val; break; } if ($sp396447->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $spfa0456 = $sp396447; $sp317014 = (int) round($spcea7e8 * $sp396447->discount_val / 100); break; } } } if ($spfa0456 === null) { return self::renderResultPage($sp0aae4c, array('msg' => '优惠券信息错误，请重新输入')); } $spcea7e8 -= $sp317014; } $spe4d1c9 = (int) round($spcea7e8 * $sp7023fd->fee_system); $sp7bc431 = $spcea7e8 - $spe4d1c9; $sp19d37c = $sp6fd1a2 ? System::_getInt('sms_price', 10) : 0; $spcea7e8 += $sp19d37c; $spffc8df = $sp3bfbd2 * $spddd5a8->cost; $spdcb7fd = \App\Order::unique_no(); try { DB::transaction(function () use($spddd5a8, $spdcb7fd, $spfa0456, $spb9200e, $sp74b4f1, $sp21127d, $sp3bfbd2, $spffc8df, $sp737bbd, $sp19d37c, $sp317014, $spcea7e8, $sp7023fd, $spe4d1c9, $sp7bc431) { if ($spfa0456) { $spfa0456->status = \App\Coupon::STATUS_USED; $spfa0456->count_used++; $spfa0456->save(); $spf6348e = '使用优惠券: ' . $spfa0456->coupon; } else { $spf6348e = null; } $speb076b = \App\Order::create(array('user_id' => $spddd5a8->user_id, 'order_no' => $spdcb7fd, 'product_id' => $spddd5a8->id, 'product_name' => $spddd5a8->name, 'count' => $sp3bfbd2, 'ip' => Helper::getIP(), 'customer' => $sp21127d, 'contact' => $spb9200e, 'contact_ext' => $sp74b4f1, 'cost' => $spffc8df, 'price' => $sp737bbd, 'sms_price' => $sp19d37c, 'discount' => $sp317014, 'paid' => $spcea7e8, 'pay_id' => $sp7023fd->id, 'fee' => $spe4d1c9, 'system_fee' => $spe4d1c9, 'income' => $sp7bc431, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $spf6348e, 'created_at' => Carbon::now())); assert($speb076b !== null); }); } catch (\Throwable $spb62437) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $spb62437)); return self::renderResultPage($sp0aae4c, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($spcea7e8 === 0) { $this->shipOrder($sp0aae4c, $spdcb7fd, $spcea7e8, null); return redirect('/pay/result/' . $spdcb7fd); } $sp481862 = $spdcb7fd; return $this->goPay($sp0aae4c, $spdcb7fd, $sp481862, $sp7023fd, $spcea7e8); } function pay(Request $sp0aae4c, $spdcb7fd) { $speb076b = \App\Order::whereOrderNo($spdcb7fd)->first(); if ($speb076b == null) { return self::renderResultPage($sp0aae4c, array('msg' => '订单未找到，请重试')); } if ($speb076b->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spdcb7fd); } $spa8e328 = 'pay: ' . $speb076b->pay_id; $sp486a43 = $speb076b->pay; if (!$sp486a43) { \Log::error($spa8e328 . ' cannot find Pay'); return $this->renderResultPage($sp0aae4c, array('msg' => '支付方式未找到')); } $spa8e328 .= ',' . $sp486a43->driver; $sp85fcba = json_decode($sp486a43->config, true); $sp85fcba['payway'] = $sp486a43->way; $sp85fcba['out_trade_no'] = $spdcb7fd; try { $this->payApi = GatewayPay::getDriver($sp486a43->id, $sp486a43->driver); } catch (\Exception $spb62437) { \Log::error($spa8e328 . ' cannot find Driver: ' . $spb62437->getMessage()); return $this->renderResultPage($sp0aae4c, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp85fcba, function ($spdcb7fd, $sp7d07f3, $sp99e0fc) use($sp0aae4c) { try { $this->shipOrder($sp0aae4c, $spdcb7fd, $sp7d07f3, $sp99e0fc); } catch (\Exception $spb62437) { $this->renderResultPage($sp0aae4c, array('success' => false, 'msg' => $spb62437->getMessage())); } })) { \Log::notice($spa8e328 . ' already success' . '

'); return redirect('/pay/result/' . $spdcb7fd); } if ($speb076b->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp0aae4c, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $spddd5a8 = Product::where('id', $speb076b->product_id)->where('enabled', 1)->first(); if ($spddd5a8 == null) { return self::renderResultPage($sp0aae4c, array('msg' => '该商品已下架')); } $spddd5a8->setAttribute('count', count($spddd5a8->cards) ? $spddd5a8->cards[0]->count : 0); if ($spddd5a8->count < $speb076b->count) { return self::renderResultPage($sp0aae4c, array('msg' => '该商品库存不足')); } $sp481862 = $spdcb7fd; return $this->goPay($sp0aae4c, $spdcb7fd, $sp481862, $sp486a43, $speb076b->paid); } function qrcode(Request $sp0aae4c, $spdcb7fd, $sp8a8696) { $speb076b = \App\Order::whereOrderNo($spdcb7fd)->with('product')->first(); if ($speb076b == null) { return self::renderResultPage($sp0aae4c, array('msg' => '订单未找到，请重试')); } if ($speb076b->product_id !== \App\Product::ID_API && $speb076b->product == null) { return self::renderResultPage($sp0aae4c, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp8a8696, array('pay_id' => $speb076b->pay_id, 'name' => $speb076b->product->name . ' x ' . $speb076b->count . '件', 'amount' => $speb076b->paid, 'qrcode' => $sp0aae4c->get('url'), 'id' => $spdcb7fd)); } function qrQuery(Request $sp0aae4c, $sp6a6615) { $sp43f4c3 = $sp0aae4c->input('id', ''); return self::payReturn($sp0aae4c, $sp6a6615, $sp43f4c3); } function payReturn(Request $sp0aae4c, $sp6a6615, $sp4d5c31 = '') { $spa8e328 = 'payReturn: ' . $sp6a6615; \Log::debug($spa8e328); $sp486a43 = \App\Pay::where('id', $sp6a6615)->first(); if (!$sp486a43) { return $this->renderResultPage($sp0aae4c, array('success' => 0, 'msg' => '支付方式错误')); } $spa8e328 .= ',' . $sp486a43->driver; if (strlen($sp4d5c31) > 0) { $speb076b = \App\Order::whereOrderNo($sp4d5c31)->first(); if ($speb076b && ($speb076b->status === \App\Order::STATUS_PAID || $speb076b->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spa8e328 . ' already success' . '

'); if ($sp0aae4c->ajax()) { return self::renderResultPage($sp0aae4c, array('success' => 1, 'data' => '/pay/result/' . $sp4d5c31), array('order' => $speb076b)); } else { return redirect('/pay/result/' . $sp4d5c31); } } } try { $this->payApi = GatewayPay::getDriver($sp486a43->id, $sp486a43->driver); } catch (\Exception $spb62437) { \Log::error($spa8e328 . ' cannot find Driver: ' . $spb62437->getMessage()); return $this->renderResultPage($sp0aae4c, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp85fcba = json_decode($sp486a43->config, true); $sp85fcba['out_trade_no'] = $sp4d5c31; $sp85fcba['payway'] = $sp486a43->way; \Log::debug($spa8e328 . ' will verify'); if ($this->payApi->verify($sp85fcba, function ($spdcb7fd, $sp7d07f3, $sp99e0fc) use($sp0aae4c, $spa8e328, &$sp4d5c31) { $sp4d5c31 = $spdcb7fd; try { \Log::debug($spa8e328 . " shipOrder start, order_no: {$spdcb7fd}, amount: {$sp7d07f3}, trade_no: {$sp99e0fc}"); $this->shipOrder($sp0aae4c, $spdcb7fd, $sp7d07f3, $sp99e0fc); \Log::debug($spa8e328 . ' shipOrder end, order_no: ' . $spdcb7fd); } catch (\Exception $spb62437) { \Log::error($spa8e328 . ' shipOrder Exception: ' . $spb62437->getMessage()); } })) { \Log::debug($spa8e328 . ' verify finished: 1' . '

'); if ($sp0aae4c->ajax()) { return self::renderResultPage($sp0aae4c, array('success' => 1, 'data' => '/pay/result/' . $sp4d5c31)); } else { return redirect('/pay/result/' . $sp4d5c31); } } else { \Log::debug($spa8e328 . ' verify finished: 0' . '

'); return $this->renderResultPage($sp0aae4c, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp0aae4c, $sp6a6615) { $spa8e328 = 'payNotify pay_id: ' . $sp6a6615; \Log::debug($spa8e328); $sp486a43 = \App\Pay::where('id', $sp6a6615)->first(); if (!$sp486a43) { \Log::error($spa8e328 . ' cannot find PayModel'); echo 'fail'; die; } $spa8e328 .= ',' . $sp486a43->driver; try { $this->payApi = GatewayPay::getDriver($sp486a43->id, $sp486a43->driver); } catch (\Exception $spb62437) { \Log::error($spa8e328 . ' cannot find Driver: ' . $spb62437->getMessage()); echo 'fail'; die; } $sp85fcba = json_decode($sp486a43->config, true); $sp85fcba['payway'] = $sp486a43->way; $sp85fcba['isNotify'] = true; \Log::debug($spa8e328 . ' will verify'); $spf96e67 = $this->payApi->verify($sp85fcba, function ($spdcb7fd, $sp7d07f3, $sp99e0fc) use($sp0aae4c, $spa8e328) { try { \Log::debug($spa8e328 . " shipOrder start, order_no: {$spdcb7fd}, amount: {$sp7d07f3}, trade_no: {$sp99e0fc}"); $this->shipOrder($sp0aae4c, $spdcb7fd, $sp7d07f3, $sp99e0fc); \Log::debug($spa8e328 . ' shipOrder end, order_no: ' . $spdcb7fd); } catch (\Exception $spb62437) { \Log::error($spa8e328 . ' shipOrder Exception: ' . $spb62437->getMessage()); } }); \Log::debug($spa8e328 . ' notify finished: ' . (int) $spf96e67 . '

'); die; } function result(Request $sp0aae4c, $spdcb7fd) { $speb076b = \App\Order::where('order_no', $spdcb7fd)->first(); if ($speb076b == null) { return self::renderResultPage($sp0aae4c, array('msg' => '订单未找到，请重试')); } if ($speb076b->status === \App\Order::STATUS_PAID) { $spc12ccb = $speb076b->user->qq; if ($speb076b->product->delivery === \App\Product::DELIVERY_MANUAL) { $spa374f7 = '您购买的为手动充值商品，请耐心等待处理'; } else { $spa374f7 = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($spc12ccb) { $spa374f7 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spc12ccb . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spc12ccb . '</a>'; } return self::renderResultPage($sp0aae4c, array('success' => false, 'title' => '订单已支付', 'msg' => $spa374f7), array('order' => $speb076b)); } elseif ($speb076b->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp0aae4c, $speb076b); } return self::renderResultPage($sp0aae4c, array('success' => false, 'msg' => $speb076b->remark ? '失败原因:<br>' . $speb076b->remark : '订单支付失败，请重试'), array('order' => $speb076b)); } function renderResultPage(Request $sp0aae4c, $sp005b78, $sp335539 = array()) { if ($sp0aae4c->ajax()) { if (@$sp005b78['success']) { return Response::success($sp005b78['data']); } else { return Response::fail('error', $sp005b78['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp005b78, 'data' => $sp335539), $sp335539)); } } function shipOrder($sp0aae4c, $spdcb7fd, $sp7d07f3, $sp99e0fc) { $speb076b = \App\Order::whereOrderNo($spdcb7fd)->first(); if ($speb076b === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $spdcb7fd . ',trade_no:' . $sp99e0fc . ',amount:' . $sp7d07f3 . ']. die(\'success\');'); die('success'); } if ($speb076b->paid > $sp7d07f3) { \Log::alert('shipOrder, price may error, order_no:' . $spdcb7fd . ', paid:' . $speb076b->paid . ', $amount get:' . $sp7d07f3); $speb076b->remark = '支付金额(' . sprintf('%0.2f', $sp7d07f3 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $speb076b->paid / 100) . ')'; $speb076b->save(); throw new \Exception($speb076b->remark); } $spddd5a8 = null; if ($speb076b->status === \App\Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $spdcb7fd); $sp1948da = $speb076b->id; if (FundHelper::orderSuccess($speb076b->id, function ($spdaa9dd) use($sp1948da, $sp99e0fc, &$speb076b, &$spddd5a8) { $speb076b = $spdaa9dd; if ($speb076b->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $speb076b->order_no . ' already processed! #2'); return false; } $spddd5a8 = $speb076b->product()->lockForUpdate()->firstOrFail(); $speb076b->pay_trade_no = $sp99e0fc; $speb076b->paid_at = Carbon::now(); if ($spddd5a8->delivery === \App\Product::DELIVERY_MANUAL) { $speb076b->status = \App\Order::STATUS_PAID; $speb076b->send_status = \App\Order::SEND_STATUS_CARD_UN; $speb076b->saveOrFail(); return true; } $sp5d4a61 = Card::where('product_id', $speb076b->product_id)->whereRaw('`count_sold`<`count_all`')->take($speb076b->count)->lockForUpdate()->get(); if (count($sp5d4a61) !== $speb076b->count) { Log::alert('Shop.Pay.shipOrder: 订单:' . $speb076b->order_no . ', 购买数量:' . $speb076b->count . ', 卡数量:' . count($sp5d4a61) . ' 卡密不足(已支付 未发货)'); $speb076b->status = \App\Order::STATUS_PAID; $speb076b->saveOrFail(); return true; } else { $sp4143ec = array(); foreach ($sp5d4a61 as $spcf055a) { $sp4143ec[] = $spcf055a->id; } $speb076b->cards()->attach($sp4143ec); Card::whereIn('id', $sp4143ec)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $speb076b->status = \App\Order::STATUS_SUCCESS; $speb076b->saveOrFail(); $spddd5a8->count_sold += $speb076b->count; $spddd5a8->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($spddd5a8->count_warn > 0 && $spddd5a8->count < $spddd5a8->count_warn) { try { Mail::to($speb076b->user->email)->Queue(new ProductCountWarn($spddd5a8, $spddd5a8->count)); } catch (\Throwable $spb62437) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $speb076b->product_id, 'email' => $speb076b->user->email, 'exception' => $spb62437->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spcdd0ce = @json_decode($speb076b->contact_ext, true)['_mail']; if ($spcdd0ce) { $speb076b->sendEmail($spcdd0ce); } } if ($speb076b->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $sp4783e6 = @json_decode($speb076b->contact_ext, true)['_mobile']; if ($sp4783e6) { $speb076b->sendSms($sp4783e6); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $speb076b->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp0aae4c, $speb076b) { return self::renderResultPage($sp0aae4c, array('success' => true, 'msg' => $speb076b->getSendMessage()), array('card_txt' => join('&#013;&#010;', $speb076b->getCardsArray()), 'order' => $speb076b, 'product' => $speb076b->product)); } }