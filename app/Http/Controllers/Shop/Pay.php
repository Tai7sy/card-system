<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spf09a96, $sp71c458, $spba2e1e, $sp2e48e6, $spfd4455) { try { $sp0619ae = json_decode($sp2e48e6->config, true); $sp0619ae['payway'] = $sp2e48e6->way; GatewayPay::getDriver($sp2e48e6)->goPay($sp0619ae, $sp71c458, $spba2e1e, $spba2e1e, $spfd4455); return self::renderResultPage($spf09a96, array('success' => false, 'title' => trans('shop.please_wait'), 'msg' => trans('shop.please_wait_for_pay'))); } catch (\Exception $spf745ad) { if (config('app.debug')) { return self::renderResultPage($spf09a96, array('msg' => $spf745ad->getMessage() . '<br>' . str_replace('
', '<br>', $spf745ad->getTraceAsString()))); } return self::renderResultPage($spf09a96, array('msg' => $spf745ad->getMessage())); } } function buy(Request $spf09a96) { $spfc475f = $spf09a96->input('customer'); if (strlen($spfc475f) !== 32) { return self::renderResultPage($spf09a96, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $spf09a96->getQueryString() . '
提交内容: ' . var_export($spfc475f) . ', 提交长度:' . strlen($spfc475f) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if (System::_getInt('vcode_shop_buy') === 1) { try { $this->validateCaptcha($spf09a96); } catch (\Throwable $spf745ad) { return self::renderResultPage($spf09a96, array('msg' => trans('validation.captcha'))); } } $sp8e3d37 = (int) $spf09a96->input('category_id'); $spb43b27 = (int) $spf09a96->input('product_id'); $sp88dd02 = (int) $spf09a96->input('count'); $sp14e5be = $spf09a96->input('coupon'); $spf72833 = $spf09a96->input('contact'); $sp754358 = $spf09a96->input('contact_ext') ?? null; $sp005271 = !empty(@json_decode($sp754358, true)['_mobile']); $sp748126 = (int) $spf09a96->input('pay_id'); if (!$sp8e3d37 || !$spb43b27) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.required'))); } if (strlen($spf72833) < 1) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.contact.required'))); } $sp0b8b61 = null; if (System::_getInt('order_query_password_open')) { $sp0b8b61 = $spf09a96->input('query_password'); if (strlen($sp0b8b61) < 1) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.query_password.required'))); } if (strlen($sp0b8b61) < 6 || Helper::isWakePassword($sp0b8b61)) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.query_password.weak'))); } } $spf5ac2c = Category::findOrFail($sp8e3d37); $sp551a82 = Product::where('id', $spb43b27)->where('category_id', $sp8e3d37)->where('enabled', 1)->with(array('user'))->first(); if ($sp551a82 == null || $sp551a82->user == null) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.not_found'))); } if (!$sp551a82->enabled) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.not_on_sell'))); } if ($sp551a82->password_open) { if ($sp551a82->password !== $spf09a96->input('product_password')) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.password_error'))); } } else { if ($spf5ac2c->password_open) { if ($spf5ac2c->password !== $spf09a96->input('category_password')) { if ($spf5ac2c->getTmpPassword() !== $spf09a96->input('category_password')) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.category.password_error'))); } } } } if ($sp88dd02 < $sp551a82->buy_min) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.buy_min', array('num' => $sp551a82->buy_min)))); } if ($sp88dd02 > $sp551a82->buy_max) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.buy_max', array('num' => $sp551a82->buy_max)))); } if ($sp551a82->count < $sp88dd02) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.out_of_stock'))); } $sp2e48e6 = \App\Pay::find($sp748126); if ($sp2e48e6 == null || !$sp2e48e6->enabled) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.pay.not_found'))); } $sp0af37b = $sp551a82->price; if ($sp551a82->price_whole) { $sp58eb04 = json_decode($sp551a82->price_whole, true); for ($sp02b863 = count($sp58eb04) - 1; $sp02b863 >= 0; $sp02b863--) { if ($sp88dd02 >= (int) $sp58eb04[$sp02b863][0]) { $sp0af37b = (int) $sp58eb04[$sp02b863][1]; break; } } } $sp399bf6 = $sp88dd02 * $sp0af37b; $spfd4455 = $sp399bf6; $spda94c7 = 0; $sp257798 = null; if ($sp551a82->support_coupon && strlen($sp14e5be) > 0) { $sp21c0b9 = \App\Coupon::where('user_id', $sp551a82->user_id)->where('coupon', $sp14e5be)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp21c0b9 as $sp0b0874) { if ($sp0b0874->category_id === -1 || $sp0b0874->category_id === $sp8e3d37 && ($sp0b0874->product_id === -1 || $sp0b0874->product_id === $spb43b27)) { if ($sp0b0874->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spfd4455 >= $sp0b0874->discount_val) { $sp257798 = $sp0b0874; $spda94c7 = $sp0b0874->discount_val; break; } if ($sp0b0874->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp257798 = $sp0b0874; $spda94c7 = (int) round($spfd4455 * $sp0b0874->discount_val / 100); break; } } } if ($sp257798 === null) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.coupon.invalid'))); } $spfd4455 -= $spda94c7; } $sp0e0c09 = (int) round($spfd4455 * $sp2e48e6->fee_system); $sp18f9ad = $spfd4455 - $sp0e0c09; $spf9ba92 = $sp005271 ? System::_getInt('sms_price', 10) : 0; $spfd4455 += $spf9ba92; $sp99d3a9 = $sp88dd02 * $sp551a82->cost; $sp71c458 = \App\Order::unique_no(); try { DB::transaction(function () use($sp551a82, $sp71c458, $sp257798, $spf72833, $sp754358, $sp0b8b61, $spfc475f, $sp88dd02, $sp99d3a9, $sp399bf6, $spf9ba92, $spda94c7, $spfd4455, $sp2e48e6, $sp0e0c09, $sp18f9ad) { if ($sp257798) { $sp257798->status = \App\Coupon::STATUS_USED; $sp257798->count_used++; $sp257798->save(); $sp92ada3 = '使用优惠券: ' . $sp257798->coupon; } else { $sp92ada3 = null; } $sp7cc18f = new \App\Order(array('user_id' => $sp551a82->user_id, 'order_no' => $sp71c458, 'product_id' => $sp551a82->id, 'product_name' => $sp551a82->name, 'count' => $sp88dd02, 'ip' => Helper::getIP(), 'customer' => $spfc475f, 'contact' => $spf72833, 'contact_ext' => $sp754358, 'query_password' => $sp0b8b61, 'cost' => $sp99d3a9, 'price' => $sp399bf6, 'sms_price' => $spf9ba92, 'discount' => $spda94c7, 'paid' => $spfd4455, 'pay_id' => $sp2e48e6->id, 'fee' => $sp0e0c09, 'system_fee' => $sp0e0c09, 'income' => $sp18f9ad, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp92ada3, 'created_at' => Carbon::now())); $sp7cc18f->saveOrFail(); }); } catch (\Throwable $spf745ad) { Log::error('Shop.Pay.buy 下单失败', array('exception' => $spf745ad)); return self::renderResultPage($spf09a96, array('msg' => trans('shop.pay.internal_error'))); } if ($spfd4455 === 0) { $this->shipOrder($spf09a96, $sp71c458, $spfd4455, null); return redirect()->away(route('pay.result', array($sp71c458), false)); } $spba2e1e = $sp71c458; return $this->goPay($spf09a96, $sp71c458, $spba2e1e, $sp2e48e6, $spfd4455); } function pay(Request $spf09a96, $sp71c458) { $sp7cc18f = \App\Order::whereOrderNo($sp71c458)->first(); if ($sp7cc18f == null) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.order.not_found'))); } if ($sp7cc18f->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp71c458); } $spbbf2ad = 'pay: ' . $sp7cc18f->pay_id; $sp2e48e6 = $sp7cc18f->pay; if (!$sp2e48e6) { \Log::error($spbbf2ad . ' cannot find Pay'); return $this->renderResultPage($spf09a96, array('msg' => trans('shop.pay.not_found'))); } $spbbf2ad .= ',' . $sp2e48e6->driver; $sp0619ae = json_decode($sp2e48e6->config, true); $sp0619ae['payway'] = $sp2e48e6->way; $sp0619ae['out_trade_no'] = $sp71c458; try { $this->payApi = GatewayPay::getDriver($sp2e48e6); } catch (\Exception $spf745ad) { \Log::error($spbbf2ad . ' cannot find Driver: ' . $spf745ad->getMessage()); return $this->renderResultPage($spf09a96, array('msg' => trans('shop.pay.driver_not_found'))); } if ($this->payApi->verify($sp0619ae, function ($sp71c458, $sp5e1aa5, $sp3959e4) use($spf09a96) { try { $this->shipOrder($spf09a96, $sp71c458, $sp5e1aa5, $sp3959e4); } catch (\Exception $spf745ad) { $this->renderResultPage($spf09a96, array('success' => false, 'msg' => $spf745ad->getMessage())); } })) { \Log::notice($spbbf2ad . ' already success' . '

'); return redirect('/pay/result/' . $sp71c458); } if ($sp7cc18f->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spf09a96, array('msg' => trans('shop.order.expired'))); } $sp551a82 = Product::where('id', $sp7cc18f->product_id)->where('enabled', 1)->first(); if ($sp551a82 == null) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.not_on_sell'))); } $sp551a82->setAttribute('count', count($sp551a82->cards) ? $sp551a82->cards[0]->count : 0); if ($sp551a82->count < $sp7cc18f->count) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.out_of_stock'))); } $spba2e1e = $sp71c458; return $this->goPay($spf09a96, $sp71c458, $spba2e1e, $sp2e48e6, $sp7cc18f->paid); } function qrcode(Request $spf09a96, $sp71c458, $sp6c5b05) { $sp7cc18f = \App\Order::whereOrderNo($sp71c458)->with('product')->first(); if ($sp7cc18f == null) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.order.not_found'))); } if ($sp7cc18f->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($spf09a96, array('msg' => trans('shop.order.expired'))); } if ($sp7cc18f->product_id !== \App\Product::ID_API) { $sp551a82 = $sp7cc18f->product; if ($sp551a82 == null) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.not_found'))); } if ($sp551a82->count < $sp7cc18f->count) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.product.out_of_stock'))); } } if (strpos($sp6c5b05, '..')) { return $this->msg(trans('shop.you_are_sb')); } return view('pay/' . $sp6c5b05, array('pay_id' => $sp7cc18f->pay_id, 'name' => $sp7cc18f->product_id === \App\Product::ID_API ? $sp7cc18f->api_out_no : $sp7cc18f->product->name . ' x ' . $sp7cc18f->count . '件', 'amount' => $sp7cc18f->paid, 'qrcode' => $spf09a96->get('url'), 'id' => $sp71c458)); } function qrQuery(Request $spf09a96, $sp748126) { $speed2ea = $spf09a96->input('id'); if (isset($speed2ea[5])) { return self::payReturn($spf09a96, $sp748126, $speed2ea); } else { return Response::fail('order_no error'); } } function payReturn(Request $spf09a96, $sp748126, $sp71c458 = null) { $spbbf2ad = 'payReturn: ' . $sp748126; \Log::debug($spbbf2ad); $sp2e48e6 = \App\Pay::where('id', $sp748126)->first(); if (!$sp2e48e6) { return $this->renderResultPage($spf09a96, array('success' => 0, 'msg' => trans('shop.pay.not_found'))); } $spbbf2ad .= ',' . $sp2e48e6->driver; if ($sp71c458 && isset($sp71c458[5])) { $sp7cc18f = \App\Order::whereOrderNo($sp71c458)->firstOrFail(); if ($sp7cc18f && ($sp7cc18f->status === \App\Order::STATUS_PAID || $sp7cc18f->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spbbf2ad . ' already success' . '

'); if ($spf09a96->ajax()) { return self::renderResultPage($spf09a96, array('success' => 1, 'data' => '/pay/result/' . $sp71c458), array('order' => $sp7cc18f)); } else { return redirect('/pay/result/' . $sp71c458); } } } try { $this->payApi = GatewayPay::getDriver($sp2e48e6); } catch (\Exception $spf745ad) { \Log::error($spbbf2ad . ' cannot find Driver: ' . $spf745ad->getMessage()); return $this->renderResultPage($spf09a96, array('success' => 0, 'msg' => trans('shop.pay.driver_not_found'))); } $sp0619ae = json_decode($sp2e48e6->config, true); $sp0619ae['out_trade_no'] = $sp71c458; $sp0619ae['payway'] = $sp2e48e6->way; Log::debug($spbbf2ad . ' will verify'); if ($this->payApi->verify($sp0619ae, function ($sp0f794d, $sp5e1aa5, $sp3959e4) use($spf09a96, $spbbf2ad, &$sp71c458) { $sp71c458 = $sp0f794d; try { Log::debug($spbbf2ad . " shipOrder start, order_no: {$sp71c458}, amount: {$sp5e1aa5}, trade_no: {$sp3959e4}"); $this->shipOrder($spf09a96, $sp71c458, $sp5e1aa5, $sp3959e4); Log::debug($spbbf2ad . ' shipOrder end, order_no: ' . $sp71c458); } catch (\Exception $spf745ad) { Log::error($spbbf2ad . ' shipOrder Exception: ' . $spf745ad->getMessage(), array('exception' => $spf745ad)); } })) { Log::debug($spbbf2ad . ' verify finished: 1' . '

'); if ($spf09a96->ajax()) { return self::renderResultPage($spf09a96, array('success' => 1, 'data' => '/pay/result/' . $sp71c458)); } else { return redirect('/pay/result/' . $sp71c458); } } else { Log::debug($spbbf2ad . ' verify finished: 0' . '

'); return $this->renderResultPage($spf09a96, array('success' => 0, 'msg' => trans('shop.pay.verify_failed'))); } } function payNotify(Request $spf09a96, $sp748126) { $spbbf2ad = 'payNotify pay_id: ' . $sp748126; Log::debug($spbbf2ad); $sp2e48e6 = \App\Pay::where('id', $sp748126)->first(); if (!$sp2e48e6) { Log::error($spbbf2ad . ' cannot find PayModel'); echo 'fail'; die; } $spbbf2ad .= ',' . $sp2e48e6->driver; try { $this->payApi = GatewayPay::getDriver($sp2e48e6); } catch (\Exception $spf745ad) { Log::error($spbbf2ad . ' cannot find Driver: ' . $spf745ad->getMessage()); echo 'fail'; die; } $sp0619ae = json_decode($sp2e48e6->config, true); $sp0619ae['payway'] = $sp2e48e6->way; $sp0619ae['isNotify'] = true; Log::debug($spbbf2ad . ' will verify'); $sp571ce3 = $this->payApi->verify($sp0619ae, function ($sp71c458, $sp5e1aa5, $sp3959e4) use($spf09a96, $spbbf2ad) { try { Log::debug($spbbf2ad . " shipOrder start, order_no: {$sp71c458}, amount: {$sp5e1aa5}, trade_no: {$sp3959e4}"); $this->shipOrder($spf09a96, $sp71c458, $sp5e1aa5, $sp3959e4); Log::debug($spbbf2ad . ' shipOrder end, order_no: ' . $sp71c458); } catch (\Exception $spf745ad) { Log::error($spbbf2ad . ' shipOrder Exception: ' . $spf745ad->getMessage()); } }); Log::debug($spbbf2ad . ' notify finished: ' . (int) $sp571ce3 . '

'); die; } function result(Request $spf09a96, $sp71c458) { $sp7cc18f = \App\Order::where('order_no', $sp71c458)->first(); if ($sp7cc18f == null) { return self::renderResultPage($spf09a96, array('msg' => trans('shop.order.not_found'))); } if ($sp7cc18f->status === \App\Order::STATUS_PAID) { $spd9d189 = $sp7cc18f->user->qq; if ($sp7cc18f->product) { if ($sp7cc18f->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp8117f7 = trans('shop.order.msg_product_manual_please_wait'); } else { $sp8117f7 = trans('shop.order.msg_product_out_of_stock_not_send'); } } else { $sp8117f7 = trans('shop.order.msg_product_deleted'); } if ($spd9d189) { $sp8117f7 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spd9d189 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spd9d189 . '</a>'; } return self::renderResultPage($spf09a96, array('success' => false, 'title' => trans('shop.order_is_paid'), 'msg' => $sp8117f7), array('order' => $sp7cc18f)); } elseif ($sp7cc18f->status >= \App\Order::STATUS_SUCCESS) { return self::showOrderResult($spf09a96, $sp7cc18f); } return self::renderResultPage($spf09a96, array('success' => false, 'msg' => $sp7cc18f->remark ? trans('shop.order_process_failed_because', array('reason' => $sp7cc18f->remark)) : trans('shop.order_process_failed_default')), array('order' => $sp7cc18f)); } function renderResultPage(Request $spf09a96, $sp75fce3, $spfe6bdb = array()) { if ($spf09a96->ajax()) { if (@$sp75fce3['success']) { return Response::success($sp75fce3['data']); } else { return Response::fail('error', $sp75fce3['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp75fce3, 'data' => $spfe6bdb), $spfe6bdb)); } } function shipOrder($spf09a96, $sp71c458, $sp5e1aa5, $sp3959e4) { $sp7cc18f = \App\Order::whereOrderNo($sp71c458)->first(); if ($sp7cc18f === null) { Log::error('shipOrder: No query results for model [App\\Order:' . $sp71c458 . ',trade_no:' . $sp3959e4 . ',amount:' . $sp5e1aa5 . ']. die(\'success\');'); die('success'); } if ($sp7cc18f->paid > $sp5e1aa5) { Log::alert('shipOrder, price may error, order_no:' . $sp71c458 . ', paid:' . $sp7cc18f->paid . ', $amount get:' . $sp5e1aa5); $sp7cc18f->remark = '支付金额(' . sprintf('%0.2f', $sp5e1aa5 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp7cc18f->paid / 100) . ')'; $sp7cc18f->save(); throw new \Exception($sp7cc18f->remark); } $sp551a82 = null; if ($sp7cc18f->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp71c458); if (FundHelper::orderSuccess($sp7cc18f->id, function ($spc9ca8a) use($sp3959e4, &$sp7cc18f, &$sp551a82) { $sp7cc18f = $spc9ca8a; if ($sp7cc18f->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp7cc18f->order_no . ' already processed! #2'); return false; } $sp551a82 = $sp7cc18f->product()->lockForUpdate()->firstOrFail(); $sp7cc18f->pay_trade_no = $sp3959e4; $sp7cc18f->paid_at = Carbon::now(); if ($sp551a82->delivery === \App\Product::DELIVERY_MANUAL) { $sp7cc18f->status = \App\Order::STATUS_PAID; $sp7cc18f->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp7cc18f->saveOrFail(); return true; } if ($sp551a82->delivery === \App\Product::DELIVERY_API) { $sp79cae4 = $sp551a82->createApiCards($sp7cc18f); } else { $sp79cae4 = Card::where('product_id', $sp7cc18f->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp7cc18f->count)->lockForUpdate()->get(); } $sp8b2900 = false; if (count($sp79cae4) === $sp7cc18f->count) { $sp8b2900 = true; } else { if (count($sp79cae4)) { foreach ($sp79cae4 as $sp6da819) { if ($sp6da819->type === \App\Card::TYPE_REPEAT && $sp6da819->count >= $sp7cc18f->count) { $sp79cae4 = array($sp6da819); $sp8b2900 = true; break; } } } } if ($sp8b2900 === false) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp7cc18f->order_no . ', 购买数量:' . $sp7cc18f->count . ', 卡数量:' . count($sp79cae4) . ' 卡密不足(已支付 未发货)'); $sp7cc18f->status = \App\Order::STATUS_PAID; $sp7cc18f->saveOrFail(); return true; } else { $sp78d907 = array(); foreach ($sp79cae4 as $sp6da819) { $sp78d907[] = $sp6da819->id; } $sp7cc18f->cards()->attach($sp78d907); if (count($sp79cae4) === 1 && $sp79cae4[0]->type === \App\Card::TYPE_REPEAT) { \App\Card::where('id', $sp78d907[0])->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+' . $sp7cc18f->count))); } else { \App\Card::whereIn('id', $sp78d907)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); } $sp7cc18f->status = \App\Order::STATUS_SUCCESS; $sp7cc18f->saveOrFail(); $sp551a82->count_sold += $sp7cc18f->count; $sp551a82->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($sp551a82->count_warn > 0 && $sp551a82->count < $sp551a82->count_warn) { try { Mail::to($sp7cc18f->user->email)->Queue(new ProductCountWarn($sp551a82, $sp551a82->count)); } catch (\Throwable $spf745ad) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp7cc18f->product_id, 'email' => $sp7cc18f->user->email, 'exception' => $spf745ad->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $sp4285d2 = @json_decode($sp7cc18f->contact_ext, true)['_mail']; if ($sp4285d2) { $sp7cc18f->sendEmail($sp4285d2); } } if ($sp7cc18f->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spb66e78 = @json_decode($sp7cc18f->contact_ext, true)['_mobile']; if ($spb66e78) { $sp7cc18f->sendSms($spb66e78); } } } else { if ($sp7cc18f->status !== \App\Order::STATUS_UNPAY) { } else { Log::error('Pay.shipOrder.orderSuccess Failed.'); return FALSE; } } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp7cc18f->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($spf09a96, $sp7cc18f) { return self::renderResultPage($spf09a96, array('success' => true, 'msg' => $sp7cc18f->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp7cc18f->getCardsArray()), 'order' => $sp7cc18f, 'product' => $sp7cc18f->product)); } }