<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Library\LogHelper; use App\Product; use App\Library\Response; use Gateway\Pay\Pay as GatewayPay; use App\Library\Geetest; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp7fb11a, $sp1f2f98, $sp9045da, $sp2065ad, $sp6aae2e) { try { (new GatewayPay())->goPay($sp2065ad, $sp1f2f98, $sp9045da, $sp9045da, $sp6aae2e); return self::renderResultPage($sp7fb11a, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $spcdd557) { return self::renderResultPage($sp7fb11a, array('msg' => $spcdd557->getMessage())); } } function buy(Request $sp7fb11a) { $sp2cdf6e = $sp7fb11a->input('customer'); if (strlen($sp2cdf6e) !== 32) { return self::renderResultPage($sp7fb11a, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp7fb11a->getQueryString() . '
提交内容: ' . var_export($sp2cdf6e) . ', 提交长度:' . strlen($sp2cdf6e) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp44edeb = Geetest\API::verify($sp7fb11a->input('geetest_challenge'), $sp7fb11a->input('geetest_validate'), $sp7fb11a->input('geetest_seccode')); if (!$sp44edeb) { return self::renderResultPage($sp7fb11a, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp2dac50 = (int) $sp7fb11a->input('category_id'); $spac20cb = (int) $sp7fb11a->input('product_id'); $sp4b47da = (int) $sp7fb11a->input('count'); $spdc4d06 = $sp7fb11a->input('coupon'); $sp975203 = $sp7fb11a->input('contact'); $spea4f08 = $sp7fb11a->input('contact_ext') ?? null; $sp3b6b62 = !empty(@json_decode($spea4f08, true)['_mobile']); $spc2f253 = (int) $sp7fb11a->input('pay_id'); if (!$sp2dac50 || !$spac20cb) { return self::renderResultPage($sp7fb11a, array('msg' => '请选择商品')); } if (strlen($sp975203) < 1) { return self::renderResultPage($sp7fb11a, array('msg' => '请输入联系方式')); } $spbbde80 = Category::findOrFail($sp2dac50); $spb0646a = Product::where('id', $spac20cb)->where('category_id', $sp2dac50)->where('enabled', 1)->with(array('user'))->first(); if ($spb0646a == null || $spb0646a->user == null) { return self::renderResultPage($sp7fb11a, array('msg' => '该商品未找到，请重新选择')); } if ($spb0646a->password_open) { if ($spb0646a->password !== $sp7fb11a->input('product_password')) { return self::renderResultPage($sp7fb11a, array('msg' => '商品密码输入错误')); } } else { if ($spbbde80->password_open) { if ($spbbde80->password !== $sp7fb11a->input('category_password')) { if ($spbbde80->getTmpPassword() !== $sp7fb11a->input('category_password')) { return self::renderResultPage($sp7fb11a, array('msg' => '分类密码输入错误')); } } } } if ($sp4b47da < $spb0646a->buy_min) { return self::renderResultPage($sp7fb11a, array('msg' => '该商品最少购买' . $spb0646a->buy_min . '件，请重新选择')); } if ($sp4b47da > $spb0646a->buy_max) { return self::renderResultPage($sp7fb11a, array('msg' => '该商品限购' . $spb0646a->buy_max . '件，请重新选择')); } if ($spb0646a->count < $sp4b47da) { return self::renderResultPage($sp7fb11a, array('msg' => '该商品库存不足')); } $sp7fc279 = \App\Pay::find($spc2f253); if ($sp7fc279 == null || !$sp7fc279->enabled) { return self::renderResultPage($sp7fb11a, array('msg' => '支付方式未找到，请重新选择')); } $spb51fd1 = $spb0646a->price; if ($spb0646a->price_whole) { $sp1c2913 = json_decode($spb0646a->price_whole, true); for ($sp677ef3 = count($sp1c2913) - 1; $sp677ef3 >= 0; $sp677ef3--) { if ($sp4b47da >= (int) $sp1c2913[$sp677ef3][0]) { $spb51fd1 = (int) $sp1c2913[$sp677ef3][1]; break; } } } $spc62c66 = $sp4b47da * $spb51fd1; $sp6aae2e = $spc62c66; $sp4c82c4 = 0; $sp3bf428 = null; if ($spb0646a->support_coupon && strlen($spdc4d06) > 0) { $sp8bee14 = \App\Coupon::where('user_id', $spb0646a->user_id)->where('coupon', $spdc4d06)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp8bee14 as $spad158d) { if ($spad158d->category_id === -1 || $spad158d->category_id === $sp2dac50 && ($spad158d->product_id === -1 || $spad158d->product_id === $spac20cb)) { if ($spad158d->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp6aae2e >= $spad158d->discount_val) { $sp3bf428 = $spad158d; $sp4c82c4 = $spad158d->discount_val; break; } if ($spad158d->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp3bf428 = $spad158d; $sp4c82c4 = (int) round($sp6aae2e * $spad158d->discount_val / 100); break; } } } if ($sp3bf428 === null) { return self::renderResultPage($sp7fb11a, array('msg' => '优惠券信息错误，请重新输入')); } $sp6aae2e -= $sp4c82c4; } $spe5ac03 = (int) round($sp6aae2e * $sp7fc279->fee_system); $spc732e9 = $sp6aae2e - $spe5ac03; $sp23609b = $sp3b6b62 ? System::_getInt('sms_price', 10) : 0; $sp6aae2e += $sp23609b; $sp45d670 = $sp4b47da * $spb0646a->cost; $sp1f2f98 = \App\Order::unique_no(); try { DB::transaction(function () use($spb0646a, $sp1f2f98, $sp3bf428, $sp975203, $spea4f08, $sp2cdf6e, $sp4b47da, $sp45d670, $spc62c66, $sp23609b, $sp4c82c4, $sp6aae2e, $sp7fc279, $spe5ac03, $spc732e9) { if ($sp3bf428) { $sp3bf428->status = \App\Coupon::STATUS_USED; $sp3bf428->count_used++; $sp3bf428->save(); $spd9ff02 = '使用优惠券: ' . $sp3bf428->coupon; } else { $spd9ff02 = null; } $sp4cc7a0 = \App\Order::create(array('user_id' => $spb0646a->user_id, 'order_no' => $sp1f2f98, 'product_id' => $spb0646a->id, 'product_name' => $spb0646a->name, 'count' => $sp4b47da, 'ip' => Helper::getIP(), 'customer' => $sp2cdf6e, 'contact' => $sp975203, 'contact_ext' => $spea4f08, 'cost' => $sp45d670, 'price' => $spc62c66, 'sms_price' => $sp23609b, 'discount' => $sp4c82c4, 'paid' => $sp6aae2e, 'pay_id' => $sp7fc279->id, 'fee' => $spe5ac03, 'system_fee' => $spe5ac03, 'income' => $spc732e9, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $spd9ff02, 'created_at' => Carbon::now())); assert($sp4cc7a0 !== null); }); } catch (\Throwable $spcdd557) { Log::error('Shop.Pay.buy 下单失败', array('Exception' => $spcdd557)); return self::renderResultPage($sp7fb11a, array('msg' => '发生错误，下单失败，请稍后重试')); } if ($sp6aae2e === 0) { $this->shipOrder($sp7fb11a, $sp1f2f98, $sp6aae2e, null); return redirect('/pay/result/' . $sp1f2f98); } $sp9045da = $sp1f2f98; return $this->goPay($sp7fb11a, $sp1f2f98, $sp9045da, $sp7fc279, $sp6aae2e); } function pay(Request $sp7fb11a, $sp1f2f98) { $sp4cc7a0 = \App\Order::whereOrderNo($sp1f2f98)->first(); if ($sp4cc7a0 == null) { return self::renderResultPage($sp7fb11a, array('msg' => '订单未找到，请重试')); } if ($sp4cc7a0->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp1f2f98); } $sp8df889 = 'pay: ' . $sp4cc7a0->pay_id; $sp2065ad = $sp4cc7a0->pay; if (!$sp2065ad) { \Log::error($sp8df889 . ' cannot find Pay'); return $this->renderResultPage($sp7fb11a, array('msg' => '支付方式未找到')); } $sp8df889 .= ',' . $sp2065ad->driver; $sp8b174b = json_decode($sp2065ad->config, true); $sp8b174b['payway'] = $sp2065ad->way; $sp8b174b['out_trade_no'] = $sp1f2f98; try { $this->payApi = GatewayPay::getDriver($sp2065ad->id, $sp2065ad->driver); } catch (\Exception $spcdd557) { \Log::error($sp8df889 . ' cannot find Driver: ' . $spcdd557->getMessage()); return $this->renderResultPage($sp7fb11a, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp8b174b, function ($sp1f2f98, $spe93440, $spdfc8a2) use($sp7fb11a) { try { $this->shipOrder($sp7fb11a, $sp1f2f98, $spe93440, $spdfc8a2); } catch (\Exception $spcdd557) { $this->renderResultPage($sp7fb11a, array('success' => false, 'msg' => $spcdd557->getMessage())); } })) { \Log::notice($sp8df889 . ' already success' . '

'); return redirect('/pay/result/' . $sp1f2f98); } if ($sp4cc7a0->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp7fb11a, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $spb0646a = Product::where('id', $sp4cc7a0->product_id)->where('enabled', 1)->first(); if ($spb0646a == null) { return self::renderResultPage($sp7fb11a, array('msg' => '该商品已下架')); } $spb0646a->setAttribute('count', count($spb0646a->cards) ? $spb0646a->cards[0]->count : 0); if ($spb0646a->count < $sp4cc7a0->count) { return self::renderResultPage($sp7fb11a, array('msg' => '该商品库存不足')); } $sp9045da = $sp1f2f98; return $this->goPay($sp7fb11a, $sp1f2f98, $sp9045da, $sp2065ad, $sp4cc7a0->paid); } function qrcode(Request $sp7fb11a, $sp1f2f98, $sp7b3fb1) { $sp4cc7a0 = \App\Order::whereOrderNo($sp1f2f98)->with('product')->first(); if ($sp4cc7a0 == null) { return self::renderResultPage($sp7fb11a, array('msg' => '订单未找到，请重试')); } if ($sp4cc7a0->product_id !== \App\Product::ID_API && $sp4cc7a0->product == null) { return self::renderResultPage($sp7fb11a, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp7b3fb1, array('pay_id' => $sp4cc7a0->pay_id, 'name' => $sp4cc7a0->product->name . ' x ' . $sp4cc7a0->count . '件', 'amount' => $sp4cc7a0->paid, 'qrcode' => $sp7fb11a->get('url'), 'id' => $sp1f2f98)); } function qrQuery(Request $sp7fb11a, $spc2f253) { $sp548dcd = $sp7fb11a->input('id', ''); return self::payReturn($sp7fb11a, $spc2f253, $sp548dcd); } function payReturn(Request $sp7fb11a, $spc2f253, $sp9d117b = '') { $sp8df889 = 'payReturn: ' . $spc2f253; \Log::debug($sp8df889); $sp2065ad = \App\Pay::where('id', $spc2f253)->first(); if (!$sp2065ad) { return $this->renderResultPage($sp7fb11a, array('success' => 0, 'msg' => '支付方式错误')); } $sp8df889 .= ',' . $sp2065ad->driver; if (strlen($sp9d117b) > 0) { $sp4cc7a0 = \App\Order::whereOrderNo($sp9d117b)->first(); if ($sp4cc7a0 && ($sp4cc7a0->status === \App\Order::STATUS_PAID || $sp4cc7a0->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp8df889 . ' already success' . '

'); if ($sp7fb11a->ajax()) { return self::renderResultPage($sp7fb11a, array('success' => 1, 'data' => '/pay/result/' . $sp9d117b), array('order' => $sp4cc7a0)); } else { return redirect('/pay/result/' . $sp9d117b); } } } try { $this->payApi = GatewayPay::getDriver($sp2065ad->id, $sp2065ad->driver); } catch (\Exception $spcdd557) { \Log::error($sp8df889 . ' cannot find Driver: ' . $spcdd557->getMessage()); return $this->renderResultPage($sp7fb11a, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp8b174b = json_decode($sp2065ad->config, true); $sp8b174b['out_trade_no'] = $sp9d117b; $sp8b174b['payway'] = $sp2065ad->way; \Log::debug($sp8df889 . ' will verify'); if ($this->payApi->verify($sp8b174b, function ($sp1f2f98, $spe93440, $spdfc8a2) use($sp7fb11a, $sp8df889, &$sp9d117b) { $sp9d117b = $sp1f2f98; try { \Log::debug($sp8df889 . " shipOrder start, order_no: {$sp1f2f98}, amount: {$spe93440}, trade_no: {$spdfc8a2}"); $this->shipOrder($sp7fb11a, $sp1f2f98, $spe93440, $spdfc8a2); \Log::debug($sp8df889 . ' shipOrder end, order_no: ' . $sp1f2f98); } catch (\Exception $spcdd557) { \Log::error($sp8df889 . ' shipOrder Exception: ' . $spcdd557->getMessage()); } })) { \Log::debug($sp8df889 . ' verify finished: 1' . '

'); if ($sp7fb11a->ajax()) { return self::renderResultPage($sp7fb11a, array('success' => 1, 'data' => '/pay/result/' . $sp9d117b)); } else { return redirect('/pay/result/' . $sp9d117b); } } else { \Log::debug($sp8df889 . ' verify finished: 0' . '

'); return $this->renderResultPage($sp7fb11a, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp7fb11a, $spc2f253) { $sp8df889 = 'payNotify pay_id: ' . $spc2f253; \Log::debug($sp8df889); $sp2065ad = \App\Pay::where('id', $spc2f253)->first(); if (!$sp2065ad) { \Log::error($sp8df889 . ' cannot find PayModel'); echo 'fail'; die; } $sp8df889 .= ',' . $sp2065ad->driver; try { $this->payApi = GatewayPay::getDriver($sp2065ad->id, $sp2065ad->driver); } catch (\Exception $spcdd557) { \Log::error($sp8df889 . ' cannot find Driver: ' . $spcdd557->getMessage()); echo 'fail'; die; } $sp8b174b = json_decode($sp2065ad->config, true); $sp8b174b['payway'] = $sp2065ad->way; $sp8b174b['isNotify'] = true; \Log::debug($sp8df889 . ' will verify'); $sp44edeb = $this->payApi->verify($sp8b174b, function ($sp1f2f98, $spe93440, $spdfc8a2) use($sp7fb11a, $sp8df889) { try { \Log::debug($sp8df889 . " shipOrder start, order_no: {$sp1f2f98}, amount: {$spe93440}, trade_no: {$spdfc8a2}"); $this->shipOrder($sp7fb11a, $sp1f2f98, $spe93440, $spdfc8a2); \Log::debug($sp8df889 . ' shipOrder end, order_no: ' . $sp1f2f98); } catch (\Exception $spcdd557) { \Log::error($sp8df889 . ' shipOrder Exception: ' . $spcdd557->getMessage()); } }); \Log::debug($sp8df889 . ' notify finished: ' . (int) $sp44edeb . '

'); die; } function result(Request $sp7fb11a, $sp1f2f98) { $sp4cc7a0 = \App\Order::where('order_no', $sp1f2f98)->first(); if ($sp4cc7a0 == null) { return self::renderResultPage($sp7fb11a, array('msg' => '订单未找到，请重试')); } if ($sp4cc7a0->status === \App\Order::STATUS_PAID) { $spc51930 = $sp4cc7a0->user->qq; if ($sp4cc7a0->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp74697c = '您购买的为手动充值商品，请耐心等待处理'; } else { $sp74697c = '商家库存不足，因此没有自动发货，请联系商家客服发货'; } if ($spc51930) { $sp74697c .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spc51930 . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spc51930 . '</a>'; } return self::renderResultPage($sp7fb11a, array('success' => false, 'title' => '订单已支付', 'msg' => $sp74697c), array('order' => $sp4cc7a0)); } elseif ($sp4cc7a0->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp7fb11a, $sp4cc7a0); } return self::renderResultPage($sp7fb11a, array('success' => false, 'msg' => $sp4cc7a0->remark ? '失败原因:<br>' . $sp4cc7a0->remark : '订单支付失败，请重试'), array('order' => $sp4cc7a0)); } function renderResultPage(Request $sp7fb11a, $sp66d196, $sp195a31 = array()) { if ($sp7fb11a->ajax()) { if (@$sp66d196['success']) { return Response::success($sp66d196['data']); } else { return Response::fail('error', $sp66d196['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp66d196, 'data' => $sp195a31), $sp195a31)); } } function shipOrder($sp7fb11a, $sp1f2f98, $spe93440, $spdfc8a2) { $sp4cc7a0 = \App\Order::whereOrderNo($sp1f2f98)->first(); if ($sp4cc7a0 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp1f2f98 . ',trade_no:' . $spdfc8a2 . ',amount:' . $spe93440 . ']. die(\'success\');'); die('success'); } if ($sp4cc7a0->paid > $spe93440) { \Log::alert('shipOrder, price may error, order_no:' . $sp1f2f98 . ', paid:' . $sp4cc7a0->paid . ', $amount get:' . $spe93440); $sp4cc7a0->remark = '支付金额(' . sprintf('%0.2f', $spe93440 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp4cc7a0->paid / 100) . ')'; $sp4cc7a0->save(); throw new \Exception($sp4cc7a0->remark); } $spb0646a = null; if ($sp4cc7a0->status === \App\Order::STATUS_UNPAY) { Log::debug('shipOrder.first_process:' . $sp1f2f98); if (FundHelper::orderSuccess($sp4cc7a0->id, function ($spc0cab5) use($spdfc8a2, &$sp4cc7a0, &$spb0646a) { $sp4cc7a0 = $spc0cab5; if ($sp4cc7a0->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp4cc7a0->order_no . ' already processed! #2'); return false; } $spb0646a = $sp4cc7a0->product()->lockForUpdate()->firstOrFail(); $sp4cc7a0->pay_trade_no = $spdfc8a2; $sp4cc7a0->paid_at = Carbon::now(); if ($spb0646a->delivery === \App\Product::DELIVERY_MANUAL) { $sp4cc7a0->status = \App\Order::STATUS_PAID; $sp4cc7a0->send_status = \App\Order::SEND_STATUS_CARD_UN; $sp4cc7a0->saveOrFail(); return true; } if ($spb0646a->delivery === \App\Product::DELIVERY_API) { $spe232c0 = $spb0646a->createApiCards($sp4cc7a0); } else { $spe232c0 = Card::where('product_id', $sp4cc7a0->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp4cc7a0->count)->lockForUpdate()->get(); } if (count($spe232c0) !== $sp4cc7a0->count) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp4cc7a0->order_no . ', 购买数量:' . $sp4cc7a0->count . ', 卡数量:' . count($spe232c0) . ' 卡密不足(已支付 未发货)'); $sp4cc7a0->status = \App\Order::STATUS_PAID; $sp4cc7a0->saveOrFail(); return true; } else { $sp4494d5 = array(); foreach ($spe232c0 as $spc2cc9a) { $sp4494d5[] = $spc2cc9a->id; } $sp4cc7a0->cards()->attach($sp4494d5); Card::whereIn('id', $sp4494d5)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp4cc7a0->status = \App\Order::STATUS_SUCCESS; $sp4cc7a0->saveOrFail(); $spb0646a->count_sold += $sp4cc7a0->count; $spb0646a->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($spb0646a->count_warn > 0 && $spb0646a->count < $spb0646a->count_warn) { try { Mail::to($sp4cc7a0->user->email)->Queue(new ProductCountWarn($spb0646a, $spb0646a->count)); } catch (\Throwable $spcdd557) { LogHelper::setLogFile('mail'); Log::error('shipOrder.count_warn error', array('product_id' => $sp4cc7a0->product_id, 'email' => $sp4cc7a0->user->email, 'exception' => $spcdd557->getMessage())); LogHelper::setLogFile('card'); } } if (System::_getInt('mail_send_order')) { $spc0fdec = @json_decode($sp4cc7a0->contact_ext, true)['_mail']; if ($spc0fdec) { $sp4cc7a0->sendEmail($spc0fdec); } } if ($sp4cc7a0->status === \App\Order::STATUS_SUCCESS && System::_getInt('sms_send_order')) { $spa3de7e = @json_decode($sp4cc7a0->contact_ext, true)['_mobile']; if ($spa3de7e) { $sp4cc7a0->sendSms($spa3de7e); } } } else { } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp4cc7a0->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp7fb11a, $sp4cc7a0) { return self::renderResultPage($sp7fb11a, array('success' => true, 'msg' => $sp4cc7a0->getSendMessage()), array('card_txt' => join('&#013;&#010;', $sp4cc7a0->getCardsArray()), 'order' => $sp4cc7a0, 'product' => $sp4cc7a0->product)); } }