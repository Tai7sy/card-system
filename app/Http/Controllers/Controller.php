<?php
namespace App\Http\Controllers; use App\System; use App\Library\Geetest; use Illuminate\Foundation\Bus\DispatchesJobs; use Illuminate\Http\Response; use Illuminate\Routing\Controller as BaseController; use Illuminate\Foundation\Validation\ValidatesRequests; use Illuminate\Foundation\Auth\Access\AuthorizesRequests; use Illuminate\Http\Request; use Illuminate\Support\Facades\Auth; class Controller extends BaseController { use AuthorizesRequests, DispatchesJobs, ValidatesRequests; public function getCaptcha() { $spb64319 = System::_get('vcode_driver'); if ($spb64319 === 'code') { return response(array()); } elseif ($spb64319 === 'geetest') { return response(Geetest\API::get()); } elseif ($spb64319 === 'recaptcha') { } return response(array(), Response::HTTP_NOT_IMPLEMENTED); } function validateCaptcha(Request $spf09a96) { $spb64319 = System::_get('vcode_driver'); if ($spb64319 === 'code') { $this->validate($spf09a96, array('captcha.key' => 'required|string', 'captcha.code' => 'required|captcha_api:' . $spf09a96->input('captcha.key'))); } elseif ($spb64319 === 'geetest') { $this->validate($spf09a96, array('captcha.a' => 'required|string', 'captcha.b' => 'required|string', 'captcha.c' => 'required|string', 'captcha.d' => 'required|string')); if (!Geetest\API::verify($spf09a96->input('captcha.a'), $spf09a96->input('captcha.b'), $spf09a96->input('captcha.c'), $spf09a96->input('captcha.d'))) { throw \Illuminate\Validation\ValidationException::withMessages(array('captcha' => array(trans('validation.captcha')))); } } elseif ($spb64319 === 'recaptcha') { $this->validate($spf09a96, array('captcha.t' => 'required|string')); } } function authQuery(Request $spf09a96, $sp143065, $sp7add21 = 'user_id', $spc363bd = 'user_id') { return $sp143065::where($sp7add21, \Auth::id()); } protected function getUserId(Request $spf09a96, $spc363bd = 'user_id') { return \Auth::id(); } protected function getUserIdOrFail(Request $spf09a96, $spc363bd = 'user_id') { $sp6738b1 = self::getUserId($spf09a96, $spc363bd); if ($sp6738b1) { return $sp6738b1; } else { throw new \Exception('参数缺少 ' . $spc363bd); } } protected function getUser(Request $spf09a96) { return \Auth::getUser(); } protected function checkIsInMaintain() { if (System::_getInt('maintain') === 1) { $sp35c359 = System::_get('maintain_info'); echo view('message', array('title' => '维护中', 'message' => $sp35c359)); die; } } protected function msg($spe0b8c9, $spdfc26b = null, $spc52f44 = null) { return view('message', array('message' => $spe0b8c9, 'title' => $spdfc26b, 'exception' => $spc52f44)); } }