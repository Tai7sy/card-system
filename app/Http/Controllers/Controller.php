<?php
namespace App\Http\Controllers; use App\System; use App\Library\Geetest; use Illuminate\Foundation\Bus\DispatchesJobs; use Illuminate\Http\Response; use Illuminate\Routing\Controller as BaseController; use Illuminate\Foundation\Validation\ValidatesRequests; use Illuminate\Foundation\Auth\Access\AuthorizesRequests; use Illuminate\Http\Request; use Illuminate\Support\Facades\Auth; class Controller extends BaseController { use AuthorizesRequests, DispatchesJobs, ValidatesRequests; public function getCaptcha() { $spa3d5a7 = System::_get('vcode_driver'); if ($spa3d5a7 === 'code') { return response(array()); } elseif ($spa3d5a7 === 'geetest') { return response(Geetest\API::get()); } elseif ($spa3d5a7 === 'recaptcha') { } return response(array(), Response::HTTP_NOT_IMPLEMENTED); } function validateCaptcha(Request $sp7f7104) { $spa3d5a7 = System::_get('vcode_driver'); if ($spa3d5a7 === 'code') { $this->validate($sp7f7104, array('captcha.key' => 'required|string', 'captcha.code' => 'required|captcha_api:' . $sp7f7104->input('captcha.key'))); } elseif ($spa3d5a7 === 'geetest') { $this->validate($sp7f7104, array('captcha.a' => 'required|string', 'captcha.b' => 'required|string', 'captcha.c' => 'required|string', 'captcha.d' => 'required|string')); if (!Geetest\API::verify($sp7f7104->input('captcha.a'), $sp7f7104->input('captcha.b'), $sp7f7104->input('captcha.c'), $sp7f7104->input('captcha.d'))) { throw \Illuminate\Validation\ValidationException::withMessages(array('captcha' => array(trans('validation.captcha')))); } } elseif ($spa3d5a7 === 'recaptcha') { $this->validate($sp7f7104, array('captcha.t' => 'required|string')); } } function authQuery(Request $sp7f7104, $sp71ee5a, $sp07b598 = 'user_id', $sp595dba = 'user_id') { return $sp71ee5a::where($sp07b598, \Auth::id()); } protected function getUserId(Request $sp7f7104, $sp595dba = 'user_id') { return \Auth::id(); } protected function getUserIdOrFail(Request $sp7f7104, $sp595dba = 'user_id') { $sp279789 = self::getUserId($sp7f7104, $sp595dba); if ($sp279789) { return $sp279789; } else { throw new \Exception('参数缺少 ' . $sp595dba); } } protected function getUser(Request $sp7f7104) { return \Auth::getUser(); } protected function checkIsInMaintain() { if (System::_getInt('maintain') === 1) { $spd9523c = System::_get('maintain_info'); echo view('message', array('title' => '维护中', 'message' => $spd9523c)); die; } } protected function msg($spba9aaf, $spedd658 = null, $sp6be139 = null) { return view('message', array('message' => $spba9aaf, 'title' => $spedd658, 'exception' => $sp6be139)); } }