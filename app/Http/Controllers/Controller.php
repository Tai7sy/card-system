<?php
namespace App\Http\Controllers; use App\System; use App\Library\Geetest; use Illuminate\Foundation\Bus\DispatchesJobs; use Illuminate\Http\Response; use Illuminate\Routing\Controller as BaseController; use Illuminate\Foundation\Validation\ValidatesRequests; use Illuminate\Foundation\Auth\Access\AuthorizesRequests; use Illuminate\Http\Request; use Illuminate\Support\Facades\Auth; class Controller extends BaseController { use AuthorizesRequests, DispatchesJobs, ValidatesRequests; public function getCaptcha() { $spfd2d0c = System::_get('vcode_driver'); if ($spfd2d0c === 'code') { return response(array()); } elseif ($spfd2d0c === 'geetest') { return response(Geetest\API::get()); } elseif ($spfd2d0c === 'recaptcha') { } return response(array(), Response::HTTP_NOT_IMPLEMENTED); } function validateCaptcha(Request $spe5a184) { $spfd2d0c = System::_get('vcode_driver'); if ($spfd2d0c === 'code') { $this->validate($spe5a184, array('captcha.key' => 'required|string', 'captcha.code' => 'required|captcha_api:' . $spe5a184->input('captcha.key'))); } elseif ($spfd2d0c === 'geetest') { $this->validate($spe5a184, array('captcha.a' => 'required|string', 'captcha.b' => 'required|string', 'captcha.c' => 'required|string', 'captcha.d' => 'required|string')); if (!Geetest\API::verify($spe5a184->input('captcha.a'), $spe5a184->input('captcha.b'), $spe5a184->input('captcha.c'), $spe5a184->input('captcha.d'))) { throw \Illuminate\Validation\ValidationException::withMessages(array('captcha' => array(trans('validation.captcha')))); } } elseif ($spfd2d0c === 'recaptcha') { $this->validate($spe5a184, array('captcha.t' => 'required|string')); } } function authQuery(Request $spe5a184, $spa8eadd, $sp32f293 = 'user_id', $sp678b2b = 'user_id') { return $spa8eadd::where($sp32f293, \Auth::id()); } protected function getUserId(Request $spe5a184, $sp678b2b = 'user_id') { return \Auth::id(); } protected function getUserIdOrFail(Request $spe5a184, $sp678b2b = 'user_id') { $sp7aa9af = self::getUserId($spe5a184, $sp678b2b); if ($sp7aa9af) { return $sp7aa9af; } else { throw new \Exception('参数缺少 ' . $sp678b2b); } } protected function getUser(Request $spe5a184) { return \Auth::getUser(); } protected function checkIsInMaintain() { if (System::_getInt('maintain') === 1) { $spe4b437 = System::_get('maintain_info'); echo view('message', array('title' => '维护中', 'message' => $spe4b437)); die; } } protected function msg($spa7c069, $sp6bcf3a = null, $sp91143b = null) { return view('message', array('message' => $spa7c069, 'title' => $sp6bcf3a, 'exception' => $sp91143b)); } }