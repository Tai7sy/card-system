<?php
namespace App\Http\Controllers\Admin; use App\Library\CurlRequest; use App\Library\Response; use App\Order; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Log; class Dashboard extends Controller { function index(Request $sp517903) { $spbca16f = array('today' => array('count' => 0, 'paid' => 0, 'profit' => 0), 'yesterday' => array('count' => 0, 'paid' => 0, 'profit' => 0)); $sp6e2029 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::now()->toDateString())->where(function ($sp30241a) { $sp30241a->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); $spb24c43 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::yesterday()->toDateString())->where(function ($sp30241a) { $sp30241a->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); if (isset($sp6e2029[0]) && isset($sp6e2029[0]['count'])) { $spbca16f['today'] = array('count' => (int) $sp6e2029[0]['count'], 'paid' => (int) $sp6e2029[0]['paid'], 'profit' => (int) $sp6e2029[0]['profit']); } if (isset($spb24c43[0]) && isset($spb24c43[0]['count'])) { $spbca16f['yesterday'] = array('count' => (int) $spb24c43[0]['count'], 'paid' => (int) $spb24c43[0]['paid'], 'profit' => (int) $spb24c43[0]['profit']); } $spbca16f['need_ship_count'] = Order::whereUserId(\Auth::Id())->where('status', Order::STATUS_PAID)->count(); $spbca16f['login'] = \App\Log::where('action', \App\Log::ACTION_LOGIN)->latest()->first(); return Response::success($spbca16f); } function clearCache() { if (function_exists('opcache_reset')) { opcache_reset(); } try { \Artisan::call('cache:clear'); \Artisan::call('route:cache'); \Artisan::call('config:cache'); } catch (\Throwable $sp0b065e) { return Response::fail($sp0b065e->getMessage()); } return Response::success(); } function version() { $sp46268e = array(); $sp25ffb8 = CurlRequest::curl('https://raw.githubusercontent.com/Tai7sy/card-system/master/.version', 0, null, array(), 5, $sp264383, $sp322a14, $spd9676d); $sp89bfd4 = @json_decode($sp25ffb8, true); if (!@$sp89bfd4['data']['version']) { Log::error('Dashboard.version checkUpdate failed', array('response' => $sp25ffb8, 'httpCode' => $sp322a14, 'error' => $spd9676d)); $sp46268e['message'] = '检查更新失败: ' . $spd9676d; } else { $sp46268e = array('version' => $sp89bfd4['data']['version'], 'description' => @$sp89bfd4['data']['description'] ?? '无'); } return Response::success(array('version' => config('app.version'), 'update' => $sp46268e)); } function logsToken() { $sp5f3012 = md5(random_bytes(128)); Cache::put($sp5f3012, Auth::getUser(), 15); return response(array('token' => $sp5f3012)); } function logsView(Request $sp517903, $sp5f3012) { if ($sp3db17d = Cache::get($sp5f3012)) { Cache::put($sp5f3012, $sp3db17d, 15); return (new \Rap2hpoutre\LaravelLogViewer\LogViewerController())->index(); } else { throw new \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException('logs-token'); } } }