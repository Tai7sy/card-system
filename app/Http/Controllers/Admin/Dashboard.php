<?php
namespace App\Http\Controllers\Admin; use App\Library\CurlRequest; use App\Library\Response; use App\Order; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Log; class Dashboard extends Controller { function index(Request $sp510ef3) { $sp557735 = array('today' => array('count' => 0, 'paid' => 0, 'profit' => 0), 'yesterday' => array('count' => 0, 'paid' => 0, 'profit' => 0)); $spd0ad34 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::now()->toDateString())->where(function ($sp90af04) { $sp90af04->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); $sp157bce = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::yesterday()->toDateString())->where(function ($sp90af04) { $sp90af04->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); if (isset($spd0ad34[0]) && isset($spd0ad34[0]['count'])) { $sp557735['today'] = array('count' => (int) $spd0ad34[0]['count'], 'paid' => (int) $spd0ad34[0]['paid'], 'profit' => (int) $spd0ad34[0]['profit']); } if (isset($sp157bce[0]) && isset($sp157bce[0]['count'])) { $sp557735['yesterday'] = array('count' => (int) $sp157bce[0]['count'], 'paid' => (int) $sp157bce[0]['paid'], 'profit' => (int) $sp157bce[0]['profit']); } $sp557735['need_ship_count'] = Order::whereUserId(\Auth::Id())->where('status', Order::STATUS_PAID)->count(); $sp557735['login'] = \App\Log::where('action', \App\Log::ACTION_LOGIN)->latest()->first(); return Response::success($sp557735); } function clearCache() { if (function_exists('opcache_reset')) { opcache_reset(); } try { \Artisan::call('cache:clear'); \Artisan::call('route:cache'); \Artisan::call('config:cache'); } catch (\Throwable $spd3b3eb) { return Response::fail($spd3b3eb->getMessage()); } return Response::success(); } function version() { $sp775fd4 = array(); $sp6d10e2 = CurlRequest::curl('https://raw.githubusercontent.com/Tai7sy/card-system/master/.version', 0, null, array(), 5, $speb6e62, $sp691125, $spfcf99e); $spe3da45 = @json_decode($sp6d10e2, true); if (!@$spe3da45['data']['version']) { Log::error('Dashboard.version checkUpdate failed', array('response' => $sp6d10e2, 'httpCode' => $sp691125, 'error' => $spfcf99e)); $sp775fd4['message'] = '检查更新失败: ' . $spfcf99e; } else { $sp775fd4 = array('version' => $spe3da45['data']['version'], 'description' => @$spe3da45['data']['description'] ?? '无'); } return Response::success(array('version' => config('app.version'), 'update' => $sp775fd4)); } function logsToken() { $sp1f4391 = md5(random_bytes(128)); Cache::put($sp1f4391, Auth::getUser(), 15); return response(array('token' => $sp1f4391)); } function logsView(Request $sp510ef3, $sp1f4391) { if ($sp24cedd = Cache::get($sp1f4391)) { Cache::put($sp1f4391, $sp24cedd, 15); return (new \Rap2hpoutre\LaravelLogViewer\LogViewerController())->index(); } else { throw new \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException('logs-token'); } } }