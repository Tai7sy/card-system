<?php
namespace App\Http\Controllers\Admin; use App\Library\CurlRequest; use App\Library\Response; use App\Order; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Log; class Dashboard extends Controller { function index(Request $sp147552) { $spf8fdb9 = array('today' => array('count' => 0, 'paid' => 0, 'profit' => 0), 'yesterday' => array('count' => 0, 'paid' => 0, 'profit' => 0)); $sp6fdf87 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::now()->toDateString())->where(function ($spd10097) { $spd10097->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); $spb56b65 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::yesterday()->toDateString())->where(function ($spd10097) { $spd10097->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); if (isset($sp6fdf87[0]) && isset($sp6fdf87[0]['count'])) { $spf8fdb9['today'] = array('count' => (int) $sp6fdf87[0]['count'], 'paid' => (int) $sp6fdf87[0]['paid'], 'profit' => (int) $sp6fdf87[0]['profit']); } if (isset($spb56b65[0]) && isset($spb56b65[0]['count'])) { $spf8fdb9['yesterday'] = array('count' => (int) $spb56b65[0]['count'], 'paid' => (int) $spb56b65[0]['paid'], 'profit' => (int) $spb56b65[0]['profit']); } $spf8fdb9['need_ship_count'] = Order::whereUserId(\Auth::Id())->where('status', Order::STATUS_PAID)->count(); $spf8fdb9['login'] = \App\Log::where('action', \App\Log::ACTION_LOGIN)->latest()->first(); return Response::success($spf8fdb9); } function clearCache() { if (function_exists('opcache_reset')) { opcache_reset(); } try { \Artisan::call('cache:clear'); \Artisan::call('route:cache'); \Artisan::call('config:cache'); } catch (\Throwable $spbd4f27) { return Response::fail($spbd4f27->getMessage()); } return Response::success(); } function version() { $sp2fbabe = array(); $sp118acc = CurlRequest::get('https://raw.githubusercontent.com/Tai7sy/card-system/master/.version'); $sp3ce6e7 = @json_decode($sp118acc, true); if (!@$sp3ce6e7['data']['version']) { Log::error('Dashboard.version checkUpdate failed', array('version_raw' => $sp118acc)); $sp2fbabe['message'] = '检查更新失败'; } else { $sp2fbabe = array('version' => $sp3ce6e7['data']['version'], 'description' => $sp3ce6e7['data']['description']); } return Response::success(array('version' => config('app.version'), 'update' => $sp2fbabe)); } function logsToken() { $sp74ce9f = md5(random_bytes(128)); Cache::put($sp74ce9f, Auth::getUser(), 15); return response(array('token' => $sp74ce9f)); } function logsView(Request $sp147552, $sp74ce9f) { if ($spe2c9ac = Cache::get($sp74ce9f)) { Cache::put($sp74ce9f, $spe2c9ac, 15); return (new \Rap2hpoutre\LaravelLogViewer\LogViewerController())->index(); } else { throw new \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException('logs-token'); } } }