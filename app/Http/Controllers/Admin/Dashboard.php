<?php
namespace App\Http\Controllers\Admin; use App\Library\CurlRequest; use App\Library\Response; use App\Order; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Log; class Dashboard extends Controller { function index(Request $sp13451b) { $spa76e10 = array('today' => array('count' => 0, 'paid' => 0, 'profit' => 0), 'yesterday' => array('count' => 0, 'paid' => 0, 'profit' => 0)); $sp28c542 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::now()->toDateString())->where(function ($sp8e2ceb) { $sp8e2ceb->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); $sp045229 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::yesterday()->toDateString())->where(function ($sp8e2ceb) { $sp8e2ceb->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); if (isset($sp28c542[0]) && isset($sp28c542[0]['count'])) { $spa76e10['today'] = array('count' => (int) $sp28c542[0]['count'], 'paid' => (int) $sp28c542[0]['paid'], 'profit' => (int) $sp28c542[0]['profit']); } if (isset($sp045229[0]) && isset($sp045229[0]['count'])) { $spa76e10['yesterday'] = array('count' => (int) $sp045229[0]['count'], 'paid' => (int) $sp045229[0]['paid'], 'profit' => (int) $sp045229[0]['profit']); } $spa76e10['need_ship_count'] = Order::whereUserId(\Auth::Id())->where('status', Order::STATUS_PAID)->count(); $spa76e10['login'] = \App\Log::where('action', \App\Log::ACTION_LOGIN)->latest()->first(); return Response::success($spa76e10); } function clearCache() { if (function_exists('opcache_reset')) { opcache_reset(); } try { \Artisan::call('cache:clear'); \Artisan::call('route:cache'); \Artisan::call('config:cache'); } catch (\Throwable $sp45222f) { return Response::fail($sp45222f->getMessage()); } return Response::success(); } function version() { $sp55dee0 = array(); $sp6076e4 = CurlRequest::get('https://raw.githubusercontent.com/Tai7sy/card-system/master/.version'); $sp2071a9 = @json_decode($sp6076e4, true); if (!@$sp2071a9['data']['version']) { Log::error('Dashboard.version checkUpdate failed', array('version_raw' => $sp6076e4)); $sp55dee0['message'] = '检查更新失败'; } else { $sp55dee0 = array('version' => $sp2071a9['data']['version'], 'description' => $sp2071a9['data']['description']); } return Response::success(array('version' => config('app.version'), 'update' => $sp55dee0)); } function logsToken() { $sp61eea9 = md5(random_bytes(128)); Cache::put($sp61eea9, Auth::getUser(), 15); return response(array('token' => $sp61eea9)); } function logsView(Request $sp13451b, $sp61eea9) { if ($spc33961 = Cache::get($sp61eea9)) { Cache::put($sp61eea9, $spc33961, 15); return (new \Rap2hpoutre\LaravelLogViewer\LogViewerController())->index(); } else { throw new \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException('logs-token'); } } }