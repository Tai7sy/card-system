<?php
namespace App\Http\Controllers\Admin; use App\Library\CurlRequest; use App\Library\Response; use App\Order; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Log; class Dashboard extends Controller { function index(Request $spe5a184) { $spfcaacd = array('today' => array('count' => 0, 'paid' => 0, 'profit' => 0), 'yesterday' => array('count' => 0, 'paid' => 0, 'profit' => 0)); $spdb2625 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::now()->toDateString())->where(function ($spa8a4ff) { $spa8a4ff->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); $sp89209e = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::yesterday()->toDateString())->where(function ($spa8a4ff) { $spa8a4ff->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); if (isset($spdb2625[0]) && isset($spdb2625[0]['count'])) { $spfcaacd['today'] = array('count' => (int) $spdb2625[0]['count'], 'paid' => (int) $spdb2625[0]['paid'], 'profit' => (int) $spdb2625[0]['profit']); } if (isset($sp89209e[0]) && isset($sp89209e[0]['count'])) { $spfcaacd['yesterday'] = array('count' => (int) $sp89209e[0]['count'], 'paid' => (int) $sp89209e[0]['paid'], 'profit' => (int) $sp89209e[0]['profit']); } $spfcaacd['need_ship_count'] = Order::whereUserId(\Auth::Id())->where('status', Order::STATUS_PAID)->count(); $spfcaacd['login'] = \App\Log::where('action', \App\Log::ACTION_LOGIN)->latest()->first(); return Response::success($spfcaacd); } function clearCache() { if (function_exists('opcache_reset')) { opcache_reset(); } try { \Artisan::call('cache:clear'); \Artisan::call('route:cache'); \Artisan::call('config:cache'); } catch (\Throwable $spd118f7) { return Response::fail($spd118f7->getMessage()); } return Response::success(); } function version() { $spc3c213 = array(); $spb00d6e = CurlRequest::curl('https://raw.githubusercontent.com/Tai7sy/card-system/master/.version', 0, null, array(), 5, $sp35923d, $spe9590d, $spbb923d); $sp58ef60 = @json_decode($spb00d6e, true); if (!@$sp58ef60['data']['version']) { Log::error('Dashboard.version checkUpdate failed', array('response' => $spb00d6e, 'httpCode' => $spe9590d, 'error' => $spbb923d)); $spc3c213['message'] = '检查更新失败: ' . $spbb923d; } else { $spc3c213 = array('version' => $sp58ef60['data']['version'], 'description' => @$sp58ef60['data']['description'] ?? '无'); } return Response::success(array('version' => config('app.version'), 'update' => $spc3c213)); } function logsToken() { $sp63ab26 = md5(random_bytes(128)); Cache::put($sp63ab26, Auth::getUser(), 15); return response(array('token' => $sp63ab26)); } function logsView(Request $spe5a184, $sp63ab26) { if ($sp766bcc = Cache::get($sp63ab26)) { Cache::put($sp63ab26, $sp766bcc, 15); return (new \Rap2hpoutre\LaravelLogViewer\LogViewerController())->index(); } else { throw new \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException('logs-token'); } } }