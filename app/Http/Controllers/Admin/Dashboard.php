<?php
namespace App\Http\Controllers\Admin; use App\Library\CurlRequest; use App\Library\Response; use App\Order; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Log; class Dashboard extends Controller { function index(Request $spf09a96) { $sp340863 = array('today' => array('count' => 0, 'paid' => 0, 'profit' => 0), 'yesterday' => array('count' => 0, 'paid' => 0, 'profit' => 0)); $spf0a6c4 = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::now()->toDateString())->where(function ($sp40bc20) { $sp40bc20->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); $sp941bbb = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::yesterday()->toDateString())->where(function ($sp40bc20) { $sp40bc20->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); if (isset($spf0a6c4[0]) && isset($spf0a6c4[0]['count'])) { $sp340863['today'] = array('count' => (int) $spf0a6c4[0]['count'], 'paid' => (int) $spf0a6c4[0]['paid'], 'profit' => (int) $spf0a6c4[0]['profit']); } if (isset($sp941bbb[0]) && isset($sp941bbb[0]['count'])) { $sp340863['yesterday'] = array('count' => (int) $sp941bbb[0]['count'], 'paid' => (int) $sp941bbb[0]['paid'], 'profit' => (int) $sp941bbb[0]['profit']); } $sp340863['need_ship_count'] = Order::whereUserId(\Auth::Id())->where('status', Order::STATUS_PAID)->count(); $sp340863['login'] = \App\Log::where('action', \App\Log::ACTION_LOGIN)->latest()->first(); return Response::success($sp340863); } function clearCache() { if (function_exists('opcache_reset')) { opcache_reset(); } try { \Artisan::call('cache:clear'); \Artisan::call('route:cache'); \Artisan::call('config:cache'); } catch (\Throwable $spf745ad) { return Response::fail($spf745ad->getMessage()); } return Response::success(); } function version() { $sp1decb2 = array(); $spe72015 = CurlRequest::curl('https://raw.githubusercontent.com/Tai7sy/card-system/master/.version', 0, null, array(), 5, $sp2e79ca, $sp31c6fc, $spe14ddb); $spb1d76d = @json_decode($spe72015, true); if (!@$spb1d76d['data']['version']) { Log::error('Dashboard.version checkUpdate failed', array('response' => $spe72015, 'httpCode' => $sp31c6fc, 'error' => $spe14ddb)); $sp1decb2['message'] = '检查更新失败: ' . $spe14ddb; } else { $sp1decb2 = array('version' => $spb1d76d['data']['version'], 'description' => @$spb1d76d['data']['description'] ?? '无'); } return Response::success(array('version' => config('app.version'), 'update' => $sp1decb2)); } function logsToken() { $sp269e48 = md5(random_bytes(128)); Cache::put($sp269e48, Auth::getUser(), 15); return response(array('token' => $sp269e48)); } function logsView(Request $spf09a96, $sp269e48) { if ($sp586d7b = Cache::get($sp269e48)) { Cache::put($sp269e48, $sp586d7b, 15); return (new \Rap2hpoutre\LaravelLogViewer\LogViewerController())->index(); } else { throw new \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException('logs-token'); } } }