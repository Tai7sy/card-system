<?php
namespace App\Http\Controllers\Admin; use App\Library\CurlRequest; use App\Library\Response; use App\Order; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Log; class Dashboard extends Controller { function index(Request $sp26e527) { $sp5aa810 = array('today' => array('count' => 0, 'paid' => 0, 'profit' => 0), 'yesterday' => array('count' => 0, 'paid' => 0, 'profit' => 0)); $spe6aa6d = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::now()->toDateString())->where(function ($spcfdf85) { $spcfdf85->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); $sp368eaf = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::yesterday()->toDateString())->where(function ($spcfdf85) { $spcfdf85->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); if (isset($spe6aa6d[0]) && isset($spe6aa6d[0]['count'])) { $sp5aa810['today'] = array('count' => (int) $spe6aa6d[0]['count'], 'paid' => (int) $spe6aa6d[0]['paid'], 'profit' => (int) $spe6aa6d[0]['profit']); } if (isset($sp368eaf[0]) && isset($sp368eaf[0]['count'])) { $sp5aa810['yesterday'] = array('count' => (int) $sp368eaf[0]['count'], 'paid' => (int) $sp368eaf[0]['paid'], 'profit' => (int) $sp368eaf[0]['profit']); } $sp5aa810['need_ship_count'] = Order::whereUserId(\Auth::Id())->where('status', Order::STATUS_PAID)->count(); $sp5aa810['login'] = \App\Log::where('action', \App\Log::ACTION_LOGIN)->latest()->first(); return Response::success($sp5aa810); } function clearCache() { if (function_exists('opcache_reset')) { opcache_reset(); } try { \Artisan::call('cache:clear'); \Artisan::call('route:cache'); \Artisan::call('config:cache'); } catch (\Throwable $sp7900a2) { return Response::fail($sp7900a2->getMessage()); } return Response::success(); } function version() { $sp4bc79d = array(); $sp318ad9 = CurlRequest::get('https://raw.githubusercontent.com/Tai7sy/card-system/master/.version'); $spbaaa2b = @json_decode($sp318ad9, true); if (!@$spbaaa2b['data']['version']) { Log::error('Dashboard.version checkUpdate failed', array('version_raw' => $sp318ad9)); $sp4bc79d['message'] = '检查更新失败'; } else { $sp4bc79d = array('version' => $spbaaa2b['data']['version'], 'description' => $spbaaa2b['data']['description']); } return Response::success(array('version' => config('app.version'), 'update' => $sp4bc79d)); } function logsToken() { $spce7aba = md5(random_bytes(128)); Cache::put($spce7aba, Auth::getUser(), 15); return response(array('token' => $spce7aba)); } function logsView(Request $sp26e527, $spce7aba) { if ($sp590011 = Cache::get($spce7aba)) { Cache::put($spce7aba, $sp590011, 15); return (new \Rap2hpoutre\LaravelLogViewer\LogViewerController())->index(); } else { throw new \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException('logs-token'); } } }