<?php
namespace App\Http\Controllers\Admin; use App\Library\CurlRequest; use App\Library\Response; use App\Order; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Log; class Dashboard extends Controller { function index(Request $spdf16c9) { $sp0213cc = array('today' => array('count' => 0, 'paid' => 0, 'profit' => 0), 'yesterday' => array('count' => 0, 'paid' => 0, 'profit' => 0)); $sp21c4df = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::now()->toDateString())->where(function ($spc64cdd) { $spc64cdd->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); $spd8940c = Order::whereUserId(\Auth::Id())->whereDate('paid_at', \Carbon\Carbon::yesterday()->toDateString())->where(function ($spc64cdd) { $spc64cdd->where('status', Order::STATUS_PAID)->orWhere('status', Order::STATUS_SUCCESS); })->selectRaw('COUNT(*) as `count`,SUM(`paid`) as `paid`,SUM(`paid`-`sms_price`-`cost`-`fee`) as `profit`')->get()->toArray(); if (isset($sp21c4df[0]) && isset($sp21c4df[0]['count'])) { $sp0213cc['today'] = array('count' => (int) $sp21c4df[0]['count'], 'paid' => (int) $sp21c4df[0]['paid'], 'profit' => (int) $sp21c4df[0]['profit']); } if (isset($spd8940c[0]) && isset($spd8940c[0]['count'])) { $sp0213cc['yesterday'] = array('count' => (int) $spd8940c[0]['count'], 'paid' => (int) $spd8940c[0]['paid'], 'profit' => (int) $spd8940c[0]['profit']); } $sp0213cc['need_ship_count'] = Order::whereUserId(\Auth::Id())->where('status', Order::STATUS_PAID)->count(); $sp0213cc['login'] = \App\Log::where('action', \App\Log::ACTION_LOGIN)->latest()->first(); return Response::success($sp0213cc); } function clearCache() { if (function_exists('opcache_reset')) { opcache_reset(); } try { \Artisan::call('cache:clear'); \Artisan::call('route:cache'); \Artisan::call('config:cache'); } catch (\Throwable $sp54a0c6) { return Response::fail($sp54a0c6->getMessage()); } return Response::success(); } function version() { $sp4ec5cc = array(); $sp763928 = CurlRequest::curl('https://raw.githubusercontent.com/Tai7sy/card-system/master/.version', 0, null, array(), 5, $sp2f0df3, $sp6b2e6a, $spa9d79c); $spfeee67 = @json_decode($sp763928, true); if (!@$spfeee67['data']['version']) { Log::error('Dashboard.version checkUpdate failed', array('response' => $sp763928, 'httpCode' => $sp6b2e6a, 'error' => $spa9d79c)); $sp4ec5cc['message'] = '检查更新失败: ' . $spa9d79c; } else { $sp4ec5cc = array('version' => $spfeee67['data']['version'], 'description' => @$spfeee67['data']['description'] ?? '无'); } return Response::success(array('version' => config('app.version'), 'update' => $sp4ec5cc)); } function logsToken() { $sp268070 = md5(random_bytes(128)); Cache::put($sp268070, Auth::getUser(), 15); return response(array('token' => $sp268070)); } function logsView(Request $spdf16c9, $sp268070) { if ($sp0a324a = Cache::get($sp268070)) { Cache::put($sp268070, $sp0a324a, 15); return (new \Rap2hpoutre\LaravelLogViewer\LogViewerController())->index(); } else { throw new \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException('logs-token'); } } }