<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Response; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class System extends Controller { private function set(Request $sp510ef3, $spe9c96b) { foreach ($spe9c96b as $spd7c47a) { if ($sp510ef3->has($spd7c47a)) { \App\System::_set($spd7c47a, $sp510ef3->post($spd7c47a)); } } } private function setMoney(Request $sp510ef3, $spe9c96b) { foreach ($spe9c96b as $spd7c47a) { if ($sp510ef3->has($spd7c47a)) { \App\System::_set($spd7c47a, (int) round($sp510ef3->post($spd7c47a) * 100)); } } } private function setInt(Request $sp510ef3, $spe9c96b) { foreach ($spe9c96b as $spd7c47a) { if ($sp510ef3->has($spd7c47a)) { \App\System::_set($spd7c47a, (int) $sp510ef3->post($spd7c47a)); } } } function setItem(Request $sp510ef3) { $spd7c47a = $sp510ef3->post('name'); $sp849ede = $sp510ef3->post('value'); if (!$spd7c47a || !$sp849ede) { return Response::forbidden(); } \App\System::_set($spd7c47a, $sp849ede); return Response::success(); } function info(Request $sp510ef3) { $spb0742a = array('app_name', 'app_title', 'app_url', 'app_url_api', 'keywords', 'description', 'shop_ann', 'shop_ann_pop', 'shop_qq', 'company', 'js_tj', 'js_kf'); $sp461349 = array('shop_inventory'); if ($sp510ef3->isMethod('GET')) { $spfdba56 = array(); foreach ($spb0742a as $spd7c47a) { $spfdba56[$spd7c47a] = \App\System::_get($spd7c47a); } foreach ($sp461349 as $spd7c47a) { $spfdba56[$spd7c47a] = (int) \App\System::_get($spd7c47a); } return Response::success($spfdba56); } $sp4daeba = array('app_url' => Helper::format_url($_POST['app_url']), 'app_url_api' => Helper::format_url($_POST['app_url_api'])); $sp510ef3->merge($sp4daeba); $this->set($sp510ef3, $spb0742a); $this->setInt($sp510ef3, $sp461349); return Response::success(); } function theme(Request $sp510ef3) { if ($sp510ef3->isMethod('GET')) { \App\ShopTheme::freshList(); return Response::success(array('themes' => \App\ShopTheme::get(), 'default' => \App\ShopTheme::defaultTheme()->name)); } $sp5278d4 = \App\ShopTheme::whereName($sp510ef3->post('shop_theme'))->firstOrFail(); \App\System::_set('shop_theme_default', $sp5278d4->name); $sp5278d4->config = @json_decode($sp510ef3->post('theme_config')) ?? array(); $sp5278d4->saveOrFail(); return Response::success(); } function order(Request $sp510ef3) { $spe9c96b = array('order_query_password_open', 'order_query_day', 'order_clean_unpay_open', 'order_clean_unpay_day'); if ($sp510ef3->isMethod('GET')) { $spfdba56 = array(); foreach ($spe9c96b as $spd7c47a) { $spfdba56[$spd7c47a] = (int) \App\System::_get($spd7c47a); } return Response::success($spfdba56); } $this->setInt($sp510ef3, $spe9c96b); return Response::success(); } function vcode(Request $sp510ef3) { $spb0742a = array('vcode_driver', 'vcode_geetest_id', 'vcode_geetest_key'); $sp461349 = array('vcode_login_admin', 'vcode_shop_buy', 'vcode_shop_search'); if ($sp510ef3->isMethod('GET')) { $spfdba56 = array(); foreach ($spb0742a as $spd7c47a) { $spfdba56[$spd7c47a] = \App\System::_get($spd7c47a); } foreach ($sp461349 as $spd7c47a) { $spfdba56[$spd7c47a] = (int) \App\System::_get($spd7c47a); } return Response::success($spfdba56); } $this->set($sp510ef3, $spb0742a); $this->setInt($sp510ef3, $sp461349); return Response::success(); } function email(Request $sp510ef3) { $spb0742a = array('mail_driver', 'mail_smtp_host', 'mail_smtp_port', 'mail_smtp_username', 'mail_smtp_password', 'mail_smtp_from_address', 'mail_smtp_from_name', 'mail_smtp_encryption', 'sendcloud_user', 'sendcloud_key'); $sp461349 = array('mail_send_order', 'mail_send_order_use_contact'); if ($sp510ef3->isMethod('GET')) { $spfdba56 = array(); foreach ($spb0742a as $spd7c47a) { $spfdba56[$spd7c47a] = \App\System::_get($spd7c47a); } foreach ($sp461349 as $spd7c47a) { $spfdba56[$spd7c47a] = (int) \App\System::_get($spd7c47a); } return Response::success($spfdba56); } $this->set($sp510ef3, $spb0742a); $this->setInt($sp510ef3, $sp461349); return Response::success(); } function sms(Request $sp510ef3) { $spb0742a = array('sms_api_id', 'sms_api_key'); $sp461349 = array('sms_send_order', 'sms_price'); if ($sp510ef3->isMethod('GET')) { $spfdba56 = array(); foreach ($spb0742a as $spd7c47a) { $spfdba56[$spd7c47a] = \App\System::_get($spd7c47a); } foreach ($sp461349 as $spd7c47a) { $spfdba56[$spd7c47a] = (int) \App\System::_get($spd7c47a); } return Response::success($spfdba56); } $this->set($sp510ef3, $spb0742a); $this->setInt($sp510ef3, $sp461349); return Response::success(); } function storage(Request $sp510ef3) { $spb0742a = array('storage_driver', 'storage_s3_access_key', 'storage_s3_secret_key', 'storage_s3_region', 'storage_s3_bucket', 'storage_oss_access_key', 'storage_oss_secret_key', 'storage_oss_bucket', 'storage_oss_endpoint', 'storage_oss_cdn_domain', 'storage_qiniu_domains_default', 'storage_qiniu_domains_https', 'storage_qiniu_access_key', 'storage_qiniu_secret_key', 'storage_qiniu_bucket', 'storage_qiniu_notify_url'); $sp461349 = array('storage_oss_is_ssl', 'storage_oss_is_cname'); if ($sp510ef3->isMethod('GET')) { $spfdba56 = array(); foreach ($spb0742a as $spd7c47a) { $spfdba56[$spd7c47a] = \App\System::_get($spd7c47a); } foreach ($sp461349 as $spd7c47a) { $spfdba56[$spd7c47a] = (int) \App\System::_get($spd7c47a); } return Response::success($spfdba56); } $this->set($sp510ef3, $spb0742a); $this->set($sp510ef3, $sp461349); return Response::success(); } function emailTest(Request $sp510ef3) { $this->validate($sp510ef3, array('to' => 'required')); $spc91719 = $sp510ef3->post('to'); try { $spced997 = Mail::to($spc91719)->send(new \App\Mail\Test()); return Response::success($spced997); } catch (\Throwable $spd3b3eb) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Mail Test Exception:' . $spd3b3eb->getMessage()); return Response::fail($spd3b3eb->getMessage(), $spd3b3eb); } } function orderClean(Request $sp510ef3) { $this->validate($sp510ef3, array('day' => 'required|integer|min:1')); $spac3a98 = (int) $sp510ef3->post('day'); \App\Order::where('status', \App\Order::STATUS_UNPAY)->where('created_at', '<', (new \Carbon\Carbon())->addDays(-$spac3a98))->delete(); return Response::success(); } function deleteOrders(Request $sp510ef3) { $this->validate($sp510ef3, array('date' => 'required|date_format:Y-m-d')); $sp84d11f = $sp510ef3->input('date'); \App\Order::where('created_at', '<', $sp84d11f)->delete(); return Response::success(); } function deleteFundRecords(Request $sp510ef3) { $this->validate($sp510ef3, array('date' => 'required|date_format:Y-m-d')); $sp84d11f = $sp510ef3->input('date'); \App\FundRecord::where('created_at', '<', $sp84d11f)->delete(); \App\User::where('m_paid', '>', 0)->update(array('m_all' => DB::raw('m_all-m_paid'), 'm_paid' => 0)); return Response::success(); } function deleteLogs(Request $sp510ef3) { $this->validate($sp510ef3, array('date' => 'required|date_format:Y-m-d')); $sp84d11f = $sp510ef3->input('date'); \App\Log::where('created_at', '<', $sp84d11f)->delete(); return Response::success(); } }