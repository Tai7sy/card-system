<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Response; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class System extends Controller { private function set(Request $sp517903, $sp84deb1) { foreach ($sp84deb1 as $sp832442) { if ($sp517903->has($sp832442)) { \App\System::_set($sp832442, $sp517903->post($sp832442)); } } } private function setMoney(Request $sp517903, $sp84deb1) { foreach ($sp84deb1 as $sp832442) { if ($sp517903->has($sp832442)) { \App\System::_set($sp832442, (int) round($sp517903->post($sp832442) * 100)); } } } private function setInt(Request $sp517903, $sp84deb1) { foreach ($sp84deb1 as $sp832442) { if ($sp517903->has($sp832442)) { \App\System::_set($sp832442, (int) $sp517903->post($sp832442)); } } } function setItem(Request $sp517903) { $sp832442 = $sp517903->post('name'); $spbf479d = $sp517903->post('value'); if (!$sp832442 || !$spbf479d) { return Response::forbidden(); } \App\System::_set($sp832442, $spbf479d); return Response::success(); } function info(Request $sp517903) { $sp277991 = array('app_name', 'app_title', 'app_url', 'app_url_api', 'keywords', 'description', 'shop_ann', 'shop_ann_pop', 'shop_qq', 'company', 'js_tj', 'js_kf'); $spdb2fad = array('shop_inventory'); if ($sp517903->isMethod('GET')) { $sp1c6547 = array(); foreach ($sp277991 as $sp832442) { $sp1c6547[$sp832442] = \App\System::_get($sp832442); } foreach ($spdb2fad as $sp832442) { $sp1c6547[$sp832442] = (int) \App\System::_get($sp832442); } return Response::success($sp1c6547); } $sp069c22 = array('app_url' => Helper::format_url($_POST['app_url']), 'app_url_api' => Helper::format_url($_POST['app_url_api'])); $sp517903->merge($sp069c22); $this->set($sp517903, $sp277991); $this->setInt($sp517903, $spdb2fad); return Response::success(); } function theme(Request $sp517903) { if ($sp517903->isMethod('GET')) { \App\ShopTheme::freshList(); return Response::success(array('themes' => \App\ShopTheme::get(), 'default' => \App\ShopTheme::defaultTheme()->name)); } $sp860574 = \App\ShopTheme::whereName($sp517903->post('shop_theme'))->firstOrFail(); \App\System::_set('shop_theme_default', $sp860574->name); $sp860574->config = @json_decode($sp517903->post('theme_config')) ?? array(); $sp860574->saveOrFail(); return Response::success(); } function order(Request $sp517903) { $sp84deb1 = array('order_query_password_open', 'order_query_day', 'order_clean_unpay_open', 'order_clean_unpay_day'); if ($sp517903->isMethod('GET')) { $sp1c6547 = array(); foreach ($sp84deb1 as $sp832442) { $sp1c6547[$sp832442] = (int) \App\System::_get($sp832442); } return Response::success($sp1c6547); } $this->setInt($sp517903, $sp84deb1); return Response::success(); } function vcode(Request $sp517903) { $sp277991 = array('vcode_driver', 'vcode_geetest_id', 'vcode_geetest_key'); $spdb2fad = array('vcode_login_admin', 'vcode_shop_buy', 'vcode_shop_search'); if ($sp517903->isMethod('GET')) { $sp1c6547 = array(); foreach ($sp277991 as $sp832442) { $sp1c6547[$sp832442] = \App\System::_get($sp832442); } foreach ($spdb2fad as $sp832442) { $sp1c6547[$sp832442] = (int) \App\System::_get($sp832442); } return Response::success($sp1c6547); } $this->set($sp517903, $sp277991); $this->setInt($sp517903, $spdb2fad); return Response::success(); } function email(Request $sp517903) { $sp277991 = array('mail_driver', 'mail_smtp_host', 'mail_smtp_port', 'mail_smtp_username', 'mail_smtp_password', 'mail_smtp_from_address', 'mail_smtp_from_name', 'mail_smtp_encryption', 'sendcloud_user', 'sendcloud_key'); $spdb2fad = array('mail_send_order', 'mail_send_order_use_contact'); if ($sp517903->isMethod('GET')) { $sp1c6547 = array(); foreach ($sp277991 as $sp832442) { $sp1c6547[$sp832442] = \App\System::_get($sp832442); } foreach ($spdb2fad as $sp832442) { $sp1c6547[$sp832442] = (int) \App\System::_get($sp832442); } return Response::success($sp1c6547); } $this->set($sp517903, $sp277991); $this->setInt($sp517903, $spdb2fad); return Response::success(); } function sms(Request $sp517903) { $sp277991 = array('sms_api_id', 'sms_api_key'); $spdb2fad = array('sms_send_order', 'sms_price'); if ($sp517903->isMethod('GET')) { $sp1c6547 = array(); foreach ($sp277991 as $sp832442) { $sp1c6547[$sp832442] = \App\System::_get($sp832442); } foreach ($spdb2fad as $sp832442) { $sp1c6547[$sp832442] = (int) \App\System::_get($sp832442); } return Response::success($sp1c6547); } $this->set($sp517903, $sp277991); $this->setInt($sp517903, $spdb2fad); return Response::success(); } function storage(Request $sp517903) { $sp277991 = array('storage_driver', 'storage_s3_access_key', 'storage_s3_secret_key', 'storage_s3_region', 'storage_s3_bucket', 'storage_oss_access_key', 'storage_oss_secret_key', 'storage_oss_bucket', 'storage_oss_endpoint', 'storage_oss_cdn_domain', 'storage_qiniu_domains_default', 'storage_qiniu_domains_https', 'storage_qiniu_access_key', 'storage_qiniu_secret_key', 'storage_qiniu_bucket', 'storage_qiniu_notify_url'); $spdb2fad = array('storage_oss_is_ssl', 'storage_oss_is_cname'); if ($sp517903->isMethod('GET')) { $sp1c6547 = array(); foreach ($sp277991 as $sp832442) { $sp1c6547[$sp832442] = \App\System::_get($sp832442); } foreach ($spdb2fad as $sp832442) { $sp1c6547[$sp832442] = (int) \App\System::_get($sp832442); } return Response::success($sp1c6547); } $this->set($sp517903, $sp277991); $this->set($sp517903, $spdb2fad); return Response::success(); } function emailTest(Request $sp517903) { $this->validate($sp517903, array('to' => 'required')); $sp968413 = $sp517903->post('to'); try { $spd9807c = Mail::to($sp968413)->send(new \App\Mail\Test()); return Response::success($spd9807c); } catch (\Throwable $sp0b065e) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Mail Test Exception:' . $sp0b065e->getMessage()); return Response::fail($sp0b065e->getMessage(), $sp0b065e); } } function orderClean(Request $sp517903) { $this->validate($sp517903, array('day' => 'required|integer|min:1')); $sp3ac394 = (int) $sp517903->post('day'); \App\Order::where('status', \App\Order::STATUS_UNPAY)->where('created_at', '<', (new \Carbon\Carbon())->addDays(-$sp3ac394))->delete(); return Response::success(); } function deleteOrders(Request $sp517903) { $this->validate($sp517903, array('date' => 'required|date_format:Y-m-d')); $spea1257 = $sp517903->input('date'); \App\Order::where('created_at', '<', $spea1257)->delete(); return Response::success(); } function deleteFundRecords(Request $sp517903) { $this->validate($sp517903, array('date' => 'required|date_format:Y-m-d')); $spea1257 = $sp517903->input('date'); \App\FundRecord::where('created_at', '<', $spea1257)->delete(); \App\User::where('m_paid', '>', 0)->update(array('m_all' => DB::raw('m_all-m_paid'), 'm_paid' => 0)); return Response::success(); } function deleteLogs(Request $sp517903) { $this->validate($sp517903, array('date' => 'required|date_format:Y-m-d')); $spea1257 = $sp517903->input('date'); \App\Log::where('created_at', '<', $spea1257)->delete(); return Response::success(); } }