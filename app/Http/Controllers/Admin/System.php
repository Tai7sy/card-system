<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Response; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class System extends Controller { private function set(Request $sp62e4cd, $sp8f3b29) { foreach ($sp8f3b29 as $spb54a76) { if ($sp62e4cd->has($spb54a76)) { \App\System::_set($spb54a76, $sp62e4cd->post($spb54a76)); } } } private function setMoney(Request $sp62e4cd, $sp8f3b29) { foreach ($sp8f3b29 as $spb54a76) { if ($sp62e4cd->has($spb54a76)) { \App\System::_set($spb54a76, (int) round($sp62e4cd->post($spb54a76) * 100)); } } } private function setInt(Request $sp62e4cd, $sp8f3b29) { foreach ($sp8f3b29 as $spb54a76) { if ($sp62e4cd->has($spb54a76)) { \App\System::_set($spb54a76, (int) $sp62e4cd->post($spb54a76)); } } } function setItem(Request $sp62e4cd) { $spb54a76 = $sp62e4cd->post('name'); $spa60c0f = $sp62e4cd->post('value'); if (!$spb54a76 || !$spa60c0f) { return Response::forbidden(); } \App\System::_set($spb54a76, $spa60c0f); return Response::success(); } function info(Request $sp62e4cd) { $sp9e0011 = array('app_name', 'app_title', 'app_url', 'app_url_api', 'keywords', 'description', 'shop_ann', 'shop_ann_pop', 'shop_qq', 'company', 'js_tj', 'js_kf'); $spe99825 = array('shop_inventory'); if ($sp62e4cd->isMethod('GET')) { $spc03b6e = array(); foreach ($sp9e0011 as $spb54a76) { $spc03b6e[$spb54a76] = \App\System::_get($spb54a76); } foreach ($spe99825 as $spb54a76) { $spc03b6e[$spb54a76] = (int) \App\System::_get($spb54a76); } return Response::success($spc03b6e); } $spfaab7a = array('app_url' => Helper::format_url($_POST['app_url']), 'app_url_api' => Helper::format_url($_POST['app_url_api'])); $sp62e4cd->merge($spfaab7a); $this->set($sp62e4cd, $sp9e0011); $this->setInt($sp62e4cd, $spe99825); return Response::success(); } function theme(Request $sp62e4cd) { if ($sp62e4cd->isMethod('GET')) { \App\ShopTheme::freshList(); return Response::success(array('themes' => \App\ShopTheme::get(), 'default' => \App\ShopTheme::defaultTheme()->name)); } $spbc9a79 = \App\ShopTheme::whereName($sp62e4cd->post('shop_theme'))->firstOrFail(); \App\System::_set('shop_theme_default', $spbc9a79->name); $spbc9a79->config = @json_decode($sp62e4cd->post('theme_config')) ?? array(); $spbc9a79->saveOrFail(); return Response::success(); } function order(Request $sp62e4cd) { $sp8f3b29 = array('order_query_password_open', 'order_query_day', 'order_clean_unpay_open', 'order_clean_unpay_day'); if ($sp62e4cd->isMethod('GET')) { $spc03b6e = array(); foreach ($sp8f3b29 as $spb54a76) { $spc03b6e[$spb54a76] = (int) \App\System::_get($spb54a76); } return Response::success($spc03b6e); } $this->setInt($sp62e4cd, $sp8f3b29); return Response::success(); } function vcode(Request $sp62e4cd) { $sp9e0011 = array('vcode_driver', 'vcode_geetest_id', 'vcode_geetest_key'); $spe99825 = array('vcode_login_admin', 'vcode_shop_buy', 'vcode_shop_search'); if ($sp62e4cd->isMethod('GET')) { $spc03b6e = array(); foreach ($sp9e0011 as $spb54a76) { $spc03b6e[$spb54a76] = \App\System::_get($spb54a76); } foreach ($spe99825 as $spb54a76) { $spc03b6e[$spb54a76] = (int) \App\System::_get($spb54a76); } return Response::success($spc03b6e); } $this->set($sp62e4cd, $sp9e0011); $this->setInt($sp62e4cd, $spe99825); return Response::success(); } function email(Request $sp62e4cd) { $sp9e0011 = array('mail_driver', 'mail_smtp_host', 'mail_smtp_port', 'mail_smtp_username', 'mail_smtp_password', 'mail_smtp_from_address', 'mail_smtp_from_name', 'mail_smtp_encryption', 'sendcloud_user', 'sendcloud_key'); $spe99825 = array('mail_send_order', 'mail_send_order_use_contact'); if ($sp62e4cd->isMethod('GET')) { $spc03b6e = array(); foreach ($sp9e0011 as $spb54a76) { $spc03b6e[$spb54a76] = \App\System::_get($spb54a76); } foreach ($spe99825 as $spb54a76) { $spc03b6e[$spb54a76] = (int) \App\System::_get($spb54a76); } return Response::success($spc03b6e); } $this->set($sp62e4cd, $sp9e0011); $this->setInt($sp62e4cd, $spe99825); return Response::success(); } function sms(Request $sp62e4cd) { $sp9e0011 = array('sms_api_id', 'sms_api_key'); $spe99825 = array('sms_send_order', 'sms_price'); if ($sp62e4cd->isMethod('GET')) { $spc03b6e = array(); foreach ($sp9e0011 as $spb54a76) { $spc03b6e[$spb54a76] = \App\System::_get($spb54a76); } foreach ($spe99825 as $spb54a76) { $spc03b6e[$spb54a76] = (int) \App\System::_get($spb54a76); } return Response::success($spc03b6e); } $this->set($sp62e4cd, $sp9e0011); $this->setInt($sp62e4cd, $spe99825); return Response::success(); } function storage(Request $sp62e4cd) { $sp9e0011 = array('storage_driver', 'storage_s3_access_key', 'storage_s3_secret_key', 'storage_s3_region', 'storage_s3_bucket', 'storage_oss_access_key', 'storage_oss_secret_key', 'storage_oss_bucket', 'storage_oss_endpoint', 'storage_oss_cdn_domain', 'storage_qiniu_domains_default', 'storage_qiniu_domains_https', 'storage_qiniu_access_key', 'storage_qiniu_secret_key', 'storage_qiniu_bucket', 'storage_qiniu_notify_url'); $spe99825 = array('storage_oss_is_ssl', 'storage_oss_is_cname'); if ($sp62e4cd->isMethod('GET')) { $spc03b6e = array(); foreach ($sp9e0011 as $spb54a76) { $spc03b6e[$spb54a76] = \App\System::_get($spb54a76); } foreach ($spe99825 as $spb54a76) { $spc03b6e[$spb54a76] = (int) \App\System::_get($spb54a76); } return Response::success($spc03b6e); } $this->set($sp62e4cd, $sp9e0011); $this->set($sp62e4cd, $spe99825); return Response::success(); } function emailTest(Request $sp62e4cd) { $this->validate($sp62e4cd, array('to' => 'required')); $spe789fd = $sp62e4cd->post('to'); try { $spa59707 = Mail::to($spe789fd)->send(new \App\Mail\Test()); return Response::success($spa59707); } catch (\Throwable $spc22b6c) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Mail Test Exception:' . $spc22b6c->getMessage()); return Response::fail($spc22b6c->getMessage(), $spc22b6c); } } function orderClean(Request $sp62e4cd) { $this->validate($sp62e4cd, array('day' => 'required|integer|min:1')); $sp0d78d7 = (int) $sp62e4cd->post('day'); \App\Order::where('status', \App\Order::STATUS_UNPAY)->where('created_at', '<', (new \Carbon\Carbon())->addDays(-$sp0d78d7))->delete(); return Response::success(); } function deleteOrders(Request $sp62e4cd) { $this->validate($sp62e4cd, array('date' => 'required|date_format:Y-m-d')); $spa63b8e = $sp62e4cd->input('date'); \App\Order::where('created_at', '<', $spa63b8e)->delete(); return Response::success(); } function deleteFundRecords(Request $sp62e4cd) { $this->validate($sp62e4cd, array('date' => 'required|date_format:Y-m-d')); $spa63b8e = $sp62e4cd->input('date'); \App\FundRecord::where('created_at', '<', $spa63b8e)->delete(); \App\User::where('m_paid', '>', 0)->update(array('m_all' => DB::raw('m_all-m_paid'), 'm_paid' => 0)); return Response::success(); } function deleteLogs(Request $sp62e4cd) { $this->validate($sp62e4cd, array('date' => 'required|date_format:Y-m-d')); $spa63b8e = $sp62e4cd->input('date'); \App\Log::where('created_at', '<', $spa63b8e)->delete(); return Response::success(); } }