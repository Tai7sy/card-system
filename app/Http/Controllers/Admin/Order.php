<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spdf2438 = $spccbfb6->post('ids'); $sp6a69f4 = (int) $spccbfb6->post('income'); $sp21f6f9 = (int) $spccbfb6->post('balance'); \App\Order::whereIn('id', explode(',', $spdf2438))->chunk(100, function ($sp25f244) use($sp6a69f4, $sp21f6f9) { foreach ($sp25f244 as $spcd0b15) { $spcd0b15->cards()->detach(); try { if ($sp6a69f4) { $spcd0b15->fundRecord()->delete(); } if ($sp21f6f9) { $sp91cc0b = \App\User::lockForUpdate()->firstOrFail(); $sp91cc0b->m_all -= $spcd0b15->income; $sp91cc0b->saveOrFail(); } $spcd0b15->delete(); } catch (\Exception $spdfbc42) { } } }); return Response::success(); } function freeze(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string')); $spdf2438 = explode(',', $spccbfb6->post('ids')); $spf24a03 = $spccbfb6->post('reason'); $spc2ebcd = 0; $spfdbf8f = 0; foreach ($spdf2438 as $spf2b793) { $spc2ebcd++; if (FundHelper::orderFreeze($spf2b793, $spf24a03)) { $spfdbf8f++; } } return Response::success(array($spc2ebcd, $spfdbf8f)); } function unfreeze(Request $spccbfb6) { $this->validate($spccbfb6, array('ids' => 'required|string')); $spdf2438 = explode(',', $spccbfb6->post('ids')); $spc2ebcd = 0; $spfdbf8f = 0; $spcb49ec = \App\Order::STATUS_FROZEN; foreach ($spdf2438 as $spf2b793) { $spc2ebcd++; if (FundHelper::orderUnfreeze($spf2b793, '后台操作', null, $spcb49ec)) { $spfdbf8f++; } } return Response::success(array($spc2ebcd, $spfdbf8f, $spcb49ec)); } function set_paid(Request $spccbfb6) { $this->validate($spccbfb6, array('id' => 'required|integer')); $spbf68a1 = $spccbfb6->post('id', ''); $spefc3d0 = $spccbfb6->post('trade_no', ''); if (strlen($spefc3d0) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spcd0b15 = \App\Order::findOrFail($spbf68a1); if ($spcd0b15->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spf343c3 = 'Admin.SetPaid'; $spebe6f4 = $spcd0b15->order_no; $sp5a0200 = $spcd0b15->paid; try { Log::debug($spf343c3 . " shipOrder start, order_no: {$spebe6f4}, amount: {$sp5a0200}, trade_no: {$spefc3d0}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spccbfb6, $spebe6f4, $sp5a0200, $spefc3d0); Log::debug($spf343c3 . ' shipOrder end, order_no: ' . $spebe6f4); $spfdbf8f = true; $spabf7f9 = '发货成功'; } catch (\Exception $spdfbc42) { $spfdbf8f = false; $spabf7f9 = $spdfbc42->getMessage(); Log::error($spf343c3 . ' shipOrder Exception: ' . $spdfbc42->getMessage()); } $spcd0b15 = \App\Order::with(array('pay' => function (Relation $sp479bde) { $sp479bde->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp479bde) { $sp479bde->select(array('id', 'card')); }))->findOrFail($spbf68a1); if ($spcd0b15->status === \App\Order::STATUS_PAID) { if ($spcd0b15->product->delivery === \App\Product::DELIVERY_MANUAL) { $spfdbf8f = true; $spabf7f9 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spfdbf8f = false; $spabf7f9 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spfdbf8f ? 0 : -1, 'msg' => $spabf7f9, 'order' => $spcd0b15)); } }