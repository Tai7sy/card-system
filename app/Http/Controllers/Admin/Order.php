<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp4a6f27 = $spa20801->post('ids'); $sp901ccb = (int) $spa20801->post('income'); $sp1b9108 = (int) $spa20801->post('balance'); \App\Order::whereIn('id', explode(',', $sp4a6f27))->chunk(100, function ($spe1d17e) use($sp901ccb, $sp1b9108) { foreach ($spe1d17e as $sp106d4b) { $sp106d4b->cards()->detach(); try { if ($sp901ccb) { $sp106d4b->fundRecord()->delete(); } if ($sp1b9108) { $spf3d3c9 = \App\User::lockForUpdate()->firstOrFail(); $spf3d3c9->m_all -= $sp106d4b->income; $spf3d3c9->saveOrFail(); } $sp106d4b->delete(); } catch (\Exception $sp16b835) { } } }); return Response::success(); } function freeze(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string')); $sp4a6f27 = explode(',', $spa20801->post('ids')); $sp4fe0c3 = $spa20801->post('reason'); $spb5d933 = 0; $sp762b53 = 0; foreach ($sp4a6f27 as $spc2e58a) { $spb5d933++; if (FundHelper::orderFreeze($spc2e58a, $sp4fe0c3)) { $sp762b53++; } } return Response::success(array($spb5d933, $sp762b53)); } function unfreeze(Request $spa20801) { $this->validate($spa20801, array('ids' => 'required|string')); $sp4a6f27 = explode(',', $spa20801->post('ids')); $spb5d933 = 0; $sp762b53 = 0; $sp39fa88 = \App\Order::STATUS_FROZEN; foreach ($sp4a6f27 as $spc2e58a) { $spb5d933++; if (FundHelper::orderUnfreeze($spc2e58a, '后台操作', null, $sp39fa88)) { $sp762b53++; } } return Response::success(array($spb5d933, $sp762b53, $sp39fa88)); } function set_paid(Request $spa20801) { $this->validate($spa20801, array('id' => 'required|integer')); $spbc2f9d = $spa20801->post('id', ''); $sp414d60 = $spa20801->post('trade_no', ''); if (strlen($sp414d60) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp106d4b = \App\Order::findOrFail($spbc2f9d); if ($sp106d4b->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spc70996 = 'Admin.SetPaid'; $sp54976c = $sp106d4b->order_no; $spaf895a = $sp106d4b->paid; try { Log::debug($spc70996 . " shipOrder start, order_no: {$sp54976c}, amount: {$spaf895a}, trade_no: {$sp414d60}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spa20801, $sp54976c, $spaf895a, $sp414d60); Log::debug($spc70996 . ' shipOrder end, order_no: ' . $sp54976c); $sp762b53 = true; $spab838f = '发货成功'; } catch (\Exception $sp16b835) { $sp762b53 = false; $spab838f = $sp16b835->getMessage(); Log::error($spc70996 . ' shipOrder Exception: ' . $sp16b835->getMessage()); } $sp106d4b = \App\Order::with(array('pay' => function (Relation $sp6c3275) { $sp6c3275->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp6c3275) { $sp6c3275->select(array('id', 'card')); }))->findOrFail($spbc2f9d); if ($sp106d4b->status === \App\Order::STATUS_PAID) { if ($sp106d4b->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp762b53 = true; $spab838f = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp762b53 = false; $spab838f = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp762b53 ? 0 : -1, 'msg' => $spab838f, 'order' => $sp106d4b)); } }