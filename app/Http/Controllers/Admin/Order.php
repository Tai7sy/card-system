<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spba756f) { $this->validate($spba756f, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp12026a = $spba756f->post('ids'); $sp98659b = (int) $spba756f->post('income'); $spec2bef = (int) $spba756f->post('balance'); \App\Order::whereIn('id', explode(',', $sp12026a))->chunk(100, function ($sp29dcf4) use($sp98659b, $spec2bef) { foreach ($sp29dcf4 as $spedec71) { $spedec71->cards()->detach(); try { if ($sp98659b) { $spedec71->fundRecord()->delete(); } if ($spec2bef) { $spac34b1 = \App\User::lockForUpdate()->firstOrFail(); $spac34b1->m_all -= $spedec71->income; $spac34b1->saveOrFail(); } $spedec71->delete(); } catch (\Exception $sp6a7295) { } } }); return Response::success(); } function freeze(Request $spba756f) { $this->validate($spba756f, array('ids' => 'required|string')); $sp12026a = explode(',', $spba756f->post('ids')); $sp35d759 = $spba756f->post('reason'); $sp99aae1 = 0; $sp722b63 = 0; foreach ($sp12026a as $spe5a302) { $sp99aae1++; if (FundHelper::orderFreeze($spe5a302, $sp35d759)) { $sp722b63++; } } return Response::success(array($sp99aae1, $sp722b63)); } function unfreeze(Request $spba756f) { $this->validate($spba756f, array('ids' => 'required|string')); $sp12026a = explode(',', $spba756f->post('ids')); $sp99aae1 = 0; $sp722b63 = 0; $sp172c79 = \App\Order::STATUS_FROZEN; foreach ($sp12026a as $spe5a302) { $sp99aae1++; if (FundHelper::orderUnfreeze($spe5a302, '后台操作', null, $sp172c79)) { $sp722b63++; } } return Response::success(array($sp99aae1, $sp722b63, $sp172c79)); } function set_paid(Request $spba756f) { $this->validate($spba756f, array('id' => 'required|integer')); $sp8e8060 = $spba756f->post('id', ''); $sp9db197 = $spba756f->post('trade_no', ''); if (strlen($sp9db197) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spedec71 = \App\Order::findOrFail($sp8e8060); if ($spedec71->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp591089 = 'Admin.SetPaid'; $spf34e1a = $spedec71->order_no; $sp246f65 = $spedec71->paid; try { Log::debug($sp591089 . " shipOrder start, order_no: {$spf34e1a}, amount: {$sp246f65}, trade_no: {$sp9db197}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spba756f, $spf34e1a, $sp246f65, $sp9db197); Log::debug($sp591089 . ' shipOrder end, order_no: ' . $spf34e1a); $sp722b63 = true; $spa24442 = '发货成功'; } catch (\Exception $sp6a7295) { $sp722b63 = false; $spa24442 = $sp6a7295->getMessage(); Log::error($sp591089 . ' shipOrder Exception: ' . $sp6a7295->getMessage()); } $spedec71 = \App\Order::with(array('pay' => function (Relation $spca8acc) { $spca8acc->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spca8acc) { $spca8acc->select(array('id', 'card')); }))->findOrFail($sp8e8060); if ($spedec71->status === \App\Order::STATUS_PAID) { if ($spedec71->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp722b63 = true; $spa24442 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp722b63 = false; $spa24442 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp722b63 ? 0 : -1, 'msg' => $spa24442, 'order' => $spedec71)); } }