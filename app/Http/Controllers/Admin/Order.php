<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp892962 = $sp26e527->post('ids'); $sp07c5c5 = (int) $sp26e527->post('income'); $sp1396aa = (int) $sp26e527->post('balance'); \App\Order::whereIn('id', explode(',', $sp892962))->chunk(100, function ($sp002573) use($sp07c5c5, $sp1396aa) { foreach ($sp002573 as $sp8ac6c1) { $sp8ac6c1->cards()->detach(); try { if ($sp07c5c5) { $sp8ac6c1->fundRecord()->delete(); } if ($sp1396aa) { $sp590011 = \App\User::lockForUpdate()->firstOrFail(); $sp590011->m_all -= $sp8ac6c1->income; $sp590011->saveOrFail(); } $sp8ac6c1->delete(); } catch (\Exception $sp7900a2) { } } }); return Response::success(); } function freeze(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string')); $sp892962 = explode(',', $sp26e527->post('ids')); $sp49115f = $sp26e527->post('reason'); $spe95220 = 0; $sp35c270 = 0; foreach ($sp892962 as $sp27545d) { $spe95220++; if (FundHelper::orderFreeze($sp27545d, $sp49115f)) { $sp35c270++; } } return Response::success(array($spe95220, $sp35c270)); } function unfreeze(Request $sp26e527) { $this->validate($sp26e527, array('ids' => 'required|string')); $sp892962 = explode(',', $sp26e527->post('ids')); $spe95220 = 0; $sp35c270 = 0; $sp8591a5 = \App\Order::STATUS_FROZEN; foreach ($sp892962 as $sp27545d) { $spe95220++; if (FundHelper::orderUnfreeze($sp27545d, '后台操作', null, $sp8591a5)) { $sp35c270++; } } return Response::success(array($spe95220, $sp35c270, $sp8591a5)); } function set_paid(Request $sp26e527) { $this->validate($sp26e527, array('id' => 'required|integer')); $sp138835 = $sp26e527->post('id', ''); $sp6324c8 = $sp26e527->post('trade_no', ''); if (strlen($sp6324c8) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp8ac6c1 = \App\Order::findOrFail($sp138835); if ($sp8ac6c1->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spb399b9 = 'Admin.SetPaid'; $spf82521 = $sp8ac6c1->order_no; $sp7f4b1f = $sp8ac6c1->paid; try { Log::debug($spb399b9 . " shipOrder start, order_no: {$spf82521}, amount: {$sp7f4b1f}, trade_no: {$sp6324c8}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp26e527, $spf82521, $sp7f4b1f, $sp6324c8); Log::debug($spb399b9 . ' shipOrder end, order_no: ' . $spf82521); $sp35c270 = true; $sp93a168 = '发货成功'; } catch (\Exception $sp7900a2) { $sp35c270 = false; $sp93a168 = $sp7900a2->getMessage(); Log::error($spb399b9 . ' shipOrder Exception: ' . $sp7900a2->getMessage()); } $sp8ac6c1 = \App\Order::with(array('pay' => function (Relation $spcfdf85) { $spcfdf85->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spcfdf85) { $spcfdf85->select(array('id', 'card')); }))->findOrFail($sp138835); if ($sp8ac6c1->status === \App\Order::STATUS_PAID) { if ($sp8ac6c1->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp35c270 = true; $sp93a168 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp35c270 = false; $sp93a168 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp35c270 ? 0 : -1, 'msg' => $sp93a168, 'order' => $sp8ac6c1)); } }