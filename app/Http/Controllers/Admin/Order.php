<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp7fb11a) { $this->validate($sp7fb11a, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spee7cac = $sp7fb11a->post('ids'); $sp035dcd = (int) $sp7fb11a->post('income'); $sp45870d = (int) $sp7fb11a->post('balance'); \App\Order::whereIn('id', explode(',', $spee7cac))->chunk(100, function ($sp49997f) use($sp035dcd, $sp45870d) { foreach ($sp49997f as $sp4cc7a0) { $sp4cc7a0->cards()->detach(); try { if ($sp035dcd) { $sp4cc7a0->fundRecord()->delete(); } if ($sp45870d) { $sp85e034 = \App\User::lockForUpdate()->firstOrFail(); $sp85e034->m_all -= $sp4cc7a0->income; $sp85e034->saveOrFail(); } $sp4cc7a0->delete(); } catch (\Exception $spcdd557) { } } }); return Response::success(); } function freeze(Request $sp7fb11a) { $this->validate($sp7fb11a, array('ids' => 'required|string')); $spee7cac = explode(',', $sp7fb11a->post('ids')); $sp8ea04c = $sp7fb11a->post('reason'); $sp4b47da = 0; $spada7ce = 0; foreach ($spee7cac as $sp290576) { $sp4b47da++; if (FundHelper::orderFreeze($sp290576, $sp8ea04c)) { $spada7ce++; } } return Response::success(array($sp4b47da, $spada7ce)); } function unfreeze(Request $sp7fb11a) { $this->validate($sp7fb11a, array('ids' => 'required|string')); $spee7cac = explode(',', $sp7fb11a->post('ids')); $sp4b47da = 0; $spada7ce = 0; $sp463f2b = \App\Order::STATUS_FROZEN; foreach ($spee7cac as $sp290576) { $sp4b47da++; if (FundHelper::orderUnfreeze($sp290576, '后台操作', null, $sp463f2b)) { $spada7ce++; } } return Response::success(array($sp4b47da, $spada7ce, $sp463f2b)); } function set_paid(Request $sp7fb11a) { $this->validate($sp7fb11a, array('id' => 'required|integer')); $spf448d5 = $sp7fb11a->post('id', ''); $spdfc8a2 = $sp7fb11a->post('trade_no', ''); if (strlen($spdfc8a2) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp4cc7a0 = \App\Order::findOrFail($spf448d5); if ($sp4cc7a0->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp8df889 = 'Admin.SetPaid'; $sp1f2f98 = $sp4cc7a0->order_no; $spe93440 = $sp4cc7a0->paid; try { Log::debug($sp8df889 . " shipOrder start, order_no: {$sp1f2f98}, amount: {$spe93440}, trade_no: {$spdfc8a2}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp7fb11a, $sp1f2f98, $spe93440, $spdfc8a2); Log::debug($sp8df889 . ' shipOrder end, order_no: ' . $sp1f2f98); $spada7ce = true; $sp74697c = '发货成功'; } catch (\Exception $spcdd557) { $spada7ce = false; $sp74697c = $spcdd557->getMessage(); Log::error($sp8df889 . ' shipOrder Exception: ' . $spcdd557->getMessage()); } $sp4cc7a0 = \App\Order::with(array('pay' => function (Relation $spbea74d) { $spbea74d->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spbea74d) { $spbea74d->select(array('id', 'card')); }))->findOrFail($spf448d5); if ($sp4cc7a0->status === \App\Order::STATUS_PAID) { if ($sp4cc7a0->product->delivery === \App\Product::DELIVERY_MANUAL) { $spada7ce = true; $sp74697c = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spada7ce = false; $sp74697c = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spada7ce ? 0 : -1, 'msg' => $sp74697c, 'order' => $sp4cc7a0)); } }