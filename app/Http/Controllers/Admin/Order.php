<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $speab0da = $spfb5ae3->post('ids'); $sp1944dc = (int) $spfb5ae3->post('income'); $sp823760 = (int) $spfb5ae3->post('balance'); \App\Order::whereIn('id', explode(',', $speab0da))->chunk(100, function ($sp3d25ee) use($sp1944dc, $sp823760) { foreach ($sp3d25ee as $sp1abdd8) { $sp1abdd8->cards()->detach(); try { if ($sp1944dc) { $sp1abdd8->fundRecord()->delete(); } if ($sp823760) { $sp21e2d0 = \App\User::lockForUpdate()->firstOrFail(); $sp21e2d0->m_all -= $sp1abdd8->income; $sp21e2d0->saveOrFail(); } $sp1abdd8->delete(); } catch (\Exception $sped8699) { } } }); return Response::success(); } function freeze(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string')); $speab0da = explode(',', $spfb5ae3->post('ids')); $sp99a9d4 = $spfb5ae3->post('reason'); $sp10fb8e = 0; $sp612774 = 0; foreach ($speab0da as $sp293e7f) { $sp10fb8e++; if (FundHelper::orderFreeze($sp293e7f, $sp99a9d4)) { $sp612774++; } } return Response::success(array($sp10fb8e, $sp612774)); } function unfreeze(Request $spfb5ae3) { $this->validate($spfb5ae3, array('ids' => 'required|string')); $speab0da = explode(',', $spfb5ae3->post('ids')); $sp10fb8e = 0; $sp612774 = 0; $sp3783db = \App\Order::STATUS_FROZEN; foreach ($speab0da as $sp293e7f) { $sp10fb8e++; if (FundHelper::orderUnfreeze($sp293e7f, '后台操作', null, $sp3783db)) { $sp612774++; } } return Response::success(array($sp10fb8e, $sp612774, $sp3783db)); } function set_paid(Request $spfb5ae3) { $this->validate($spfb5ae3, array('id' => 'required|integer')); $sp0cebcc = $spfb5ae3->post('id', ''); $spd50168 = $spfb5ae3->post('trade_no', ''); if (strlen($spd50168) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp1abdd8 = \App\Order::findOrFail($sp0cebcc); if ($sp1abdd8->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp4374d2 = 'Admin.SetPaid'; $spa19857 = $sp1abdd8->order_no; $sp8ecca6 = $sp1abdd8->paid; try { Log::debug($sp4374d2 . " shipOrder start, order_no: {$spa19857}, amount: {$sp8ecca6}, trade_no: {$spd50168}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spfb5ae3, $spa19857, $sp8ecca6, $spd50168); Log::debug($sp4374d2 . ' shipOrder end, order_no: ' . $spa19857); $sp612774 = true; $sp3c95ae = '发货成功'; } catch (\Exception $sped8699) { $sp612774 = false; $sp3c95ae = $sped8699->getMessage(); Log::error($sp4374d2 . ' shipOrder Exception: ' . $sped8699->getMessage()); } $sp1abdd8 = \App\Order::with(array('pay' => function (Relation $sp32b0d3) { $sp32b0d3->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp32b0d3) { $sp32b0d3->select(array('id', 'card')); }))->findOrFail($sp0cebcc); if ($sp1abdd8->status === \App\Order::STATUS_PAID) { if ($sp1abdd8->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp612774 = true; $sp3c95ae = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp612774 = false; $sp3c95ae = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp612774 ? 0 : -1, 'msg' => $sp3c95ae, 'order' => $sp1abdd8)); } }