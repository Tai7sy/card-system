<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp3cf93f = $sp510ef3->post('ids'); $sp346153 = (int) $sp510ef3->post('income'); $sp2a5c62 = (int) $sp510ef3->post('balance'); \App\Order::whereIn('id', explode(',', $sp3cf93f))->chunk(100, function ($sp99e23a) use($sp346153, $sp2a5c62) { foreach ($sp99e23a as $spff5c0e) { $spff5c0e->cards()->detach(); try { if ($sp346153) { $spff5c0e->fundRecord()->delete(); } if ($sp2a5c62) { $sp24cedd = \App\User::lockForUpdate()->firstOrFail(); $sp24cedd->m_all -= $spff5c0e->income; $sp24cedd->saveOrFail(); } $spff5c0e->delete(); } catch (\Exception $spd3b3eb) { } } }); return Response::success(); } function freeze(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string')); $sp3cf93f = explode(',', $sp510ef3->post('ids')); $spd78601 = $sp510ef3->post('reason'); $spad28c0 = 0; $sp2e1fd8 = 0; foreach ($sp3cf93f as $spcbed86) { $spad28c0++; if (FundHelper::orderFreeze($spcbed86, $spd78601)) { $sp2e1fd8++; } } return Response::success(array($spad28c0, $sp2e1fd8)); } function unfreeze(Request $sp510ef3) { $this->validate($sp510ef3, array('ids' => 'required|string')); $sp3cf93f = explode(',', $sp510ef3->post('ids')); $spad28c0 = 0; $sp2e1fd8 = 0; $sp37aebf = \App\Order::STATUS_FROZEN; foreach ($sp3cf93f as $spcbed86) { $spad28c0++; if (FundHelper::orderUnfreeze($spcbed86, '后台操作', null, $sp37aebf)) { $sp2e1fd8++; } } return Response::success(array($spad28c0, $sp2e1fd8, $sp37aebf)); } function set_paid(Request $sp510ef3) { $this->validate($sp510ef3, array('id' => 'required|integer')); $sp258ace = $sp510ef3->post('id', ''); $spb2d237 = $sp510ef3->post('trade_no', ''); if (strlen($spb2d237) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spff5c0e = \App\Order::findOrFail($sp258ace); if ($spff5c0e->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp7c05a2 = 'Admin.SetPaid'; $sp31fa09 = $spff5c0e->order_no; $sp320f03 = $spff5c0e->paid; try { Log::debug($sp7c05a2 . " shipOrder start, order_no: {$sp31fa09}, amount: {$sp320f03}, trade_no: {$spb2d237}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp510ef3, $sp31fa09, $sp320f03, $spb2d237); Log::debug($sp7c05a2 . ' shipOrder end, order_no: ' . $sp31fa09); $sp2e1fd8 = true; $sp1f5ff7 = '发货成功'; } catch (\Exception $spd3b3eb) { $sp2e1fd8 = false; $sp1f5ff7 = $spd3b3eb->getMessage(); Log::error($sp7c05a2 . ' shipOrder Exception: ' . $spd3b3eb->getMessage()); } $spff5c0e = \App\Order::with(array('pay' => function (Relation $sp90af04) { $sp90af04->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp90af04) { $sp90af04->select(array('id', 'card')); }))->findOrFail($sp258ace); if ($spff5c0e->status === \App\Order::STATUS_PAID) { if ($spff5c0e->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp2e1fd8 = true; $sp1f5ff7 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp2e1fd8 = false; $sp1f5ff7 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp2e1fd8 ? 0 : -1, 'msg' => $sp1f5ff7, 'order' => $spff5c0e)); } }