<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spaa0004) { $this->validate($spaa0004, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp5bbe0c = $spaa0004->post('ids'); $sp9cb37f = (int) $spaa0004->post('income'); $spfd770b = (int) $spaa0004->post('balance'); \App\Order::whereIn('id', explode(',', $sp5bbe0c))->chunk(100, function ($spb33313) use($sp9cb37f, $spfd770b) { foreach ($spb33313 as $spd09b83) { $spd09b83->cards()->detach(); try { if ($sp9cb37f) { $spd09b83->fundRecord()->delete(); } if ($spfd770b) { $sp7990f7 = \App\User::lockForUpdate()->firstOrFail(); $sp7990f7->m_all -= $spd09b83->income; $sp7990f7->saveOrFail(); } $spd09b83->delete(); } catch (\Exception $sp2251d3) { } } }); return Response::success(); } function freeze(Request $spaa0004) { $this->validate($spaa0004, array('ids' => 'required|string')); $sp5bbe0c = explode(',', $spaa0004->post('ids')); $sp4e9004 = $spaa0004->post('reason'); $spf525ee = 0; $spcf3145 = 0; foreach ($sp5bbe0c as $spab4bee) { $spf525ee++; if (FundHelper::orderFreeze($spab4bee, $sp4e9004)) { $spcf3145++; } } return Response::success(array($spf525ee, $spcf3145)); } function unfreeze(Request $spaa0004) { $this->validate($spaa0004, array('ids' => 'required|string')); $sp5bbe0c = explode(',', $spaa0004->post('ids')); $spf525ee = 0; $spcf3145 = 0; $spb5701c = \App\Order::STATUS_FROZEN; foreach ($sp5bbe0c as $spab4bee) { $spf525ee++; if (FundHelper::orderUnfreeze($spab4bee, '后台操作', null, $spb5701c)) { $spcf3145++; } } return Response::success(array($spf525ee, $spcf3145, $spb5701c)); } function set_paid(Request $spaa0004) { $this->validate($spaa0004, array('id' => 'required|integer')); $sp805277 = $spaa0004->post('id', ''); $sp47aa88 = $spaa0004->post('trade_no', ''); if (strlen($sp47aa88) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spd09b83 = \App\Order::findOrFail($sp805277); if ($spd09b83->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp1aa7f3 = 'Admin.SetPaid'; $spef6915 = $spd09b83->order_no; $sp9727fb = $spd09b83->paid; try { Log::debug($sp1aa7f3 . " shipOrder start, order_no: {$spef6915}, amount: {$sp9727fb}, trade_no: {$sp47aa88}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spaa0004, $spef6915, $sp9727fb, $sp47aa88); Log::debug($sp1aa7f3 . ' shipOrder end, order_no: ' . $spef6915); $spcf3145 = true; $spc5e95b = '发货成功'; } catch (\Exception $sp2251d3) { $spcf3145 = false; $spc5e95b = $sp2251d3->getMessage(); Log::error($sp1aa7f3 . ' shipOrder Exception: ' . $sp2251d3->getMessage()); } $spd09b83 = \App\Order::with(array('pay' => function (Relation $sp3b6564) { $sp3b6564->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp3b6564) { $sp3b6564->select(array('id', 'card')); }))->findOrFail($sp805277); if ($spd09b83->status === \App\Order::STATUS_PAID) { if ($spd09b83->product->delivery === \App\Product::DELIVERY_MANUAL) { $spcf3145 = true; $spc5e95b = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spcf3145 = false; $spc5e95b = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spcf3145 ? 0 : -1, 'msg' => $spc5e95b, 'order' => $spd09b83)); } }