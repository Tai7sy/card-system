<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spdbdb98 = $sp3c91bd->post('ids'); $sp1447ec = (int) $sp3c91bd->post('income'); $spf48d7e = (int) $sp3c91bd->post('balance'); \App\Order::whereIn('id', explode(',', $spdbdb98))->chunk(100, function ($sp58ab08) use($sp1447ec, $spf48d7e) { foreach ($sp58ab08 as $sp600a89) { $sp600a89->cards()->detach(); try { if ($sp1447ec) { $sp600a89->fundRecord()->delete(); } if ($spf48d7e) { $spb14cf0 = \App\User::lockForUpdate()->firstOrFail(); $spb14cf0->m_all -= $sp600a89->income; $spb14cf0->saveOrFail(); } $sp600a89->delete(); } catch (\Exception $sp96dd17) { } } }); return Response::success(); } function freeze(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string')); $spdbdb98 = explode(',', $sp3c91bd->post('ids')); $spf7a183 = $sp3c91bd->post('reason'); $spdba6bb = 0; $spb92e62 = 0; foreach ($spdbdb98 as $sp91aca1) { $spdba6bb++; if (FundHelper::orderFreeze($sp91aca1, $spf7a183)) { $spb92e62++; } } return Response::success(array($spdba6bb, $spb92e62)); } function unfreeze(Request $sp3c91bd) { $this->validate($sp3c91bd, array('ids' => 'required|string')); $spdbdb98 = explode(',', $sp3c91bd->post('ids')); $spdba6bb = 0; $spb92e62 = 0; $spd977b7 = \App\Order::STATUS_FROZEN; foreach ($spdbdb98 as $sp91aca1) { $spdba6bb++; if (FundHelper::orderUnfreeze($sp91aca1, '后台操作', null, $spd977b7)) { $spb92e62++; } } return Response::success(array($spdba6bb, $spb92e62, $spd977b7)); } function set_paid(Request $sp3c91bd) { $this->validate($sp3c91bd, array('id' => 'required|integer')); $spbabe1d = $sp3c91bd->post('id', ''); $sp3b1b1d = $sp3c91bd->post('trade_no', ''); if (strlen($sp3b1b1d) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp600a89 = \App\Order::findOrFail($spbabe1d); if ($sp600a89->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spc2269a = 'Admin.SetPaid'; $spd10b1a = $sp600a89->order_no; $sp0b9841 = $sp600a89->paid; try { Log::debug($spc2269a . " shipOrder start, order_no: {$spd10b1a}, amount: {$sp0b9841}, trade_no: {$sp3b1b1d}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp3c91bd, $spd10b1a, $sp0b9841, $sp3b1b1d); Log::debug($spc2269a . ' shipOrder end, order_no: ' . $spd10b1a); $spb92e62 = true; $sp6edbee = '发货成功'; } catch (\Exception $sp96dd17) { $spb92e62 = false; $sp6edbee = $sp96dd17->getMessage(); Log::error($spc2269a . ' shipOrder Exception: ' . $sp96dd17->getMessage()); } $sp600a89 = \App\Order::with(array('pay' => function (Relation $sp6cb35e) { $sp6cb35e->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp6cb35e) { $sp6cb35e->select(array('id', 'card')); }))->findOrFail($spbabe1d); if ($sp600a89->status === \App\Order::STATUS_PAID) { if ($sp600a89->product->delivery === \App\Product::DELIVERY_MANUAL) { $spb92e62 = true; $sp6edbee = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spb92e62 = false; $sp6edbee = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spb92e62 ? 0 : -1, 'msg' => $sp6edbee, 'order' => $sp600a89)); } }