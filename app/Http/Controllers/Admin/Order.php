<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp2d798e = $spbaac90->post('ids'); $sp63f7d3 = (int) $spbaac90->post('income'); $spf2352d = (int) $spbaac90->post('balance'); \App\Order::whereIn('id', explode(',', $sp2d798e))->chunk(100, function ($spb8946a) use($sp63f7d3, $spf2352d) { foreach ($spb8946a as $spb656d1) { $spb656d1->cards()->detach(); try { if ($sp63f7d3) { $spb656d1->fundRecord()->delete(); } if ($spf2352d) { $spdc0e57 = \App\User::lockForUpdate()->firstOrFail(); $spdc0e57->m_all -= $spb656d1->income; $spdc0e57->saveOrFail(); } $spb656d1->delete(); } catch (\Exception $sp696863) { } } }); return Response::success(); } function freeze(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string')); $sp2d798e = explode(',', $spbaac90->post('ids')); $sp8355d1 = $spbaac90->post('reason'); $spe71595 = 0; $spd476e7 = 0; foreach ($sp2d798e as $sp1d65ca) { $spe71595++; if (FundHelper::orderFreeze($sp1d65ca, $sp8355d1)) { $spd476e7++; } } return Response::success(array($spe71595, $spd476e7)); } function unfreeze(Request $spbaac90) { $this->validate($spbaac90, array('ids' => 'required|string')); $sp2d798e = explode(',', $spbaac90->post('ids')); $spe71595 = 0; $spd476e7 = 0; $spfa1351 = \App\Order::STATUS_FROZEN; foreach ($sp2d798e as $sp1d65ca) { $spe71595++; if (FundHelper::orderUnfreeze($sp1d65ca, '后台操作', null, $spfa1351)) { $spd476e7++; } } return Response::success(array($spe71595, $spd476e7, $spfa1351)); } function set_paid(Request $spbaac90) { $this->validate($spbaac90, array('id' => 'required|integer')); $sp1ffc0e = $spbaac90->post('id', ''); $sp318440 = $spbaac90->post('trade_no', ''); if (strlen($sp318440) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spb656d1 = \App\Order::findOrFail($sp1ffc0e); if ($spb656d1->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp3a44ce = 'Admin.SetPaid'; $sp40aadb = $spb656d1->order_no; $sp772a1f = $spb656d1->paid; try { Log::debug($sp3a44ce . " shipOrder start, order_no: {$sp40aadb}, amount: {$sp772a1f}, trade_no: {$sp318440}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spbaac90, $sp40aadb, $sp772a1f, $sp318440); Log::debug($sp3a44ce . ' shipOrder end, order_no: ' . $sp40aadb); $spd476e7 = true; $spe765e4 = '发货成功'; } catch (\Exception $sp696863) { $spd476e7 = false; $spe765e4 = $sp696863->getMessage(); Log::error($sp3a44ce . ' shipOrder Exception: ' . $sp696863->getMessage()); } $spb656d1 = \App\Order::with(array('pay' => function (Relation $sp50919b) { $sp50919b->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp50919b) { $sp50919b->select(array('id', 'card')); }))->findOrFail($sp1ffc0e); if ($spb656d1->status === \App\Order::STATUS_PAID) { if ($spb656d1->product->delivery === \App\Product::DELIVERY_MANUAL) { $spd476e7 = true; $spe765e4 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spd476e7 = false; $spe765e4 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spd476e7 ? 0 : -1, 'msg' => $spe765e4, 'order' => $spb656d1)); } }