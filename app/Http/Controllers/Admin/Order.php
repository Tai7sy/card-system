<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spf066f3) { $this->validate($spf066f3, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp1f71d9 = $spf066f3->post('ids'); $sp877e18 = (int) $spf066f3->post('income'); $sp507a29 = (int) $spf066f3->post('balance'); \App\Order::whereIn('id', explode(',', $sp1f71d9))->chunk(100, function ($sp0e06cc) use($sp877e18, $sp507a29) { foreach ($sp0e06cc as $spe0613f) { $spe0613f->cards()->detach(); try { if ($sp877e18) { $spe0613f->fundRecord()->delete(); } if ($sp507a29) { $spbbb773 = \App\User::lockForUpdate()->firstOrFail(); $spbbb773->m_all -= $spe0613f->income; $spbbb773->saveOrFail(); } $spe0613f->delete(); } catch (\Exception $sp3f4aab) { } } }); return Response::success(); } function freeze(Request $spf066f3) { $this->validate($spf066f3, array('ids' => 'required|string')); $sp1f71d9 = explode(',', $spf066f3->post('ids')); $sp1abd79 = $spf066f3->post('reason'); $spdd51cd = 0; $spcfee73 = 0; foreach ($sp1f71d9 as $spd04f8a) { $spdd51cd++; if (FundHelper::orderFreeze($spd04f8a, $sp1abd79)) { $spcfee73++; } } return Response::success(array($spdd51cd, $spcfee73)); } function unfreeze(Request $spf066f3) { $this->validate($spf066f3, array('ids' => 'required|string')); $sp1f71d9 = explode(',', $spf066f3->post('ids')); $spdd51cd = 0; $spcfee73 = 0; $sp3f483e = \App\Order::STATUS_FROZEN; foreach ($sp1f71d9 as $spd04f8a) { $spdd51cd++; if (FundHelper::orderUnfreeze($spd04f8a, '后台操作', null, $sp3f483e)) { $spcfee73++; } } return Response::success(array($spdd51cd, $spcfee73, $sp3f483e)); } function set_paid(Request $spf066f3) { $this->validate($spf066f3, array('id' => 'required|integer')); $sp3c46ab = $spf066f3->post('id', ''); $sp565d18 = $spf066f3->post('trade_no', ''); if (strlen($sp565d18) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spe0613f = \App\Order::findOrFail($sp3c46ab); if ($spe0613f->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp5d5f28 = 'Admin.SetPaid'; $sp845b45 = $spe0613f->order_no; $spf59c91 = $spe0613f->paid; try { Log::debug($sp5d5f28 . " shipOrder start, order_no: {$sp845b45}, amount: {$spf59c91}, trade_no: {$sp565d18}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spf066f3, $sp845b45, $spf59c91, $sp565d18); Log::debug($sp5d5f28 . ' shipOrder end, order_no: ' . $sp845b45); $spcfee73 = true; $sp417133 = '发货成功'; } catch (\Exception $sp3f4aab) { $spcfee73 = false; $sp417133 = $sp3f4aab->getMessage(); Log::error($sp5d5f28 . ' shipOrder Exception: ' . $sp3f4aab->getMessage()); } $spe0613f = \App\Order::with(array('pay' => function (Relation $sp5044a7) { $sp5044a7->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp5044a7) { $sp5044a7->select(array('id', 'card')); }))->findOrFail($sp3c46ab); if ($spe0613f->status === \App\Order::STATUS_PAID) { if ($spe0613f->product->delivery === \App\Product::DELIVERY_MANUAL) { $spcfee73 = true; $sp417133 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spcfee73 = false; $sp417133 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spcfee73 ? 0 : -1, 'msg' => $sp417133, 'order' => $spe0613f)); } }