<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spe5a184) { $this->validate($spe5a184, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp8152f4 = $spe5a184->post('ids'); $sp152c84 = (int) $spe5a184->post('income'); $sp62805b = (int) $spe5a184->post('balance'); \App\Order::whereIn('id', explode(',', $sp8152f4))->chunk(100, function ($sp5f7c41) use($sp152c84, $sp62805b) { foreach ($sp5f7c41 as $sp42d084) { $sp42d084->cards()->detach(); try { if ($sp152c84) { $sp42d084->fundRecord()->delete(); } if ($sp62805b) { $sp766bcc = \App\User::lockForUpdate()->firstOrFail(); $sp766bcc->m_all -= $sp42d084->income; $sp766bcc->saveOrFail(); } $sp42d084->delete(); } catch (\Exception $spd118f7) { } } }); return Response::success(); } function freeze(Request $spe5a184) { $this->validate($spe5a184, array('ids' => 'required|string')); $sp8152f4 = explode(',', $spe5a184->post('ids')); $spad9b1d = $spe5a184->post('reason'); $sp9154dd = 0; $sp39df7d = 0; foreach ($sp8152f4 as $spc3103e) { $sp9154dd++; if (FundHelper::orderFreeze($spc3103e, $spad9b1d)) { $sp39df7d++; } } return Response::success(array($sp9154dd, $sp39df7d)); } function unfreeze(Request $spe5a184) { $this->validate($spe5a184, array('ids' => 'required|string')); $sp8152f4 = explode(',', $spe5a184->post('ids')); $sp9154dd = 0; $sp39df7d = 0; $spdfe010 = \App\Order::STATUS_FROZEN; foreach ($sp8152f4 as $spc3103e) { $sp9154dd++; if (FundHelper::orderUnfreeze($spc3103e, '后台操作', null, $spdfe010)) { $sp39df7d++; } } return Response::success(array($sp9154dd, $sp39df7d, $spdfe010)); } function set_paid(Request $spe5a184) { $this->validate($spe5a184, array('id' => 'required|integer')); $spb3d6c6 = $spe5a184->post('id', ''); $spe3cc7f = $spe5a184->post('trade_no', ''); if (strlen($spe3cc7f) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp42d084 = \App\Order::findOrFail($spb3d6c6); if ($sp42d084->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp369f74 = 'Admin.SetPaid'; $sp0983aa = $sp42d084->order_no; $sp2cb76e = $sp42d084->paid; try { Log::debug($sp369f74 . " shipOrder start, order_no: {$sp0983aa}, amount: {$sp2cb76e}, trade_no: {$spe3cc7f}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spe5a184, $sp0983aa, $sp2cb76e, $spe3cc7f); Log::debug($sp369f74 . ' shipOrder end, order_no: ' . $sp0983aa); $sp39df7d = true; $sp1955ac = '发货成功'; } catch (\Exception $spd118f7) { $sp39df7d = false; $sp1955ac = $spd118f7->getMessage(); Log::error($sp369f74 . ' shipOrder Exception: ' . $spd118f7->getMessage()); } $sp42d084 = \App\Order::with(array('pay' => function (Relation $spa8a4ff) { $spa8a4ff->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spa8a4ff) { $spa8a4ff->select(array('id', 'card')); }))->findOrFail($spb3d6c6); if ($sp42d084->status === \App\Order::STATUS_PAID) { if ($sp42d084->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp39df7d = true; $sp1955ac = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp39df7d = false; $sp1955ac = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp39df7d ? 0 : -1, 'msg' => $sp1955ac, 'order' => $sp42d084)); } }