<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spb19a2c = $spdf16c9->post('ids'); $sp44fcfb = (int) $spdf16c9->post('income'); $sp619c1b = (int) $spdf16c9->post('balance'); \App\Order::whereIn('id', explode(',', $spb19a2c))->chunk(100, function ($sp514e13) use($sp44fcfb, $sp619c1b) { foreach ($sp514e13 as $spaf5db5) { $spaf5db5->cards()->detach(); try { if ($sp44fcfb) { $spaf5db5->fundRecord()->delete(); } if ($sp619c1b) { $sp0a324a = \App\User::lockForUpdate()->firstOrFail(); $sp0a324a->m_all -= $spaf5db5->income; $sp0a324a->saveOrFail(); } $spaf5db5->delete(); } catch (\Exception $sp54a0c6) { } } }); return Response::success(); } function freeze(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string')); $spb19a2c = explode(',', $spdf16c9->post('ids')); $sp50e390 = $spdf16c9->post('reason'); $sp051e12 = 0; $sp5bdb32 = 0; foreach ($spb19a2c as $sp7d06f4) { $sp051e12++; if (FundHelper::orderFreeze($sp7d06f4, $sp50e390)) { $sp5bdb32++; } } return Response::success(array($sp051e12, $sp5bdb32)); } function unfreeze(Request $spdf16c9) { $this->validate($spdf16c9, array('ids' => 'required|string')); $spb19a2c = explode(',', $spdf16c9->post('ids')); $sp051e12 = 0; $sp5bdb32 = 0; $sp03d501 = \App\Order::STATUS_FROZEN; foreach ($spb19a2c as $sp7d06f4) { $sp051e12++; if (FundHelper::orderUnfreeze($sp7d06f4, '后台操作', null, $sp03d501)) { $sp5bdb32++; } } return Response::success(array($sp051e12, $sp5bdb32, $sp03d501)); } function set_paid(Request $spdf16c9) { $this->validate($spdf16c9, array('id' => 'required|integer')); $spaacfde = $spdf16c9->post('id', ''); $sp841c55 = $spdf16c9->post('trade_no', ''); if (strlen($sp841c55) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spaf5db5 = \App\Order::findOrFail($spaacfde); if ($spaf5db5->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spec8eaa = 'Admin.SetPaid'; $spf922d7 = $spaf5db5->order_no; $spd1ad1b = $spaf5db5->paid; try { Log::debug($spec8eaa . " shipOrder start, order_no: {$spf922d7}, amount: {$spd1ad1b}, trade_no: {$sp841c55}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spdf16c9, $spf922d7, $spd1ad1b, $sp841c55); Log::debug($spec8eaa . ' shipOrder end, order_no: ' . $spf922d7); $sp5bdb32 = true; $spbabee5 = '发货成功'; } catch (\Exception $sp54a0c6) { $sp5bdb32 = false; $spbabee5 = $sp54a0c6->getMessage(); Log::error($spec8eaa . ' shipOrder Exception: ' . $sp54a0c6->getMessage()); } $spaf5db5 = \App\Order::with(array('pay' => function (Relation $spc64cdd) { $spc64cdd->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spc64cdd) { $spc64cdd->select(array('id', 'card')); }))->findOrFail($spaacfde); if ($spaf5db5->status === \App\Order::STATUS_PAID) { if ($spaf5db5->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp5bdb32 = true; $spbabee5 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp5bdb32 = false; $spbabee5 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp5bdb32 ? 0 : -1, 'msg' => $spbabee5, 'order' => $spaf5db5)); } }