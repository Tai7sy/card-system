<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp13451b) { $this->validate($sp13451b, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp60bb7e = $sp13451b->post('ids'); $sp6d842b = (int) $sp13451b->post('income'); $sp10d665 = (int) $sp13451b->post('balance'); \App\Order::whereIn('id', explode(',', $sp60bb7e))->chunk(100, function ($spbda254) use($sp6d842b, $sp10d665) { foreach ($spbda254 as $sp322370) { $sp322370->cards()->detach(); try { if ($sp6d842b) { $sp322370->fundRecord()->delete(); } if ($sp10d665) { $spc33961 = \App\User::lockForUpdate()->firstOrFail(); $spc33961->m_all -= $sp322370->income; $spc33961->saveOrFail(); } $sp322370->delete(); } catch (\Exception $sp45222f) { } } }); return Response::success(); } function freeze(Request $sp13451b) { $this->validate($sp13451b, array('ids' => 'required|string')); $sp60bb7e = explode(',', $sp13451b->post('ids')); $sp3ed973 = $sp13451b->post('reason'); $sp1ca412 = 0; $speba4f8 = 0; foreach ($sp60bb7e as $sp8030c3) { $sp1ca412++; if (FundHelper::orderFreeze($sp8030c3, $sp3ed973)) { $speba4f8++; } } return Response::success(array($sp1ca412, $speba4f8)); } function unfreeze(Request $sp13451b) { $this->validate($sp13451b, array('ids' => 'required|string')); $sp60bb7e = explode(',', $sp13451b->post('ids')); $sp1ca412 = 0; $speba4f8 = 0; $spfb5c06 = \App\Order::STATUS_FROZEN; foreach ($sp60bb7e as $sp8030c3) { $sp1ca412++; if (FundHelper::orderUnfreeze($sp8030c3, '后台操作', null, $spfb5c06)) { $speba4f8++; } } return Response::success(array($sp1ca412, $speba4f8, $spfb5c06)); } function set_paid(Request $sp13451b) { $this->validate($sp13451b, array('id' => 'required|integer')); $sp7df839 = $sp13451b->post('id', ''); $spbe9054 = $sp13451b->post('trade_no', ''); if (strlen($spbe9054) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp322370 = \App\Order::findOrFail($sp7df839); if ($sp322370->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spf6b1a9 = 'Admin.SetPaid'; $sp6b06ff = $sp322370->order_no; $sp07bb5f = $sp322370->paid; try { Log::debug($spf6b1a9 . " shipOrder start, order_no: {$sp6b06ff}, amount: {$sp07bb5f}, trade_no: {$spbe9054}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp13451b, $sp6b06ff, $sp07bb5f, $spbe9054); Log::debug($spf6b1a9 . ' shipOrder end, order_no: ' . $sp6b06ff); $speba4f8 = true; $spfd1ead = '发货成功'; } catch (\Exception $sp45222f) { $speba4f8 = false; $spfd1ead = $sp45222f->getMessage(); Log::error($spf6b1a9 . ' shipOrder Exception: ' . $sp45222f->getMessage()); } $sp322370 = \App\Order::with(array('pay' => function (Relation $sp8e2ceb) { $sp8e2ceb->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp8e2ceb) { $sp8e2ceb->select(array('id', 'card')); }))->findOrFail($sp7df839); if ($sp322370->status === \App\Order::STATUS_PAID) { if ($sp322370->product->delivery === \App\Product::DELIVERY_MANUAL) { $speba4f8 = true; $spfd1ead = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $speba4f8 = false; $spfd1ead = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $speba4f8 ? 0 : -1, 'msg' => $spfd1ead, 'order' => $sp322370)); } }