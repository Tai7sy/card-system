<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp70cf7b = $sp7f7104->post('ids'); $sp328f34 = (int) $sp7f7104->post('income'); $sp6d53fe = (int) $sp7f7104->post('balance'); \App\Order::whereIn('id', explode(',', $sp70cf7b))->chunk(100, function ($sp27254a) use($sp328f34, $sp6d53fe) { foreach ($sp27254a as $sp79a792) { $sp79a792->cards()->detach(); try { if ($sp328f34) { $sp79a792->fundRecord()->delete(); } if ($sp6d53fe) { $sp216502 = \App\User::lockForUpdate()->firstOrFail(); $sp216502->m_all -= $sp79a792->income; $sp216502->saveOrFail(); } $sp79a792->delete(); } catch (\Exception $spd54c56) { } } }); return Response::success(); } function freeze(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string')); $sp70cf7b = explode(',', $sp7f7104->post('ids')); $spcf8840 = $sp7f7104->post('reason'); $spf26c0c = 0; $spd0a26c = 0; foreach ($sp70cf7b as $spbf1ba1) { $spf26c0c++; if (FundHelper::orderFreeze($spbf1ba1, $spcf8840)) { $spd0a26c++; } } return Response::success(array($spf26c0c, $spd0a26c)); } function unfreeze(Request $sp7f7104) { $this->validate($sp7f7104, array('ids' => 'required|string')); $sp70cf7b = explode(',', $sp7f7104->post('ids')); $spf26c0c = 0; $spd0a26c = 0; $spfc11e7 = \App\Order::STATUS_FROZEN; foreach ($sp70cf7b as $spbf1ba1) { $spf26c0c++; if (FundHelper::orderUnfreeze($spbf1ba1, '后台操作', null, $spfc11e7)) { $spd0a26c++; } } return Response::success(array($spf26c0c, $spd0a26c, $spfc11e7)); } function set_paid(Request $sp7f7104) { $this->validate($sp7f7104, array('id' => 'required|integer')); $sp1beabb = $sp7f7104->post('id', ''); $spef215b = $sp7f7104->post('trade_no', ''); if (strlen($spef215b) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp79a792 = \App\Order::findOrFail($sp1beabb); if ($sp79a792->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp1527f7 = 'Admin.SetPaid'; $sp0f479a = $sp79a792->order_no; $sp23d931 = $sp79a792->paid; try { Log::debug($sp1527f7 . " shipOrder start, order_no: {$sp0f479a}, amount: {$sp23d931}, trade_no: {$spef215b}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp7f7104, $sp0f479a, $sp23d931, $spef215b); Log::debug($sp1527f7 . ' shipOrder end, order_no: ' . $sp0f479a); $spd0a26c = true; $sp2d2f79 = '发货成功'; } catch (\Exception $spd54c56) { $spd0a26c = false; $sp2d2f79 = $spd54c56->getMessage(); Log::error($sp1527f7 . ' shipOrder Exception: ' . $spd54c56->getMessage()); } $sp79a792 = \App\Order::with(array('pay' => function (Relation $spbec213) { $spbec213->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spbec213) { $spbec213->select(array('id', 'card')); }))->findOrFail($sp1beabb); if ($sp79a792->status === \App\Order::STATUS_PAID) { if ($sp79a792->product->delivery === \App\Product::DELIVERY_MANUAL) { $spd0a26c = true; $sp2d2f79 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spd0a26c = false; $sp2d2f79 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spd0a26c ? 0 : -1, 'msg' => $sp2d2f79, 'order' => $sp79a792)); } }