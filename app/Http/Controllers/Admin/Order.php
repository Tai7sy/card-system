<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp054aa0) { $this->validate($sp054aa0, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp4f46fd = $sp054aa0->post('ids'); $sp0e368b = (int) $sp054aa0->post('income'); $sp5f4214 = (int) $sp054aa0->post('balance'); \App\Order::whereIn('id', explode(',', $sp4f46fd))->chunk(100, function ($spc05400) use($sp0e368b, $sp5f4214) { foreach ($spc05400 as $sp8fbe20) { $sp8fbe20->cards()->detach(); try { if ($sp0e368b) { $sp8fbe20->fundRecord()->delete(); } if ($sp5f4214) { $spd78df7 = \App\User::lockForUpdate()->firstOrFail(); $spd78df7->m_all -= $sp8fbe20->income; $spd78df7->saveOrFail(); } $sp8fbe20->delete(); } catch (\Exception $sp8e3e91) { } } }); return Response::success(); } function freeze(Request $sp054aa0) { $this->validate($sp054aa0, array('ids' => 'required|string')); $sp4f46fd = explode(',', $sp054aa0->post('ids')); $spc30129 = $sp054aa0->post('reason'); $sp5df9fd = 0; $spcc229b = 0; foreach ($sp4f46fd as $spa1be93) { $sp5df9fd++; if (FundHelper::orderFreeze($spa1be93, $spc30129)) { $spcc229b++; } } return Response::success(array($sp5df9fd, $spcc229b)); } function unfreeze(Request $sp054aa0) { $this->validate($sp054aa0, array('ids' => 'required|string')); $sp4f46fd = explode(',', $sp054aa0->post('ids')); $sp5df9fd = 0; $spcc229b = 0; $sp3ac7e0 = \App\Order::STATUS_FROZEN; foreach ($sp4f46fd as $spa1be93) { $sp5df9fd++; if (FundHelper::orderUnfreeze($spa1be93, '后台操作', null, $sp3ac7e0)) { $spcc229b++; } } return Response::success(array($sp5df9fd, $spcc229b, $sp3ac7e0)); } function set_paid(Request $sp054aa0) { $this->validate($sp054aa0, array('id' => 'required|integer')); $spde29a5 = $sp054aa0->post('id', ''); $spa3d9e1 = $sp054aa0->post('trade_no', ''); if (strlen($spa3d9e1) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp8fbe20 = \App\Order::findOrFail($spde29a5); if ($sp8fbe20->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp2ecb62 = 'Admin.SetPaid'; $sp503d88 = $sp8fbe20->order_no; $sp2ff0db = $sp8fbe20->paid; try { Log::debug($sp2ecb62 . " shipOrder start, order_no: {$sp503d88}, amount: {$sp2ff0db}, trade_no: {$spa3d9e1}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp054aa0, $sp503d88, $sp2ff0db, $spa3d9e1); Log::debug($sp2ecb62 . ' shipOrder end, order_no: ' . $sp503d88); $spcc229b = true; $spadbb50 = '发货成功'; } catch (\Exception $sp8e3e91) { $spcc229b = false; $spadbb50 = $sp8e3e91->getMessage(); Log::error($sp2ecb62 . ' shipOrder Exception: ' . $sp8e3e91->getMessage()); } $sp8fbe20 = \App\Order::with(array('pay' => function (Relation $sp0964e2) { $sp0964e2->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp0964e2) { $sp0964e2->select(array('id', 'card')); }))->findOrFail($spde29a5); if ($sp8fbe20->status === \App\Order::STATUS_PAID) { if ($sp8fbe20->product->delivery === \App\Product::DELIVERY_MANUAL) { $spcc229b = true; $spadbb50 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spcc229b = false; $spadbb50 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spcc229b ? 0 : -1, 'msg' => $spadbb50, 'order' => $sp8fbe20)); } }