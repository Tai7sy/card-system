<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp62e4cd) { $this->validate($sp62e4cd, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spb0cc9a = $sp62e4cd->post('ids'); $sp242274 = (int) $sp62e4cd->post('income'); $spaffa9e = (int) $sp62e4cd->post('balance'); \App\Order::whereIn('id', explode(',', $spb0cc9a))->chunk(100, function ($sp668460) use($sp242274, $spaffa9e) { foreach ($sp668460 as $sp63ddab) { $sp63ddab->cards()->detach(); try { if ($sp242274) { $sp63ddab->fundRecord()->delete(); } if ($spaffa9e) { $spbfa519 = \App\User::lockForUpdate()->firstOrFail(); $spbfa519->m_all -= $sp63ddab->income; $spbfa519->saveOrFail(); } $sp63ddab->delete(); } catch (\Exception $spc22b6c) { } } }); return Response::success(); } function freeze(Request $sp62e4cd) { $this->validate($sp62e4cd, array('ids' => 'required|string')); $spb0cc9a = explode(',', $sp62e4cd->post('ids')); $sp6c0c0c = $sp62e4cd->post('reason'); $sp951cdc = 0; $spcae44b = 0; foreach ($spb0cc9a as $sp885174) { $sp951cdc++; if (FundHelper::orderFreeze($sp885174, $sp6c0c0c)) { $spcae44b++; } } return Response::success(array($sp951cdc, $spcae44b)); } function unfreeze(Request $sp62e4cd) { $this->validate($sp62e4cd, array('ids' => 'required|string')); $spb0cc9a = explode(',', $sp62e4cd->post('ids')); $sp951cdc = 0; $spcae44b = 0; $sp826c98 = \App\Order::STATUS_FROZEN; foreach ($spb0cc9a as $sp885174) { $sp951cdc++; if (FundHelper::orderUnfreeze($sp885174, '后台操作', null, $sp826c98)) { $spcae44b++; } } return Response::success(array($sp951cdc, $spcae44b, $sp826c98)); } function set_paid(Request $sp62e4cd) { $this->validate($sp62e4cd, array('id' => 'required|integer')); $spdc31ea = $sp62e4cd->post('id', ''); $spd09e69 = $sp62e4cd->post('trade_no', ''); if (strlen($spd09e69) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp63ddab = \App\Order::findOrFail($spdc31ea); if ($sp63ddab->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp0593e1 = 'Admin.SetPaid'; $sp592eb0 = $sp63ddab->order_no; $sp75a792 = $sp63ddab->paid; try { Log::debug($sp0593e1 . " shipOrder start, order_no: {$sp592eb0}, amount: {$sp75a792}, trade_no: {$spd09e69}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp62e4cd, $sp592eb0, $sp75a792, $spd09e69); Log::debug($sp0593e1 . ' shipOrder end, order_no: ' . $sp592eb0); $spcae44b = true; $spfb9499 = '发货成功'; } catch (\Exception $spc22b6c) { $spcae44b = false; $spfb9499 = $spc22b6c->getMessage(); Log::error($sp0593e1 . ' shipOrder Exception: ' . $spc22b6c->getMessage()); } $sp63ddab = \App\Order::with(array('pay' => function (Relation $sp4210ad) { $sp4210ad->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp4210ad) { $sp4210ad->select(array('id', 'card')); }))->findOrFail($spdc31ea); if ($sp63ddab->status === \App\Order::STATUS_PAID) { if ($sp63ddab->product->delivery === \App\Product::DELIVERY_MANUAL) { $spcae44b = true; $spfb9499 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spcae44b = false; $spfb9499 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spcae44b ? 0 : -1, 'msg' => $spfb9499, 'order' => $sp63ddab)); } }