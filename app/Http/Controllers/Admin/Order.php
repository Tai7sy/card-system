<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp315ad7 = $sp517903->post('ids'); $sp480598 = (int) $sp517903->post('income'); $spd95776 = (int) $sp517903->post('balance'); \App\Order::whereIn('id', explode(',', $sp315ad7))->chunk(100, function ($sp4fb1a4) use($sp480598, $spd95776) { foreach ($sp4fb1a4 as $sp990b3b) { $sp990b3b->cards()->detach(); try { if ($sp480598) { $sp990b3b->fundRecord()->delete(); } if ($spd95776) { $sp3db17d = \App\User::lockForUpdate()->firstOrFail(); $sp3db17d->m_all -= $sp990b3b->income; $sp3db17d->saveOrFail(); } $sp990b3b->delete(); } catch (\Exception $sp0b065e) { } } }); return Response::success(); } function freeze(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string')); $sp315ad7 = explode(',', $sp517903->post('ids')); $spd931ee = $sp517903->post('reason'); $sp7aa4d7 = 0; $spa6425c = 0; foreach ($sp315ad7 as $sp1915a8) { $sp7aa4d7++; if (FundHelper::orderFreeze($sp1915a8, $spd931ee)) { $spa6425c++; } } return Response::success(array($sp7aa4d7, $spa6425c)); } function unfreeze(Request $sp517903) { $this->validate($sp517903, array('ids' => 'required|string')); $sp315ad7 = explode(',', $sp517903->post('ids')); $sp7aa4d7 = 0; $spa6425c = 0; $sp3a090a = \App\Order::STATUS_FROZEN; foreach ($sp315ad7 as $sp1915a8) { $sp7aa4d7++; if (FundHelper::orderUnfreeze($sp1915a8, '后台操作', null, $sp3a090a)) { $spa6425c++; } } return Response::success(array($sp7aa4d7, $spa6425c, $sp3a090a)); } function set_paid(Request $sp517903) { $this->validate($sp517903, array('id' => 'required|integer')); $spd5afc6 = $sp517903->post('id', ''); $sp7b7d53 = $sp517903->post('trade_no', ''); if (strlen($sp7b7d53) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp990b3b = \App\Order::findOrFail($spd5afc6); if ($sp990b3b->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spca966c = 'Admin.SetPaid'; $sp4c2308 = $sp990b3b->order_no; $sp1058e7 = $sp990b3b->paid; try { Log::debug($spca966c . " shipOrder start, order_no: {$sp4c2308}, amount: {$sp1058e7}, trade_no: {$sp7b7d53}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp517903, $sp4c2308, $sp1058e7, $sp7b7d53); Log::debug($spca966c . ' shipOrder end, order_no: ' . $sp4c2308); $spa6425c = true; $spfc43d6 = '发货成功'; } catch (\Exception $sp0b065e) { $spa6425c = false; $spfc43d6 = $sp0b065e->getMessage(); Log::error($spca966c . ' shipOrder Exception: ' . $sp0b065e->getMessage()); } $sp990b3b = \App\Order::with(array('pay' => function (Relation $sp30241a) { $sp30241a->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp30241a) { $sp30241a->select(array('id', 'card')); }))->findOrFail($spd5afc6); if ($sp990b3b->status === \App\Order::STATUS_PAID) { if ($sp990b3b->product->delivery === \App\Product::DELIVERY_MANUAL) { $spa6425c = true; $spfc43d6 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spa6425c = false; $spfc43d6 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spa6425c ? 0 : -1, 'msg' => $spfc43d6, 'order' => $sp990b3b)); } }