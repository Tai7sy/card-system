<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spf46353 = $spd5cc4d->post('ids'); $sp3b40b3 = (int) $spd5cc4d->post('income'); $spdfb2bc = (int) $spd5cc4d->post('balance'); \App\Order::whereIn('id', explode(',', $spf46353))->chunk(100, function ($sp9d6f53) use($sp3b40b3, $spdfb2bc) { foreach ($sp9d6f53 as $sp7dcca7) { $sp7dcca7->cards()->detach(); try { if ($sp3b40b3) { $sp7dcca7->fundRecord()->delete(); } if ($spdfb2bc) { $sp694bd2 = \App\User::lockForUpdate()->firstOrFail(); $sp694bd2->m_all -= $sp7dcca7->income; $sp694bd2->saveOrFail(); } $sp7dcca7->delete(); } catch (\Exception $spece20f) { } } }); return Response::success(); } function freeze(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string')); $spf46353 = explode(',', $spd5cc4d->post('ids')); $sp10a9c0 = $spd5cc4d->post('reason'); $sp058528 = 0; $spb914a1 = 0; foreach ($spf46353 as $sp1f742d) { $sp058528++; if (FundHelper::orderFreeze($sp1f742d, $sp10a9c0)) { $spb914a1++; } } return Response::success(array($sp058528, $spb914a1)); } function unfreeze(Request $spd5cc4d) { $this->validate($spd5cc4d, array('ids' => 'required|string')); $spf46353 = explode(',', $spd5cc4d->post('ids')); $sp058528 = 0; $spb914a1 = 0; $spd81133 = \App\Order::STATUS_FROZEN; foreach ($spf46353 as $sp1f742d) { $sp058528++; if (FundHelper::orderUnfreeze($sp1f742d, '后台操作', null, $spd81133)) { $spb914a1++; } } return Response::success(array($sp058528, $spb914a1, $spd81133)); } function set_paid(Request $spd5cc4d) { $this->validate($spd5cc4d, array('id' => 'required|integer')); $spe00284 = $spd5cc4d->post('id', ''); $spa24b71 = $spd5cc4d->post('trade_no', ''); if (strlen($spa24b71) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp7dcca7 = \App\Order::findOrFail($spe00284); if ($sp7dcca7->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spff31ad = 'Admin.SetPaid'; $spd56469 = $sp7dcca7->order_no; $sp9b2bb6 = $sp7dcca7->paid; try { Log::debug($spff31ad . " shipOrder start, order_no: {$spd56469}, amount: {$sp9b2bb6}, trade_no: {$spa24b71}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spd5cc4d, $spd56469, $sp9b2bb6, $spa24b71); Log::debug($spff31ad . ' shipOrder end, order_no: ' . $spd56469); $spb914a1 = true; $sp2af324 = '发货成功'; } catch (\Exception $spece20f) { $spb914a1 = false; $sp2af324 = $spece20f->getMessage(); Log::error($spff31ad . ' shipOrder Exception: ' . $spece20f->getMessage()); } $sp7dcca7 = \App\Order::with(array('pay' => function (Relation $spe440a8) { $spe440a8->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spe440a8) { $spe440a8->select(array('id', 'card')); }))->findOrFail($spe00284); if ($sp7dcca7->status === \App\Order::STATUS_PAID) { if ($sp7dcca7->product->delivery === \App\Product::DELIVERY_MANUAL) { $spb914a1 = true; $sp2af324 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spb914a1 = false; $sp2af324 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spb914a1 ? 0 : -1, 'msg' => $sp2af324, 'order' => $sp7dcca7)); } }