<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp864000 = $spf09a96->post('ids'); $sp2e6832 = (int) $spf09a96->post('income'); $spc50839 = (int) $spf09a96->post('balance'); \App\Order::whereIn('id', explode(',', $sp864000))->chunk(100, function ($sp7398bb) use($sp2e6832, $spc50839) { foreach ($sp7398bb as $sp7cc18f) { $sp7cc18f->cards()->detach(); try { if ($sp2e6832) { $sp7cc18f->fundRecord()->delete(); } if ($spc50839) { $sp586d7b = \App\User::lockForUpdate()->firstOrFail(); $sp586d7b->m_all -= $sp7cc18f->income; $sp586d7b->saveOrFail(); } $sp7cc18f->delete(); } catch (\Exception $spf745ad) { } } }); return Response::success(); } function freeze(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string')); $sp864000 = explode(',', $spf09a96->post('ids')); $sp0a664b = $spf09a96->post('reason'); $sp88dd02 = 0; $sp067eee = 0; foreach ($sp864000 as $sp27a21b) { $sp88dd02++; if (FundHelper::orderFreeze($sp27a21b, $sp0a664b)) { $sp067eee++; } } return Response::success(array($sp88dd02, $sp067eee)); } function unfreeze(Request $spf09a96) { $this->validate($spf09a96, array('ids' => 'required|string')); $sp864000 = explode(',', $spf09a96->post('ids')); $sp88dd02 = 0; $sp067eee = 0; $sp3355e9 = \App\Order::STATUS_FROZEN; foreach ($sp864000 as $sp27a21b) { $sp88dd02++; if (FundHelper::orderUnfreeze($sp27a21b, '后台操作', null, $sp3355e9)) { $sp067eee++; } } return Response::success(array($sp88dd02, $sp067eee, $sp3355e9)); } function set_paid(Request $spf09a96) { $this->validate($spf09a96, array('id' => 'required|integer')); $spe8e527 = $spf09a96->post('id', ''); $sp3959e4 = $spf09a96->post('trade_no', ''); if (strlen($sp3959e4) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp7cc18f = \App\Order::findOrFail($spe8e527); if ($sp7cc18f->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spbbf2ad = 'Admin.SetPaid'; $sp71c458 = $sp7cc18f->order_no; $sp5e1aa5 = $sp7cc18f->paid; try { Log::debug($spbbf2ad . " shipOrder start, order_no: {$sp71c458}, amount: {$sp5e1aa5}, trade_no: {$sp3959e4}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spf09a96, $sp71c458, $sp5e1aa5, $sp3959e4); Log::debug($spbbf2ad . ' shipOrder end, order_no: ' . $sp71c458); $sp067eee = true; $sp8117f7 = '发货成功'; } catch (\Exception $spf745ad) { $sp067eee = false; $sp8117f7 = $spf745ad->getMessage(); Log::error($spbbf2ad . ' shipOrder Exception: ' . $spf745ad->getMessage()); } $sp7cc18f = \App\Order::with(array('pay' => function (Relation $sp40bc20) { $sp40bc20->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp40bc20) { $sp40bc20->select(array('id', 'card')); }))->findOrFail($spe8e527); if ($sp7cc18f->status === \App\Order::STATUS_PAID) { if ($sp7cc18f->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp067eee = true; $sp8117f7 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp067eee = false; $sp8117f7 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp067eee ? 0 : -1, 'msg' => $sp8117f7, 'order' => $sp7cc18f)); } }