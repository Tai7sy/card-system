<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spbd9db0 = $spfeab54->post('ids'); $spdc46ce = (int) $spfeab54->post('income'); $sp88feb2 = (int) $spfeab54->post('balance'); \App\Order::whereIn('id', explode(',', $spbd9db0))->chunk(100, function ($spc544b7) use($spdc46ce, $sp88feb2) { foreach ($spc544b7 as $sp4f4c0d) { $sp4f4c0d->cards()->detach(); try { if ($spdc46ce) { $sp4f4c0d->fundRecord()->delete(); } if ($sp88feb2) { $spafa70b = \App\User::lockForUpdate()->firstOrFail(); $spafa70b->m_all -= $sp4f4c0d->income; $spafa70b->saveOrFail(); } $sp4f4c0d->delete(); } catch (\Exception $sp81eee8) { } } }); return Response::success(); } function freeze(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string')); $spbd9db0 = explode(',', $spfeab54->post('ids')); $spe3efa4 = $spfeab54->post('reason'); $spfdb02a = 0; $sp65fc58 = 0; foreach ($spbd9db0 as $sp48ee76) { $spfdb02a++; if (FundHelper::orderFreeze($sp48ee76, $spe3efa4)) { $sp65fc58++; } } return Response::success(array($spfdb02a, $sp65fc58)); } function unfreeze(Request $spfeab54) { $this->validate($spfeab54, array('ids' => 'required|string')); $spbd9db0 = explode(',', $spfeab54->post('ids')); $spfdb02a = 0; $sp65fc58 = 0; $sp56845b = \App\Order::STATUS_FROZEN; foreach ($spbd9db0 as $sp48ee76) { $spfdb02a++; if (FundHelper::orderUnfreeze($sp48ee76, '后台操作', null, $sp56845b)) { $sp65fc58++; } } return Response::success(array($spfdb02a, $sp65fc58, $sp56845b)); } function set_paid(Request $spfeab54) { $this->validate($spfeab54, array('id' => 'required|integer')); $sp53f8aa = $spfeab54->post('id', ''); $sp4d48a7 = $spfeab54->post('trade_no', ''); if (strlen($sp4d48a7) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp4f4c0d = \App\Order::findOrFail($sp53f8aa); if ($sp4f4c0d->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp9df21a = 'Admin.SetPaid'; $sp7c88f3 = $sp4f4c0d->order_no; $sp429fcc = $sp4f4c0d->paid; try { Log::debug($sp9df21a . " shipOrder start, order_no: {$sp7c88f3}, amount: {$sp429fcc}, trade_no: {$sp4d48a7}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spfeab54, $sp7c88f3, $sp429fcc, $sp4d48a7); Log::debug($sp9df21a . ' shipOrder end, order_no: ' . $sp7c88f3); $sp65fc58 = true; $sp093e23 = '发货成功'; } catch (\Exception $sp81eee8) { $sp65fc58 = false; $sp093e23 = $sp81eee8->getMessage(); Log::error($sp9df21a . ' shipOrder Exception: ' . $sp81eee8->getMessage()); } $sp4f4c0d = \App\Order::with(array('pay' => function (Relation $sp5786ca) { $sp5786ca->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp5786ca) { $sp5786ca->select(array('id', 'card')); }))->findOrFail($sp53f8aa); if ($sp4f4c0d->status === \App\Order::STATUS_PAID) { if ($sp4f4c0d->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp65fc58 = true; $sp093e23 = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp65fc58 = false; $sp093e23 = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp65fc58 ? 0 : -1, 'msg' => $sp093e23, 'order' => $sp4f4c0d)); } }