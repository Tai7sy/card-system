<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp16eb02) { $this->validate($sp16eb02, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $spf99fa0 = $sp16eb02->post('ids'); $sp1a51d3 = (int) $sp16eb02->post('income'); $spc58961 = (int) $sp16eb02->post('balance'); \App\Order::whereIn('id', explode(',', $spf99fa0))->chunk(100, function ($spcbdae3) use($sp1a51d3, $spc58961) { foreach ($spcbdae3 as $sp6f156a) { $sp6f156a->cards()->detach(); try { if ($sp1a51d3) { $sp6f156a->fundRecord()->delete(); } if ($spc58961) { $sp16b781 = \App\User::lockForUpdate()->firstOrFail(); $sp16b781->m_all -= $sp6f156a->income; $sp16b781->saveOrFail(); } $sp6f156a->delete(); } catch (\Exception $sp803aea) { } } }); return Response::success(); } function freeze(Request $sp16eb02) { $this->validate($sp16eb02, array('ids' => 'required|string')); $spf99fa0 = explode(',', $sp16eb02->post('ids')); $spb9bcea = $sp16eb02->post('reason'); $sp0fccd1 = 0; $spd30f82 = 0; foreach ($spf99fa0 as $sp1d6e91) { $sp0fccd1++; if (FundHelper::orderFreeze($sp1d6e91, $spb9bcea)) { $spd30f82++; } } return Response::success(array($sp0fccd1, $spd30f82)); } function unfreeze(Request $sp16eb02) { $this->validate($sp16eb02, array('ids' => 'required|string')); $spf99fa0 = explode(',', $sp16eb02->post('ids')); $sp0fccd1 = 0; $spd30f82 = 0; $spaac808 = \App\Order::STATUS_FROZEN; foreach ($spf99fa0 as $sp1d6e91) { $sp0fccd1++; if (FundHelper::orderUnfreeze($sp1d6e91, '后台操作', null, $spaac808)) { $spd30f82++; } } return Response::success(array($sp0fccd1, $spd30f82, $spaac808)); } function set_paid(Request $sp16eb02) { $this->validate($sp16eb02, array('id' => 'required|integer')); $sp0bf346 = $sp16eb02->post('id', ''); $spffd96e = $sp16eb02->post('trade_no', ''); if (strlen($spffd96e) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp6f156a = \App\Order::findOrFail($sp0bf346); if ($sp6f156a->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp72aa9c = 'Admin.SetPaid'; $sp88df5b = $sp6f156a->order_no; $spd3c300 = $sp6f156a->paid; try { Log::debug($sp72aa9c . " shipOrder start, order_no: {$sp88df5b}, amount: {$spd3c300}, trade_no: {$spffd96e}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp16eb02, $sp88df5b, $spd3c300, $spffd96e); Log::debug($sp72aa9c . ' shipOrder end, order_no: ' . $sp88df5b); $spd30f82 = true; $sp3219af = '发货成功'; } catch (\Exception $sp803aea) { $spd30f82 = false; $sp3219af = $sp803aea->getMessage(); Log::error($sp72aa9c . ' shipOrder Exception: ' . $sp803aea->getMessage()); } $sp6f156a = \App\Order::with(array('pay' => function (Relation $spf5b559) { $spf5b559->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spf5b559) { $spf5b559->select(array('id', 'card')); }))->findOrFail($sp0bf346); if ($sp6f156a->status === \App\Order::STATUS_PAID) { if ($sp6f156a->product->delivery === \App\Product::DELIVERY_MANUAL) { $spd30f82 = true; $sp3219af = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $spd30f82 = false; $sp3219af = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $spd30f82 ? 0 : -1, 'msg' => $sp3219af, 'order' => $sp6f156a)); } }