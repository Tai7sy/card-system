<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp786967 = $sp179c14->post('ids'); $sp71e5e1 = (int) $sp179c14->post('income'); $sp350b9a = (int) $sp179c14->post('balance'); \App\Order::whereIn('id', explode(',', $sp786967))->chunk(100, function ($sp37fe83) use($sp71e5e1, $sp350b9a) { foreach ($sp37fe83 as $spd807de) { $spd807de->cards()->detach(); try { if ($sp71e5e1) { $spd807de->fundRecord()->delete(); } if ($sp350b9a) { $sp359016 = \App\User::lockForUpdate()->firstOrFail(); $sp359016->m_all -= $spd807de->income; $sp359016->saveOrFail(); } $spd807de->delete(); } catch (\Exception $spa356ee) { } } }); return Response::success(); } function freeze(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string')); $sp786967 = explode(',', $sp179c14->post('ids')); $sp670ca9 = $sp179c14->post('reason'); $spb37164 = 0; $sp780ce6 = 0; foreach ($sp786967 as $sp9e940d) { $spb37164++; if (FundHelper::orderFreeze($sp9e940d, $sp670ca9)) { $sp780ce6++; } } return Response::success(array($spb37164, $sp780ce6)); } function unfreeze(Request $sp179c14) { $this->validate($sp179c14, array('ids' => 'required|string')); $sp786967 = explode(',', $sp179c14->post('ids')); $spb37164 = 0; $sp780ce6 = 0; $sp614b60 = \App\Order::STATUS_FROZEN; foreach ($sp786967 as $sp9e940d) { $spb37164++; if (FundHelper::orderUnfreeze($sp9e940d, '后台操作', null, $sp614b60)) { $sp780ce6++; } } return Response::success(array($spb37164, $sp780ce6, $sp614b60)); } function set_paid(Request $sp179c14) { $this->validate($sp179c14, array('id' => 'required|integer')); $spadc22c = $sp179c14->post('id', ''); $sp6ace54 = $sp179c14->post('trade_no', ''); if (strlen($sp6ace54) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spd807de = \App\Order::findOrFail($spadc22c); if ($spd807de->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp102ea3 = 'Admin.SetPaid'; $sp1b0c2d = $spd807de->order_no; $sp2b3edf = $spd807de->paid; try { Log::debug($sp102ea3 . " shipOrder start, order_no: {$sp1b0c2d}, amount: {$sp2b3edf}, trade_no: {$sp6ace54}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp179c14, $sp1b0c2d, $sp2b3edf, $sp6ace54); Log::debug($sp102ea3 . ' shipOrder end, order_no: ' . $sp1b0c2d); $sp780ce6 = true; $spa32dfd = '发货成功'; } catch (\Exception $spa356ee) { $sp780ce6 = false; $spa32dfd = $spa356ee->getMessage(); Log::error($sp102ea3 . ' shipOrder Exception: ' . $spa356ee->getMessage()); } $spd807de = \App\Order::with(array('pay' => function (Relation $sp78fbd3) { $sp78fbd3->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp78fbd3) { $sp78fbd3->select(array('id', 'card')); }))->findOrFail($spadc22c); if ($spd807de->status === \App\Order::STATUS_PAID) { if ($spd807de->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp780ce6 = true; $spa32dfd = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp780ce6 = false; $spa32dfd = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp780ce6 ? 0 : -1, 'msg' => $spa32dfd, 'order' => $spd807de)); } }