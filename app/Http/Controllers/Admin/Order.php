<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $spa27895) { $this->validate($spa27895, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp8e4c06 = $spa27895->post('ids'); $spc7b77d = (int) $spa27895->post('income'); $sp0aa8dc = (int) $spa27895->post('balance'); \App\Order::whereIn('id', explode(',', $sp8e4c06))->chunk(100, function ($spcc3b3e) use($spc7b77d, $sp0aa8dc) { foreach ($spcc3b3e as $sp7b2cfc) { $sp7b2cfc->cards()->detach(); try { if ($spc7b77d) { $sp7b2cfc->fundRecord()->delete(); } if ($sp0aa8dc) { $sp845283 = \App\User::lockForUpdate()->firstOrFail(); $sp845283->m_all -= $sp7b2cfc->income; $sp845283->saveOrFail(); } $sp7b2cfc->delete(); } catch (\Exception $sp45f5f1) { } } }); return Response::success(); } function freeze(Request $spa27895) { $this->validate($spa27895, array('ids' => 'required|string')); $sp8e4c06 = explode(',', $spa27895->post('ids')); $sp01391f = $spa27895->post('reason'); $spdf4a99 = 0; $sp052277 = 0; foreach ($sp8e4c06 as $sp748f3f) { $spdf4a99++; if (FundHelper::orderFreeze($sp748f3f, $sp01391f)) { $sp052277++; } } return Response::success(array($spdf4a99, $sp052277)); } function unfreeze(Request $spa27895) { $this->validate($spa27895, array('ids' => 'required|string')); $sp8e4c06 = explode(',', $spa27895->post('ids')); $spdf4a99 = 0; $sp052277 = 0; $sp2fc4dd = \App\Order::STATUS_FROZEN; foreach ($sp8e4c06 as $sp748f3f) { $spdf4a99++; if (FundHelper::orderUnfreeze($sp748f3f, '后台操作', null, $sp2fc4dd)) { $sp052277++; } } return Response::success(array($spdf4a99, $sp052277, $sp2fc4dd)); } function set_paid(Request $spa27895) { $this->validate($spa27895, array('id' => 'required|integer')); $sp746ee1 = $spa27895->post('id', ''); $sp002509 = $spa27895->post('trade_no', ''); if (strlen($sp002509) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp7b2cfc = \App\Order::findOrFail($sp746ee1); if ($sp7b2cfc->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp860109 = 'Admin.SetPaid'; $sp0dbaa3 = $sp7b2cfc->order_no; $spa468fd = $sp7b2cfc->paid; try { Log::debug($sp860109 . " shipOrder start, order_no: {$sp0dbaa3}, amount: {$spa468fd}, trade_no: {$sp002509}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spa27895, $sp0dbaa3, $spa468fd, $sp002509); Log::debug($sp860109 . ' shipOrder end, order_no: ' . $sp0dbaa3); $sp052277 = true; $spa9bccc = '发货成功'; } catch (\Exception $sp45f5f1) { $sp052277 = false; $spa9bccc = $sp45f5f1->getMessage(); Log::error($sp860109 . ' shipOrder Exception: ' . $sp45f5f1->getMessage()); } $sp7b2cfc = \App\Order::with(array('pay' => function (Relation $sp7e6fa3) { $sp7e6fa3->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp7e6fa3) { $sp7e6fa3->select(array('id', 'card')); }))->findOrFail($sp746ee1); if ($sp7b2cfc->status === \App\Order::STATUS_PAID) { if ($sp7b2cfc->product->delivery === \App\Product::DELIVERY_MANUAL) { $sp052277 = true; $spa9bccc = '已标记为付款成功<br>当前商品为手动发货商品, 请手动进行发货。'; } else { $sp052277 = false; $spa9bccc = '已标记为付款成功, <br>但是买家库存不足, 发货失败, 请稍后尝试手动发货。'; } } return Response::success(array('code' => $sp052277 ? 0 : -1, 'msg' => $spa9bccc, 'order' => $sp7b2cfc)); } }