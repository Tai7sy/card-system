<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $sp6bda17 = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($sp6bda17); } public function login(Request $spa27895) { if ((int) \App\System::_get('vcode_login') === 1) { $sp786169 = Geetest\API::verify($spa27895->post('gt_c'), $spa27895->post('gt_v'), $spa27895->post('gt_s')); if (!$sp786169) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp5138db = $spa27895->input('remember') == 'true'; if (!Auth::attempt(array('email' => $spa27895->input('email'), 'password' => $spa27895->input('password')), $sp5138db)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $sp7bbf8b = new \App\Log(); $sp7bbf8b->user_id = Auth::Id(); $sp7bbf8b->ip = Helper::getIP(); $sp7bbf8b->action = \App\Log::ACTION_LOGIN; $sp7bbf8b->save(); $sp845283 = Auth::getUser(); $sp845283->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $sp845283->toArray())); } } function info() { $sp845283 = Auth::getUser(); $sp845283->addHidden(array('created_at', 'updated_at')); $sp845283->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $sp845283->toArray())); } function logout(Request $spa27895) { @Auth::logout(); return Response::success(); } function changePassword(Request $spa27895) { $sp845283 = Auth::getUser(); $sp5fd1b4 = $spa27895->post('old', null); $sp943c4c = $spa27895->post('password', null); if (strlen($sp943c4c) < 6 || strlen($sp943c4c) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($sp5fd1b4, $sp845283->password)) { return Response::fail('旧密码错误，请检查'); } $sp845283->password = Hash::make($sp943c4c); $sp845283->setRememberToken(str_random(60)); $sp845283->saveOrFail(); event(new PasswordReset($sp845283)); Auth::guard()->login($sp845283); return Response::success(); } }