<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $sp5c1c9f = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($sp5c1c9f); } public function login(Request $sp179c14) { if ((int) \App\System::_get('vcode_login') === 1) { $spa6aab5 = Geetest\API::verify($sp179c14->post('gt_c'), $sp179c14->post('gt_v'), $sp179c14->post('gt_s')); if (!$spa6aab5) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp4236b5 = $sp179c14->input('remember') == 'true'; if (!Auth::attempt(array('email' => $sp179c14->input('email'), 'password' => $sp179c14->input('password')), $sp4236b5)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $sp3ac7fe = new \App\Log(); $sp3ac7fe->user_id = Auth::Id(); $sp3ac7fe->ip = Helper::getIP(); $sp3ac7fe->action = \App\Log::ACTION_LOGIN; $sp3ac7fe->save(); $sp359016 = Auth::getUser(); $sp359016->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $sp359016->toArray())); } } function info() { $sp359016 = Auth::getUser(); $sp359016->addHidden(array('created_at', 'updated_at')); $sp359016->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $sp359016->toArray())); } function logout(Request $sp179c14) { @Auth::logout(); return Response::success(); } function changePassword(Request $sp179c14) { $sp359016 = Auth::getUser(); $spaf9363 = $sp179c14->post('old', null); $sp99d854 = $sp179c14->post('password', null); if (strlen($sp99d854) < 6 || strlen($sp99d854) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($spaf9363, $sp359016->password)) { return Response::fail('旧密码错误，请检查'); } $sp359016->password = Hash::make($sp99d854); $sp359016->setRememberToken(str_random(60)); $sp359016->saveOrFail(); event(new PasswordReset($sp359016)); Auth::guard()->login($sp359016); return Response::success(); } }