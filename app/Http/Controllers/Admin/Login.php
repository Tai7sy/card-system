<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $sp1d2d7f = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($sp1d2d7f); } public function login(Request $spbaac90) { if ((int) \App\System::_get('vcode_login') === 1) { $sp599084 = Geetest\API::verify($spbaac90->post('gt_c'), $spbaac90->post('gt_v'), $spbaac90->post('gt_s')); if (!$sp599084) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp76adb4 = $spbaac90->input('remember') == 'true'; if (!Auth::attempt(array('email' => $spbaac90->input('email'), 'password' => $spbaac90->input('password')), $sp76adb4)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $spbd63f7 = new \App\Log(); $spbd63f7->user_id = Auth::Id(); $spbd63f7->ip = Helper::getIP(); $spbd63f7->action = \App\Log::ACTION_LOGIN; $spbd63f7->save(); $spdc0e57 = Auth::getUser(); $spdc0e57->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $spdc0e57->toArray())); } } function info() { $spdc0e57 = Auth::getUser(); $spdc0e57->addHidden(array('created_at', 'updated_at')); $spdc0e57->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $spdc0e57->toArray())); } function logout(Request $spbaac90) { @Auth::logout(); return Response::success(); } function changePassword(Request $spbaac90) { $spdc0e57 = Auth::getUser(); $spa445a0 = $spbaac90->post('old', null); $sp5b61e2 = $spbaac90->post('password', null); if (strlen($sp5b61e2) < 6 || strlen($sp5b61e2) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($spa445a0, $spdc0e57->password)) { return Response::fail('旧密码错误，请检查'); } $spdc0e57->password = Hash::make($sp5b61e2); $spdc0e57->setRememberToken(str_random(60)); $spdc0e57->saveOrFail(); event(new PasswordReset($spdc0e57)); Auth::guard()->login($spdc0e57); return Response::success(); } }