<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $sp303806 = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($sp303806); } public function login(Request $spfeab54) { if ((int) \App\System::_get('vcode_login') === 1) { $spb9589c = Geetest\API::verify($spfeab54->post('gt_c'), $spfeab54->post('gt_v'), $spfeab54->post('gt_s')); if (!$spb9589c) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp900ccf = $spfeab54->input('remember') == 'true'; if (!Auth::attempt(array('email' => $spfeab54->input('email'), 'password' => $spfeab54->input('password')), $sp900ccf)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $sp77595d = new \App\Log(); $sp77595d->user_id = Auth::Id(); $sp77595d->ip = Helper::getIP(); $sp77595d->action = \App\Log::ACTION_LOGIN; $sp77595d->save(); $spafa70b = Auth::getUser(); $spafa70b->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $spafa70b->toArray())); } } function info() { $spafa70b = Auth::getUser(); $spafa70b->addHidden(array('created_at', 'updated_at')); $spafa70b->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $spafa70b->toArray())); } function logout(Request $spfeab54) { @Auth::logout(); return Response::success(); } function changePassword(Request $spfeab54) { $spafa70b = Auth::getUser(); $sp50470d = $spfeab54->post('old', null); $spb6833a = $spfeab54->post('password', null); if (strlen($spb6833a) < 6 || strlen($spb6833a) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($sp50470d, $spafa70b->password)) { return Response::fail('旧密码错误，请检查'); } $spafa70b->password = Hash::make($spb6833a); $spafa70b->setRememberToken(str_random(60)); $spafa70b->saveOrFail(); event(new PasswordReset($spafa70b)); Auth::guard()->login($spafa70b); return Response::success(); } }