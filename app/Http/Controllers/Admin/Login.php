<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $spcb9bf9 = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($spcb9bf9); } public function login(Request $sp3c91bd) { if ((int) \App\System::_get('vcode_login') === 1) { $sp6a22d6 = Geetest\API::verify($sp3c91bd->post('gt_c'), $sp3c91bd->post('gt_v'), $sp3c91bd->post('gt_s')); if (!$sp6a22d6) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp3efd11 = $sp3c91bd->input('remember') == 'true'; if (!Auth::attempt(array('email' => $sp3c91bd->input('email'), 'password' => $sp3c91bd->input('password')), $sp3efd11)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $spa58538 = new \App\Log(); $spa58538->user_id = Auth::Id(); $spa58538->ip = Helper::getIP(); $spa58538->action = \App\Log::ACTION_LOGIN; $spa58538->save(); $spb14cf0 = Auth::getUser(); $spb14cf0->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $spb14cf0->toArray())); } } function info() { $spb14cf0 = Auth::getUser(); $spb14cf0->addHidden(array('created_at', 'updated_at')); $spb14cf0->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $spb14cf0->toArray())); } function logout(Request $sp3c91bd) { @Auth::logout(); return Response::success(); } function changePassword(Request $sp3c91bd) { $spb14cf0 = Auth::getUser(); $sp265a87 = $sp3c91bd->post('old', null); $sp42016f = $sp3c91bd->post('password', null); if (strlen($sp42016f) < 6 || strlen($sp42016f) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($sp265a87, $spb14cf0->password)) { return Response::fail('旧密码错误，请检查'); } $spb14cf0->password = Hash::make($sp42016f); $spb14cf0->setRememberToken(str_random(60)); $spb14cf0->saveOrFail(); event(new PasswordReset($spb14cf0)); Auth::guard()->login($spb14cf0); return Response::success(); } }