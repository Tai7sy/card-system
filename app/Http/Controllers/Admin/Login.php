<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $spf81742 = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($spf81742); } public function login(Request $sp054aa0) { if ((int) \App\System::_get('vcode_login') === 1) { $sp93ae8e = Geetest\API::verify($sp054aa0->post('gt_c'), $sp054aa0->post('gt_v'), $sp054aa0->post('gt_s')); if (!$sp93ae8e) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp933c61 = $sp054aa0->input('remember') == 'true'; if (!Auth::attempt(array('email' => $sp054aa0->input('email'), 'password' => $sp054aa0->input('password')), $sp933c61)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $sp7b32c7 = new \App\Log(); $sp7b32c7->user_id = Auth::Id(); $sp7b32c7->ip = Helper::getIP(); $sp7b32c7->action = \App\Log::ACTION_LOGIN; $sp7b32c7->save(); $spd78df7 = Auth::getUser(); $spd78df7->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $spd78df7->toArray())); } } function info() { $spd78df7 = Auth::getUser(); $spd78df7->addHidden(array('created_at', 'updated_at')); $spd78df7->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $spd78df7->toArray())); } function logout(Request $sp054aa0) { @Auth::logout(); return Response::success(); } function changePassword(Request $sp054aa0) { $spd78df7 = Auth::getUser(); $spf3151b = $sp054aa0->post('old', null); $spec6cbf = $sp054aa0->post('password', null); if (strlen($spec6cbf) < 6 || strlen($spec6cbf) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($spf3151b, $spd78df7->password)) { return Response::fail('旧密码错误，请检查'); } $spd78df7->password = Hash::make($spec6cbf); $spd78df7->setRememberToken(str_random(60)); $spd78df7->saveOrFail(); event(new PasswordReset($spd78df7)); Auth::guard()->login($spd78df7); return Response::success(); } }