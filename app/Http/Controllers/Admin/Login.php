<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $spcbf64f = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($spcbf64f); } public function login(Request $sp16eb02) { if ((int) \App\System::_get('vcode_login') === 1) { $spc31330 = Geetest\API::verify($sp16eb02->post('gt_c'), $sp16eb02->post('gt_v'), $sp16eb02->post('gt_s')); if (!$spc31330) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp8b0313 = $sp16eb02->input('remember') == 'true'; if (!Auth::attempt(array('email' => $sp16eb02->input('email'), 'password' => $sp16eb02->input('password')), $sp8b0313)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $sp1bcca4 = new \App\Log(); $sp1bcca4->user_id = Auth::Id(); $sp1bcca4->ip = Helper::getIP(); $sp1bcca4->action = \App\Log::ACTION_LOGIN; $sp1bcca4->save(); $sp16b781 = Auth::getUser(); $sp16b781->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $sp16b781->toArray())); } } function info() { $sp16b781 = Auth::getUser(); $sp16b781->addHidden(array('created_at', 'updated_at')); $sp16b781->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $sp16b781->toArray())); } function logout(Request $sp16eb02) { @Auth::logout(); return Response::success(); } function changePassword(Request $sp16eb02) { $sp16b781 = Auth::getUser(); $spfa55db = $sp16eb02->post('old', null); $sp35e64e = $sp16eb02->post('password', null); if (strlen($sp35e64e) < 6 || strlen($sp35e64e) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($spfa55db, $sp16b781->password)) { return Response::fail('旧密码错误，请检查'); } $sp16b781->password = Hash::make($sp35e64e); $sp16b781->setRememberToken(str_random(60)); $sp16b781->saveOrFail(); event(new PasswordReset($sp16b781)); Auth::guard()->login($sp16b781); return Response::success(); } }