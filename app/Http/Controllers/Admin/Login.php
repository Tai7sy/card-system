<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $spc257d7 = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($spc257d7); } public function login(Request $spaa0004) { if ((int) \App\System::_get('vcode_login') === 1) { $sp4e109c = Geetest\API::verify($spaa0004->post('gt_c'), $spaa0004->post('gt_v'), $spaa0004->post('gt_s')); if (!$sp4e109c) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp2b3ffd = $spaa0004->input('remember') == 'true'; if (!Auth::attempt(array('email' => $spaa0004->input('email'), 'password' => $spaa0004->input('password')), $sp2b3ffd)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $sp58584a = new \App\Log(); $sp58584a->user_id = Auth::Id(); $sp58584a->ip = Helper::getIP(); $sp58584a->action = \App\Log::ACTION_LOGIN; $sp58584a->save(); $sp7990f7 = Auth::getUser(); $sp7990f7->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $sp7990f7->toArray())); } } function info() { $sp7990f7 = Auth::getUser(); $sp7990f7->addHidden(array('created_at', 'updated_at')); $sp7990f7->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $sp7990f7->toArray())); } function logout(Request $spaa0004) { @Auth::logout(); return Response::success(); } function changePassword(Request $spaa0004) { $sp7990f7 = Auth::getUser(); $spb56bb5 = $spaa0004->post('old', null); $sp332898 = $spaa0004->post('password', null); if (strlen($sp332898) < 6 || strlen($sp332898) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($spb56bb5, $sp7990f7->password)) { return Response::fail('旧密码错误，请检查'); } $sp7990f7->password = Hash::make($sp332898); $sp7990f7->setRememberToken(str_random(60)); $sp7990f7->saveOrFail(); event(new PasswordReset($sp7990f7)); Auth::guard()->login($sp7990f7); return Response::success(); } }