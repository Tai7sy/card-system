<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $sp2a2ac0 = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($sp2a2ac0); } public function login(Request $spf066f3) { if ((int) \App\System::_get('vcode_login') === 1) { $sp9b52fe = Geetest\API::verify($spf066f3->post('gt_c'), $spf066f3->post('gt_v'), $spf066f3->post('gt_s')); if (!$sp9b52fe) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp7d2107 = $spf066f3->input('remember') == 'true'; if (!Auth::attempt(array('email' => $spf066f3->input('email'), 'password' => $spf066f3->input('password')), $sp7d2107)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $sp275d8f = new \App\Log(); $sp275d8f->user_id = Auth::Id(); $sp275d8f->ip = Helper::getIP(); $sp275d8f->action = \App\Log::ACTION_LOGIN; $sp275d8f->save(); $spbbb773 = Auth::getUser(); $spbbb773->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $spbbb773->toArray())); } } function info() { $spbbb773 = Auth::getUser(); $spbbb773->addHidden(array('created_at', 'updated_at')); $spbbb773->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $spbbb773->toArray())); } function logout(Request $spf066f3) { @Auth::logout(); return Response::success(); } function changePassword(Request $spf066f3) { $spbbb773 = Auth::getUser(); $sp7c77cf = $spf066f3->post('old', null); $sp8f68ce = $spf066f3->post('password', null); if (strlen($sp8f68ce) < 6 || strlen($sp8f68ce) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($sp7c77cf, $spbbb773->password)) { return Response::fail('旧密码错误，请检查'); } $spbbb773->password = Hash::make($sp8f68ce); $spbbb773->setRememberToken(str_random(60)); $spbbb773->saveOrFail(); event(new PasswordReset($spbbb773)); Auth::guard()->login($spbbb773); return Response::success(); } }