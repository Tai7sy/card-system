<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $spe9ba50 = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($spe9ba50); } public function login(Request $spfb41ce) { if ((int) \App\System::_get('vcode_login') === 1) { $spd7b285 = Geetest\API::verify($spfb41ce->post('gt_c'), $spfb41ce->post('gt_v'), $spfb41ce->post('gt_s')); if (!$spd7b285) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $spf12159 = $spfb41ce->input('remember') == 'true'; if (!Auth::attempt(array('email' => $spfb41ce->input('email'), 'password' => $spfb41ce->input('password')), $spf12159)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $spc4ad53 = new \App\Log(); $spc4ad53->user_id = Auth::Id(); $spc4ad53->ip = Helper::getIP(); $spc4ad53->action = \App\Log::ACTION_LOGIN; $spc4ad53->save(); $sp836da4 = Auth::getUser(); $sp836da4->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $sp836da4->toArray())); } } function info() { $sp836da4 = Auth::getUser(); $sp836da4->addHidden(array('created_at', 'updated_at')); $sp836da4->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $sp836da4->toArray())); } function logout(Request $spfb41ce) { @Auth::logout(); return Response::success(); } function changePassword(Request $spfb41ce) { $sp836da4 = Auth::getUser(); $spd7d686 = $spfb41ce->post('old', null); $sp9b547f = $spfb41ce->post('password', null); if (strlen($sp9b547f) < 6 || strlen($sp9b547f) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($spd7d686, $sp836da4->password)) { return Response::fail('旧密码错误，请检查'); } $sp836da4->password = Hash::make($sp9b547f); $sp836da4->setRememberToken(str_random(60)); $sp836da4->saveOrFail(); event(new PasswordReset($sp836da4)); Auth::guard()->login($sp836da4); return Response::success(); } }