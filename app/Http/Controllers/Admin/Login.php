<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $sp15097d = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($sp15097d); } public function login(Request $spd5cc4d) { if ((int) \App\System::_get('vcode_login') === 1) { $sp29a775 = Geetest\API::verify($spd5cc4d->post('gt_c'), $spd5cc4d->post('gt_v'), $spd5cc4d->post('gt_s')); if (!$sp29a775) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $sp3544c7 = $spd5cc4d->input('remember') == 'true'; if (!Auth::attempt(array('email' => $spd5cc4d->input('email'), 'password' => $spd5cc4d->input('password')), $sp3544c7)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $spe02bfd = new \App\Log(); $spe02bfd->user_id = Auth::Id(); $spe02bfd->ip = Helper::getIP(); $spe02bfd->action = \App\Log::ACTION_LOGIN; $spe02bfd->save(); $sp694bd2 = Auth::getUser(); $sp694bd2->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $sp694bd2->toArray())); } } function info() { $sp694bd2 = Auth::getUser(); $sp694bd2->addHidden(array('created_at', 'updated_at')); $sp694bd2->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $sp694bd2->toArray())); } function logout(Request $spd5cc4d) { @Auth::logout(); return Response::success(); } function changePassword(Request $spd5cc4d) { $sp694bd2 = Auth::getUser(); $sp295f0e = $spd5cc4d->post('old', null); $spb07b5d = $spd5cc4d->post('password', null); if (strlen($spb07b5d) < 6 || strlen($spb07b5d) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($sp295f0e, $sp694bd2->password)) { return Response::fail('旧密码错误，请检查'); } $sp694bd2->password = Hash::make($spb07b5d); $sp694bd2->setRememberToken(str_random(60)); $sp694bd2->saveOrFail(); event(new PasswordReset($sp694bd2)); Auth::guard()->login($sp694bd2); return Response::success(); } }