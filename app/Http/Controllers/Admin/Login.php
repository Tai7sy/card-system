<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $spbf158d = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($spbf158d); } public function login(Request $sp7fb11a) { if ((int) \App\System::_get('vcode_login') === 1) { $sp44edeb = Geetest\API::verify($sp7fb11a->post('gt_c'), $sp7fb11a->post('gt_v'), $sp7fb11a->post('gt_s')); if (!$sp44edeb) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $spe4f6e4 = $sp7fb11a->input('remember') == 'true'; if (!Auth::attempt(array('email' => $sp7fb11a->input('email'), 'password' => $sp7fb11a->input('password')), $spe4f6e4)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $spf4eae5 = new \App\Log(); $spf4eae5->user_id = Auth::Id(); $spf4eae5->ip = Helper::getIP(); $spf4eae5->action = \App\Log::ACTION_LOGIN; $spf4eae5->save(); $sp85e034 = Auth::getUser(); $sp85e034->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $sp85e034->toArray())); } } function info() { $sp85e034 = Auth::getUser(); $sp85e034->addHidden(array('created_at', 'updated_at')); $sp85e034->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $sp85e034->toArray())); } function logout(Request $sp7fb11a) { @Auth::logout(); return Response::success(); } function changePassword(Request $sp7fb11a) { $sp85e034 = Auth::getUser(); $sp4affe8 = $sp7fb11a->post('old', null); $spfc40b6 = $sp7fb11a->post('password', null); if (strlen($spfc40b6) < 6 || strlen($spfc40b6) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($sp4affe8, $sp85e034->password)) { return Response::fail('旧密码错误，请检查'); } $sp85e034->password = Hash::make($spfc40b6); $sp85e034->setRememberToken(str_random(60)); $sp85e034->saveOrFail(); event(new PasswordReset($sp85e034)); Auth::guard()->login($sp85e034); return Response::success(); } }