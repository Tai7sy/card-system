<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $spf09a96) { $this->validate($spf09a96, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp501b73 = Password::broker()->reset($spf09a96->only('email', 'password', 'password_confirmation', 'token'), function ($sp586d7b, $sp1f7a77) { $this->resetPassword($sp586d7b, $sp1f7a77); }); return $sp501b73 == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp501b73)), 400); } public function change(Request $spf09a96) { $this->validate($spf09a96, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $sp586d7b = Auth::user(); if (!Hash::check($spf09a96->post('old'), $sp586d7b->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $sp269e48 = $this->resetPassword($sp586d7b, $spf09a96->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $sp269e48)); } public static function resetPassword($sp586d7b, $sp1f7a77, $sp184bbb = true) { $sp586d7b->password = Hash::make($sp1f7a77); $sp586d7b->setRememberToken(time()); $sp586d7b->saveOrFail(); event(new PasswordReset($sp586d7b)); if ($sp184bbb) { return Auth::login($sp586d7b); } else { return true; } } }