<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $sp7f7104) { $this->validate($sp7f7104, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp0a301e = Password::broker()->reset($sp7f7104->only('email', 'password', 'password_confirmation', 'token'), function ($sp216502, $sp364426) { $this->resetPassword($sp216502, $sp364426); }); return $sp0a301e == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp0a301e)), 400); } public function change(Request $sp7f7104) { $this->validate($sp7f7104, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $sp216502 = Auth::user(); if (!Hash::check($sp7f7104->post('old'), $sp216502->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $spd5a5b2 = $this->resetPassword($sp216502, $sp7f7104->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $spd5a5b2)); } public static function resetPassword($sp216502, $sp364426, $sp6c972e = true) { $sp216502->password = Hash::make($sp364426); $sp216502->setRememberToken(time()); $sp216502->saveOrFail(); event(new PasswordReset($sp216502)); if ($sp6c972e) { return Auth::login($sp216502); } else { return true; } } }