<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $spdf16c9) { $this->validate($spdf16c9, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp4ffb9b = Password::broker()->reset($spdf16c9->only('email', 'password', 'password_confirmation', 'token'), function ($sp0a324a, $sp7e9f47) { $this->resetPassword($sp0a324a, $sp7e9f47); }); return $sp4ffb9b == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp4ffb9b)), 400); } public function change(Request $spdf16c9) { $this->validate($spdf16c9, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $sp0a324a = Auth::user(); if (!Hash::check($spdf16c9->post('old'), $sp0a324a->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $sp268070 = $this->resetPassword($sp0a324a, $spdf16c9->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $sp268070)); } public static function resetPassword($sp0a324a, $sp7e9f47, $spdf1349 = true) { $sp0a324a->password = Hash::make($sp7e9f47); $sp0a324a->setRememberToken(time()); $sp0a324a->saveOrFail(); event(new PasswordReset($sp0a324a)); if ($spdf1349) { return Auth::login($sp0a324a); } else { return true; } } }