<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $sp62e4cd) { $this->validate($sp62e4cd, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp3e8d87 = Password::broker()->reset($sp62e4cd->only('email', 'password', 'password_confirmation', 'token'), function ($spbfa519, $sp02bf0b) { $this->resetPassword($spbfa519, $sp02bf0b); }); return $sp3e8d87 == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp3e8d87)), 400); } public function change(Request $sp62e4cd) { $this->validate($sp62e4cd, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $spbfa519 = Auth::user(); if (!Hash::check($sp62e4cd->post('old'), $spbfa519->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $sp97507d = $this->resetPassword($spbfa519, $sp62e4cd->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $sp97507d)); } public static function resetPassword($spbfa519, $sp02bf0b, $sp5fe632 = true) { $spbfa519->password = Hash::make($sp02bf0b); $spbfa519->setRememberToken(time()); $spbfa519->saveOrFail(); event(new PasswordReset($spbfa519)); if ($sp5fe632) { return Auth::login($spbfa519); } else { return true; } } }