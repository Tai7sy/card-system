<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $sp26e527) { $this->validate($sp26e527, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp7c95a4 = Password::broker()->reset($sp26e527->only('email', 'password', 'password_confirmation', 'token'), function ($sp590011, $sp4b3985) { $this->resetPassword($sp590011, $sp4b3985); }); return $sp7c95a4 == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp7c95a4)), 400); } public function change(Request $sp26e527) { $this->validate($sp26e527, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $sp590011 = Auth::user(); if (!Hash::check($sp26e527->post('old'), $sp590011->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $spce7aba = $this->resetPassword($sp590011, $sp26e527->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $spce7aba)); } public static function resetPassword($sp590011, $sp4b3985, $sp4b0ea9 = true) { $sp590011->password = Hash::make($sp4b3985); $sp590011->setRememberToken(time()); $sp590011->saveOrFail(); event(new PasswordReset($sp590011)); if ($sp4b0ea9) { return Auth::login($sp590011); } else { return true; } } }