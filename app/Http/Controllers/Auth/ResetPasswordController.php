<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $sp13451b) { $this->validate($sp13451b, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $spfae0a4 = Password::broker()->reset($sp13451b->only('email', 'password', 'password_confirmation', 'token'), function ($spc33961, $spf35053) { $this->resetPassword($spc33961, $spf35053); }); return $spfae0a4 == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($spfae0a4)), 400); } public function change(Request $sp13451b) { $this->validate($sp13451b, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $spc33961 = Auth::user(); if (!Hash::check($sp13451b->post('old'), $spc33961->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $sp61eea9 = $this->resetPassword($spc33961, $sp13451b->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $sp61eea9)); } public static function resetPassword($spc33961, $spf35053, $sp714a62 = true) { $spc33961->password = Hash::make($spf35053); $spc33961->setRememberToken(time()); $spc33961->saveOrFail(); event(new PasswordReset($spc33961)); if ($sp714a62) { return Auth::login($spc33961); } else { return true; } } }