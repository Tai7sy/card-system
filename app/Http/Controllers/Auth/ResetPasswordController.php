<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $spccbfb6) { $this->validate($spccbfb6, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp7fa26f = Password::broker()->reset($spccbfb6->only('email', 'password', 'password_confirmation', 'token'), function ($sp91cc0b, $sp966f65) { $this->resetPassword($sp91cc0b, $sp966f65); }); return $sp7fa26f == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp7fa26f)), 400); } public function change(Request $spccbfb6) { $this->validate($spccbfb6, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $sp91cc0b = Auth::user(); if (!Hash::check($spccbfb6->post('old'), $sp91cc0b->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $sp948af1 = $this->resetPassword($sp91cc0b, $spccbfb6->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $sp948af1)); } public static function resetPassword($sp91cc0b, $sp966f65, $spcdf6a7 = true) { $sp91cc0b->password = Hash::make($sp966f65); $sp91cc0b->setRememberToken(time()); $sp91cc0b->saveOrFail(); event(new PasswordReset($sp91cc0b)); if ($spcdf6a7) { return Auth::login($sp91cc0b); } else { return true; } } }