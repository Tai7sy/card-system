<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $spe5a184) { $this->validate($spe5a184, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $spca52a4 = Password::broker()->reset($spe5a184->only('email', 'password', 'password_confirmation', 'token'), function ($sp766bcc, $spc3374e) { $this->resetPassword($sp766bcc, $spc3374e); }); return $spca52a4 == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($spca52a4)), 400); } public function change(Request $spe5a184) { $this->validate($spe5a184, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $sp766bcc = Auth::user(); if (!Hash::check($spe5a184->post('old'), $sp766bcc->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $sp63ab26 = $this->resetPassword($sp766bcc, $spe5a184->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $sp63ab26)); } public static function resetPassword($sp766bcc, $spc3374e, $sp387599 = true) { $sp766bcc->password = Hash::make($spc3374e); $sp766bcc->setRememberToken(time()); $sp766bcc->saveOrFail(); event(new PasswordReset($sp766bcc)); if ($sp387599) { return Auth::login($sp766bcc); } else { return true; } } }