<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $sp147552) { $this->validate($sp147552, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp014e61 = Password::broker()->reset($sp147552->only('email', 'password', 'password_confirmation', 'token'), function ($spe2c9ac, $sp27b440) { $this->resetPassword($spe2c9ac, $sp27b440); }); return $sp014e61 == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp014e61)), 400); } public function change(Request $sp147552) { $this->validate($sp147552, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $spe2c9ac = Auth::user(); if (!Hash::check($sp147552->post('old'), $spe2c9ac->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $sp74ce9f = $this->resetPassword($spe2c9ac, $sp147552->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $sp74ce9f)); } public static function resetPassword($spe2c9ac, $sp27b440, $spbb50ca = true) { $spe2c9ac->password = Hash::make($sp27b440); $spe2c9ac->setRememberToken(time()); $spe2c9ac->saveOrFail(); event(new PasswordReset($spe2c9ac)); if ($spbb50ca) { return Auth::login($spe2c9ac); } else { return true; } } }