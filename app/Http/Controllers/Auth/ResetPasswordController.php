<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $sp375069) { $this->validate($sp375069, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp2a9a03 = Password::broker()->reset($sp375069->only('email', 'password', 'password_confirmation', 'token'), function ($sp264a55, $sp22c05f) { $this->resetPassword($sp264a55, $sp22c05f); }); return $sp2a9a03 == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp2a9a03)), 400); } public function change(Request $sp375069) { $this->validate($sp375069, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $sp264a55 = Auth::user(); if (!Hash::check($sp375069->post('old'), $sp264a55->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $spc29a0f = $this->resetPassword($sp264a55, $sp375069->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $spc29a0f)); } public static function resetPassword($sp264a55, $sp22c05f, $sp2a3786 = true) { $sp264a55->password = Hash::make($sp22c05f); $sp264a55->setRememberToken(time()); $sp264a55->saveOrFail(); event(new PasswordReset($sp264a55)); if ($sp2a3786) { return Auth::login($sp264a55); } else { return true; } } }