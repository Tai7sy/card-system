<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use Illuminate\Http\Response; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Password; class ResetPasswordController extends Controller { public function reset(Request $spa20801) { $this->validate($spa20801, array('token' => 'required', 'email' => 'required|email', 'password' => 'required|confirmed|min:6')); $sp945da0 = Password::broker()->reset($spa20801->only('email', 'password', 'password_confirmation', 'token'), function ($spf3d3c9, $sp4c9d0a) { $this->resetPassword($spf3d3c9, $sp4c9d0a); }); return $sp945da0 == Password::PASSWORD_RESET ? response(array()) : response(array('message' => trans($sp945da0)), 400); } public function change(Request $spa20801) { $this->validate($spa20801, array('old' => 'required|string', 'password' => 'required|string|min:6|max:32|confirmed')); $spf3d3c9 = Auth::user(); if (!Hash::check($spa20801->post('old'), $spf3d3c9->password)) { return response(array('message' => '旧密码错误，请检查'), Response::HTTP_BAD_REQUEST); } $sp6a7cf8 = $this->resetPassword($spf3d3c9, $spa20801->post('password')); return response(array(), 200, array('Authorization' => 'Bearer ' . $sp6a7cf8)); } public static function resetPassword($spf3d3c9, $sp4c9d0a, $spa2e6e2 = true) { $spf3d3c9->password = Hash::make($sp4c9d0a); $spf3d3c9->setRememberToken(time()); $spf3d3c9->saveOrFail(); event(new PasswordReset($spf3d3c9)); if ($spa2e6e2) { return Auth::login($spf3d3c9); } else { return true; } } }