<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use App\Library\Helper; use App\Library\QQWry\QQWry; use App\Library\WeChat; use App\System; use Illuminate\Http\Request; use Illuminate\Foundation\Auth\ThrottlesLogins; use Illuminate\Http\Response; use Illuminate\Support\Facades\Auth; class LoginController extends Controller { use ThrottlesLogins; protected function username() { return 'email'; } public function login(Request $spa20801) { $this->validate($spa20801, array('email' => 'required|email', 'password' => 'required|string')); if (System::_getInt('vcode_login_admin') === 1) { $this->validateCaptcha($spa20801); } if ($this->hasTooManyLoginAttempts($spa20801)) { $this->fireLockoutEvent($spa20801); $sp524ffa = $this->limiter()->availableIn($this->throttleKey($spa20801)); return response(array('message' => trans('auth.throttle', array('seconds' => $sp524ffa))), Response::HTTP_BAD_REQUEST); } if ($sp6a7cf8 = Auth::attempt($spa20801->only('email', 'password'))) { $spf3d3c9 = Auth::getUser(); $sp6e9651 = $spa20801->ip(); $spf3d3c9->logs()->create(array('action' => \App\Log::ACTION_LOGIN, 'ip' => $sp6e9651, 'address' => (new QQWry())->getLocation($sp6e9651))); return response($this->getUserInfo()->getContent(), Response::HTTP_CREATED, array('Authorization' => 'Bearer ' . $sp6a7cf8)); } LOGIN_FAILED: $this->incrementLoginAttempts($spa20801); return response(array('message' => trans('auth.failed')), Response::HTTP_BAD_REQUEST); } public function getUserInfo() { $spf3d3c9 = Auth::getUser(); $spf3d3c9->addHidden(array('created_at', 'updated_at')); $spf3d3c9->append(array('last_login_at')); $sp945da0 = array(); $sp945da0['user'] = $spf3d3c9; return response($sp945da0); } public function logout() { try { @Auth::logout(); } catch (\Throwable $sp16b835) { } return response(array()); } }