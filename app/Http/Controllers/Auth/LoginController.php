<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use App\Library\Helper; use App\Library\QQWry\QQWry; use App\Library\WeChat; use App\System; use Illuminate\Http\Request; use Illuminate\Foundation\Auth\ThrottlesLogins; use Illuminate\Http\Response; use Illuminate\Support\Facades\Auth; class LoginController extends Controller { use ThrottlesLogins; protected function username() { return 'email'; } public function login(Request $sp13451b) { $this->validate($sp13451b, array('email' => 'required|email', 'password' => 'required|string')); if (System::_getInt('vcode_login_admin') === 1) { $this->validateCaptcha($sp13451b); } if ($this->hasTooManyLoginAttempts($sp13451b)) { $this->fireLockoutEvent($sp13451b); $spf57d82 = $this->limiter()->availableIn($this->throttleKey($sp13451b)); return response(array('message' => trans('auth.throttle', array('seconds' => $spf57d82))), Response::HTTP_BAD_REQUEST); } if ($sp61eea9 = Auth::attempt($sp13451b->only('email', 'password'))) { $spc33961 = Auth::getUser(); $sp751445 = Helper::getIP() ?? $sp13451b->ip(); $spc33961->logs()->create(array('action' => \App\Log::ACTION_LOGIN, 'ip' => $sp751445, 'address' => (new QQWry())->getLocation($sp751445))); return response($this->getUserInfo()->getContent(), Response::HTTP_CREATED, array('Authorization' => 'Bearer ' . $sp61eea9)); } LOGIN_FAILED: $this->incrementLoginAttempts($sp13451b); return response(array('message' => trans('auth.failed')), Response::HTTP_BAD_REQUEST); } public function getUserInfo() { $spc33961 = Auth::getUser(); $spc33961->addHidden(array('created_at', 'updated_at')); $spc33961->append(array('last_login_at')); $spc33961->setAttribute('shop_name', config('app.name')); $spfae0a4 = array(); $spfae0a4['user'] = $spc33961; return response($spfae0a4); } public function logout() { try { @Auth::logout(); } catch (\Throwable $sp45222f) { } return response(array()); } }