<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use App\Library\Helper; use App\Library\QQWry\QQWry; use App\Library\WeChat; use App\System; use Illuminate\Http\Request; use Illuminate\Foundation\Auth\ThrottlesLogins; use Illuminate\Http\Response; use Illuminate\Support\Facades\Auth; class LoginController extends Controller { use ThrottlesLogins; protected function username() { return 'email'; } public function login(Request $spccbfb6) { $this->validate($spccbfb6, array('email' => 'required|email', 'password' => 'required|string')); if (System::_getInt('vcode_login_admin') === 1) { $this->validateCaptcha($spccbfb6); } if ($this->hasTooManyLoginAttempts($spccbfb6)) { $this->fireLockoutEvent($spccbfb6); $spe96969 = $this->limiter()->availableIn($this->throttleKey($spccbfb6)); return response(array('message' => trans('auth.throttle', array('seconds' => $spe96969))), Response::HTTP_BAD_REQUEST); } if ($sp948af1 = Auth::attempt($spccbfb6->only('email', 'password'))) { $sp91cc0b = Auth::getUser(); $sp97c11b = $spccbfb6->ip(); $sp91cc0b->logs()->create(array('action' => \App\Log::ACTION_LOGIN, 'ip' => $sp97c11b, 'address' => (new QQWry())->getLocation($sp97c11b))); return response($this->getUserInfo()->getContent(), Response::HTTP_CREATED, array('Authorization' => 'Bearer ' . $sp948af1)); } LOGIN_FAILED: $this->incrementLoginAttempts($spccbfb6); return response(array('message' => trans('auth.failed')), Response::HTTP_BAD_REQUEST); } public function getUserInfo() { $sp91cc0b = Auth::getUser(); $sp91cc0b->addHidden(array('created_at', 'updated_at')); $sp91cc0b->append(array('last_login_at')); $sp7fa26f = array(); $sp7fa26f['user'] = $sp91cc0b; return response($sp7fa26f); } public function logout() { try { @Auth::logout(); } catch (\Throwable $spdfbc42) { } return response(array()); } }