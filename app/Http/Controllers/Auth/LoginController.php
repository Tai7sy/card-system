<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use App\Library\Helper; use App\Library\QQWry\QQWry; use App\Library\WeChat; use App\System; use Illuminate\Http\Request; use Illuminate\Foundation\Auth\ThrottlesLogins; use Illuminate\Http\Response; use Illuminate\Support\Facades\Auth; class LoginController extends Controller { use ThrottlesLogins; protected function username() { return 'email'; } public function login(Request $sp517903) { $this->validate($sp517903, array('email' => 'required|email', 'password' => 'required|string')); if (System::_getInt('vcode_login_admin') === 1) { $this->validateCaptcha($sp517903); } if ($this->hasTooManyLoginAttempts($sp517903)) { $this->fireLockoutEvent($sp517903); $spd37bf4 = $this->limiter()->availableIn($this->throttleKey($sp517903)); return response(array('message' => trans('auth.throttle', array('seconds' => $spd37bf4))), Response::HTTP_BAD_REQUEST); } if ($sp5f3012 = Auth::attempt($sp517903->only('email', 'password'))) { $sp3db17d = Auth::getUser(); $spdea256 = Helper::getIP() ?? $sp517903->ip(); $sp3db17d->logs()->create(array('action' => \App\Log::ACTION_LOGIN, 'ip' => $spdea256, 'address' => (new QQWry())->getLocation($spdea256))); return response($this->getUserInfo()->getContent(), Response::HTTP_CREATED, array('Authorization' => 'Bearer ' . $sp5f3012)); } LOGIN_FAILED: $this->incrementLoginAttempts($sp517903); return response(array('message' => trans('auth.failed')), Response::HTTP_BAD_REQUEST); } public function getUserInfo() { $sp3db17d = Auth::getUser(); $sp3db17d->addHidden(array('created_at', 'updated_at')); $sp3db17d->append(array('last_login_at')); $sp3db17d->setAttribute('shop_name', config('app.name')); $sp0223d2 = array(); $sp0223d2['user'] = $sp3db17d; return response($sp0223d2); } public function logout() { try { @Auth::logout(); } catch (\Throwable $sp0b065e) { } return response(array()); } }