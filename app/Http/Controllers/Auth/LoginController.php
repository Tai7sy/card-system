<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use App\Library\Helper; use App\Library\QQWry\QQWry; use App\Library\WeChat; use App\System; use Illuminate\Http\Request; use Illuminate\Foundation\Auth\ThrottlesLogins; use Illuminate\Http\Response; use Illuminate\Support\Facades\Auth; class LoginController extends Controller { use ThrottlesLogins; protected function username() { return 'email'; } public function login(Request $sp7f7104) { $this->validate($sp7f7104, array('email' => 'required|email', 'password' => 'required|string')); if (System::_getInt('vcode_login_admin') === 1) { $this->validateCaptcha($sp7f7104); } if ($this->hasTooManyLoginAttempts($sp7f7104)) { $this->fireLockoutEvent($sp7f7104); $sp2b1382 = $this->limiter()->availableIn($this->throttleKey($sp7f7104)); return response(array('message' => trans('auth.throttle', array('seconds' => $sp2b1382))), Response::HTTP_BAD_REQUEST); } if ($spd5a5b2 = Auth::attempt($sp7f7104->only('email', 'password'))) { $sp216502 = Auth::getUser(); $sp24564e = $sp7f7104->ip(); $sp216502->logs()->create(array('action' => \App\Log::ACTION_LOGIN, 'ip' => $sp24564e, 'address' => (new QQWry())->getLocation($sp24564e))); return response($this->getUserInfo()->getContent(), Response::HTTP_CREATED, array('Authorization' => 'Bearer ' . $spd5a5b2)); } LOGIN_FAILED: $this->incrementLoginAttempts($sp7f7104); return response(array('message' => trans('auth.failed')), Response::HTTP_BAD_REQUEST); } public function getUserInfo() { $sp216502 = Auth::getUser(); $sp216502->addHidden(array('created_at', 'updated_at')); $sp216502->append(array('last_login_at')); $sp0a301e = array(); $sp0a301e['user'] = $sp216502; return response($sp0a301e); } public function logout() { try { @Auth::logout(); } catch (\Throwable $spd54c56) { } return response(array()); } }