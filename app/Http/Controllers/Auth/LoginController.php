<?php
namespace App\Http\Controllers\Auth; use App\Http\Controllers\Controller; use App\Library\Helper; use App\Library\QQWry\QQWry; use App\Library\WeChat; use App\System; use Illuminate\Http\Request; use Illuminate\Foundation\Auth\ThrottlesLogins; use Illuminate\Http\Response; use Illuminate\Support\Facades\Auth; class LoginController extends Controller { use ThrottlesLogins; protected function username() { return 'email'; } public function login(Request $sp147552) { $this->validate($sp147552, array('email' => 'required|email', 'password' => 'required|string')); if (System::_getInt('vcode_login_admin') === 1) { $this->validateCaptcha($sp147552); } if ($this->hasTooManyLoginAttempts($sp147552)) { $this->fireLockoutEvent($sp147552); $sp1ec7b6 = $this->limiter()->availableIn($this->throttleKey($sp147552)); return response(array('message' => trans('auth.throttle', array('seconds' => $sp1ec7b6))), Response::HTTP_BAD_REQUEST); } if ($sp74ce9f = Auth::attempt($sp147552->only('email', 'password'))) { $spe2c9ac = Auth::getUser(); $sp012164 = Helper::getIP() ?? $sp147552->ip(); $spe2c9ac->logs()->create(array('action' => \App\Log::ACTION_LOGIN, 'ip' => $sp012164, 'address' => (new QQWry())->getLocation($sp012164))); return response($this->getUserInfo()->getContent(), Response::HTTP_CREATED, array('Authorization' => 'Bearer ' . $sp74ce9f)); } LOGIN_FAILED: $this->incrementLoginAttempts($sp147552); return response(array('message' => trans('auth.failed')), Response::HTTP_BAD_REQUEST); } public function getUserInfo() { $spe2c9ac = Auth::getUser(); $spe2c9ac->addHidden(array('created_at', 'updated_at')); $spe2c9ac->append(array('last_login_at')); $spe2c9ac->setAttribute('shop_name', config('app.name')); $sp014e61 = array(); $sp014e61['user'] = $spe2c9ac; return response($sp014e61); } public function logout() { try { @Auth::logout(); } catch (\Throwable $spbd4f27) { } return response(array()); } }