<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $sp24cedd = $this->auth->user(); $sp9b4c7d = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($sp9b4c7d < $sp24cedd->remember_token) { return false; } return true; } public function handle($sp510ef3, Closure $sp9c8a28) { if (is_string($sp510ef3->query('token'))) { $sp510ef3->headers->set('Authorization', $sp510ef3->query('token')); } $this->checkForToken($sp510ef3); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $sp9c8a28($sp510ef3); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $sp8f933b) { try { $sp1f4391 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($sp9c8a28($sp510ef3), $sp1f4391); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $sp8f933b) { throw new UnauthorizedHttpException('jwt-auth', $sp8f933b->getMessage()); } } catch (JWTException $sp8f933b) { throw new UnauthorizedHttpException('jwt-auth', $sp8f933b->getMessage()); } } }