<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { public function handle($spa20801, Closure $sp66784a) { if (isset($_GET['token']) && is_string($_GET['token'])) { $spa20801->headers->set('Authorization', $_GET['token']); } $this->checkForToken($spa20801); try { if ($this->auth->parseToken()->authenticate()) { $spf3d3c9 = $this->auth->user(); $sp5ee095 = $this->auth->getClaim('iat'); if ($sp5ee095 >= $spf3d3c9->remember_token) { return $sp66784a($spa20801); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $spb2d24a) { try { $sp6a7cf8 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->toPlainArray()['sub']); } catch (JWTException $spb2d24a) { throw new UnauthorizedHttpException('jwt-auth', $spb2d24a->getMessage()); } } catch (JWTException $spb2d24a) { throw new UnauthorizedHttpException('jwt-auth', $spb2d24a->getMessage()); } return $this->setAuthenticationHeader($sp66784a($spa20801), $sp6a7cf8); } }