<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $spc33961 = $this->auth->user(); $sp39f886 = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($sp39f886 < $spc33961->remember_token) { return false; } return true; } public function handle($sp13451b, Closure $spce9b56) { if (is_string($sp13451b->query('token'))) { $sp13451b->headers->set('Authorization', $sp13451b->query('token')); } $this->checkForToken($sp13451b); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $spce9b56($sp13451b); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $spc81dc7) { try { $sp61eea9 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($spce9b56($sp13451b), $sp61eea9); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $spc81dc7) { throw new UnauthorizedHttpException('jwt-auth', $spc81dc7->getMessage()); } } catch (JWTException $spc81dc7) { throw new UnauthorizedHttpException('jwt-auth', $spc81dc7->getMessage()); } } }