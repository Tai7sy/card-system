<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $sp0a324a = $this->auth->user(); $sp7c3d0b = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($sp7c3d0b < $sp0a324a->remember_token) { return false; } return true; } public function handle($spdf16c9, Closure $sp7737c1) { if (is_string($spdf16c9->query('token'))) { $spdf16c9->headers->set('Authorization', $spdf16c9->query('token')); } $this->checkForToken($spdf16c9); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $sp7737c1($spdf16c9); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $sp4b0610) { try { $sp268070 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($sp7737c1($spdf16c9), $sp268070); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $sp4b0610) { throw new UnauthorizedHttpException('jwt-auth', $sp4b0610->getMessage()); } } catch (JWTException $sp4b0610) { throw new UnauthorizedHttpException('jwt-auth', $sp4b0610->getMessage()); } } }