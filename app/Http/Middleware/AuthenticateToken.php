<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $sp590011 = $this->auth->user(); $spd96246 = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($spd96246 < $sp590011->remember_token) { return false; } return true; } public function handle($sp26e527, Closure $sp16062c) { if (is_string($sp26e527->query('token'))) { $sp26e527->headers->set('Authorization', $sp26e527->query('token')); } $this->checkForToken($sp26e527); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $sp16062c($sp26e527); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $spa85eb9) { try { $spce7aba = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($sp16062c($sp26e527), $spce7aba); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $spa85eb9) { throw new UnauthorizedHttpException('jwt-auth', $spa85eb9->getMessage()); } } catch (JWTException $spa85eb9) { throw new UnauthorizedHttpException('jwt-auth', $spa85eb9->getMessage()); } } }