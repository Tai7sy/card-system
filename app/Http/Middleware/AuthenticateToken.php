<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $sp586d7b = $this->auth->user(); $sp35c892 = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($sp35c892 < $sp586d7b->remember_token) { return false; } return true; } public function handle($spf09a96, Closure $sp4857b7) { if (is_string($spf09a96->query('token'))) { $spf09a96->headers->set('Authorization', $spf09a96->query('token')); } $this->checkForToken($spf09a96); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $sp4857b7($spf09a96); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $spc52f44) { try { $sp269e48 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($sp4857b7($spf09a96), $sp269e48); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $spc52f44) { throw new UnauthorizedHttpException('jwt-auth', $spc52f44->getMessage()); } } catch (JWTException $spc52f44) { throw new UnauthorizedHttpException('jwt-auth', $spc52f44->getMessage()); } } }