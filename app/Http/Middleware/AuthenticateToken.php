<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { public function handle($sp375069, Closure $spbce704) { if (isset($_GET['token']) && is_string($_GET['token'])) { $sp375069->headers->set('Authorization', $_GET['token']); } $this->checkForToken($sp375069); try { if ($this->auth->parseToken()->authenticate()) { $sp264a55 = $this->auth->user(); $sp72419f = $this->auth->getClaim('iat'); if ($sp72419f >= $sp264a55->remember_token) { return $spbce704($sp375069); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $spd914c4) { try { $spc29a0f = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->toPlainArray()['sub']); } catch (JWTException $spd914c4) { throw new UnauthorizedHttpException('jwt-auth', $spd914c4->getMessage()); } } catch (JWTException $spd914c4) { throw new UnauthorizedHttpException('jwt-auth', $spd914c4->getMessage()); } return $this->setAuthenticationHeader($spbce704($sp375069), $spc29a0f); } }