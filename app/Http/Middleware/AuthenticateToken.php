<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $sp216502 = $this->auth->user(); $sp37650e = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($sp37650e >= $sp216502->remember_token) { return true; } return false; } public function handle($sp7f7104, Closure $sp969945) { if (is_string($sp7f7104->query('token'))) { $sp7f7104->headers->set('Authorization', $sp7f7104->query('token')); } $this->checkForToken($sp7f7104); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $sp969945($sp7f7104); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $sp6be139) { try { $spd5a5b2 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($sp969945($sp7f7104), $spd5a5b2); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $sp6be139) { throw new UnauthorizedHttpException('jwt-auth', $sp6be139->getMessage()); } } catch (JWTException $sp6be139) { throw new UnauthorizedHttpException('jwt-auth', $sp6be139->getMessage()); } } }