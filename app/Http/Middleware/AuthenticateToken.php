<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $spe2c9ac = $this->auth->user(); $sp821f0c = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($sp821f0c < $spe2c9ac->remember_token) { return false; } return true; } public function handle($sp147552, Closure $sp028eb7) { if (is_string($sp147552->query('token'))) { $sp147552->headers->set('Authorization', $sp147552->query('token')); } $this->checkForToken($sp147552); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $sp028eb7($sp147552); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $sp4611be) { try { $sp74ce9f = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($sp028eb7($sp147552), $sp74ce9f); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $sp4611be) { throw new UnauthorizedHttpException('jwt-auth', $sp4611be->getMessage()); } } catch (JWTException $sp4611be) { throw new UnauthorizedHttpException('jwt-auth', $sp4611be->getMessage()); } } }