<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $sp3db17d = $this->auth->user(); $sp95da36 = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($sp95da36 < $sp3db17d->remember_token) { return false; } return true; } public function handle($sp517903, Closure $spc92c6a) { if (is_string($sp517903->query('token'))) { $sp517903->headers->set('Authorization', $sp517903->query('token')); } $this->checkForToken($sp517903); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $spc92c6a($sp517903); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $sp24c601) { try { $sp5f3012 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($spc92c6a($sp517903), $sp5f3012); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $sp24c601) { throw new UnauthorizedHttpException('jwt-auth', $sp24c601->getMessage()); } } catch (JWTException $sp24c601) { throw new UnauthorizedHttpException('jwt-auth', $sp24c601->getMessage()); } } }