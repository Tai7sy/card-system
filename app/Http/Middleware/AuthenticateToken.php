<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $sp766bcc = $this->auth->user(); $spf1b058 = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($spf1b058 < $sp766bcc->remember_token) { return false; } return true; } public function handle($spe5a184, Closure $spcf9b92) { if (is_string($spe5a184->query('token'))) { $spe5a184->headers->set('Authorization', $spe5a184->query('token')); } $this->checkForToken($spe5a184); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $spcf9b92($spe5a184); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $sp91143b) { try { $sp63ab26 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($spcf9b92($spe5a184), $sp63ab26); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $sp91143b) { throw new UnauthorizedHttpException('jwt-auth', $sp91143b->getMessage()); } } catch (JWTException $sp91143b) { throw new UnauthorizedHttpException('jwt-auth', $sp91143b->getMessage()); } } }