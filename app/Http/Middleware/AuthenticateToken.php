<?php
namespace App\Http\Middleware; use Closure; use Illuminate\Auth\AuthenticationException; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Log; use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException; use Tymon\JWTAuth\Exceptions\JWTException; use Tymon\JWTAuth\Http\Middleware\BaseMiddleware; use Tymon\JWTAuth\Exceptions\TokenExpiredException; class AuthenticateToken extends BaseMiddleware { private function checkTokenTime() { $sp91cc0b = $this->auth->user(); $sp6e067b = $this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('iat')->getValue(); if ($sp6e067b >= $sp91cc0b->remember_token) { return true; } return false; } public function handle($spccbfb6, Closure $spc7e20a) { if (is_string($spccbfb6->query('token'))) { $spccbfb6->headers->set('Authorization', $spccbfb6->query('token')); } $this->checkForToken($spccbfb6); try { if ($this->auth->parseToken()->authenticate()) { if ($this->checkTokenTime()) { return $spc7e20a($spccbfb6); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } else { throw new UnauthorizedHttpException('jwt-auth', 'User not found'); } } catch (TokenExpiredException $spa83cec) { try { $sp948af1 = $this->auth->refresh(); Auth::onceUsingId($this->auth->manager()->getPayloadFactory()->buildClaimsCollection()->get('sub')->getValue()); if ($this->checkTokenTime()) { return $this->setAuthenticationHeader($spc7e20a($spccbfb6), $sp948af1); } else { throw new UnauthorizedHttpException('jwt-auth', 'Token invalid'); } } catch (JWTException $spa83cec) { throw new UnauthorizedHttpException('jwt-auth', $spa83cec->getMessage()); } } catch (JWTException $spa83cec) { throw new UnauthorizedHttpException('jwt-auth', $spa83cec->getMessage()); } } }